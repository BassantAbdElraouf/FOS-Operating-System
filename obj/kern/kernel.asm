
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c a1 86 f0 01 	movl   $0x1,0xf086a15c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 a1 86 f0 01 	movl   $0x1,0xf086a130
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba c0 a2 86 f0       	mov    $0xf086a2c0,%edx
f010006a:	b8 9c 95 86 f0       	mov    $0xf086959c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c 95 86 f0       	push   $0xf086959c
f010007e:	e8 40 1b 03 00       	call   f0131bc3 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 a1 86 f0 ff 	movl   $0xffffffff,0xf086a158
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 cc 60 00 00       	call   f010616b <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 58 5c 00 00       	call   f0105cfc <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 d9 63 00 00       	call   f0106482 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 05 a0 00 00       	call   f010a0b3 <env_init>
	idt_init();
f01000ae:	e8 bd b5 00 00       	call   f010b670 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 ef e0 00 00       	call   f010e1a7 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 92 cf 00 00       	call   f010d059 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 58 3c 00 00       	call   f0103d27 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 2d 77 00 00       	call   f0107804 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 7d cf 00 00       	call   f010d059 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 43 3c 00 00       	call   f0103d27 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 2e 04 03 00       	call   f0130526 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 a1 86 f0 61 	movl   $0x61,0xf086a128
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 a0 86 f0 59 	movl   $0x59,0xf086a0b4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 3f 6f 00 00       	call   f010705c <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 6c e6 00 00       	call   f010e79a <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 79 e1 00 00       	call   f010e2b4 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 54 e1 00 00       	call   f010e29c <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 74 e1 00 00       	call   f010e2cc <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 16 5a 00 00       	call   f0105b76 <pic_init>
	sched_init() ;
f0100160:	e8 bf 46 00 00       	call   f0104824 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 00 38 13 f0       	push   $0xf0133800
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 2c 38 13 f0       	push   $0xf013382c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 51 38 13 f0       	push   $0xf0133851
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 58 38 13 f0       	push   $0xf0133858
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 a0 38 13 f0       	push   $0xf01338a0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 e8 38 13 f0       	push   $0xf01338e8
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 a0 38 13 f0       	push   $0xf01338a0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 58 38 13 f0       	push   $0xf0133858
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 2d 39 13 f0       	push   $0xf013392d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 95 86 f0       	mov    %eax,0xf08695a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 32 39 13 f0       	push   $0xf0133932
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 4b 39 13 f0       	push   $0xf013394b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 39 9d 00 00       	call   f0109fa8 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 4d 39 13 f0       	push   $0xf013394d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 f1 43 00 00       	call   f0104685 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 95 86 f0       	mov    %eax,0xf08695a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 32 39 13 f0       	push   $0xf0133932
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 4b 39 13 f0       	push   $0xf013394b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 21 51 00 00       	call   f010543a <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 ce 4e 00 00       	call   f0105201 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 4a 43 00 00       	call   f0104685 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 95 86 f0       	mov    %eax,0xf08695a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 32 39 13 f0       	push   $0xf0133932
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 4b 39 13 f0       	push   $0xf013394b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 e4 46 00 00       	call   f0104ab9 <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 a1 86 f0 00 	movl   $0x0,0xf086a158
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 62 39 13 f0       	push   $0xf0133962
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 4b 39 13 f0       	push   $0xf013394b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 95 86 f0       	mov    0xf08695c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 95 86 f0       	mov    %eax,0xf08695c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 95 86 f0 b4 	movl   $0x3b4,0xf08695c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 95 86 f0 d4 	movl   $0x3d4,0xf08695c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 95 86 f0       	mov    %eax,0xf08695c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc 95 86 f0    	mov    %ax,0xf08695cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc 95 86 f0    	mov    %ax,0xf08695cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 95 86 f0    	mov    0xf08695c8,%edx
f0100771:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc 95 86 f0    	mov    %ax,0xf08695cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc 95 86 f0 	mov    0xf08695cc,%cx
f01007a4:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc 95 86 f0    	mov    %ax,0xf08695cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 95 86 f0    	mov    0xf08695c8,%ecx
f010080e:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc 95 86 f0 	mov    %dx,0xf08695cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 95 86 f0       	mov    0xf08695c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 95 86 f0       	mov    0xf08695c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 99 13 03 00       	call   f0131bf3 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 95 86 f0    	mov    0xf08695c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc 95 86 f0    	mov    %ax,0xf08695cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 95 86 f0    	mov    0xf08695c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 95 86 f0       	mov    0xf08695c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc 95 86 f0    	mov    0xf08695cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 95 86 f0    	mov    0xf08695c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 97 86 f0       	mov    %eax,0xf08697e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 97 86 f0       	mov    %eax,0xf08697e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 97 86 f0       	mov    %eax,0xf08697e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 97 86 f0       	mov    %eax,0xf08697e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 97 86 f0       	mov    %eax,0xf08697e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 97 86 f0       	mov    0xf08697e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 7d 39 13 f0       	push   $0xf013397d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 97 86 f0    	mov    %edx,0xf08697e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 95 86 f0    	mov    %dl,-0xf796a20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 97 86 f0 00 	movl   $0x0,0xf08697e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 97 86 f0    	mov    0xf08697e0,%edx
f0100b03:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 97 86 f0       	mov    0xf08697e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 97 86 f0    	mov    %edx,0xf08697e0
f0100b1a:	8a 80 e0 95 86 f0    	mov    -0xf796a20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 97 86 f0       	mov    0xf08697e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 97 86 f0 00 	movl   $0x0,0xf08697e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 95 86 f0       	mov    0xf08695c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 97 86 f0    	mov    %edx,0xf08697e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 95 86 f0    	mov    %dl,-0xf796a20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 97 86 f0 00 	movl   $0x0,0xf08697e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 97 86 f0    	mov    %edx,0xf08697e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 95 86 f0    	mov    %dl,-0xf796a20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 97 86 f0 00 	movl   $0x0,0xf08697e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 97 86 f0    	mov    0xf08697e0,%edx
f0100bf3:	a1 e4 97 86 f0       	mov    0xf08697e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 97 86 f0       	mov    0xf08697e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 97 86 f0    	mov    %edx,0xf08697e0
f0100c0a:	8a 80 e0 95 86 f0    	mov    -0xf796a20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 97 86 f0       	mov    0xf08697e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 97 86 f0 00 	movl   $0x0,0xf08697e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 95 86 f0       	mov    0xf08695c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 89 39 13 f0       	push   $0xf0133989
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 21 06 03 00       	call   f0131327 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 a6 39 13 f0       	push   $0xf01339a6
f0100d4c:	e8 7e 0a 03 00       	call   f01317cf <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d76:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0100d79:	50                   	push   %eax
f0100d7a:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0100d7d:	50                   	push   %eax
f0100d7e:	68 ac 39 13 f0       	push   $0xf01339ac
f0100d83:	ff 75 08             	pushl  0x8(%ebp)
f0100d86:	e8 7e 12 03 00       	call   f0132009 <strsplit>
f0100d8b:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100d91:	85 c0                	test   %eax,%eax
f0100d93:	75 0a                	jne    f0100d9f <execute_command+0x2f>
		return 0;
f0100d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9a:	e9 99 00 00 00       	jmp    f0100e38 <execute_command+0xc8>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100da6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100dad:	eb 33                	jmp    f0100de2 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100daf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100db2:	89 d0                	mov    %edx,%eax
f0100db4:	01 c0                	add    %eax,%eax
f0100db6:	01 d0                	add    %edx,%eax
f0100db8:	c1 e0 02             	shl    $0x2,%eax
f0100dbb:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dc0:	8b 10                	mov    (%eax),%edx
f0100dc2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0100dc5:	83 ec 08             	sub    $0x8,%esp
f0100dc8:	52                   	push   %edx
f0100dc9:	50                   	push   %eax
f0100dca:	e8 12 0d 03 00       	call   f0131ae1 <strcmp>
f0100dcf:	83 c4 10             	add    $0x10,%esp
f0100dd2:	85 c0                	test   %eax,%eax
f0100dd4:	75 09                	jne    f0100ddf <execute_command+0x6f>
		{
			command_found = 1;
f0100dd6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100ddd:	eb 0f                	jmp    f0100dee <execute_command+0x7e>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ddf:	ff 45 f0             	incl   -0x10(%ebp)
f0100de2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100de5:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100dea:	39 c2                	cmp    %eax,%edx
f0100dec:	72 c1                	jb     f0100daf <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f0100dee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100df2:	74 2b                	je     f0100e1f <execute_command+0xaf>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100df4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100df7:	89 d0                	mov    %edx,%eax
f0100df9:	01 c0                	add    %eax,%eax
f0100dfb:	01 d0                	add    %edx,%eax
f0100dfd:	c1 e0 02             	shl    $0x2,%eax
f0100e00:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e05:	8b 00                	mov    (%eax),%eax
f0100e07:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100e0a:	83 ec 08             	sub    $0x8,%esp
f0100e0d:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f0100e10:	51                   	push   %ecx
f0100e11:	52                   	push   %edx
f0100e12:	ff d0                	call   *%eax
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f0100e1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e1d:	eb 19                	jmp    f0100e38 <execute_command+0xc8>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0100e22:	83 ec 08             	sub    $0x8,%esp
f0100e25:	50                   	push   %eax
f0100e26:	68 b1 39 13 f0       	push   $0xf01339b1
f0100e2b:	e8 de fe ff ff       	call   f0100d0e <cprintf>
f0100e30:	83 c4 10             	add    $0x10,%esp
		return 0;
f0100e33:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0100e38:	c9                   	leave  
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 5c a1 86 f0 00 	movl   $0x0,0xf086a15c
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	c7 05 5c a1 86 f0 01 	movl   $0x1,0xf086a15c
f0100e54:	00 00 00 
f0100e57:	90                   	nop
f0100e58:	5d                   	pop    %ebp
f0100e59:	c3                   	ret    

f0100e5a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e5a:	55                   	push   %ebp
f0100e5b:	89 e5                	mov    %esp,%ebp
f0100e5d:	c7 05 5c a1 86 f0 02 	movl   $0x2,0xf086a15c
f0100e64:	00 00 00 
f0100e67:	90                   	nop
f0100e68:	5d                   	pop    %ebp
f0100e69:	c3                   	ret    

f0100e6a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e6a:	55                   	push   %ebp
f0100e6b:	89 e5                	mov    %esp,%ebp
f0100e6d:	c7 05 5c a1 86 f0 03 	movl   $0x3,0xf086a15c
f0100e74:	00 00 00 
f0100e77:	90                   	nop
f0100e78:	5d                   	pop    %ebp
f0100e79:	c3                   	ret    

f0100e7a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e7a:	55                   	push   %ebp
f0100e7b:	89 e5                	mov    %esp,%ebp
f0100e7d:	c7 05 5c a1 86 f0 04 	movl   $0x4,0xf086a15c
f0100e84:	00 00 00 
f0100e87:	90                   	nop
f0100e88:	5d                   	pop    %ebp
f0100e89:	c3                   	ret    

f0100e8a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e8a:	55                   	push   %ebp
f0100e8b:	89 e5                	mov    %esp,%ebp
f0100e8d:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0100e92:	85 c0                	test   %eax,%eax
f0100e94:	75 04                	jne    f0100e9a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e96:	b0 01                	mov    $0x1,%al
f0100e98:	eb 02                	jmp    f0100e9c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e9a:	b0 00                	mov    $0x0,%al
f0100e9c:	5d                   	pop    %ebp
f0100e9d:	c3                   	ret    

f0100e9e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e9e:	55                   	push   %ebp
f0100e9f:	89 e5                	mov    %esp,%ebp
f0100ea1:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0100ea6:	83 f8 01             	cmp    $0x1,%eax
f0100ea9:	75 04                	jne    f0100eaf <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100eab:	b0 01                	mov    $0x1,%al
f0100ead:	eb 02                	jmp    f0100eb1 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100eaf:	b0 00                	mov    $0x0,%al
f0100eb1:	5d                   	pop    %ebp
f0100eb2:	c3                   	ret    

f0100eb3 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100eb3:	55                   	push   %ebp
f0100eb4:	89 e5                	mov    %esp,%ebp
f0100eb6:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0100ebb:	83 f8 02             	cmp    $0x2,%eax
f0100ebe:	75 04                	jne    f0100ec4 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ec0:	b0 01                	mov    $0x1,%al
f0100ec2:	eb 02                	jmp    f0100ec6 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100ec4:	b0 00                	mov    $0x0,%al
f0100ec6:	5d                   	pop    %ebp
f0100ec7:	c3                   	ret    

f0100ec8 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ec8:	55                   	push   %ebp
f0100ec9:	89 e5                	mov    %esp,%ebp
f0100ecb:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0100ed0:	83 f8 03             	cmp    $0x3,%eax
f0100ed3:	75 04                	jne    f0100ed9 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100ed5:	b0 01                	mov    $0x1,%al
f0100ed7:	eb 02                	jmp    f0100edb <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100ed9:	b0 00                	mov    $0x0,%al
f0100edb:	5d                   	pop    %ebp
f0100edc:	c3                   	ret    

f0100edd <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100edd:	55                   	push   %ebp
f0100ede:	89 e5                	mov    %esp,%ebp
f0100ee0:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0100ee5:	83 f8 04             	cmp    $0x4,%eax
f0100ee8:	75 04                	jne    f0100eee <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eea:	b0 01                	mov    $0x1,%al
f0100eec:	eb 02                	jmp    f0100ef0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eee:	b0 00                	mov    $0x0,%al
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	c7 05 30 a1 86 f0 01 	movl   $0x1,0xf086a130
f0100efc:	00 00 00 
f0100eff:	90                   	nop
f0100f00:	5d                   	pop    %ebp
f0100f01:	c3                   	ret    

f0100f02 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f02:	55                   	push   %ebp
f0100f03:	89 e5                	mov    %esp,%ebp
f0100f05:	c7 05 30 a1 86 f0 02 	movl   $0x2,0xf086a130
f0100f0c:	00 00 00 
f0100f0f:	90                   	nop
f0100f10:	5d                   	pop    %ebp
f0100f11:	c3                   	ret    

f0100f12 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f12:	55                   	push   %ebp
f0100f13:	89 e5                	mov    %esp,%ebp
f0100f15:	c7 05 30 a1 86 f0 03 	movl   $0x3,0xf086a130
f0100f1c:	00 00 00 
f0100f1f:	90                   	nop
f0100f20:	5d                   	pop    %ebp
f0100f21:	c3                   	ret    

f0100f22 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100f22:	55                   	push   %ebp
f0100f23:	89 e5                	mov    %esp,%ebp
f0100f25:	c7 05 30 a1 86 f0 04 	movl   $0x4,0xf086a130
f0100f2c:	00 00 00 
f0100f2f:	90                   	nop
f0100f30:	5d                   	pop    %ebp
f0100f31:	c3                   	ret    

f0100f32 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f32:	55                   	push   %ebp
f0100f33:	89 e5                	mov    %esp,%ebp
f0100f35:	a1 30 a1 86 f0       	mov    0xf086a130,%eax
f0100f3a:	83 f8 01             	cmp    $0x1,%eax
f0100f3d:	75 04                	jne    f0100f43 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f3f:	b0 01                	mov    $0x1,%al
f0100f41:	eb 02                	jmp    f0100f45 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f43:	b0 00                	mov    $0x0,%al
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 30 a1 86 f0       	mov    0xf086a130,%eax
f0100f4f:	83 f8 02             	cmp    $0x2,%eax
f0100f52:	75 04                	jne    f0100f58 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 30 a1 86 f0       	mov    0xf086a130,%eax
f0100f64:	83 f8 03             	cmp    $0x3,%eax
f0100f67:	75 04                	jne    f0100f6d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	a1 30 a1 86 f0       	mov    0xf086a130,%eax
f0100f79:	83 f8 04             	cmp    $0x4,%eax
f0100f7c:	75 04                	jne    f0100f82 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f7e:	b0 01                	mov    $0x1,%al
f0100f80:	eb 02                	jmp    f0100f84 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f82:	b0 00                	mov    $0x0,%al
f0100f84:	5d                   	pop    %ebp
f0100f85:	c3                   	ret    

f0100f86 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f86:	55                   	push   %ebp
f0100f87:	89 e5                	mov    %esp,%ebp
f0100f89:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f8f:	c1 e8 0c             	shr    $0xc,%eax
f0100f92:	89 c2                	mov    %eax,%edx
f0100f94:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0100f99:	39 c2                	cmp    %eax,%edx
f0100f9b:	72 14                	jb     f0100fb1 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f9d:	83 ec 04             	sub    $0x4,%esp
f0100fa0:	68 c8 39 13 f0       	push   $0xf01339c8
f0100fa5:	6a 55                	push   $0x55
f0100fa7:	68 f0 39 13 f0       	push   $0xf01339f0
f0100fac:	e8 54 f2 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0100fb1:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f0100fb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fba:	c1 e8 0c             	shr    $0xc,%eax
f0100fbd:	89 c1                	mov    %eax,%ecx
f0100fbf:	89 c8                	mov    %ecx,%eax
f0100fc1:	01 c0                	add    %eax,%eax
f0100fc3:	01 c8                	add    %ecx,%eax
f0100fc5:	c1 e0 03             	shl    $0x3,%eax
f0100fc8:	01 d0                	add    %edx,%eax
}
f0100fca:	c9                   	leave  
f0100fcb:	c3                   	ret    

f0100fcc <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100fcc:	55                   	push   %ebp
f0100fcd:	89 e5                	mov    %esp,%ebp
f0100fcf:	53                   	push   %ebx
f0100fd0:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fda:	eb 3b                	jmp    f0101017 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100fdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fdf:	89 d0                	mov    %edx,%eax
f0100fe1:	01 c0                	add    %eax,%eax
f0100fe3:	01 d0                	add    %edx,%eax
f0100fe5:	c1 e0 02             	shl    $0x2,%eax
f0100fe8:	05 44 35 19 f0       	add    $0xf0193544,%eax
f0100fed:	8b 10                	mov    (%eax),%edx
f0100fef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100ff2:	89 c8                	mov    %ecx,%eax
f0100ff4:	01 c0                	add    %eax,%eax
f0100ff6:	01 c8                	add    %ecx,%eax
f0100ff8:	c1 e0 02             	shl    $0x2,%eax
f0100ffb:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0101000:	8b 00                	mov    (%eax),%eax
f0101002:	83 ec 04             	sub    $0x4,%esp
f0101005:	52                   	push   %edx
f0101006:	50                   	push   %eax
f0101007:	68 6a 48 13 f0       	push   $0xf013486a
f010100c:	e8 fd fc ff ff       	call   f0100d0e <cprintf>
f0101011:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101014:	ff 45 f4             	incl   -0xc(%ebp)
f0101017:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010101a:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f010101f:	39 c2                	cmp    %eax,%edx
f0101021:	72 b9                	jb     f0100fdc <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101023:	83 ec 0c             	sub    $0xc,%esp
f0101026:	68 73 48 13 f0       	push   $0xf0134873
f010102b:	e8 de fc ff ff       	call   f0100d0e <cprintf>
f0101030:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101033:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010103a:	eb 42                	jmp    f010107e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010103c:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f0101042:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101045:	89 d0                	mov    %edx,%eax
f0101047:	01 c0                	add    %eax,%eax
f0101049:	01 d0                	add    %edx,%eax
f010104b:	c1 e0 02             	shl    $0x2,%eax
f010104e:	01 c8                	add    %ecx,%eax
f0101050:	8b 50 04             	mov    0x4(%eax),%edx
f0101053:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f0101059:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010105c:	89 c8                	mov    %ecx,%eax
f010105e:	01 c0                	add    %eax,%eax
f0101060:	01 c8                	add    %ecx,%eax
f0101062:	c1 e0 02             	shl    $0x2,%eax
f0101065:	01 d8                	add    %ebx,%eax
f0101067:	8b 00                	mov    (%eax),%eax
f0101069:	83 ec 04             	sub    $0x4,%esp
f010106c:	52                   	push   %edx
f010106d:	50                   	push   %eax
f010106e:	68 88 48 13 f0       	push   $0xf0134888
f0101073:	e8 96 fc ff ff       	call   f0100d0e <cprintf>
f0101078:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010107b:	ff 45 f4             	incl   -0xc(%ebp)
f010107e:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101083:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101086:	7c b4                	jl     f010103c <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101088:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010108d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101090:	c9                   	leave  
f0101091:	c3                   	ret    

f0101092 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101092:	55                   	push   %ebp
f0101093:	89 e5                	mov    %esp,%ebp
f0101095:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101098:	83 ec 0c             	sub    $0xc,%esp
f010109b:	68 a4 48 13 f0       	push   $0xf01348a4
f01010a0:	e8 69 fc ff ff       	call   f0100d0e <cprintf>
f01010a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01010a8:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01010ad:	83 ec 04             	sub    $0x4,%esp
f01010b0:	50                   	push   %eax
f01010b1:	68 0c 00 10 f0       	push   $0xf010000c
f01010b6:	68 c0 48 13 f0       	push   $0xf01348c0
f01010bb:	e8 4e fc ff ff       	call   f0100d0e <cprintf>
f01010c0:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01010c3:	b8 e5 37 13 00       	mov    $0x1337e5,%eax
f01010c8:	83 ec 04             	sub    $0x4,%esp
f01010cb:	50                   	push   %eax
f01010cc:	68 e5 37 13 f0       	push   $0xf01337e5
f01010d1:	68 fc 48 13 f0       	push   $0xf01348fc
f01010d6:	e8 33 fc ff ff       	call   f0100d0e <cprintf>
f01010db:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010de:	b8 9c 95 86 00       	mov    $0x86959c,%eax
f01010e3:	83 ec 04             	sub    $0x4,%esp
f01010e6:	50                   	push   %eax
f01010e7:	68 9c 95 86 f0       	push   $0xf086959c
f01010ec:	68 38 49 13 f0       	push   $0xf0134938
f01010f1:	e8 18 fc ff ff       	call   f0100d0e <cprintf>
f01010f6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010f9:	b8 c0 a2 86 00       	mov    $0x86a2c0,%eax
f01010fe:	83 ec 04             	sub    $0x4,%esp
f0101101:	50                   	push   %eax
f0101102:	68 c0 a2 86 f0       	push   $0xf086a2c0
f0101107:	68 80 49 13 f0       	push   $0xf0134980
f010110c:	e8 fd fb ff ff       	call   f0100d0e <cprintf>
f0101111:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101114:	b8 c0 a2 86 f0       	mov    $0xf086a2c0,%eax
f0101119:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f010111f:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101124:	29 c2                	sub    %eax,%edx
f0101126:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101128:	85 c0                	test   %eax,%eax
f010112a:	79 05                	jns    f0101131 <command_kernel_info+0x9f>
f010112c:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101131:	c1 f8 0a             	sar    $0xa,%eax
f0101134:	83 ec 08             	sub    $0x8,%esp
f0101137:	50                   	push   %eax
f0101138:	68 bc 49 13 f0       	push   $0xf01349bc
f010113d:	e8 cc fb ff ff       	call   f0100d0e <cprintf>
f0101142:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101145:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010114a:	c9                   	leave  
f010114b:	c3                   	ret    

f010114c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010114c:	55                   	push   %ebp
f010114d:	89 e5                	mov    %esp,%ebp
f010114f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101152:	83 ec 04             	sub    $0x4,%esp
f0101155:	68 e8 49 13 f0       	push   $0xf01349e8
f010115a:	68 b0 00 00 00       	push   $0xb0
f010115f:	68 09 4a 13 f0       	push   $0xf0134a09
f0101164:	e8 9c f0 ff ff       	call   f0100205 <_panic>

f0101169 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101169:	55                   	push   %ebp
f010116a:	89 e5                	mov    %esp,%ebp
f010116c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010116f:	83 ec 04             	sub    $0x4,%esp
f0101172:	68 e8 49 13 f0       	push   $0xf01349e8
f0101177:	68 ba 00 00 00       	push   $0xba
f010117c:	68 09 4a 13 f0       	push   $0xf0134a09
f0101181:	e8 7f f0 ff ff       	call   f0100205 <_panic>

f0101186 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101186:	55                   	push   %ebp
f0101187:	89 e5                	mov    %esp,%ebp
f0101189:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010118c:	83 ec 04             	sub    $0x4,%esp
f010118f:	68 e8 49 13 f0       	push   $0xf01349e8
f0101194:	68 c3 00 00 00       	push   $0xc3
f0101199:	68 09 4a 13 f0       	push   $0xf0134a09
f010119e:	e8 62 f0 ff ff       	call   f0100205 <_panic>

f01011a3 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f01011a3:	55                   	push   %ebp
f01011a4:	89 e5                	mov    %esp,%ebp
f01011a6:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a9:	83 ec 04             	sub    $0x4,%esp
f01011ac:	68 e8 49 13 f0       	push   $0xf01349e8
f01011b1:	68 cf 00 00 00       	push   $0xcf
f01011b6:	68 09 4a 13 f0       	push   $0xf0134a09
f01011bb:	e8 45 f0 ff ff       	call   f0100205 <_panic>

f01011c0 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f01011c0:	55                   	push   %ebp
f01011c1:	89 e5                	mov    %esp,%ebp
f01011c3:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c6:	83 ec 04             	sub    $0x4,%esp
f01011c9:	68 e8 49 13 f0       	push   $0xf01349e8
f01011ce:	68 d8 00 00 00       	push   $0xd8
f01011d3:	68 09 4a 13 f0       	push   $0xf0134a09
f01011d8:	e8 28 f0 ff ff       	call   f0100205 <_panic>

f01011dd <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011dd:	55                   	push   %ebp
f01011de:	89 e5                	mov    %esp,%ebp
f01011e0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011e3:	83 ec 04             	sub    $0x4,%esp
f01011e6:	68 e8 49 13 f0       	push   $0xf01349e8
f01011eb:	68 e1 00 00 00       	push   $0xe1
f01011f0:	68 09 4a 13 f0       	push   $0xf0134a09
f01011f5:	e8 0b f0 ff ff       	call   f0100205 <_panic>

f01011fa <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011fa:	55                   	push   %ebp
f01011fb:	89 e5                	mov    %esp,%ebp
f01011fd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101200:	83 ec 04             	sub    $0x4,%esp
f0101203:	68 e8 49 13 f0       	push   $0xf01349e8
f0101208:	68 ee 00 00 00       	push   $0xee
f010120d:	68 09 4a 13 f0       	push   $0xf0134a09
f0101212:	e8 ee ef ff ff       	call   f0100205 <_panic>

f0101217 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f0101217:	55                   	push   %ebp
f0101218:	89 e5                	mov    %esp,%ebp
f010121a:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010121d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101220:	83 c0 04             	add    $0x4,%eax
f0101223:	8b 00                	mov    (%eax),%eax
f0101225:	83 ec 04             	sub    $0x4,%esp
f0101228:	6a 10                	push   $0x10
f010122a:	6a 00                	push   $0x0
f010122c:	50                   	push   %eax
f010122d:	e8 03 0b 03 00       	call   f0131d35 <strtol>
f0101232:	83 c4 10             	add    $0x10,%esp
f0101235:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f0101238:	83 ec 0c             	sub    $0xc,%esp
f010123b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010123e:	50                   	push   %eax
f010123f:	e8 0d 56 00 00       	call   f0106851 <allocate_frame>
f0101244:	83 c4 10             	add    $0x10,%esp
f0101247:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010124a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010124d:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0101252:	6a 06                	push   $0x6
f0101254:	ff 75 f4             	pushl  -0xc(%ebp)
f0101257:	52                   	push   %edx
f0101258:	50                   	push   %eax
f0101259:	e8 42 5a 00 00       	call   f0106ca0 <map_frame>
f010125e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101261:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101266:	c9                   	leave  
f0101267:	c3                   	ret    

f0101268 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101268:	55                   	push   %ebp
f0101269:	89 e5                	mov    %esp,%ebp
f010126b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010126e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101271:	83 c0 04             	add    $0x4,%eax
f0101274:	8b 00                	mov    (%eax),%eax
f0101276:	83 ec 04             	sub    $0x4,%esp
f0101279:	6a 10                	push   $0x10
f010127b:	6a 00                	push   $0x0
f010127d:	50                   	push   %eax
f010127e:	e8 b2 0a 03 00       	call   f0131d35 <strtol>
f0101283:	83 c4 10             	add    $0x10,%esp
f0101286:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101289:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f010128e:	83 ec 08             	sub    $0x8,%esp
f0101291:	ff 75 f4             	pushl  -0xc(%ebp)
f0101294:	50                   	push   %eax
f0101295:	e8 3b 5b 00 00       	call   f0106dd5 <unmap_frame>
f010129a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010129d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a2:	c9                   	leave  
f01012a3:	c3                   	ret    

f01012a4 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f01012a4:	55                   	push   %ebp
f01012a5:	89 e5                	mov    %esp,%ebp
f01012a7:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012aa:	83 ec 04             	sub    $0x4,%esp
f01012ad:	68 e8 49 13 f0       	push   $0xf01349e8
f01012b2:	68 18 01 00 00       	push   $0x118
f01012b7:	68 09 4a 13 f0       	push   $0xf0134a09
f01012bc:	e8 44 ef ff ff       	call   f0100205 <_panic>

f01012c1 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f01012c1:	55                   	push   %ebp
f01012c2:	89 e5                	mov    %esp,%ebp
f01012c4:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012c7:	83 ec 04             	sub    $0x4,%esp
f01012ca:	68 e8 49 13 f0       	push   $0xf01349e8
f01012cf:	68 23 01 00 00       	push   $0x123
f01012d4:	68 09 4a 13 f0       	push   $0xf0134a09
f01012d9:	e8 27 ef ff ff       	call   f0100205 <_panic>

f01012de <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012de:	55                   	push   %ebp
f01012df:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012e6:	5d                   	pop    %ebp
f01012e7:	c3                   	ret    

f01012e8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012e8:	55                   	push   %ebp
f01012e9:	89 e5                	mov    %esp,%ebp
f01012eb:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ee:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012f2:	75 37                	jne    f010132b <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f7:	83 c0 04             	add    $0x4,%eax
f01012fa:	8b 00                	mov    (%eax),%eax
f01012fc:	83 ec 04             	sub    $0x4,%esp
f01012ff:	6a 10                	push   $0x10
f0101301:	6a 00                	push   $0x0
f0101303:	50                   	push   %eax
f0101304:	e8 2c 0a 03 00       	call   f0131d35 <strtol>
f0101309:	83 c4 10             	add    $0x10,%esp
f010130c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010130f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101312:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0101315:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101318:	83 c0 08             	add    $0x8,%eax
f010131b:	8b 00                	mov    (%eax),%eax
f010131d:	8a 00                	mov    (%eax),%al
f010131f:	88 c2                	mov    %al,%dl
f0101321:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101324:	88 10                	mov    %dl,(%eax)
f0101326:	e9 b9 00 00 00       	jmp    f01013e4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f010132b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010132f:	0f 85 9f 00 00 00    	jne    f01013d4 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0101335:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101338:	83 c0 04             	add    $0x4,%eax
f010133b:	8b 00                	mov    (%eax),%eax
f010133d:	83 ec 04             	sub    $0x4,%esp
f0101340:	6a 0a                	push   $0xa
f0101342:	6a 00                	push   $0x0
f0101344:	50                   	push   %eax
f0101345:	e8 eb 09 03 00       	call   f0131d35 <strtol>
f010134a:	83 c4 10             	add    $0x10,%esp
f010134d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101350:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101357:	83 ec 04             	sub    $0x4,%esp
f010135a:	6a 00                	push   $0x0
f010135c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	ff 75 f4             	pushl  -0xc(%ebp)
f0101363:	e8 5f 8c 00 00       	call   f0109fc7 <envid2env>
f0101368:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010136b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010136e:	83 c0 08             	add    $0x8,%eax
f0101371:	8b 00                	mov    (%eax),%eax
f0101373:	83 ec 04             	sub    $0x4,%esp
f0101376:	6a 10                	push   $0x10
f0101378:	6a 00                	push   $0x0
f010137a:	50                   	push   %eax
f010137b:	e8 b5 09 03 00       	call   f0131d35 <strtol>
f0101380:	83 c4 10             	add    $0x10,%esp
f0101383:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101386:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101389:	85 c0                	test   %eax,%eax
f010138b:	75 07                	jne    f0101394 <command_writeusermem+0xac>
f010138d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101392:	eb 55                	jmp    f01013e9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101394:	0f 20 d8             	mov    %cr3,%eax
f0101397:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010139a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010139d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01013a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01013a3:	8b 40 60             	mov    0x60(%eax),%eax
f01013a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01013a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013ac:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01013af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01013b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b8:	83 c0 0c             	add    $0xc,%eax
f01013bb:	8b 00                	mov    (%eax),%eax
f01013bd:	8a 00                	mov    (%eax),%al
f01013bf:	88 c2                	mov    %al,%dl
f01013c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01013c4:	88 10                	mov    %dl,(%eax)
f01013c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01013c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01013cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01013cf:	0f 22 d8             	mov    %eax,%cr3
f01013d2:	eb 10                	jmp    f01013e4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01013d4:	83 ec 0c             	sub    $0xc,%esp
f01013d7:	68 20 4a 13 f0       	push   $0xf0134a20
f01013dc:	e8 2d f9 ff ff       	call   f0100d0e <cprintf>
f01013e1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013e9:	c9                   	leave  
f01013ea:	c3                   	ret    

f01013eb <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013eb:	55                   	push   %ebp
f01013ec:	89 e5                	mov    %esp,%ebp
f01013ee:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f4:	83 c0 04             	add    $0x4,%eax
f01013f7:	8b 00                	mov    (%eax),%eax
f01013f9:	83 ec 04             	sub    $0x4,%esp
f01013fc:	6a 10                	push   $0x10
f01013fe:	6a 00                	push   $0x0
f0101400:	50                   	push   %eax
f0101401:	e8 2f 09 03 00       	call   f0131d35 <strtol>
f0101406:	83 c4 10             	add    $0x10,%esp
f0101409:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010140e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101411:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101414:	83 c0 08             	add    $0x8,%eax
f0101417:	8b 00                	mov    (%eax),%eax
f0101419:	83 ec 04             	sub    $0x4,%esp
f010141c:	6a 0a                	push   $0xa
f010141e:	6a 00                	push   $0x0
f0101420:	50                   	push   %eax
f0101421:	e8 0f 09 03 00       	call   f0131d35 <strtol>
f0101426:	83 c4 10             	add    $0x10,%esp
f0101429:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f010142c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101433:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101436:	83 c0 0c             	add    $0xc,%eax
f0101439:	8b 00                	mov    (%eax),%eax
f010143b:	83 ec 0c             	sub    $0xc,%esp
f010143e:	50                   	push   %eax
f010143f:	e8 91 05 03 00       	call   f01319d5 <strlen>
f0101444:	83 c4 10             	add    $0x10,%esp
f0101447:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010144a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101451:	eb 30                	jmp    f0101483 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101453:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010145a:	eb 1c                	jmp    f0101478 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010145c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010145f:	83 c0 0c             	add    $0xc,%eax
f0101462:	8b 10                	mov    (%eax),%edx
f0101464:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101467:	01 d0                	add    %edx,%eax
f0101469:	8a 00                	mov    (%eax),%al
f010146b:	88 c2                	mov    %al,%dl
f010146d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101470:	88 10                	mov    %dl,(%eax)
			address++;
f0101472:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101475:	ff 45 ec             	incl   -0x14(%ebp)
f0101478:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010147b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010147e:	7c dc                	jl     f010145c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101480:	ff 45 f0             	incl   -0x10(%ebp)
f0101483:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101486:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101489:	7c c8                	jl     f0101453 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010148b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101490:	c9                   	leave  
f0101491:	c3                   	ret    

f0101492 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101492:	55                   	push   %ebp
f0101493:	89 e5                	mov    %esp,%ebp
f0101495:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101498:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010149c:	75 42                	jne    f01014e0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010149e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014a1:	83 c0 04             	add    $0x4,%eax
f01014a4:	8b 00                	mov    (%eax),%eax
f01014a6:	83 ec 04             	sub    $0x4,%esp
f01014a9:	6a 10                	push   $0x10
f01014ab:	6a 00                	push   $0x0
f01014ad:	50                   	push   %eax
f01014ae:	e8 82 08 03 00       	call   f0131d35 <strtol>
f01014b3:	83 c4 10             	add    $0x10,%esp
f01014b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01014b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014bc:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01014bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014c2:	8a 00                	mov    (%eax),%al
f01014c4:	0f b6 c0             	movzbl %al,%eax
f01014c7:	83 ec 04             	sub    $0x4,%esp
f01014ca:	50                   	push   %eax
f01014cb:	ff 75 d8             	pushl  -0x28(%ebp)
f01014ce:	68 4a 4a 13 f0       	push   $0xf0134a4a
f01014d3:	e8 36 f8 ff ff       	call   f0100d0e <cprintf>
f01014d8:	83 c4 10             	add    $0x10,%esp
f01014db:	e9 c4 00 00 00       	jmp    f01015a4 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014e0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014e4:	0f 85 aa 00 00 00    	jne    f0101594 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ed:	83 c0 04             	add    $0x4,%eax
f01014f0:	8b 00                	mov    (%eax),%eax
f01014f2:	83 ec 04             	sub    $0x4,%esp
f01014f5:	6a 0a                	push   $0xa
f01014f7:	6a 00                	push   $0x0
f01014f9:	50                   	push   %eax
f01014fa:	e8 36 08 03 00       	call   f0131d35 <strtol>
f01014ff:	83 c4 10             	add    $0x10,%esp
f0101502:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101505:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010150c:	83 ec 04             	sub    $0x4,%esp
f010150f:	6a 00                	push   $0x0
f0101511:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101514:	50                   	push   %eax
f0101515:	ff 75 f4             	pushl  -0xc(%ebp)
f0101518:	e8 aa 8a 00 00       	call   f0109fc7 <envid2env>
f010151d:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101520:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101523:	83 c0 08             	add    $0x8,%eax
f0101526:	8b 00                	mov    (%eax),%eax
f0101528:	83 ec 04             	sub    $0x4,%esp
f010152b:	6a 10                	push   $0x10
f010152d:	6a 00                	push   $0x0
f010152f:	50                   	push   %eax
f0101530:	e8 00 08 03 00       	call   f0131d35 <strtol>
f0101535:	83 c4 10             	add    $0x10,%esp
f0101538:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010153b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010153e:	85 c0                	test   %eax,%eax
f0101540:	75 07                	jne    f0101549 <command_readusermem+0xb7>
f0101542:	b8 00 00 00 00       	mov    $0x0,%eax
f0101547:	eb 60                	jmp    f01015a9 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101549:	0f 20 d8             	mov    %cr3,%eax
f010154c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010154f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101552:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101555:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101558:	8b 40 60             	mov    0x60(%eax),%eax
f010155b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010155e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101561:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101564:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101567:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010156a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010156d:	8a 00                	mov    (%eax),%al
f010156f:	0f b6 c0             	movzbl %al,%eax
f0101572:	83 ec 04             	sub    $0x4,%esp
f0101575:	50                   	push   %eax
f0101576:	ff 75 f0             	pushl  -0x10(%ebp)
f0101579:	68 4a 4a 13 f0       	push   $0xf0134a4a
f010157e:	e8 8b f7 ff ff       	call   f0100d0e <cprintf>
f0101583:	83 c4 10             	add    $0x10,%esp
f0101586:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101589:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010158c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010158f:	0f 22 d8             	mov    %eax,%cr3
f0101592:	eb 10                	jmp    f01015a4 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101594:	83 ec 0c             	sub    $0xc,%esp
f0101597:	68 64 4a 13 f0       	push   $0xf0134a64
f010159c:	e8 6d f7 ff ff       	call   f0100d0e <cprintf>
f01015a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01015a4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01015a9:	c9                   	leave  
f01015aa:	c3                   	ret    

f01015ab <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01015ab:	55                   	push   %ebp
f01015ac:	89 e5                	mov    %esp,%ebp
f01015ae:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01015b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015b4:	83 c0 04             	add    $0x4,%eax
f01015b7:	8b 00                	mov    (%eax),%eax
f01015b9:	83 ec 04             	sub    $0x4,%esp
f01015bc:	6a 10                	push   $0x10
f01015be:	6a 00                	push   $0x0
f01015c0:	50                   	push   %eax
f01015c1:	e8 6f 07 03 00       	call   f0131d35 <strtol>
f01015c6:	83 c4 10             	add    $0x10,%esp
f01015c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01015ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01015d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015d4:	83 c0 08             	add    $0x8,%eax
f01015d7:	8b 00                	mov    (%eax),%eax
f01015d9:	83 ec 04             	sub    $0x4,%esp
f01015dc:	6a 0a                	push   $0xa
f01015de:	6a 00                	push   $0x0
f01015e0:	50                   	push   %eax
f01015e1:	e8 4f 07 03 00       	call   f0131d35 <strtol>
f01015e6:	83 c4 10             	add    $0x10,%esp
f01015e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015f3:	eb 22                	jmp    f0101617 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015f8:	8d 50 01             	lea    0x1(%eax),%edx
f01015fb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015fe:	8a 00                	mov    (%eax),%al
f0101600:	0f b6 c0             	movzbl %al,%eax
f0101603:	83 ec 08             	sub    $0x8,%esp
f0101606:	50                   	push   %eax
f0101607:	68 8e 4a 13 f0       	push   $0xf0134a8e
f010160c:	e8 fd f6 ff ff       	call   f0100d0e <cprintf>
f0101611:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101614:	ff 45 f0             	incl   -0x10(%ebp)
f0101617:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010161a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010161d:	7c d6                	jl     f01015f5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f010161f:	83 ec 0c             	sub    $0xc,%esp
f0101622:	68 91 4a 13 f0       	push   $0xf0134a91
f0101627:	e8 e2 f6 ff ff       	call   f0100d0e <cprintf>
f010162c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010162f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101634:	c9                   	leave  
f0101635:	c3                   	ret    

f0101636 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101636:	55                   	push   %ebp
f0101637:	89 e5                	mov    %esp,%ebp
f0101639:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010163c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010163f:	83 c0 04             	add    $0x4,%eax
f0101642:	8b 00                	mov    (%eax),%eax
f0101644:	83 ec 04             	sub    $0x4,%esp
f0101647:	6a 0a                	push   $0xa
f0101649:	6a 00                	push   $0x0
f010164b:	50                   	push   %eax
f010164c:	e8 e4 06 03 00       	call   f0131d35 <strtol>
f0101651:	83 c4 10             	add    $0x10,%esp
f0101654:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101657:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010165e:	83 ec 04             	sub    $0x4,%esp
f0101661:	6a 00                	push   $0x0
f0101663:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101666:	50                   	push   %eax
f0101667:	ff 75 ec             	pushl  -0x14(%ebp)
f010166a:	e8 58 89 00 00       	call   f0109fc7 <envid2env>
f010166f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 10                	push   $0x10
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 ae 06 03 00       	call   f0131d35 <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010168d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101690:	83 c0 0c             	add    $0xc,%eax
f0101693:	8b 00                	mov    (%eax),%eax
f0101695:	83 ec 04             	sub    $0x4,%esp
f0101698:	6a 0a                	push   $0xa
f010169a:	6a 00                	push   $0x0
f010169c:	50                   	push   %eax
f010169d:	e8 93 06 03 00       	call   f0131d35 <strtol>
f01016a2:	83 c4 10             	add    $0x10,%esp
f01016a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01016a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01016ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01016ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016b1:	85 c0                	test   %eax,%eax
f01016b3:	75 07                	jne    f01016bc <command_readuserblock+0x86>
f01016b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01016ba:	eb 65                	jmp    f0101721 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01016bc:	0f 20 d8             	mov    %cr3,%eax
f01016bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01016c2:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01016c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01016c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016cb:	8b 40 60             	mov    0x60(%eax),%eax
f01016ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01016d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016d4:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01016d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016de:	eb 28                	jmp    f0101708 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016e3:	8a 00                	mov    (%eax),%al
f01016e5:	0f b6 d0             	movzbl %al,%edx
f01016e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016eb:	8a 00                	mov    (%eax),%al
f01016ed:	0f b6 c0             	movzbl %al,%eax
f01016f0:	52                   	push   %edx
f01016f1:	50                   	push   %eax
f01016f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016f5:	68 93 4a 13 f0       	push   $0xf0134a93
f01016fa:	e8 0f f6 ff ff       	call   f0100d0e <cprintf>
f01016ff:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101702:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101705:	ff 45 f0             	incl   -0x10(%ebp)
f0101708:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010170b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010170e:	7c d0                	jl     f01016e0 <command_readuserblock+0xaa>
f0101710:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101713:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101716:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101719:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010171c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101721:	c9                   	leave  
f0101722:	c3                   	ret    

f0101723 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101723:	55                   	push   %ebp
f0101724:	89 e5                	mov    %esp,%ebp
f0101726:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010172c:	83 c0 04             	add    $0x4,%eax
f010172f:	8b 00                	mov    (%eax),%eax
f0101731:	83 ec 04             	sub    $0x4,%esp
f0101734:	6a 0a                	push   $0xa
f0101736:	6a 00                	push   $0x0
f0101738:	50                   	push   %eax
f0101739:	e8 f7 05 03 00       	call   f0131d35 <strtol>
f010173e:	83 c4 10             	add    $0x10,%esp
f0101741:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101744:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010174b:	83 ec 04             	sub    $0x4,%esp
f010174e:	6a 00                	push   $0x0
f0101750:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101753:	50                   	push   %eax
f0101754:	ff 75 f4             	pushl  -0xc(%ebp)
f0101757:	e8 6b 88 00 00       	call   f0109fc7 <envid2env>
f010175c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010175f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101762:	85 c0                	test   %eax,%eax
f0101764:	75 0a                	jne    f0101770 <command_remove_table+0x4d>
f0101766:	b8 00 00 00 00       	mov    $0x0,%eax
f010176b:	e9 c7 00 00 00       	jmp    f0101837 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101770:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101773:	83 c0 08             	add    $0x8,%eax
f0101776:	8b 00                	mov    (%eax),%eax
f0101778:	83 ec 04             	sub    $0x4,%esp
f010177b:	6a 10                	push   $0x10
f010177d:	6a 00                	push   $0x0
f010177f:	50                   	push   %eax
f0101780:	e8 b0 05 03 00       	call   f0131d35 <strtol>
f0101785:	83 c4 10             	add    $0x10,%esp
f0101788:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010178b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010178e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101791:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101794:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101797:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010179a:	c1 ea 16             	shr    $0x16,%edx
f010179d:	c1 e2 02             	shl    $0x2,%edx
f01017a0:	01 d0                	add    %edx,%eax
f01017a2:	8b 00                	mov    (%eax),%eax
f01017a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01017a9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f01017ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017af:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01017b4:	77 1c                	ja     f01017d2 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f01017b6:	83 ec 0c             	sub    $0xc,%esp
f01017b9:	ff 75 e8             	pushl  -0x18(%ebp)
f01017bc:	e8 ea 63 00 00       	call   f0107bab <kheap_virtual_address>
f01017c1:	83 c4 10             	add    $0x10,%esp
f01017c4:	83 ec 0c             	sub    $0xc,%esp
f01017c7:	50                   	push   %eax
f01017c8:	e8 e6 62 00 00       	call   f0107ab3 <kfree>
f01017cd:	83 c4 10             	add    $0x10,%esp
f01017d0:	eb 28                	jmp    f01017fa <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01017d2:	83 ec 0c             	sub    $0xc,%esp
f01017d5:	ff 75 e8             	pushl  -0x18(%ebp)
f01017d8:	e8 a9 f7 ff ff       	call   f0100f86 <to_frame_info>
f01017dd:	83 c4 10             	add    $0x10,%esp
f01017e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01017e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01017e6:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f01017ec:	83 ec 0c             	sub    $0xc,%esp
f01017ef:	ff 75 e4             	pushl  -0x1c(%ebp)
f01017f2:	e8 6f 51 00 00       	call   f0106966 <free_frame>
f01017f7:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f01017fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017fd:	c1 e8 16             	shr    $0x16,%eax
f0101800:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101803:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101806:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101809:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010180c:	c1 e2 02             	shl    $0x2,%edx
f010180f:	01 c2                	add    %eax,%edx
f0101811:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101814:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101817:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010181a:	c1 e1 02             	shl    $0x2,%ecx
f010181d:	01 c8                	add    %ecx,%eax
f010181f:	8b 00                	mov    (%eax),%eax
f0101821:	83 e0 fe             	and    $0xfffffffe,%eax
f0101824:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101826:	0f 20 d8             	mov    %cr3,%eax
f0101829:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010182c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010182f:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101832:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101837:	c9                   	leave  
f0101838:	c3                   	ret    

f0101839 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101839:	55                   	push   %ebp
f010183a:	89 e5                	mov    %esp,%ebp
f010183c:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f010183f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101843:	7e 06                	jle    f010184b <command_allocuserpage+0x12>
f0101845:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101849:	7e 1a                	jle    f0101865 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f010184b:	83 ec 0c             	sub    $0xc,%esp
f010184e:	68 a4 4a 13 f0       	push   $0xf0134aa4
f0101853:	e8 b6 f4 ff ff       	call   f0100d0e <cprintf>
f0101858:	83 c4 10             	add    $0x10,%esp
		return 0;
f010185b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101860:	e9 46 01 00 00       	jmp    f01019ab <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101865:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101868:	83 c0 04             	add    $0x4,%eax
f010186b:	8b 00                	mov    (%eax),%eax
f010186d:	83 ec 04             	sub    $0x4,%esp
f0101870:	6a 0a                	push   $0xa
f0101872:	6a 00                	push   $0x0
f0101874:	50                   	push   %eax
f0101875:	e8 bb 04 03 00       	call   f0131d35 <strtol>
f010187a:	83 c4 10             	add    $0x10,%esp
f010187d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101880:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101887:	83 ec 04             	sub    $0x4,%esp
f010188a:	6a 00                	push   $0x0
f010188c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010188f:	50                   	push   %eax
f0101890:	ff 75 f0             	pushl  -0x10(%ebp)
f0101893:	e8 2f 87 00 00       	call   f0109fc7 <envid2env>
f0101898:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010189b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189e:	85 c0                	test   %eax,%eax
f01018a0:	75 0a                	jne    f01018ac <command_allocuserpage+0x73>
f01018a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01018a7:	e9 ff 00 00 00       	jmp    f01019ab <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f01018ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018af:	83 c0 08             	add    $0x8,%eax
f01018b2:	8b 00                	mov    (%eax),%eax
f01018b4:	83 ec 04             	sub    $0x4,%esp
f01018b7:	6a 10                	push   $0x10
f01018b9:	6a 00                	push   $0x0
f01018bb:	50                   	push   %eax
f01018bc:	e8 74 04 03 00       	call   f0131d35 <strtol>
f01018c1:	83 c4 10             	add    $0x10,%esp
f01018c4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f01018c7:	83 ec 0c             	sub    $0xc,%esp
f01018ca:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01018cd:	50                   	push   %eax
f01018ce:	e8 7e 4f 00 00       	call   f0106851 <allocate_frame>
f01018d3:	83 c4 10             	add    $0x10,%esp
f01018d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01018d9:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01018dd:	75 1a                	jne    f01018f9 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01018df:	83 ec 0c             	sub    $0xc,%esp
f01018e2:	68 ce 4a 13 f0       	push   $0xf0134ace
f01018e7:	e8 22 f4 ff ff       	call   f0100d0e <cprintf>
f01018ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01018f4:	e9 b2 00 00 00       	jmp    f01019ab <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f01018f9:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01018fd:	75 1d                	jne    f010191c <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01018ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101902:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101905:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101908:	6a 06                	push   $0x6
f010190a:	ff 75 ec             	pushl  -0x14(%ebp)
f010190d:	52                   	push   %edx
f010190e:	50                   	push   %eax
f010190f:	e8 8c 53 00 00       	call   f0106ca0 <map_frame>
f0101914:	83 c4 10             	add    $0x10,%esp
f0101917:	e9 8a 00 00 00       	jmp    f01019a6 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f010191c:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101920:	0f 85 80 00 00 00    	jne    f01019a6 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0101926:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101929:	83 c0 0c             	add    $0xc,%eax
f010192c:	8b 00                	mov    (%eax),%eax
f010192e:	8a 00                	mov    (%eax),%al
f0101930:	3c 72                	cmp    $0x72,%al
f0101932:	74 0e                	je     f0101942 <command_allocuserpage+0x109>
f0101934:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101937:	83 c0 0c             	add    $0xc,%eax
f010193a:	8b 00                	mov    (%eax),%eax
f010193c:	8a 00                	mov    (%eax),%al
f010193e:	3c 52                	cmp    $0x52,%al
f0101940:	75 09                	jne    f010194b <command_allocuserpage+0x112>
			rw = 0 ;
f0101942:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101949:	eb 3c                	jmp    f0101987 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f010194b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194e:	83 c0 0c             	add    $0xc,%eax
f0101951:	8b 00                	mov    (%eax),%eax
f0101953:	8a 00                	mov    (%eax),%al
f0101955:	3c 77                	cmp    $0x77,%al
f0101957:	74 0e                	je     f0101967 <command_allocuserpage+0x12e>
f0101959:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195c:	83 c0 0c             	add    $0xc,%eax
f010195f:	8b 00                	mov    (%eax),%eax
f0101961:	8a 00                	mov    (%eax),%al
f0101963:	3c 57                	cmp    $0x57,%al
f0101965:	75 09                	jne    f0101970 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101967:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010196e:	eb 17                	jmp    f0101987 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	68 e8 4a 13 f0       	push   $0xf0134ae8
f0101978:	e8 91 f3 ff ff       	call   f0100d0e <cprintf>
f010197d:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101980:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101987:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010198a:	83 c8 04             	or     $0x4,%eax
f010198d:	89 c1                	mov    %eax,%ecx
f010198f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101995:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101998:	51                   	push   %ecx
f0101999:	ff 75 ec             	pushl  -0x14(%ebp)
f010199c:	52                   	push   %edx
f010199d:	50                   	push   %eax
f010199e:	e8 fd 52 00 00       	call   f0106ca0 <map_frame>
f01019a3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01019a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019ab:	c9                   	leave  
f01019ac:	c3                   	ret    

f01019ad <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f01019ad:	55                   	push   %ebp
f01019ae:	89 e5                	mov    %esp,%ebp
f01019b0:	56                   	push   %esi
f01019b1:	53                   	push   %ebx
f01019b2:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f01019b5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01019b8:	83 ec 0c             	sub    $0xc,%esp
f01019bb:	50                   	push   %eax
f01019bc:	e8 79 55 00 00       	call   f0106f3a <calculate_available_frames>
f01019c1:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01019ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01019cd:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01019d0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01019d3:	01 de                	add    %ebx,%esi
f01019d5:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019d8:	01 f3                	add    %esi,%ebx
f01019da:	83 ec 0c             	sub    $0xc,%esp
f01019dd:	51                   	push   %ecx
f01019de:	52                   	push   %edx
f01019df:	50                   	push   %eax
f01019e0:	53                   	push   %ebx
f01019e1:	68 2c 4b 13 f0       	push   $0xf0134b2c
f01019e6:	e8 23 f3 ff ff       	call   f0100d0e <cprintf>
f01019eb:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f01019ee:	a1 74 a1 86 f0       	mov    0xf086a174,%eax
f01019f3:	83 ec 08             	sub    $0x8,%esp
f01019f6:	50                   	push   %eax
f01019f7:	68 84 4b 13 f0       	push   $0xf0134b84
f01019fc:	e8 0d f3 ff ff       	call   f0100d0e <cprintf>
f0101a01:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a0c:	5b                   	pop    %ebx
f0101a0d:	5e                   	pop    %esi
f0101a0e:	5d                   	pop    %ebp
f0101a0f:	c3                   	ret    

f0101a10 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a10:	55                   	push   %ebp
f0101a11:	89 e5                	mov    %esp,%ebp
f0101a13:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a16:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101a24:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0101a2e:	83 f8 04             	cmp    $0x4,%eax
f0101a31:	0f 84 94 00 00 00    	je     f0101acb <CreateEnv+0xbb>
f0101a37:	83 f8 05             	cmp    $0x5,%eax
f0101a3a:	74 0e                	je     f0101a4a <CreateEnv+0x3a>
f0101a3c:	83 f8 03             	cmp    $0x3,%eax
f0101a3f:	0f 84 ec 00 00 00    	je     f0101b31 <CreateEnv+0x121>
f0101a45:	e9 2f 01 00 00       	jmp    f0101b79 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a4a:	83 ec 0c             	sub    $0xc,%esp
f0101a4d:	6a 02                	push   $0x2
f0101a4f:	e8 ab c7 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101a54:	83 c4 10             	add    $0x10,%esp
f0101a57:	85 c0                	test   %eax,%eax
f0101a59:	75 1a                	jne    f0101a75 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101a5b:	83 ec 0c             	sub    $0xc,%esp
f0101a5e:	68 c0 4b 13 f0       	push   $0xf0134bc0
f0101a63:	e8 a6 f2 ff ff       	call   f0100d0e <cprintf>
f0101a68:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a70:	e9 d5 01 00 00       	jmp    f0101c4a <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101a75:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a78:	83 c0 10             	add    $0x10,%eax
f0101a7b:	8b 00                	mov    (%eax),%eax
f0101a7d:	83 ec 04             	sub    $0x4,%esp
f0101a80:	6a 0a                	push   $0xa
f0101a82:	6a 00                	push   $0x0
f0101a84:	50                   	push   %eax
f0101a85:	e8 ab 02 03 00       	call   f0131d35 <strtol>
f0101a8a:	83 c4 10             	add    $0x10,%esp
f0101a8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101a90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a93:	83 c0 0c             	add    $0xc,%eax
f0101a96:	8b 00                	mov    (%eax),%eax
f0101a98:	83 ec 04             	sub    $0x4,%esp
f0101a9b:	6a 0a                	push   $0xa
f0101a9d:	6a 00                	push   $0x0
f0101a9f:	50                   	push   %eax
f0101aa0:	e8 90 02 03 00       	call   f0131d35 <strtol>
f0101aa5:	83 c4 10             	add    $0x10,%esp
f0101aa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aae:	83 c0 08             	add    $0x8,%eax
f0101ab1:	8b 00                	mov    (%eax),%eax
f0101ab3:	83 ec 04             	sub    $0x4,%esp
f0101ab6:	6a 0a                	push   $0xa
f0101ab8:	6a 00                	push   $0x0
f0101aba:	50                   	push   %eax
f0101abb:	e8 75 02 03 00       	call   f0131d35 <strtol>
f0101ac0:	83 c4 10             	add    $0x10,%esp
f0101ac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101ac6:	e9 c8 00 00 00       	jmp    f0101b93 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101acb:	83 ec 0c             	sub    $0xc,%esp
f0101ace:	6a 02                	push   $0x2
f0101ad0:	e8 2a c7 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101ad5:	83 c4 10             	add    $0x10,%esp
f0101ad8:	85 c0                	test   %eax,%eax
f0101ada:	75 1d                	jne    f0101af9 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101adc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101adf:	83 c0 0c             	add    $0xc,%eax
f0101ae2:	8b 00                	mov    (%eax),%eax
f0101ae4:	83 ec 04             	sub    $0x4,%esp
f0101ae7:	6a 0a                	push   $0xa
f0101ae9:	6a 00                	push   $0x0
f0101aeb:	50                   	push   %eax
f0101aec:	e8 44 02 03 00       	call   f0131d35 <strtol>
f0101af1:	83 c4 10             	add    $0x10,%esp
f0101af4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101af7:	eb 1b                	jmp    f0101b14 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101af9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101afc:	83 c0 0c             	add    $0xc,%eax
f0101aff:	8b 00                	mov    (%eax),%eax
f0101b01:	83 ec 04             	sub    $0x4,%esp
f0101b04:	6a 0a                	push   $0xa
f0101b06:	6a 00                	push   $0x0
f0101b08:	50                   	push   %eax
f0101b09:	e8 27 02 03 00       	call   f0131d35 <strtol>
f0101b0e:	83 c4 10             	add    $0x10,%esp
f0101b11:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b17:	83 c0 08             	add    $0x8,%eax
f0101b1a:	8b 00                	mov    (%eax),%eax
f0101b1c:	83 ec 04             	sub    $0x4,%esp
f0101b1f:	6a 0a                	push   $0xa
f0101b21:	6a 00                	push   $0x0
f0101b23:	50                   	push   %eax
f0101b24:	e8 0c 02 03 00       	call   f0131d35 <strtol>
f0101b29:	83 c4 10             	add    $0x10,%esp
f0101b2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b2f:	eb 62                	jmp    f0101b93 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b31:	83 ec 0c             	sub    $0xc,%esp
f0101b34:	6a 02                	push   $0x2
f0101b36:	e8 c4 c6 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101b3b:	83 c4 10             	add    $0x10,%esp
f0101b3e:	85 c0                	test   %eax,%eax
f0101b40:	74 1a                	je     f0101b5c <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101b42:	83 ec 0c             	sub    $0xc,%esp
f0101b45:	68 80 4c 13 f0       	push   $0xf0134c80
f0101b4a:	e8 bf f1 ff ff       	call   f0100d0e <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b57:	e9 ee 00 00 00       	jmp    f0101c4a <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5f:	83 c0 08             	add    $0x8,%eax
f0101b62:	8b 00                	mov    (%eax),%eax
f0101b64:	83 ec 04             	sub    $0x4,%esp
f0101b67:	6a 0a                	push   $0xa
f0101b69:	6a 00                	push   $0x0
f0101b6b:	50                   	push   %eax
f0101b6c:	e8 c4 01 03 00       	call   f0131d35 <strtol>
f0101b71:	83 c4 10             	add    $0x10,%esp
f0101b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b77:	eb 1a                	jmp    f0101b93 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b79:	83 ec 0c             	sub    $0xc,%esp
f0101b7c:	68 10 4d 13 f0       	push   $0xf0134d10
f0101b81:	e8 88 f1 ff ff       	call   f0100d0e <cprintf>
f0101b86:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101b89:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b8e:	e9 b7 00 00 00       	jmp    f0101c4a <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101b93:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101b9a:	76 1f                	jbe    f0101bbb <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101b9c:	83 ec 08             	sub    $0x8,%esp
f0101b9f:	68 88 13 00 00       	push   $0x1388
f0101ba4:	68 a8 4d 13 f0       	push   $0xf0134da8
f0101ba9:	e8 60 f1 ff ff       	call   f0100d0e <cprintf>
f0101bae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101bb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bb6:	e9 8f 00 00 00       	jmp    f0101c4a <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bbb:	83 ec 0c             	sub    $0xc,%esp
f0101bbe:	6a 02                	push   $0x2
f0101bc0:	e8 3a c6 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101bc5:	83 c4 10             	add    $0x10,%esp
f0101bc8:	85 c0                	test   %eax,%eax
f0101bca:	74 20                	je     f0101bec <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bcf:	48                   	dec    %eax
f0101bd0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101bd3:	73 17                	jae    f0101bec <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101bd5:	83 ec 0c             	sub    $0xc,%esp
f0101bd8:	68 e8 4d 13 f0       	push   $0xf0134de8
f0101bdd:	e8 2c f1 ff ff       	call   f0100d0e <cprintf>
f0101be2:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101be5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bea:	eb 5e                	jmp    f0101c4a <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101bec:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101bf0:	76 19                	jbe    f0101c0b <CreateEnv+0x1fb>
f0101bf2:	68 40 4e 13 f0       	push   $0xf0134e40
f0101bf7:	68 85 4e 13 f0       	push   $0xf0134e85
f0101bfc:	68 5a 02 00 00       	push   $0x25a
f0101c01:	68 09 4a 13 f0       	push   $0xf0134a09
f0101c06:	e8 fa e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c0b:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c0f:	76 19                	jbe    f0101c2a <CreateEnv+0x21a>
f0101c11:	68 40 4e 13 f0       	push   $0xf0134e40
f0101c16:	68 85 4e 13 f0       	push   $0xf0134e85
f0101c1b:	68 71 02 00 00       	push   $0x271
f0101c20:	68 09 4a 13 f0       	push   $0xf0134a09
f0101c25:	e8 db e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101c2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c2d:	83 c0 04             	add    $0x4,%eax
f0101c30:	8b 00                	mov    (%eax),%eax
f0101c32:	ff 75 ec             	pushl  -0x14(%ebp)
f0101c35:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c3b:	50                   	push   %eax
f0101c3c:	e8 df 76 00 00       	call   f0109320 <env_create>
f0101c41:	83 c4 10             	add    $0x10,%esp
f0101c44:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101c4a:	c9                   	leave  
f0101c4b:	c3                   	ret    

f0101c4c <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101c4c:	55                   	push   %ebp
f0101c4d:	89 e5                	mov    %esp,%ebp
f0101c4f:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101c52:	83 ec 08             	sub    $0x8,%esp
f0101c55:	ff 75 0c             	pushl  0xc(%ebp)
f0101c58:	ff 75 08             	pushl  0x8(%ebp)
f0101c5b:	e8 b0 fd ff ff       	call   f0101a10 <CreateEnv>
f0101c60:	83 c4 10             	add    $0x10,%esp
f0101c63:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101c66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101c6a:	75 07                	jne    f0101c73 <command_run_program+0x27>
f0101c6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c71:	eb 46                	jmp    f0101cb9 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c76:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101c79:	83 ec 08             	sub    $0x8,%esp
f0101c7c:	50                   	push   %eax
f0101c7d:	68 9a 4e 13 f0       	push   $0xf0134e9a
f0101c82:	e8 87 f0 ff ff       	call   f0100d0e <cprintf>
f0101c87:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101c8a:	c7 05 74 a1 86 f0 00 	movl   $0x0,0xf086a174
f0101c91:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101c94:	83 ec 0c             	sub    $0xc,%esp
f0101c97:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c9a:	e8 c4 34 00 00       	call   f0105163 <sched_new_env>
f0101c9f:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ca5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101ca8:	83 ec 0c             	sub    $0xc,%esp
f0101cab:	50                   	push   %eax
f0101cac:	e8 cf 34 00 00       	call   f0105180 <sched_run_env>
f0101cb1:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101cb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cb9:	c9                   	leave  
f0101cba:	c3                   	ret    

f0101cbb <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101cbb:	55                   	push   %ebp
f0101cbc:	89 e5                	mov    %esp,%ebp
f0101cbe:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101cc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cc4:	83 c0 04             	add    $0x4,%eax
f0101cc7:	8b 00                	mov    (%eax),%eax
f0101cc9:	83 ec 04             	sub    $0x4,%esp
f0101ccc:	6a 0a                	push   $0xa
f0101cce:	6a 00                	push   $0x0
f0101cd0:	50                   	push   %eax
f0101cd1:	e8 5f 00 03 00       	call   f0131d35 <strtol>
f0101cd6:	83 c4 10             	add    $0x10,%esp
f0101cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cdf:	83 ec 0c             	sub    $0xc,%esp
f0101ce2:	50                   	push   %eax
f0101ce3:	e8 b6 38 00 00       	call   f010559e <sched_kill_env>
f0101ce8:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ceb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cf0:	c9                   	leave  
f0101cf1:	c3                   	ret    

f0101cf2 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101cf2:	55                   	push   %ebp
f0101cf3:	89 e5                	mov    %esp,%ebp
f0101cf5:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf8:	83 ec 08             	sub    $0x8,%esp
f0101cfb:	ff 75 0c             	pushl  0xc(%ebp)
f0101cfe:	ff 75 08             	pushl  0x8(%ebp)
f0101d01:	e8 0a fd ff ff       	call   f0101a10 <CreateEnv>
f0101d06:	83 c4 10             	add    $0x10,%esp
f0101d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d10:	75 07                	jne    f0101d19 <commnad_load_env+0x27>
		return 0 ;
f0101d12:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d17:	eb 2a                	jmp    f0101d43 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d19:	83 ec 0c             	sub    $0xc,%esp
f0101d1c:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d1f:	e8 3f 34 00 00       	call   f0105163 <sched_new_env>
f0101d24:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d2a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d2d:	83 ec 08             	sub    $0x8,%esp
f0101d30:	50                   	push   %eax
f0101d31:	68 9a 4e 13 f0       	push   $0xf0134e9a
f0101d36:	e8 d3 ef ff ff       	call   f0100d0e <cprintf>
f0101d3b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d43:	c9                   	leave  
f0101d44:	c3                   	ret    

f0101d45 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101d45:	55                   	push   %ebp
f0101d46:	89 e5                	mov    %esp,%ebp
f0101d48:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101d4b:	c7 05 74 a1 86 f0 00 	movl   $0x0,0xf086a174
f0101d52:	00 00 00 
	sched_run_all();
f0101d55:	e8 51 30 00 00       	call   f0104dab <sched_run_all>

	return 0 ;
f0101d5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5f:	c9                   	leave  
f0101d60:	c3                   	ret    

f0101d61 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101d61:	55                   	push   %ebp
f0101d62:	89 e5                	mov    %esp,%ebp
f0101d64:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101d67:	e8 35 2e 00 00       	call   f0104ba1 <sched_print_all>

	return 0 ;
f0101d6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d71:	c9                   	leave  
f0101d72:	c3                   	ret    

f0101d73 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101d73:	55                   	push   %ebp
f0101d74:	89 e5                	mov    %esp,%ebp
f0101d76:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101d79:	e8 a0 30 00 00       	call   f0104e1e <sched_kill_all>

	return 0 ;
f0101d7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d83:	c9                   	leave  
f0101d84:	c3                   	ret    

f0101d85 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101d85:	55                   	push   %ebp
f0101d86:	89 e5                	mov    %esp,%ebp
f0101d88:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101d8b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101d8f:	7f 1a                	jg     f0101dab <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101d91:	83 ec 0c             	sub    $0xc,%esp
f0101d94:	68 b0 4e 13 f0       	push   $0xf0134eb0
f0101d99:	e8 70 ef ff ff       	call   f0100d0e <cprintf>
f0101d9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101da1:	b8 00 00 00 00       	mov    $0x0,%eax
f0101da6:	e9 83 00 00 00       	jmp    f0101e2e <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101dab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101dae:	83 c0 04             	add    $0x4,%eax
f0101db1:	8b 00                	mov    (%eax),%eax
f0101db3:	83 ec 04             	sub    $0x4,%esp
f0101db6:	6a 0a                	push   $0xa
f0101db8:	6a 00                	push   $0x0
f0101dba:	50                   	push   %eax
f0101dbb:	e8 75 ff 02 00       	call   f0131d35 <strtol>
f0101dc0:	83 c4 10             	add    $0x10,%esp
f0101dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101dc6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101dca:	75 20                	jne    f0101dec <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101dcc:	83 ec 0c             	sub    $0xc,%esp
f0101dcf:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dd2:	e8 9d c3 00 00       	call   f010e174 <setPageReplacmentAlgorithmLRU>
f0101dd7:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101dda:	83 ec 0c             	sub    $0xc,%esp
f0101ddd:	68 10 4f 13 f0       	push   $0xf0134f10
f0101de2:	e8 27 ef ff ff       	call   f0100d0e <cprintf>
f0101de7:	83 c4 10             	add    $0x10,%esp
f0101dea:	eb 3d                	jmp    f0101e29 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101dec:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101df0:	75 20                	jne    f0101e12 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101df2:	83 ec 0c             	sub    $0xc,%esp
f0101df5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101df8:	e8 77 c3 00 00       	call   f010e174 <setPageReplacmentAlgorithmLRU>
f0101dfd:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e00:	83 ec 0c             	sub    $0xc,%esp
f0101e03:	68 54 4f 13 f0       	push   $0xf0134f54
f0101e08:	e8 01 ef ff ff       	call   f0100d0e <cprintf>
f0101e0d:	83 c4 10             	add    $0x10,%esp
f0101e10:	eb 17                	jmp    f0101e29 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e12:	83 ec 0c             	sub    $0xc,%esp
f0101e15:	68 94 4f 13 f0       	push   $0xf0134f94
f0101e1a:	e8 ef ee ff ff       	call   f0100d0e <cprintf>
f0101e1f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e22:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e27:	eb 05                	jmp    f0101e2e <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101e29:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e2e:	c9                   	leave  
f0101e2f:	c3                   	ret    

f0101e30 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101e30:	55                   	push   %ebp
f0101e31:	89 e5                	mov    %esp,%ebp
f0101e33:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101e36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e39:	83 c0 04             	add    $0x4,%eax
f0101e3c:	8b 00                	mov    (%eax),%eax
f0101e3e:	83 ec 04             	sub    $0x4,%esp
f0101e41:	6a 0a                	push   $0xa
f0101e43:	6a 00                	push   $0x0
f0101e45:	50                   	push   %eax
f0101e46:	e8 ea fe 02 00       	call   f0131d35 <strtol>
f0101e4b:	83 c4 10             	add    $0x10,%esp
f0101e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101e51:	83 ec 0c             	sub    $0xc,%esp
f0101e54:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e57:	e8 8b c3 00 00       	call   f010e1e7 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101e5c:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101e5f:	83 ec 0c             	sub    $0xc,%esp
f0101e62:	68 e8 4f 13 f0       	push   $0xf0134fe8
f0101e67:	e8 a2 ee ff ff       	call   f0100d0e <cprintf>
f0101e6c:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e74:	c9                   	leave  
f0101e75:	c3                   	ret    

f0101e76 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101e76:	55                   	push   %ebp
f0101e77:	89 e5                	mov    %esp,%ebp
f0101e79:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101e7c:	e8 26 c3 00 00       	call   f010e1a7 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101e81:	83 ec 0c             	sub    $0xc,%esp
f0101e84:	68 1c 50 13 f0       	push   $0xf013501c
f0101e89:	e8 80 ee ff ff       	call   f0100d0e <cprintf>
f0101e8e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101e9e:	e8 14 c3 00 00       	call   f010e1b7 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 48 50 13 f0       	push   $0xf0135048
f0101eab:	e8 5e ee ff ff       	call   f0100d0e <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101ec0:	e8 02 c3 00 00       	call   f010e1c7 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101ec5:	83 ec 0c             	sub    $0xc,%esp
f0101ec8:	68 70 50 13 f0       	push   $0xf0135070
f0101ecd:	e8 3c ee ff ff       	call   f0100d0e <cprintf>
f0101ed2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ed5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eda:	c9                   	leave  
f0101edb:	c3                   	ret    

f0101edc <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101edc:	55                   	push   %ebp
f0101edd:	89 e5                	mov    %esp,%ebp
f0101edf:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee5:	83 c0 04             	add    $0x4,%eax
f0101ee8:	8b 00                	mov    (%eax),%eax
f0101eea:	83 ec 04             	sub    $0x4,%esp
f0101eed:	6a 0a                	push   $0xa
f0101eef:	6a 00                	push   $0x0
f0101ef1:	50                   	push   %eax
f0101ef2:	e8 3e fe 02 00       	call   f0131d35 <strtol>
f0101ef7:	83 c4 10             	add    $0x10,%esp
f0101efa:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101efd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f01:	83 ec 0c             	sub    $0xc,%esp
f0101f04:	50                   	push   %eax
f0101f05:	e8 67 28 00 00       	call   f0104771 <sched_init_RR>
f0101f0a:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f0d:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f0101f12:	8a 00                	mov    (%eax),%al
f0101f14:	0f b6 c0             	movzbl %al,%eax
f0101f17:	83 ec 08             	sub    $0x8,%esp
f0101f1a:	50                   	push   %eax
f0101f1b:	68 a4 50 13 f0       	push   $0xf01350a4
f0101f20:	e8 e9 ed ff ff       	call   f0100d0e <cprintf>
f0101f25:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f2d:	c9                   	leave  
f0101f2e:	c3                   	ret    

f0101f2f <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101f2f:	55                   	push   %ebp
f0101f30:	89 e5                	mov    %esp,%ebp
f0101f32:	53                   	push   %ebx
f0101f33:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101f36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f39:	83 c0 04             	add    $0x4,%eax
f0101f3c:	8b 00                	mov    (%eax),%eax
f0101f3e:	83 ec 04             	sub    $0x4,%esp
f0101f41:	6a 0a                	push   $0xa
f0101f43:	6a 00                	push   $0x0
f0101f45:	50                   	push   %eax
f0101f46:	e8 ea fd 02 00       	call   f0131d35 <strtol>
f0101f4b:	83 c4 10             	add    $0x10,%esp
f0101f4e:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f51:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101f58:	eb 2e                	jmp    f0101f88 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5d:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f6d:	01 d0                	add    %edx,%eax
f0101f6f:	8b 00                	mov    (%eax),%eax
f0101f71:	83 ec 04             	sub    $0x4,%esp
f0101f74:	6a 0a                	push   $0xa
f0101f76:	6a 00                	push   $0x0
f0101f78:	50                   	push   %eax
f0101f79:	e8 b7 fd 02 00       	call   f0131d35 <strtol>
f0101f7e:	83 c4 10             	add    $0x10,%esp
f0101f81:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f85:	ff 45 f4             	incl   -0xc(%ebp)
f0101f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f8b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101f8e:	7c ca                	jl     f0101f5a <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101f90:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101f94:	83 ec 08             	sub    $0x8,%esp
f0101f97:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101f9a:	52                   	push   %edx
f0101f9b:	50                   	push   %eax
f0101f9c:	e8 5b 28 00 00       	call   f01047fc <sched_init_MLFQ>
f0101fa1:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101fa4:	83 ec 0c             	sub    $0xc,%esp
f0101fa7:	68 dc 50 13 f0       	push   $0xf01350dc
f0101fac:	e8 5d ed ff ff       	call   f0100d0e <cprintf>
f0101fb1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fbb:	eb 24                	jmp    f0101fe1 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0101fbd:	8b 15 2c a1 86 f0    	mov    0xf086a12c,%edx
f0101fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fc6:	01 d0                	add    %edx,%eax
f0101fc8:	8a 00                	mov    (%eax),%al
f0101fca:	0f b6 c0             	movzbl %al,%eax
f0101fcd:	83 ec 08             	sub    $0x8,%esp
f0101fd0:	50                   	push   %eax
f0101fd1:	68 09 51 13 f0       	push   $0xf0135109
f0101fd6:	e8 33 ed ff ff       	call   f0100d0e <cprintf>
f0101fdb:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fde:	ff 45 f0             	incl   -0x10(%ebp)
f0101fe1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0101fe6:	0f b6 c0             	movzbl %al,%eax
f0101fe9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101fec:	7f cf                	jg     f0101fbd <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101fee:	83 ec 0c             	sub    $0xc,%esp
f0101ff1:	68 91 4a 13 f0       	push   $0xf0134a91
f0101ff6:	e8 13 ed ff ff       	call   f0100d0e <cprintf>
f0101ffb:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ffe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102003:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102006:	c9                   	leave  
f0102007:	c3                   	ret    

f0102008 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102008:	55                   	push   %ebp
f0102009:	89 e5                	mov    %esp,%ebp
f010200b:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f010200e:	e8 8d 23 00 00       	call   f01043a0 <isSchedMethodMLFQ>
f0102013:	85 c0                	test   %eax,%eax
f0102015:	74 5c                	je     f0102073 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	68 10 51 13 f0       	push   $0xf0135110
f010201f:	e8 ea ec ff ff       	call   f0100d0e <cprintf>
f0102024:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102027:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010202e:	eb 24                	jmp    f0102054 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102030:	8b 15 2c a1 86 f0    	mov    0xf086a12c,%edx
f0102036:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102039:	01 d0                	add    %edx,%eax
f010203b:	8a 00                	mov    (%eax),%al
f010203d:	0f b6 c0             	movzbl %al,%eax
f0102040:	83 ec 08             	sub    $0x8,%esp
f0102043:	50                   	push   %eax
f0102044:	68 09 51 13 f0       	push   $0xf0135109
f0102049:	e8 c0 ec ff ff       	call   f0100d0e <cprintf>
f010204e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102051:	ff 45 f4             	incl   -0xc(%ebp)
f0102054:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0102059:	0f b6 c0             	movzbl %al,%eax
f010205c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010205f:	7f cf                	jg     f0102030 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102061:	83 ec 0c             	sub    $0xc,%esp
f0102064:	68 91 4a 13 f0       	push   $0xf0134a91
f0102069:	e8 a0 ec ff ff       	call   f0100d0e <cprintf>
f010206e:	83 c4 10             	add    $0x10,%esp
f0102071:	eb 36                	jmp    f01020a9 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102073:	e8 0e 23 00 00       	call   f0104386 <isSchedMethodRR>
f0102078:	85 c0                	test   %eax,%eax
f010207a:	74 1d                	je     f0102099 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010207c:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f0102081:	8a 00                	mov    (%eax),%al
f0102083:	0f b6 c0             	movzbl %al,%eax
f0102086:	83 ec 08             	sub    $0x8,%esp
f0102089:	50                   	push   %eax
f010208a:	68 44 51 13 f0       	push   $0xf0135144
f010208f:	e8 7a ec ff ff       	call   f0100d0e <cprintf>
f0102094:	83 c4 10             	add    $0x10,%esp
f0102097:	eb 10                	jmp    f01020a9 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102099:	83 ec 0c             	sub    $0xc,%esp
f010209c:	68 80 51 13 f0       	push   $0xf0135180
f01020a1:	e8 68 ec ff ff       	call   f0100d0e <cprintf>
f01020a6:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020ae:	c9                   	leave  
f01020af:	c3                   	ret    

f01020b0 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01020b0:	55                   	push   %ebp
f01020b1:	89 e5                	mov    %esp,%ebp
f01020b3:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01020b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020b9:	83 c0 04             	add    $0x4,%eax
f01020bc:	8b 00                	mov    (%eax),%eax
f01020be:	83 ec 04             	sub    $0x4,%esp
f01020c1:	6a 0a                	push   $0xa
f01020c3:	6a 00                	push   $0x0
f01020c5:	50                   	push   %eax
f01020c6:	e8 6a fc 02 00       	call   f0131d35 <strtol>
f01020cb:	83 c4 10             	add    $0x10,%esp
f01020ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01020d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020d4:	0f b6 c0             	movzbl %al,%eax
f01020d7:	83 ec 0c             	sub    $0xc,%esp
f01020da:	50                   	push   %eax
f01020db:	e8 7b eb 02 00       	call   f0130c5b <chksch>
f01020e0:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01020e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01020e7:	75 12                	jne    f01020fb <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01020e9:	83 ec 0c             	sub    $0xc,%esp
f01020ec:	68 a8 51 13 f0       	push   $0xf01351a8
f01020f1:	e8 18 ec ff ff       	call   f0100d0e <cprintf>
f01020f6:	83 c4 10             	add    $0x10,%esp
f01020f9:	eb 16                	jmp    f0102111 <command_sch_test+0x61>
	else if (status == 1)
f01020fb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01020ff:	75 10                	jne    f0102111 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102101:	83 ec 0c             	sub    $0xc,%esp
f0102104:	68 d0 51 13 f0       	push   $0xf01351d0
f0102109:	e8 00 ec ff ff       	call   f0100d0e <cprintf>
f010210e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102111:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102116:	c9                   	leave  
f0102117:	c3                   	ret    

f0102118 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0102118:	55                   	push   %ebp
f0102119:	89 e5                	mov    %esp,%ebp
f010211b:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f010211e:	e8 f2 c0 00 00       	call   f010e215 <isPageReplacmentAlgorithmCLOCK>
f0102123:	85 c0                	test   %eax,%eax
f0102125:	74 15                	je     f010213c <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0102127:	83 ec 0c             	sub    $0xc,%esp
f010212a:	68 f4 51 13 f0       	push   $0xf01351f4
f010212f:	e8 da eb ff ff       	call   f0100d0e <cprintf>
f0102134:	83 c4 10             	add    $0x10,%esp
f0102137:	e9 8c 00 00 00       	jmp    f01021c8 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010213c:	83 ec 0c             	sub    $0xc,%esp
f010213f:	6a 01                	push   $0x1
f0102141:	e8 b9 c0 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0102146:	83 c4 10             	add    $0x10,%esp
f0102149:	85 c0                	test   %eax,%eax
f010214b:	74 12                	je     f010215f <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010214d:	83 ec 0c             	sub    $0xc,%esp
f0102150:	68 1c 52 13 f0       	push   $0xf013521c
f0102155:	e8 b4 eb ff ff       	call   f0100d0e <cprintf>
f010215a:	83 c4 10             	add    $0x10,%esp
f010215d:	eb 69                	jmp    f01021c8 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010215f:	83 ec 0c             	sub    $0xc,%esp
f0102162:	6a 02                	push   $0x2
f0102164:	e8 96 c0 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0102169:	83 c4 10             	add    $0x10,%esp
f010216c:	85 c0                	test   %eax,%eax
f010216e:	74 12                	je     f0102182 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102170:	83 ec 0c             	sub    $0xc,%esp
f0102173:	68 5c 52 13 f0       	push   $0xf013525c
f0102178:	e8 91 eb ff ff       	call   f0100d0e <cprintf>
f010217d:	83 c4 10             	add    $0x10,%esp
f0102180:	eb 46                	jmp    f01021c8 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102182:	e8 a9 c0 00 00       	call   f010e230 <isPageReplacmentAlgorithmFIFO>
f0102187:	85 c0                	test   %eax,%eax
f0102189:	74 12                	je     f010219d <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010218b:	83 ec 0c             	sub    $0xc,%esp
f010218e:	68 98 52 13 f0       	push   $0xf0135298
f0102193:	e8 76 eb ff ff       	call   f0100d0e <cprintf>
f0102198:	83 c4 10             	add    $0x10,%esp
f010219b:	eb 2b                	jmp    f01021c8 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010219d:	e8 a9 c0 00 00       	call   f010e24b <isPageReplacmentAlgorithmModifiedCLOCK>
f01021a2:	85 c0                	test   %eax,%eax
f01021a4:	74 12                	je     f01021b8 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01021a6:	83 ec 0c             	sub    $0xc,%esp
f01021a9:	68 bc 52 13 f0       	push   $0xf01352bc
f01021ae:	e8 5b eb ff ff       	call   f0100d0e <cprintf>
f01021b3:	83 c4 10             	add    $0x10,%esp
f01021b6:	eb 10                	jmp    f01021c8 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01021b8:	83 ec 0c             	sub    $0xc,%esp
f01021bb:	68 ec 52 13 f0       	push   $0xf01352ec
f01021c0:	e8 49 eb ff ff       	call   f0100d0e <cprintf>
f01021c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01021c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021cd:	c9                   	leave  
f01021ce:	c3                   	ret    

f01021cf <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01021cf:	55                   	push   %ebp
f01021d0:	89 e5                	mov    %esp,%ebp
f01021d2:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01021d5:	e8 18 ed ff ff       	call   f0100ef2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01021da:	83 ec 0c             	sub    $0xc,%esp
f01021dd:	68 18 53 13 f0       	push   $0xf0135318
f01021e2:	e8 27 eb ff ff       	call   f0100d0e <cprintf>
f01021e7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021ef:	c9                   	leave  
f01021f0:	c3                   	ret    

f01021f1 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01021f1:	55                   	push   %ebp
f01021f2:	89 e5                	mov    %esp,%ebp
f01021f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01021f7:	e8 06 ed ff ff       	call   f0100f02 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01021fc:	83 ec 0c             	sub    $0xc,%esp
f01021ff:	68 48 53 13 f0       	push   $0xf0135348
f0102204:	e8 05 eb ff ff       	call   f0100d0e <cprintf>
f0102209:	83 c4 10             	add    $0x10,%esp
	return 0;
f010220c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102211:	c9                   	leave  
f0102212:	c3                   	ret    

f0102213 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102213:	55                   	push   %ebp
f0102214:	89 e5                	mov    %esp,%ebp
f0102216:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102219:	e8 f4 ec ff ff       	call   f0100f12 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f010221e:	83 ec 0c             	sub    $0xc,%esp
f0102221:	68 78 53 13 f0       	push   $0xf0135378
f0102226:	e8 e3 ea ff ff       	call   f0100d0e <cprintf>
f010222b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010222e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102233:	c9                   	leave  
f0102234:	c3                   	ret    

f0102235 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102235:	55                   	push   %ebp
f0102236:	89 e5                	mov    %esp,%ebp
f0102238:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010223b:	e8 e2 ec ff ff       	call   f0100f22 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102240:	83 ec 0c             	sub    $0xc,%esp
f0102243:	68 a8 53 13 f0       	push   $0xf01353a8
f0102248:	e8 c1 ea ff ff       	call   f0100d0e <cprintf>
f010224d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102250:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102255:	c9                   	leave  
f0102256:	c3                   	ret    

f0102257 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102257:	55                   	push   %ebp
f0102258:	89 e5                	mov    %esp,%ebp
f010225a:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010225d:	e8 d0 ec ff ff       	call   f0100f32 <isUHeapPlacementStrategyFIRSTFIT>
f0102262:	84 c0                	test   %al,%al
f0102264:	74 12                	je     f0102278 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 d8 53 13 f0       	push   $0xf01353d8
f010226e:	e8 9b ea ff ff       	call   f0100d0e <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
f0102276:	eb 61                	jmp    f01022d9 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102278:	e8 ca ec ff ff       	call   f0100f47 <isUHeapPlacementStrategyBESTFIT>
f010227d:	84 c0                	test   %al,%al
f010227f:	74 12                	je     f0102293 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102281:	83 ec 0c             	sub    $0xc,%esp
f0102284:	68 04 54 13 f0       	push   $0xf0135404
f0102289:	e8 80 ea ff ff       	call   f0100d0e <cprintf>
f010228e:	83 c4 10             	add    $0x10,%esp
f0102291:	eb 46                	jmp    f01022d9 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102293:	e8 c4 ec ff ff       	call   f0100f5c <isUHeapPlacementStrategyNEXTFIT>
f0102298:	84 c0                	test   %al,%al
f010229a:	74 12                	je     f01022ae <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010229c:	83 ec 0c             	sub    $0xc,%esp
f010229f:	68 30 54 13 f0       	push   $0xf0135430
f01022a4:	e8 65 ea ff ff       	call   f0100d0e <cprintf>
f01022a9:	83 c4 10             	add    $0x10,%esp
f01022ac:	eb 2b                	jmp    f01022d9 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01022ae:	e8 be ec ff ff       	call   f0100f71 <isUHeapPlacementStrategyWORSTFIT>
f01022b3:	84 c0                	test   %al,%al
f01022b5:	74 12                	je     f01022c9 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01022b7:	83 ec 0c             	sub    $0xc,%esp
f01022ba:	68 5c 54 13 f0       	push   $0xf013545c
f01022bf:	e8 4a ea ff ff       	call   f0100d0e <cprintf>
f01022c4:	83 c4 10             	add    $0x10,%esp
f01022c7:	eb 10                	jmp    f01022d9 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01022c9:	83 ec 0c             	sub    $0xc,%esp
f01022cc:	68 88 54 13 f0       	push   $0xf0135488
f01022d1:	e8 38 ea ff ff       	call   f0100d0e <cprintf>
f01022d6:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022de:	c9                   	leave  
f01022df:	c3                   	ret    

f01022e0 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01022e0:	55                   	push   %ebp
f01022e1:	89 e5                	mov    %esp,%ebp
f01022e3:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01022e6:	e8 4f eb ff ff       	call   f0100e3a <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01022eb:	83 ec 0c             	sub    $0xc,%esp
f01022ee:	68 b4 54 13 f0       	push   $0xf01354b4
f01022f3:	e8 16 ea ff ff       	call   f0100d0e <cprintf>
f01022f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102300:	c9                   	leave  
f0102301:	c3                   	ret    

f0102302 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102302:	55                   	push   %ebp
f0102303:	89 e5                	mov    %esp,%ebp
f0102305:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102308:	e8 3d eb ff ff       	call   f0100e4a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010230d:	83 ec 0c             	sub    $0xc,%esp
f0102310:	68 b4 54 13 f0       	push   $0xf01354b4
f0102315:	e8 f4 e9 ff ff       	call   f0100d0e <cprintf>
f010231a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010231d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102322:	c9                   	leave  
f0102323:	c3                   	ret    

f0102324 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102324:	55                   	push   %ebp
f0102325:	89 e5                	mov    %esp,%ebp
f0102327:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010232a:	e8 2b eb ff ff       	call   f0100e5a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010232f:	83 ec 0c             	sub    $0xc,%esp
f0102332:	68 e8 54 13 f0       	push   $0xf01354e8
f0102337:	e8 d2 e9 ff ff       	call   f0100d0e <cprintf>
f010233c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010233f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102344:	c9                   	leave  
f0102345:	c3                   	ret    

f0102346 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102346:	55                   	push   %ebp
f0102347:	89 e5                	mov    %esp,%ebp
f0102349:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010234c:	e8 19 eb ff ff       	call   f0100e6a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102351:	83 ec 0c             	sub    $0xc,%esp
f0102354:	68 18 55 13 f0       	push   $0xf0135518
f0102359:	e8 b0 e9 ff ff       	call   f0100d0e <cprintf>
f010235e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102361:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102366:	c9                   	leave  
f0102367:	c3                   	ret    

f0102368 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102368:	55                   	push   %ebp
f0102369:	89 e5                	mov    %esp,%ebp
f010236b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010236e:	e8 07 eb ff ff       	call   f0100e7a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102373:	83 ec 0c             	sub    $0xc,%esp
f0102376:	68 48 55 13 f0       	push   $0xf0135548
f010237b:	e8 8e e9 ff ff       	call   f0100d0e <cprintf>
f0102380:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102383:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102388:	c9                   	leave  
f0102389:	c3                   	ret    

f010238a <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010238a:	55                   	push   %ebp
f010238b:	89 e5                	mov    %esp,%ebp
f010238d:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102390:	e8 f5 ea ff ff       	call   f0100e8a <isKHeapPlacementStrategyCONTALLOC>
f0102395:	84 c0                	test   %al,%al
f0102397:	74 12                	je     f01023ab <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102399:	83 ec 0c             	sub    $0xc,%esp
f010239c:	68 7c 55 13 f0       	push   $0xf013557c
f01023a1:	e8 68 e9 ff ff       	call   f0100d0e <cprintf>
f01023a6:	83 c4 10             	add    $0x10,%esp
f01023a9:	eb 7c                	jmp    f0102427 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01023ab:	e8 ee ea ff ff       	call   f0100e9e <isKHeapPlacementStrategyFIRSTFIT>
f01023b0:	84 c0                	test   %al,%al
f01023b2:	74 12                	je     f01023c6 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01023b4:	83 ec 0c             	sub    $0xc,%esp
f01023b7:	68 b8 55 13 f0       	push   $0xf01355b8
f01023bc:	e8 4d e9 ff ff       	call   f0100d0e <cprintf>
f01023c1:	83 c4 10             	add    $0x10,%esp
f01023c4:	eb 61                	jmp    f0102427 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023c6:	e8 e8 ea ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f01023cb:	84 c0                	test   %al,%al
f01023cd:	74 12                	je     f01023e1 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01023cf:	83 ec 0c             	sub    $0xc,%esp
f01023d2:	68 e8 55 13 f0       	push   $0xf01355e8
f01023d7:	e8 32 e9 ff ff       	call   f0100d0e <cprintf>
f01023dc:	83 c4 10             	add    $0x10,%esp
f01023df:	eb 46                	jmp    f0102427 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01023e1:	e8 e2 ea ff ff       	call   f0100ec8 <isKHeapPlacementStrategyNEXTFIT>
f01023e6:	84 c0                	test   %al,%al
f01023e8:	74 12                	je     f01023fc <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01023ea:	83 ec 0c             	sub    $0xc,%esp
f01023ed:	68 14 56 13 f0       	push   $0xf0135614
f01023f2:	e8 17 e9 ff ff       	call   f0100d0e <cprintf>
f01023f7:	83 c4 10             	add    $0x10,%esp
f01023fa:	eb 2b                	jmp    f0102427 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01023fc:	e8 dc ea ff ff       	call   f0100edd <isKHeapPlacementStrategyWORSTFIT>
f0102401:	84 c0                	test   %al,%al
f0102403:	74 12                	je     f0102417 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0102405:	83 ec 0c             	sub    $0xc,%esp
f0102408:	68 40 56 13 f0       	push   $0xf0135640
f010240d:	e8 fc e8 ff ff       	call   f0100d0e <cprintf>
f0102412:	83 c4 10             	add    $0x10,%esp
f0102415:	eb 10                	jmp    f0102427 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102417:	83 ec 0c             	sub    $0xc,%esp
f010241a:	68 70 56 13 f0       	push   $0xf0135670
f010241f:	e8 ea e8 ff ff       	call   f0100d0e <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102427:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010242c:	c9                   	leave  
f010242d:	c3                   	ret    

f010242e <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f010242e:	55                   	push   %ebp
f010242f:	89 e5                	mov    %esp,%ebp
f0102431:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102434:	e8 89 be 00 00       	call   f010e2c2 <isBufferingEnabled>
f0102439:	84 c0                	test   %al,%al
f010243b:	75 12                	jne    f010244f <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010243d:	83 ec 0c             	sub    $0xc,%esp
f0102440:	68 a0 56 13 f0       	push   $0xf01356a0
f0102445:	e8 c4 e8 ff ff       	call   f0100d0e <cprintf>
f010244a:	83 c4 10             	add    $0x10,%esp
f010244d:	eb 1d                	jmp    f010246c <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f010244f:	83 ec 0c             	sub    $0xc,%esp
f0102452:	6a 00                	push   $0x0
f0102454:	e8 43 be 00 00       	call   f010e29c <enableModifiedBuffer>
f0102459:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010245c:	83 ec 0c             	sub    $0xc,%esp
f010245f:	68 dc 56 13 f0       	push   $0xf01356dc
f0102464:	e8 a5 e8 ff ff       	call   f0100d0e <cprintf>
f0102469:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010246c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102471:	c9                   	leave  
f0102472:	c3                   	ret    

f0102473 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102473:	55                   	push   %ebp
f0102474:	89 e5                	mov    %esp,%ebp
f0102476:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102479:	e8 44 be 00 00       	call   f010e2c2 <isBufferingEnabled>
f010247e:	84 c0                	test   %al,%al
f0102480:	75 12                	jne    f0102494 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102482:	83 ec 0c             	sub    $0xc,%esp
f0102485:	68 a0 56 13 f0       	push   $0xf01356a0
f010248a:	e8 7f e8 ff ff       	call   f0100d0e <cprintf>
f010248f:	83 c4 10             	add    $0x10,%esp
f0102492:	eb 1d                	jmp    f01024b1 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102494:	83 ec 0c             	sub    $0xc,%esp
f0102497:	6a 01                	push   $0x1
f0102499:	e8 fe bd 00 00       	call   f010e29c <enableModifiedBuffer>
f010249e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01024a1:	83 ec 0c             	sub    $0xc,%esp
f01024a4:	68 00 57 13 f0       	push   $0xf0135700
f01024a9:	e8 60 e8 ff ff       	call   f0100d0e <cprintf>
f01024ae:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024b6:	c9                   	leave  
f01024b7:	c3                   	ret    

f01024b8 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01024b8:	55                   	push   %ebp
f01024b9:	89 e5                	mov    %esp,%ebp
f01024bb:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01024be:	83 ec 0c             	sub    $0xc,%esp
f01024c1:	6a 00                	push   $0x0
f01024c3:	e8 ec bd 00 00       	call   f010e2b4 <enableBuffering>
f01024c8:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01024cb:	83 ec 0c             	sub    $0xc,%esp
f01024ce:	6a 00                	push   $0x0
f01024d0:	e8 c7 bd 00 00       	call   f010e29c <enableModifiedBuffer>
f01024d5:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01024d8:	83 ec 0c             	sub    $0xc,%esp
f01024db:	68 20 57 13 f0       	push   $0xf0135720
f01024e0:	e8 29 e8 ff ff       	call   f0100d0e <cprintf>
f01024e5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024ed:	c9                   	leave  
f01024ee:	c3                   	ret    

f01024ef <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01024ef:	55                   	push   %ebp
f01024f0:	89 e5                	mov    %esp,%ebp
f01024f2:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01024f5:	83 ec 0c             	sub    $0xc,%esp
f01024f8:	6a 01                	push   $0x1
f01024fa:	e8 b5 bd 00 00       	call   f010e2b4 <enableBuffering>
f01024ff:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102502:	83 ec 0c             	sub    $0xc,%esp
f0102505:	6a 01                	push   $0x1
f0102507:	e8 90 bd 00 00       	call   f010e29c <enableModifiedBuffer>
f010250c:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010250f:	e8 c6 bd 00 00       	call   f010e2da <getModifiedBufferLength>
f0102514:	85 c0                	test   %eax,%eax
f0102516:	75 59                	jne    f0102571 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102518:	83 ec 0c             	sub    $0xc,%esp
f010251b:	68 3c 57 13 f0       	push   $0xf013573c
f0102520:	e8 e9 e7 ff ff       	call   f0100d0e <cprintf>
f0102525:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102528:	83 ec 08             	sub    $0x8,%esp
f010252b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010252e:	50                   	push   %eax
f010252f:	68 6c 57 13 f0       	push   $0xf013576c
f0102534:	e8 96 f2 02 00       	call   f01317cf <readline>
f0102539:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010253c:	83 ec 04             	sub    $0x4,%esp
f010253f:	6a 0a                	push   $0xa
f0102541:	6a 00                	push   $0x0
f0102543:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102546:	50                   	push   %eax
f0102547:	e8 e9 f7 02 00       	call   f0131d35 <strtol>
f010254c:	83 c4 10             	add    $0x10,%esp
f010254f:	83 ec 0c             	sub    $0xc,%esp
f0102552:	50                   	push   %eax
f0102553:	e8 74 bd 00 00       	call   f010e2cc <setModifiedBufferLength>
f0102558:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010255b:	e8 7a bd 00 00       	call   f010e2da <getModifiedBufferLength>
f0102560:	83 ec 08             	sub    $0x8,%esp
f0102563:	50                   	push   %eax
f0102564:	68 98 57 13 f0       	push   $0xf0135798
f0102569:	e8 a0 e7 ff ff       	call   f0100d0e <cprintf>
f010256e:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102571:	83 ec 0c             	sub    $0xc,%esp
f0102574:	68 bd 57 13 f0       	push   $0xf01357bd
f0102579:	e8 90 e7 ff ff       	call   f0100d0e <cprintf>
f010257e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102581:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102586:	c9                   	leave  
f0102587:	c3                   	ret    

f0102588 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102588:	55                   	push   %ebp
f0102589:	89 e5                	mov    %esp,%ebp
f010258b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010258e:	e8 2f bd 00 00       	call   f010e2c2 <isBufferingEnabled>
f0102593:	84 c0                	test   %al,%al
f0102595:	75 12                	jne    f01025a9 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102597:	83 ec 0c             	sub    $0xc,%esp
f010259a:	68 d8 57 13 f0       	push   $0xf01357d8
f010259f:	e8 6a e7 ff ff       	call   f0100d0e <cprintf>
f01025a4:	83 c4 10             	add    $0x10,%esp
f01025a7:	eb 19                	jmp    f01025c2 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01025a9:	e8 fc bc 00 00       	call   f010e2aa <isModifiedBufferEnabled>
f01025ae:	84 c0                	test   %al,%al
f01025b0:	75 10                	jne    f01025c2 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01025b2:	83 ec 0c             	sub    $0xc,%esp
f01025b5:	68 28 58 13 f0       	push   $0xf0135828
f01025ba:	e8 4f e7 ff ff       	call   f0100d0e <cprintf>
f01025bf:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01025c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025c5:	83 c0 04             	add    $0x4,%eax
f01025c8:	8b 00                	mov    (%eax),%eax
f01025ca:	83 ec 04             	sub    $0x4,%esp
f01025cd:	6a 0a                	push   $0xa
f01025cf:	6a 00                	push   $0x0
f01025d1:	50                   	push   %eax
f01025d2:	e8 5e f7 02 00       	call   f0131d35 <strtol>
f01025d7:	83 c4 10             	add    $0x10,%esp
f01025da:	83 ec 0c             	sub    $0xc,%esp
f01025dd:	50                   	push   %eax
f01025de:	e8 e9 bc 00 00       	call   f010e2cc <setModifiedBufferLength>
f01025e3:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025e6:	e8 ef bc 00 00       	call   f010e2da <getModifiedBufferLength>
f01025eb:	83 ec 08             	sub    $0x8,%esp
f01025ee:	50                   	push   %eax
f01025ef:	68 98 57 13 f0       	push   $0xf0135798
f01025f4:	e8 15 e7 ff ff       	call   f0100d0e <cprintf>
f01025f9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102601:	c9                   	leave  
f0102602:	c3                   	ret    

f0102603 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102603:	55                   	push   %ebp
f0102604:	89 e5                	mov    %esp,%ebp
f0102606:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102609:	e8 b4 bc 00 00       	call   f010e2c2 <isBufferingEnabled>
f010260e:	84 c0                	test   %al,%al
f0102610:	75 12                	jne    f0102624 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 d8 57 13 f0       	push   $0xf01357d8
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
f0102622:	eb 19                	jmp    f010263d <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102624:	e8 81 bc 00 00       	call   f010e2aa <isModifiedBufferEnabled>
f0102629:	84 c0                	test   %al,%al
f010262b:	75 10                	jne    f010263d <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010262d:	83 ec 0c             	sub    $0xc,%esp
f0102630:	68 28 58 13 f0       	push   $0xf0135828
f0102635:	e8 d4 e6 ff ff       	call   f0100d0e <cprintf>
f010263a:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f010263d:	e8 98 bc 00 00       	call   f010e2da <getModifiedBufferLength>
f0102642:	83 ec 08             	sub    $0x8,%esp
f0102645:	50                   	push   %eax
f0102646:	68 6e 58 13 f0       	push   $0xf013586e
f010264b:	e8 be e6 ff ff       	call   f0100d0e <cprintf>
f0102650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102658:	c9                   	leave  
f0102659:	c3                   	ret    

f010265a <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010265a:	55                   	push   %ebp
f010265b:	89 e5                	mov    %esp,%ebp
f010265d:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102660:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102667:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010266b:	75 1b                	jne    f0102688 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010266d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102670:	83 c0 04             	add    $0x4,%eax
f0102673:	8b 00                	mov    (%eax),%eax
f0102675:	83 ec 04             	sub    $0x4,%esp
f0102678:	6a 0a                	push   $0xa
f010267a:	6a 00                	push   $0x0
f010267c:	50                   	push   %eax
f010267d:	e8 b3 f6 02 00       	call   f0131d35 <strtol>
f0102682:	83 c4 10             	add    $0x10,%esp
f0102685:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102688:	e8 fd e7 ff ff       	call   f0100e8a <isKHeapPlacementStrategyCONTALLOC>
f010268d:	84 c0                	test   %al,%al
f010268f:	74 0a                	je     f010269b <command_test_kmalloc+0x41>
		test_kmalloc();
f0102691:	e8 2e 58 01 00       	call   f0117ec4 <test_kmalloc>
f0102696:	e9 e8 00 00 00       	jmp    f0102783 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010269b:	e8 fe e7 ff ff       	call   f0100e9e <isKHeapPlacementStrategyFIRSTFIT>
f01026a0:	84 c0                	test   %al,%al
f01026a2:	74 44                	je     f01026e8 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01026a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026a8:	75 1a                	jne    f01026c4 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01026aa:	83 ec 0c             	sub    $0xc,%esp
f01026ad:	68 8c 58 13 f0       	push   $0xf013588c
f01026b2:	e8 57 e6 ff ff       	call   f0100d0e <cprintf>
f01026b7:	83 c4 10             	add    $0x10,%esp
			return 0;
f01026ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01026bf:	e9 c4 00 00 00       	jmp    f0102788 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01026c4:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026c8:	75 0a                	jne    f01026d4 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01026ca:	e8 7e a6 01 00       	call   f011cd4d <test_kmalloc_firstfit1>
f01026cf:	e9 af 00 00 00       	jmp    f0102783 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01026d4:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01026d8:	0f 85 a5 00 00 00    	jne    f0102783 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01026de:	e8 0c ba 01 00       	call   f011e0ef <test_kmalloc_firstfit2>
f01026e3:	e9 9b 00 00 00       	jmp    f0102783 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01026e8:	e8 c6 e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f01026ed:	84 c0                	test   %al,%al
f01026ef:	74 44                	je     f0102735 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01026f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026f5:	75 17                	jne    f010270e <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f01026f7:	83 ec 0c             	sub    $0xc,%esp
f01026fa:	68 dc 58 13 f0       	push   $0xf01358dc
f01026ff:	e8 0a e6 ff ff       	call   f0100d0e <cprintf>
f0102704:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102707:	b8 00 00 00 00       	mov    $0x0,%eax
f010270c:	eb 7a                	jmp    f0102788 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f010270e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102712:	75 07                	jne    f010271b <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102714:	e8 ab 57 01 00       	call   f0117ec4 <test_kmalloc>
f0102719:	eb 68                	jmp    f0102783 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f010271b:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010271f:	75 07                	jne    f0102728 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102721:	e8 f1 80 01 00       	call   f011a817 <test_kmalloc_bestfit1>
f0102726:	eb 5b                	jmp    f0102783 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102728:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010272c:	75 55                	jne    f0102783 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f010272e:	e8 3a 93 01 00       	call   f011ba6d <test_kmalloc_bestfit2>
f0102733:	eb 4e                	jmp    f0102783 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102735:	e8 8e e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyNEXTFIT>
f010273a:	84 c0                	test   %al,%al
f010273c:	74 37                	je     f0102775 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f010273e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102742:	75 17                	jne    f010275b <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102744:	83 ec 0c             	sub    $0xc,%esp
f0102747:	68 2c 59 13 f0       	push   $0xf013592c
f010274c:	e8 bd e5 ff ff       	call   f0100d0e <cprintf>
f0102751:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102754:	b8 00 00 00 00       	mov    $0x0,%eax
f0102759:	eb 2d                	jmp    f0102788 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f010275b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010275f:	75 07                	jne    f0102768 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102761:	e8 5e 57 01 00       	call   f0117ec4 <test_kmalloc>
f0102766:	eb 1b                	jmp    f0102783 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102768:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010276c:	75 15                	jne    f0102783 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010276e:	e8 af 69 01 00       	call   f0119122 <test_kmalloc_nextfit>
f0102773:	eb 0e                	jmp    f0102783 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102775:	e8 63 e7 ff ff       	call   f0100edd <isKHeapPlacementStrategyWORSTFIT>
f010277a:	84 c0                	test   %al,%al
f010277c:	74 05                	je     f0102783 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010277e:	e8 01 c8 01 00       	call   f011ef84 <test_kmalloc_worstfit>
	return 0;
f0102783:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102788:	c9                   	leave  
f0102789:	c3                   	ret    

f010278a <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010278a:	55                   	push   %ebp
f010278b:	89 e5                	mov    %esp,%ebp
f010278d:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102790:	e8 1e e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f0102795:	84 c0                	test   %al,%al
f0102797:	75 09                	jne    f01027a2 <command_test_kfree+0x18>
f0102799:	e8 00 e7 ff ff       	call   f0100e9e <isKHeapPlacementStrategyFIRSTFIT>
f010279e:	84 c0                	test   %al,%al
f01027a0:	74 07                	je     f01027a9 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01027a2:	e8 7f ff 01 00       	call   f0122726 <test_kfree_bestfirstfit>
f01027a7:	eb 05                	jmp    f01027ae <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01027a9:	e8 26 de 01 00       	call   f01205d4 <test_kfree>
	}
	return 0;
f01027ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027b3:	c9                   	leave  
f01027b4:	c3                   	ret    

f01027b5 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01027b5:	55                   	push   %ebp
f01027b6:	89 e5                	mov    %esp,%ebp
f01027b8:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01027bb:	e8 62 19 02 00       	call   f0124122 <test_kheap_phys_addr>
	return 0;
f01027c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027c5:	c9                   	leave  
f01027c6:	c3                   	ret    

f01027c7 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01027c7:	55                   	push   %ebp
f01027c8:	89 e5                	mov    %esp,%ebp
f01027ca:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01027cd:	e8 20 2e 02 00       	call   f01255f2 <test_kheap_virt_addr>
	return 0;
f01027d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027d7:	c9                   	leave  
f01027d8:	c3                   	ret    

f01027d9 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01027d9:	55                   	push   %ebp
f01027da:	89 e5                	mov    %esp,%ebp
f01027dc:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01027df:	e8 eb 42 02 00       	call   f0126acf <test_three_creation_functions>
	return 0;
f01027e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027e9:	c9                   	leave  
f01027ea:	c3                   	ret    

f01027eb <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01027eb:	55                   	push   %ebp
f01027ec:	89 e5                	mov    %esp,%ebp
f01027ee:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01027f1:	e8 d2 e6 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyNEXTFIT>
f01027f6:	84 c0                	test   %al,%al
f01027f8:	74 07                	je     f0102801 <command_test_krealloc+0x16>
		test_krealloc();
f01027fa:	e8 e7 9c 02 00       	call   f012c4e6 <test_krealloc>
f01027ff:	eb 0e                	jmp    f010280f <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102801:	e8 ad e6 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f0102806:	84 c0                	test   %al,%al
f0102808:	74 05                	je     f010280f <command_test_krealloc+0x24>
		test_krealloc_BF();
f010280a:	e8 87 bc 02 00       	call   f012e496 <test_krealloc_BF>
	return 0;
f010280f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102814:	c9                   	leave  
f0102815:	c3                   	ret    

f0102816 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102816:	55                   	push   %ebp
f0102817:	89 e5                	mov    %esp,%ebp
f0102819:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010281c:	e8 b8 42 01 00       	call   f0116ad9 <test_priority_normal_and_higher>
	return 0;
f0102821:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102826:	c9                   	leave  
f0102827:	c3                   	ret    

f0102828 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102828:	55                   	push   %ebp
f0102829:	89 e5                	mov    %esp,%ebp
f010282b:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010282e:	e8 8c 4c 01 00       	call   f01174bf <test_priority_normal_and_lower>
	return 0;
f0102833:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102838:	c9                   	leave  
f0102839:	c3                   	ret    

f010283a <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010283a:	55                   	push   %ebp
f010283b:	89 e5                	mov    %esp,%ebp
f010283d:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102840:	e8 c4 44 02 00       	call   f0126d09 <test_kfreeall>
	return 0;
f0102845:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284a:	c9                   	leave  
f010284b:	c3                   	ret    

f010284c <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f010284c:	55                   	push   %ebp
f010284d:	89 e5                	mov    %esp,%ebp
f010284f:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102852:	e8 9e 5b 02 00       	call   f01283f5 <test_kexpand>
	return 0;
f0102857:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285c:	c9                   	leave  
f010285d:	c3                   	ret    

f010285e <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f010285e:	55                   	push   %ebp
f010285f:	89 e5                	mov    %esp,%ebp
f0102861:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102864:	e8 0d 69 02 00       	call   f0129176 <test_kshrink>
	return 0;
f0102869:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010286e:	c9                   	leave  
f010286f:	c3                   	ret    

f0102870 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102870:	55                   	push   %ebp
f0102871:	89 e5                	mov    %esp,%ebp
f0102873:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102876:	e8 e8 77 02 00       	call   f012a063 <test_kfreelast>
	return 0;
f010287b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102880:	c9                   	leave  
f0102881:	c3                   	ret    

f0102882 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102882:	55                   	push   %ebp
f0102883:	89 e5                	mov    %esp,%ebp
f0102885:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102888:	8b 45 0c             	mov    0xc(%ebp),%eax
f010288b:	83 c0 04             	add    $0x4,%eax
f010288e:	8b 00                	mov    (%eax),%eax
f0102890:	83 ec 04             	sub    $0x4,%esp
f0102893:	6a 0a                	push   $0xa
f0102895:	6a 00                	push   $0x0
f0102897:	50                   	push   %eax
f0102898:	e8 98 f4 02 00       	call   f0131d35 <strtol>
f010289d:	83 c4 10             	add    $0x10,%esp
f01028a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01028a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01028aa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028b1:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f01028b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028b9:	eb 3d                	jmp    f01028f8 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01028bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028be:	05 5c 05 00 00       	add    $0x55c,%eax
f01028c3:	83 ec 08             	sub    $0x8,%esp
f01028c6:	68 7a 59 13 f0       	push   $0xf013597a
f01028cb:	50                   	push   %eax
f01028cc:	e8 10 f2 02 00       	call   f0131ae1 <strcmp>
f01028d1:	83 c4 10             	add    $0x10,%esp
f01028d4:	85 c0                	test   %eax,%eax
f01028d6:	75 12                	jne    f01028ea <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01028d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028dc:	74 07                	je     f01028e5 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01028de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01028e5:	ff 45 f4             	incl   -0xc(%ebp)
f01028e8:	eb 06                	jmp    f01028f0 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01028ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028ee:	74 31                	je     f0102921 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028f0:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f01028f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01028fc:	74 08                	je     f0102906 <command_test_sc_MLFQ+0x84>
f01028fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102901:	8b 40 44             	mov    0x44(%eax),%eax
f0102904:	eb 05                	jmp    f010290b <command_test_sc_MLFQ+0x89>
f0102906:	b8 00 00 00 00       	mov    $0x0,%eax
f010290b:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f0102910:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0102915:	85 c0                	test   %eax,%eax
f0102917:	75 a2                	jne    f01028bb <command_test_sc_MLFQ+0x39>
f0102919:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010291d:	75 9c                	jne    f01028bb <command_test_sc_MLFQ+0x39>
f010291f:	eb 01                	jmp    f0102922 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102921:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102922:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102925:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102928:	75 12                	jne    f010293c <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010292a:	83 ec 0c             	sub    $0xc,%esp
f010292d:	68 84 59 13 f0       	push   $0xf0135984
f0102932:	e8 d7 e3 ff ff       	call   f0100d0e <cprintf>
f0102937:	83 c4 10             	add    $0x10,%esp
f010293a:	eb 17                	jmp    f0102953 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010293c:	83 ec 04             	sub    $0x4,%esp
f010293f:	68 bd 59 13 f0       	push   $0xf01359bd
f0102944:	68 8b 04 00 00       	push   $0x48b
f0102949:	68 09 4a 13 f0       	push   $0xf0134a09
f010294e:	e8 b2 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f0102953:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102958:	c9                   	leave  
f0102959:	c3                   	ret    

f010295a <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010295a:	55                   	push   %ebp
f010295b:	89 e5                	mov    %esp,%ebp
f010295d:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102960:	e8 70 ee 00 00       	call   f01117d5 <TestAutoCompleteCommand>
f0102965:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010296d:	c9                   	leave  
f010296e:	c3                   	ret    

f010296f <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f010296f:	55                   	push   %ebp
f0102970:	89 e5                	mov    %esp,%ebp
f0102972:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102975:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102979:	74 1a                	je     f0102995 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f010297b:	83 ec 0c             	sub    $0xc,%esp
f010297e:	68 d4 59 13 f0       	push   $0xf01359d4
f0102983:	e8 86 e3 ff ff       	call   f0100d0e <cprintf>
f0102988:	83 c4 10             	add    $0x10,%esp
		return 0;
f010298b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102990:	e9 82 01 00 00       	jmp    f0102b17 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102995:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102998:	83 c0 04             	add    $0x4,%eax
f010299b:	8b 00                	mov    (%eax),%eax
f010299d:	83 ec 08             	sub    $0x8,%esp
f01029a0:	68 0c 5a 13 f0       	push   $0xf0135a0c
f01029a5:	50                   	push   %eax
f01029a6:	e8 36 f1 02 00       	call   f0131ae1 <strcmp>
f01029ab:	83 c4 10             	add    $0x10,%esp
f01029ae:	85 c0                	test   %eax,%eax
f01029b0:	75 0a                	jne    f01029bc <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01029b2:	e8 c8 c3 00 00       	call   f010ed7f <test_initialize_MemBlocksList>
f01029b7:	e9 56 01 00 00       	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01029bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029bf:	83 c0 04             	add    $0x4,%eax
f01029c2:	8b 00                	mov    (%eax),%eax
f01029c4:	83 ec 08             	sub    $0x8,%esp
f01029c7:	68 11 5a 13 f0       	push   $0xf0135a11
f01029cc:	50                   	push   %eax
f01029cd:	e8 0f f1 02 00       	call   f0131ae1 <strcmp>
f01029d2:	83 c4 10             	add    $0x10,%esp
f01029d5:	85 c0                	test   %eax,%eax
f01029d7:	75 0a                	jne    f01029e3 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01029d9:	e8 b5 c4 00 00       	call   f010ee93 <test_insert_sorted_allocList>
f01029de:	e9 2f 01 00 00       	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01029e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e6:	83 c0 04             	add    $0x4,%eax
f01029e9:	8b 00                	mov    (%eax),%eax
f01029eb:	83 ec 08             	sub    $0x8,%esp
f01029ee:	68 17 5a 13 f0       	push   $0xf0135a17
f01029f3:	50                   	push   %eax
f01029f4:	e8 e8 f0 02 00       	call   f0131ae1 <strcmp>
f01029f9:	83 c4 10             	add    $0x10,%esp
f01029fc:	85 c0                	test   %eax,%eax
f01029fe:	75 0a                	jne    f0102a0a <command_test_lists+0x9b>
	{
		test_find_block();
f0102a00:	e8 4c c9 00 00       	call   f010f351 <test_find_block>
f0102a05:	e9 08 01 00 00       	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a0d:	83 c0 04             	add    $0x4,%eax
f0102a10:	8b 00                	mov    (%eax),%eax
f0102a12:	83 ec 08             	sub    $0x8,%esp
f0102a15:	68 1c 5a 13 f0       	push   $0xf0135a1c
f0102a1a:	50                   	push   %eax
f0102a1b:	e8 c1 f0 02 00       	call   f0131ae1 <strcmp>
f0102a20:	83 c4 10             	add    $0x10,%esp
f0102a23:	85 c0                	test   %eax,%eax
f0102a25:	74 1d                	je     f0102a44 <command_test_lists+0xd5>
f0102a27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a2a:	83 c0 04             	add    $0x4,%eax
f0102a2d:	8b 00                	mov    (%eax),%eax
f0102a2f:	83 ec 08             	sub    $0x8,%esp
f0102a32:	68 1f 5a 13 f0       	push   $0xf0135a1f
f0102a37:	50                   	push   %eax
f0102a38:	e8 a4 f0 02 00       	call   f0131ae1 <strcmp>
f0102a3d:	83 c4 10             	add    $0x10,%esp
f0102a40:	85 c0                	test   %eax,%eax
f0102a42:	75 0a                	jne    f0102a4e <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102a44:	e8 63 cc 00 00       	call   f010f6ac <test_alloc_block_FF>
f0102a49:	e9 c4 00 00 00       	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a51:	83 c0 04             	add    $0x4,%eax
f0102a54:	8b 00                	mov    (%eax),%eax
f0102a56:	83 ec 08             	sub    $0x8,%esp
f0102a59:	68 22 5a 13 f0       	push   $0xf0135a22
f0102a5e:	50                   	push   %eax
f0102a5f:	e8 7d f0 02 00       	call   f0131ae1 <strcmp>
f0102a64:	83 c4 10             	add    $0x10,%esp
f0102a67:	85 c0                	test   %eax,%eax
f0102a69:	74 1d                	je     f0102a88 <command_test_lists+0x119>
f0102a6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a6e:	83 c0 04             	add    $0x4,%eax
f0102a71:	8b 00                	mov    (%eax),%eax
f0102a73:	83 ec 08             	sub    $0x8,%esp
f0102a76:	68 25 5a 13 f0       	push   $0xf0135a25
f0102a7b:	50                   	push   %eax
f0102a7c:	e8 60 f0 02 00       	call   f0131ae1 <strcmp>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	85 c0                	test   %eax,%eax
f0102a86:	75 0a                	jne    f0102a92 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102a88:	e8 9d d0 00 00       	call   f010fb2a <test_alloc_block_BF>
f0102a8d:	e9 80 00 00 00       	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a95:	83 c0 04             	add    $0x4,%eax
f0102a98:	8b 00                	mov    (%eax),%eax
f0102a9a:	83 ec 08             	sub    $0x8,%esp
f0102a9d:	68 28 5a 13 f0       	push   $0xf0135a28
f0102aa2:	50                   	push   %eax
f0102aa3:	e8 39 f0 02 00       	call   f0131ae1 <strcmp>
f0102aa8:	83 c4 10             	add    $0x10,%esp
f0102aab:	85 c0                	test   %eax,%eax
f0102aad:	74 1d                	je     f0102acc <command_test_lists+0x15d>
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 08             	sub    $0x8,%esp
f0102aba:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0102abf:	50                   	push   %eax
f0102ac0:	e8 1c f0 02 00       	call   f0131ae1 <strcmp>
f0102ac5:	83 c4 10             	add    $0x10,%esp
f0102ac8:	85 c0                	test   %eax,%eax
f0102aca:	75 07                	jne    f0102ad3 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102acc:	e8 e0 d6 00 00       	call   f01101b1 <test_alloc_block_NF>
f0102ad1:	eb 3f                	jmp    f0102b12 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ad3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ad6:	83 c0 04             	add    $0x4,%eax
f0102ad9:	8b 00                	mov    (%eax),%eax
f0102adb:	83 ec 08             	sub    $0x8,%esp
f0102ade:	68 2e 5a 13 f0       	push   $0xf0135a2e
f0102ae3:	50                   	push   %eax
f0102ae4:	e8 f8 ef 02 00       	call   f0131ae1 <strcmp>
f0102ae9:	83 c4 10             	add    $0x10,%esp
f0102aec:	85 c0                	test   %eax,%eax
f0102aee:	74 1d                	je     f0102b0d <command_test_lists+0x19e>
f0102af0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af3:	83 c0 04             	add    $0x4,%eax
f0102af6:	8b 00                	mov    (%eax),%eax
f0102af8:	83 ec 08             	sub    $0x8,%esp
f0102afb:	68 34 5a 13 f0       	push   $0xf0135a34
f0102b00:	50                   	push   %eax
f0102b01:	e8 db ef 02 00       	call   f0131ae1 <strcmp>
f0102b06:	83 c4 10             	add    $0x10,%esp
f0102b09:	85 c0                	test   %eax,%eax
f0102b0b:	75 05                	jne    f0102b12 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b0d:	e8 2d df 00 00       	call   f0110a3f <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b17:	c9                   	leave  
f0102b18:	c3                   	ret    

f0102b19 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b19:	55                   	push   %ebp
f0102b1a:	89 e5                	mov    %esp,%ebp
f0102b1c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b1f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b23:	74 1a                	je     f0102b3f <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0102b2d:	e8 dc e1 ff ff       	call   f0100d0e <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 e1 00 00 00       	jmp    f0102c20 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b42:	83 c0 04             	add    $0x4,%eax
f0102b45:	8b 00                	mov    (%eax),%eax
f0102b47:	83 ec 08             	sub    $0x8,%esp
f0102b4a:	68 75 5a 13 f0       	push   $0xf0135a75
f0102b4f:	50                   	push   %eax
f0102b50:	e8 8c ef 02 00       	call   f0131ae1 <strcmp>
f0102b55:	83 c4 10             	add    $0x10,%esp
f0102b58:	85 c0                	test   %eax,%eax
f0102b5a:	75 0a                	jne    f0102b66 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102b5c:	e8 08 f7 00 00       	call   f0112269 <test_cut_paste_pages>
f0102b61:	e9 b5 00 00 00       	jmp    f0102c1b <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102b66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b69:	83 c0 04             	add    $0x4,%eax
f0102b6c:	8b 00                	mov    (%eax),%eax
f0102b6e:	83 ec 08             	sub    $0x8,%esp
f0102b71:	68 7e 5a 13 f0       	push   $0xf0135a7e
f0102b76:	50                   	push   %eax
f0102b77:	e8 65 ef 02 00       	call   f0131ae1 <strcmp>
f0102b7c:	83 c4 10             	add    $0x10,%esp
f0102b7f:	85 c0                	test   %eax,%eax
f0102b81:	75 0a                	jne    f0102b8d <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102b83:	e8 2c 01 01 00       	call   f0112cb4 <test_copy_paste_chunk>
f0102b88:	e9 8e 00 00 00       	jmp    f0102c1b <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b90:	83 c0 04             	add    $0x4,%eax
f0102b93:	8b 00                	mov    (%eax),%eax
f0102b95:	83 ec 08             	sub    $0x8,%esp
f0102b98:	68 88 5a 13 f0       	push   $0xf0135a88
f0102b9d:	50                   	push   %eax
f0102b9e:	e8 3e ef 02 00       	call   f0131ae1 <strcmp>
f0102ba3:	83 c4 10             	add    $0x10,%esp
f0102ba6:	85 c0                	test   %eax,%eax
f0102ba8:	75 07                	jne    f0102bb1 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102baa:	e8 03 12 01 00       	call   f0113db2 <test_share_chunk>
f0102baf:	eb 6a                	jmp    f0102c1b <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102bb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb4:	83 c0 04             	add    $0x4,%eax
f0102bb7:	8b 00                	mov    (%eax),%eax
f0102bb9:	83 ec 08             	sub    $0x8,%esp
f0102bbc:	68 8e 5a 13 f0       	push   $0xf0135a8e
f0102bc1:	50                   	push   %eax
f0102bc2:	e8 1a ef 02 00       	call   f0131ae1 <strcmp>
f0102bc7:	83 c4 10             	add    $0x10,%esp
f0102bca:	85 c0                	test   %eax,%eax
f0102bcc:	75 07                	jne    f0102bd5 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102bce:	e8 07 1c 01 00       	call   f01147da <test_allocate_chunk>
f0102bd3:	eb 46                	jmp    f0102c1b <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd8:	83 c0 04             	add    $0x4,%eax
f0102bdb:	8b 00                	mov    (%eax),%eax
f0102bdd:	83 ec 08             	sub    $0x8,%esp
f0102be0:	68 97 5a 13 f0       	push   $0xf0135a97
f0102be5:	50                   	push   %eax
f0102be6:	e8 f6 ee 02 00       	call   f0131ae1 <strcmp>
f0102beb:	83 c4 10             	add    $0x10,%esp
f0102bee:	85 c0                	test   %eax,%eax
f0102bf0:	75 07                	jne    f0102bf9 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102bf2:	e8 92 24 01 00       	call   f0115089 <test_calculate_required_frames>
f0102bf7:	eb 22                	jmp    f0102c1b <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfc:	83 c0 04             	add    $0x4,%eax
f0102bff:	8b 00                	mov    (%eax),%eax
f0102c01:	83 ec 08             	sub    $0x8,%esp
f0102c04:	68 a6 5a 13 f0       	push   $0xf0135aa6
f0102c09:	50                   	push   %eax
f0102c0a:	e8 d2 ee 02 00       	call   f0131ae1 <strcmp>
f0102c0f:	83 c4 10             	add    $0x10,%esp
f0102c12:	85 c0                	test   %eax,%eax
f0102c14:	75 05                	jne    f0102c1b <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c16:	e8 e2 2c 01 00       	call   f01158fd <test_calculate_allocated_space>
	}
	return 0;
f0102c1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c20:	c9                   	leave  
f0102c21:	c3                   	ret    

f0102c22 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102c22:	55                   	push   %ebp
f0102c23:	89 e5                	mov    %esp,%ebp
f0102c25:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102c28:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c2c:	74 1a                	je     f0102c48 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102c2e:	83 ec 0c             	sub    $0xc,%esp
f0102c31:	68 b8 5a 13 f0       	push   $0xf0135ab8
f0102c36:	e8 d3 e0 ff ff       	call   f0100d0e <cprintf>
f0102c3b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c43:	e9 e1 00 00 00       	jmp    f0102d29 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102c48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c4b:	83 c0 04             	add    $0x4,%eax
f0102c4e:	8b 00                	mov    (%eax),%eax
f0102c50:	83 ec 08             	sub    $0x8,%esp
f0102c53:	68 ee 5a 13 f0       	push   $0xf0135aee
f0102c58:	50                   	push   %eax
f0102c59:	e8 83 ee 02 00       	call   f0131ae1 <strcmp>
f0102c5e:	83 c4 10             	add    $0x10,%esp
f0102c61:	85 c0                	test   %eax,%eax
f0102c63:	75 0a                	jne    f0102c6f <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102c65:	e8 f0 ec 00 00       	call   f011195a <test_pt_set_page_permissions>
f0102c6a:	e9 b5 00 00 00       	jmp    f0102d24 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c72:	83 c0 04             	add    $0x4,%eax
f0102c75:	8b 00                	mov    (%eax),%eax
f0102c77:	83 ec 08             	sub    $0x8,%esp
f0102c7a:	68 f6 5a 13 f0       	push   $0xf0135af6
f0102c7f:	50                   	push   %eax
f0102c80:	e8 5c ee 02 00       	call   f0131ae1 <strcmp>
f0102c85:	83 c4 10             	add    $0x10,%esp
f0102c88:	85 c0                	test   %eax,%eax
f0102c8a:	75 0a                	jne    f0102c96 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102c8c:	e8 2c ef 00 00       	call   f0111bbd <test_pt_set_page_permissions_invalid_va>
f0102c91:	e9 8e 00 00 00       	jmp    f0102d24 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102c96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c99:	83 c0 04             	add    $0x4,%eax
f0102c9c:	8b 00                	mov    (%eax),%eax
f0102c9e:	83 ec 08             	sub    $0x8,%esp
f0102ca1:	68 fe 5a 13 f0       	push   $0xf0135afe
f0102ca6:	50                   	push   %eax
f0102ca7:	e8 35 ee 02 00       	call   f0131ae1 <strcmp>
f0102cac:	83 c4 10             	add    $0x10,%esp
f0102caf:	85 c0                	test   %eax,%eax
f0102cb1:	75 07                	jne    f0102cba <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102cb3:	e8 4e ef 00 00       	call   f0111c06 <test_pt_get_page_permissions>
f0102cb8:	eb 6a                	jmp    f0102d24 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102cba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cbd:	83 c0 04             	add    $0x4,%eax
f0102cc0:	8b 00                	mov    (%eax),%eax
f0102cc2:	83 ec 08             	sub    $0x8,%esp
f0102cc5:	68 06 5b 13 f0       	push   $0xf0135b06
f0102cca:	50                   	push   %eax
f0102ccb:	e8 11 ee 02 00       	call   f0131ae1 <strcmp>
f0102cd0:	83 c4 10             	add    $0x10,%esp
f0102cd3:	85 c0                	test   %eax,%eax
f0102cd5:	75 07                	jne    f0102cde <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102cd7:	e8 6e f0 00 00       	call   f0111d4a <test_pt_clear_page_table_entry>
f0102cdc:	eb 46                	jmp    f0102d24 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102cde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ce1:	83 c0 04             	add    $0x4,%eax
f0102ce4:	8b 00                	mov    (%eax),%eax
f0102ce6:	83 ec 08             	sub    $0x8,%esp
f0102ce9:	68 0d 5b 13 f0       	push   $0xf0135b0d
f0102cee:	50                   	push   %eax
f0102cef:	e8 ed ed 02 00       	call   f0131ae1 <strcmp>
f0102cf4:	83 c4 10             	add    $0x10,%esp
f0102cf7:	85 c0                	test   %eax,%eax
f0102cf9:	75 07                	jne    f0102d02 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102cfb:	e8 a3 f1 00 00       	call   f0111ea3 <test_pt_clear_page_table_entry_invalid_va>
f0102d00:	eb 22                	jmp    f0102d24 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d02:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d05:	83 c0 04             	add    $0x4,%eax
f0102d08:	8b 00                	mov    (%eax),%eax
f0102d0a:	83 ec 08             	sub    $0x8,%esp
f0102d0d:	68 14 5b 13 f0       	push   $0xf0135b14
f0102d12:	50                   	push   %eax
f0102d13:	e8 c9 ed 02 00       	call   f0131ae1 <strcmp>
f0102d18:	83 c4 10             	add    $0x10,%esp
f0102d1b:	85 c0                	test   %eax,%eax
f0102d1d:	75 05                	jne    f0102d24 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d1f:	e8 b7 f1 00 00       	call   f0111edb <test_virtual_to_physical>
	}
	return 0;
f0102d24:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d29:	c9                   	leave  
f0102d2a:	c3                   	ret    

f0102d2b <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102d2b:	55                   	push   %ebp
f0102d2c:	89 e5                	mov    %esp,%ebp
f0102d2e:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102d31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d34:	83 c0 08             	add    $0x8,%eax
f0102d37:	8b 00                	mov    (%eax),%eax
f0102d39:	83 ec 08             	sub    $0x8,%esp
f0102d3c:	68 18 5b 13 f0       	push   $0xf0135b18
f0102d41:	50                   	push   %eax
f0102d42:	e8 9a ed 02 00       	call   f0131ae1 <strcmp>
f0102d47:	83 c4 10             	add    $0x10,%esp
f0102d4a:	85 c0                	test   %eax,%eax
f0102d4c:	75 20                	jne    f0102d6e <command_test_kheap+0x43>
f0102d4e:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102d52:	74 1a                	je     f0102d6e <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102d54:	83 ec 0c             	sub    $0xc,%esp
f0102d57:	68 20 5b 13 f0       	push   $0xf0135b20
f0102d5c:	e8 ad df ff ff       	call   f0100d0e <cprintf>
f0102d61:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d64:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d69:	e9 33 03 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102d6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d71:	83 c0 08             	add    $0x8,%eax
f0102d74:	8b 00                	mov    (%eax),%eax
f0102d76:	83 ec 08             	sub    $0x8,%esp
f0102d79:	68 18 5b 13 f0       	push   $0xf0135b18
f0102d7e:	50                   	push   %eax
f0102d7f:	e8 5d ed 02 00       	call   f0131ae1 <strcmp>
f0102d84:	83 c4 10             	add    $0x10,%esp
f0102d87:	85 c0                	test   %eax,%eax
f0102d89:	74 20                	je     f0102dab <command_test_kheap+0x80>
f0102d8b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102d8f:	74 1a                	je     f0102dab <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102d91:	83 ec 0c             	sub    $0xc,%esp
f0102d94:	68 70 5b 13 f0       	push   $0xf0135b70
f0102d99:	e8 70 df ff ff       	call   f0100d0e <cprintf>
f0102d9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102da1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102da6:	e9 f6 02 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102dab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dae:	83 c0 04             	add    $0x4,%eax
f0102db1:	8b 00                	mov    (%eax),%eax
f0102db3:	83 ec 08             	sub    $0x8,%esp
f0102db6:	68 1c 5a 13 f0       	push   $0xf0135a1c
f0102dbb:	50                   	push   %eax
f0102dbc:	e8 20 ed 02 00       	call   f0131ae1 <strcmp>
f0102dc1:	83 c4 10             	add    $0x10,%esp
f0102dc4:	85 c0                	test   %eax,%eax
f0102dc6:	74 1d                	je     f0102de5 <command_test_kheap+0xba>
f0102dc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dcb:	83 c0 04             	add    $0x4,%eax
f0102dce:	8b 00                	mov    (%eax),%eax
f0102dd0:	83 ec 08             	sub    $0x8,%esp
f0102dd3:	68 1f 5a 13 f0       	push   $0xf0135a1f
f0102dd8:	50                   	push   %eax
f0102dd9:	e8 03 ed 02 00       	call   f0131ae1 <strcmp>
f0102dde:	83 c4 10             	add    $0x10,%esp
f0102de1:	85 c0                	test   %eax,%eax
f0102de3:	75 1a                	jne    f0102dff <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102de5:	e8 60 e0 ff ff       	call   f0100e4a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102dea:	83 ec 0c             	sub    $0xc,%esp
f0102ded:	68 b8 55 13 f0       	push   $0xf01355b8
f0102df2:	e8 17 df ff ff       	call   f0100d0e <cprintf>
f0102df7:	83 c4 10             	add    $0x10,%esp
f0102dfa:	e9 a0 00 00 00       	jmp    f0102e9f <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102dff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e02:	83 c0 04             	add    $0x4,%eax
f0102e05:	8b 00                	mov    (%eax),%eax
f0102e07:	83 ec 08             	sub    $0x8,%esp
f0102e0a:	68 22 5a 13 f0       	push   $0xf0135a22
f0102e0f:	50                   	push   %eax
f0102e10:	e8 cc ec 02 00       	call   f0131ae1 <strcmp>
f0102e15:	83 c4 10             	add    $0x10,%esp
f0102e18:	85 c0                	test   %eax,%eax
f0102e1a:	74 1d                	je     f0102e39 <command_test_kheap+0x10e>
f0102e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e1f:	83 c0 04             	add    $0x4,%eax
f0102e22:	8b 00                	mov    (%eax),%eax
f0102e24:	83 ec 08             	sub    $0x8,%esp
f0102e27:	68 25 5a 13 f0       	push   $0xf0135a25
f0102e2c:	50                   	push   %eax
f0102e2d:	e8 af ec 02 00       	call   f0131ae1 <strcmp>
f0102e32:	83 c4 10             	add    $0x10,%esp
f0102e35:	85 c0                	test   %eax,%eax
f0102e37:	75 17                	jne    f0102e50 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102e39:	e8 1c e0 ff ff       	call   f0100e5a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102e3e:	83 ec 0c             	sub    $0xc,%esp
f0102e41:	68 e8 55 13 f0       	push   $0xf01355e8
f0102e46:	e8 c3 de ff ff       	call   f0100d0e <cprintf>
f0102e4b:	83 c4 10             	add    $0x10,%esp
f0102e4e:	eb 4f                	jmp    f0102e9f <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102e50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e53:	83 c0 04             	add    $0x4,%eax
f0102e56:	8b 00                	mov    (%eax),%eax
f0102e58:	83 ec 08             	sub    $0x8,%esp
f0102e5b:	68 28 5a 13 f0       	push   $0xf0135a28
f0102e60:	50                   	push   %eax
f0102e61:	e8 7b ec 02 00       	call   f0131ae1 <strcmp>
f0102e66:	83 c4 10             	add    $0x10,%esp
f0102e69:	85 c0                	test   %eax,%eax
f0102e6b:	74 1d                	je     f0102e8a <command_test_kheap+0x15f>
f0102e6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e70:	83 c0 04             	add    $0x4,%eax
f0102e73:	8b 00                	mov    (%eax),%eax
f0102e75:	83 ec 08             	sub    $0x8,%esp
f0102e78:	68 2b 5a 13 f0       	push   $0xf0135a2b
f0102e7d:	50                   	push   %eax
f0102e7e:	e8 5e ec 02 00       	call   f0131ae1 <strcmp>
f0102e83:	83 c4 10             	add    $0x10,%esp
f0102e86:	85 c0                	test   %eax,%eax
f0102e88:	75 15                	jne    f0102e9f <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102e8a:	e8 db df ff ff       	call   f0100e6a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102e8f:	83 ec 0c             	sub    $0xc,%esp
f0102e92:	68 14 56 13 f0       	push   $0xf0135614
f0102e97:	e8 72 de ff ff       	call   f0100d0e <cprintf>
f0102e9c:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102e9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea2:	83 c0 08             	add    $0x8,%eax
f0102ea5:	8b 00                	mov    (%eax),%eax
f0102ea7:	83 ec 08             	sub    $0x8,%esp
f0102eaa:	68 18 5b 13 f0       	push   $0xf0135b18
f0102eaf:	50                   	push   %eax
f0102eb0:	e8 2c ec 02 00       	call   f0131ae1 <strcmp>
f0102eb5:	83 c4 10             	add    $0x10,%esp
f0102eb8:	85 c0                	test   %eax,%eax
f0102eba:	0f 85 13 01 00 00    	jne    f0102fd3 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec3:	83 c0 0c             	add    $0xc,%eax
f0102ec6:	8b 00                	mov    (%eax),%eax
f0102ec8:	83 ec 04             	sub    $0x4,%esp
f0102ecb:	6a 0a                	push   $0xa
f0102ecd:	6a 00                	push   $0x0
f0102ecf:	50                   	push   %eax
f0102ed0:	e8 60 ee 02 00       	call   f0131d35 <strtol>
f0102ed5:	83 c4 10             	add    $0x10,%esp
f0102ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102edb:	e8 be df ff ff       	call   f0100e9e <isKHeapPlacementStrategyFIRSTFIT>
f0102ee0:	84 c0                	test   %al,%al
f0102ee2:	74 54                	je     f0102f38 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102ee4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102ee8:	75 1a                	jne    f0102f04 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102eea:	83 ec 0c             	sub    $0xc,%esp
f0102eed:	68 8c 58 13 f0       	push   $0xf013588c
f0102ef2:	e8 17 de ff ff       	call   f0100d0e <cprintf>
f0102ef7:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102efa:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eff:	e9 9d 01 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f04:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f08:	75 0a                	jne    f0102f14 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f0a:	e8 b5 4f 01 00       	call   f0117ec4 <test_kmalloc>
f0102f0f:	e9 b5 00 00 00       	jmp    f0102fc9 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f14:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f18:	75 0a                	jne    f0102f24 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f1a:	e8 2e 9e 01 00       	call   f011cd4d <test_kmalloc_firstfit1>
f0102f1f:	e9 a5 00 00 00       	jmp    f0102fc9 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f24:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f28:	0f 85 9b 00 00 00    	jne    f0102fc9 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102f2e:	e8 bc b1 01 00       	call   f011e0ef <test_kmalloc_firstfit2>
f0102f33:	e9 91 00 00 00       	jmp    f0102fc9 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102f38:	e8 76 df ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f0102f3d:	84 c0                	test   %al,%al
f0102f3f:	74 47                	je     f0102f88 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f45:	75 1a                	jne    f0102f61 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 dc 58 13 f0       	push   $0xf01358dc
f0102f4f:	e8 ba dd ff ff       	call   f0100d0e <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f5c:	e9 40 01 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102f61:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f65:	75 07                	jne    f0102f6e <command_test_kheap+0x243>
				test_kmalloc();
f0102f67:	e8 58 4f 01 00       	call   f0117ec4 <test_kmalloc>
f0102f6c:	eb 5b                	jmp    f0102fc9 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f6e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f72:	75 07                	jne    f0102f7b <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102f74:	e8 9e 78 01 00       	call   f011a817 <test_kmalloc_bestfit1>
f0102f79:	eb 4e                	jmp    f0102fc9 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f7b:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f7f:	75 48                	jne    f0102fc9 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102f81:	e8 e7 8a 01 00       	call   f011ba6d <test_kmalloc_bestfit2>
f0102f86:	eb 41                	jmp    f0102fc9 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102f88:	e8 3b df ff ff       	call   f0100ec8 <isKHeapPlacementStrategyNEXTFIT>
f0102f8d:	84 c0                	test   %al,%al
f0102f8f:	74 38                	je     f0102fc9 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102f91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f95:	75 1a                	jne    f0102fb1 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102f97:	83 ec 0c             	sub    $0xc,%esp
f0102f9a:	68 2c 59 13 f0       	push   $0xf013592c
f0102f9f:	e8 6a dd ff ff       	call   f0100d0e <cprintf>
f0102fa4:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fa7:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fac:	e9 f0 00 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102fb1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fb5:	75 07                	jne    f0102fbe <command_test_kheap+0x293>
				test_kmalloc();
f0102fb7:	e8 08 4f 01 00       	call   f0117ec4 <test_kmalloc>
f0102fbc:	eb 0b                	jmp    f0102fc9 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102fbe:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fc2:	75 05                	jne    f0102fc9 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102fc4:	e8 59 61 01 00       	call   f0119122 <test_kmalloc_nextfit>
		}
		return 0;
f0102fc9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fce:	e9 ce 00 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102fd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fd6:	83 c0 08             	add    $0x8,%eax
f0102fd9:	8b 00                	mov    (%eax),%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	68 b4 5b 13 f0       	push   $0xf0135bb4
f0102fe3:	50                   	push   %eax
f0102fe4:	e8 f8 ea 02 00       	call   f0131ae1 <strcmp>
f0102fe9:	83 c4 10             	add    $0x10,%esp
f0102fec:	85 c0                	test   %eax,%eax
f0102fee:	75 28                	jne    f0103018 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102ff0:	e8 be de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f0102ff5:	84 c0                	test   %al,%al
f0102ff7:	75 09                	jne    f0103002 <command_test_kheap+0x2d7>
f0102ff9:	e8 a0 de ff ff       	call   f0100e9e <isKHeapPlacementStrategyFIRSTFIT>
f0102ffe:	84 c0                	test   %al,%al
f0103000:	74 07                	je     f0103009 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103002:	e8 1f f7 01 00       	call   f0122726 <test_kfree_bestfirstfit>
f0103007:	eb 05                	jmp    f010300e <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0103009:	e8 c6 d5 01 00       	call   f01205d4 <test_kfree>
		}
		return 0;
f010300e:	b8 00 00 00 00       	mov    $0x0,%eax
f0103013:	e9 89 00 00 00       	jmp    f01030a1 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0103018:	8b 45 0c             	mov    0xc(%ebp),%eax
f010301b:	83 c0 08             	add    $0x8,%eax
f010301e:	8b 00                	mov    (%eax),%eax
f0103020:	83 ec 08             	sub    $0x8,%esp
f0103023:	68 ba 5b 13 f0       	push   $0xf0135bba
f0103028:	50                   	push   %eax
f0103029:	e8 b3 ea 02 00       	call   f0131ae1 <strcmp>
f010302e:	83 c4 10             	add    $0x10,%esp
f0103031:	85 c0                	test   %eax,%eax
f0103033:	75 0c                	jne    f0103041 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0103035:	e8 e8 10 02 00       	call   f0124122 <test_kheap_phys_addr>
		return 0;
f010303a:	b8 00 00 00 00       	mov    $0x0,%eax
f010303f:	eb 60                	jmp    f01030a1 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0103041:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103044:	83 c0 08             	add    $0x8,%eax
f0103047:	8b 00                	mov    (%eax),%eax
f0103049:	83 ec 08             	sub    $0x8,%esp
f010304c:	68 c4 5b 13 f0       	push   $0xf0135bc4
f0103051:	50                   	push   %eax
f0103052:	e8 8a ea 02 00       	call   f0131ae1 <strcmp>
f0103057:	83 c4 10             	add    $0x10,%esp
f010305a:	85 c0                	test   %eax,%eax
f010305c:	75 0c                	jne    f010306a <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010305e:	e8 8f 25 02 00       	call   f01255f2 <test_kheap_virt_addr>
		return 0;
f0103063:	b8 00 00 00 00       	mov    $0x0,%eax
f0103068:	eb 37                	jmp    f01030a1 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010306a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010306d:	83 c0 08             	add    $0x8,%eax
f0103070:	8b 00                	mov    (%eax),%eax
f0103072:	83 ec 08             	sub    $0x8,%esp
f0103075:	68 ce 5b 13 f0       	push   $0xf0135bce
f010307a:	50                   	push   %eax
f010307b:	e8 61 ea 02 00       	call   f0131ae1 <strcmp>
f0103080:	83 c4 10             	add    $0x10,%esp
f0103083:	85 c0                	test   %eax,%eax
f0103085:	75 15                	jne    f010309c <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103087:	e8 27 de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyBESTFIT>
f010308c:	84 c0                	test   %al,%al
f010308e:	74 05                	je     f0103095 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103090:	e8 01 b4 02 00       	call   f012e496 <test_krealloc_BF>
		}
		return 0;
f0103095:	b8 00 00 00 00       	mov    $0x0,%eax
f010309a:	eb 05                	jmp    f01030a1 <command_test_kheap+0x376>
	}
	return 0;
f010309c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030a1:	c9                   	leave  
f01030a2:	c3                   	ret    

f01030a3 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01030a3:	55                   	push   %ebp
f01030a4:	89 e5                	mov    %esp,%ebp
f01030a6:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01030ac:	05 00 14 00 00       	add    $0x1400,%eax
f01030b1:	c1 e0 03             	shl    $0x3,%eax
f01030b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030b7:	83 ec 04             	sub    $0x4,%esp
f01030ba:	6a 08                	push   $0x8
f01030bc:	ff 75 0c             	pushl  0xc(%ebp)
f01030bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01030c2:	e8 61 f0 02 00       	call   f0132128 <ide_read>
f01030c7:	83 c4 10             	add    $0x10,%esp
f01030ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01030cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01030d0:	c9                   	leave  
f01030d1:	c3                   	ret    

f01030d2 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01030d2:	55                   	push   %ebp
f01030d3:	89 e5                	mov    %esp,%ebp
f01030d5:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01030db:	05 00 14 00 00       	add    $0x1400,%eax
f01030e0:	c1 e0 03             	shl    $0x3,%eax
f01030e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030e6:	83 ec 04             	sub    $0x4,%esp
f01030e9:	6a 08                	push   $0x8
f01030eb:	ff 75 0c             	pushl  0xc(%ebp)
f01030ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01030f1:	e8 72 f1 02 00       	call   f0132268 <ide_write>
f01030f6:	83 c4 10             	add    $0x10,%esp
f01030f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01030fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103100:	74 14                	je     f0103116 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103102:	83 ec 04             	sub    $0x4,%esp
f0103105:	68 d8 5b 13 f0       	push   $0xf0135bd8
f010310a:	6a 2e                	push   $0x2e
f010310c:	68 ef 5b 13 f0       	push   $0xf0135bef
f0103111:	e8 ef d0 ff ff       	call   f0100205 <_panic>
	return success;
f0103116:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103119:	c9                   	leave  
f010311a:	c3                   	ret    

f010311b <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010311b:	55                   	push   %ebp
f010311c:	89 e5                	mov    %esp,%ebp
f010311e:	53                   	push   %ebx
f010311f:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103122:	c7 05 b8 a1 86 f0 00 	movl   $0x0,0xf086a1b8
f0103129:	00 00 00 
f010312c:	c7 05 bc a1 86 f0 00 	movl   $0x0,0xf086a1bc
f0103133:	00 00 00 
f0103136:	c7 05 c4 a1 86 f0 00 	movl   $0x0,0xf086a1c4
f010313d:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103140:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103147:	e9 e8 00 00 00       	jmp    f0103234 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010314c:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f0103152:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103155:	89 d0                	mov    %edx,%eax
f0103157:	01 c0                	add    %eax,%eax
f0103159:	01 d0                	add    %edx,%eax
f010315b:	c1 e0 03             	shl    $0x3,%eax
f010315e:	01 c8                	add    %ecx,%eax
f0103160:	83 ec 0c             	sub    $0xc,%esp
f0103163:	50                   	push   %eax
f0103164:	e8 cd 36 00 00       	call   f0106836 <initialize_frame_info>
f0103169:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010316c:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f0103172:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103175:	89 d0                	mov    %edx,%eax
f0103177:	01 c0                	add    %eax,%eax
f0103179:	01 d0                	add    %edx,%eax
f010317b:	c1 e0 03             	shl    $0x3,%eax
f010317e:	01 c8                	add    %ecx,%eax
f0103180:	85 c0                	test   %eax,%eax
f0103182:	75 14                	jne    f0103198 <initialize_disk_page_file+0x7d>
f0103184:	83 ec 04             	sub    $0x4,%esp
f0103187:	68 0c 5c 13 f0       	push   $0xf0135c0c
f010318c:	6a 59                	push   $0x59
f010318e:	68 ef 5b 13 f0       	push   $0xf0135bef
f0103193:	e8 6d d0 ff ff       	call   f0100205 <_panic>
f0103198:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f010319e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031a1:	89 d0                	mov    %edx,%eax
f01031a3:	01 c0                	add    %eax,%eax
f01031a5:	01 d0                	add    %edx,%eax
f01031a7:	c1 e0 03             	shl    $0x3,%eax
f01031aa:	01 c8                	add    %ecx,%eax
f01031ac:	8b 15 b8 a1 86 f0    	mov    0xf086a1b8,%edx
f01031b2:	89 10                	mov    %edx,(%eax)
f01031b4:	8b 00                	mov    (%eax),%eax
f01031b6:	85 c0                	test   %eax,%eax
f01031b8:	74 1f                	je     f01031d9 <initialize_disk_page_file+0xbe>
f01031ba:	8b 15 b8 a1 86 f0    	mov    0xf086a1b8,%edx
f01031c0:	8b 1d dc a0 86 f0    	mov    0xf086a0dc,%ebx
f01031c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01031c9:	89 c8                	mov    %ecx,%eax
f01031cb:	01 c0                	add    %eax,%eax
f01031cd:	01 c8                	add    %ecx,%eax
f01031cf:	c1 e0 03             	shl    $0x3,%eax
f01031d2:	01 d8                	add    %ebx,%eax
f01031d4:	89 42 04             	mov    %eax,0x4(%edx)
f01031d7:	eb 19                	jmp    f01031f2 <initialize_disk_page_file+0xd7>
f01031d9:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f01031df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031e2:	89 d0                	mov    %edx,%eax
f01031e4:	01 c0                	add    %eax,%eax
f01031e6:	01 d0                	add    %edx,%eax
f01031e8:	c1 e0 03             	shl    $0x3,%eax
f01031eb:	01 c8                	add    %ecx,%eax
f01031ed:	a3 bc a1 86 f0       	mov    %eax,0xf086a1bc
f01031f2:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f01031f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	a3 b8 a1 86 f0       	mov    %eax,0xf086a1b8
f010320b:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f0103211:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103214:	89 d0                	mov    %edx,%eax
f0103216:	01 c0                	add    %eax,%eax
f0103218:	01 d0                	add    %edx,%eax
f010321a:	c1 e0 03             	shl    $0x3,%eax
f010321d:	01 c8                	add    %ecx,%eax
f010321f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103226:	a1 c4 a1 86 f0       	mov    0xf086a1c4,%eax
f010322b:	40                   	inc    %eax
f010322c:	a3 c4 a1 86 f0       	mov    %eax,0xf086a1c4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103231:	ff 45 f4             	incl   -0xc(%ebp)
f0103234:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010323b:	0f 8e 0b ff ff ff    	jle    f010314c <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103241:	90                   	nop
f0103242:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103245:	c9                   	leave  
f0103246:	c3                   	ret    

f0103247 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103247:	55                   	push   %ebp
f0103248:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010324a:	8b 45 08             	mov    0x8(%ebp),%eax
f010324d:	8b 15 dc a0 86 f0    	mov    0xf086a0dc,%edx
f0103253:	29 d0                	sub    %edx,%eax
f0103255:	c1 f8 03             	sar    $0x3,%eax
f0103258:	89 c2                	mov    %eax,%edx
f010325a:	89 d0                	mov    %edx,%eax
f010325c:	c1 e0 02             	shl    $0x2,%eax
f010325f:	01 d0                	add    %edx,%eax
f0103261:	c1 e0 02             	shl    $0x2,%eax
f0103264:	01 d0                	add    %edx,%eax
f0103266:	c1 e0 02             	shl    $0x2,%eax
f0103269:	01 d0                	add    %edx,%eax
f010326b:	89 c1                	mov    %eax,%ecx
f010326d:	c1 e1 08             	shl    $0x8,%ecx
f0103270:	01 c8                	add    %ecx,%eax
f0103272:	89 c1                	mov    %eax,%ecx
f0103274:	c1 e1 10             	shl    $0x10,%ecx
f0103277:	01 c8                	add    %ecx,%eax
f0103279:	01 c0                	add    %eax,%eax
f010327b:	01 d0                	add    %edx,%eax
}
f010327d:	5d                   	pop    %ebp
f010327e:	c3                   	ret    

f010327f <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010327f:	55                   	push   %ebp
f0103280:	89 e5                	mov    %esp,%ebp
f0103282:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103285:	a1 b8 a1 86 f0       	mov    0xf086a1b8,%eax
f010328a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010328d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103291:	75 0a                	jne    f010329d <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103293:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103298:	e9 a7 00 00 00       	jmp    f0103344 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010329d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032a1:	75 14                	jne    f01032b7 <allocate_disk_frame+0x38>
f01032a3:	83 ec 04             	sub    $0x4,%esp
f01032a6:	68 2f 5c 13 f0       	push   $0xf0135c2f
f01032ab:	6a 78                	push   $0x78
f01032ad:	68 ef 5b 13 f0       	push   $0xf0135bef
f01032b2:	e8 4e cf ff ff       	call   f0100205 <_panic>
f01032b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032ba:	8b 00                	mov    (%eax),%eax
f01032bc:	85 c0                	test   %eax,%eax
f01032be:	74 10                	je     f01032d0 <allocate_disk_frame+0x51>
f01032c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032c3:	8b 00                	mov    (%eax),%eax
f01032c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032c8:	8b 52 04             	mov    0x4(%edx),%edx
f01032cb:	89 50 04             	mov    %edx,0x4(%eax)
f01032ce:	eb 0b                	jmp    f01032db <allocate_disk_frame+0x5c>
f01032d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d3:	8b 40 04             	mov    0x4(%eax),%eax
f01032d6:	a3 bc a1 86 f0       	mov    %eax,0xf086a1bc
f01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032de:	8b 40 04             	mov    0x4(%eax),%eax
f01032e1:	85 c0                	test   %eax,%eax
f01032e3:	74 0f                	je     f01032f4 <allocate_disk_frame+0x75>
f01032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e8:	8b 40 04             	mov    0x4(%eax),%eax
f01032eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032ee:	8b 12                	mov    (%edx),%edx
f01032f0:	89 10                	mov    %edx,(%eax)
f01032f2:	eb 0a                	jmp    f01032fe <allocate_disk_frame+0x7f>
f01032f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032f7:	8b 00                	mov    (%eax),%eax
f01032f9:	a3 b8 a1 86 f0       	mov    %eax,0xf086a1b8
f01032fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103301:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103307:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010330a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103311:	a1 c4 a1 86 f0       	mov    0xf086a1c4,%eax
f0103316:	48                   	dec    %eax
f0103317:	a3 c4 a1 86 f0       	mov    %eax,0xf086a1c4
	initialize_frame_info(ptr_frame_info);
f010331c:	83 ec 0c             	sub    $0xc,%esp
f010331f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103322:	e8 0f 35 00 00       	call   f0106836 <initialize_frame_info>
f0103327:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010332a:	83 ec 0c             	sub    $0xc,%esp
f010332d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103330:	e8 12 ff ff ff       	call   f0103247 <to_disk_frame_number>
f0103335:	83 c4 10             	add    $0x10,%esp
f0103338:	89 c2                	mov    %eax,%edx
f010333a:	8b 45 08             	mov    0x8(%ebp),%eax
f010333d:	89 10                	mov    %edx,(%eax)
	return 0;
f010333f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103344:	c9                   	leave  
f0103345:	c3                   	ret    

f0103346 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103346:	55                   	push   %ebp
f0103347:	89 e5                	mov    %esp,%ebp
f0103349:	53                   	push   %ebx
f010334a:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f010334d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103351:	0f 84 ca 00 00 00    	je     f0103421 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103357:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f010335d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103360:	89 d0                	mov    %edx,%eax
f0103362:	01 c0                	add    %eax,%eax
f0103364:	01 d0                	add    %edx,%eax
f0103366:	c1 e0 03             	shl    $0x3,%eax
f0103369:	01 c8                	add    %ecx,%eax
f010336b:	85 c0                	test   %eax,%eax
f010336d:	75 17                	jne    f0103386 <free_disk_frame+0x40>
f010336f:	83 ec 04             	sub    $0x4,%esp
f0103372:	68 0c 5c 13 f0       	push   $0xf0135c0c
f0103377:	68 85 00 00 00       	push   $0x85
f010337c:	68 ef 5b 13 f0       	push   $0xf0135bef
f0103381:	e8 7f ce ff ff       	call   f0100205 <_panic>
f0103386:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f010338c:	8b 55 08             	mov    0x8(%ebp),%edx
f010338f:	89 d0                	mov    %edx,%eax
f0103391:	01 c0                	add    %eax,%eax
f0103393:	01 d0                	add    %edx,%eax
f0103395:	c1 e0 03             	shl    $0x3,%eax
f0103398:	01 c8                	add    %ecx,%eax
f010339a:	8b 15 b8 a1 86 f0    	mov    0xf086a1b8,%edx
f01033a0:	89 10                	mov    %edx,(%eax)
f01033a2:	8b 00                	mov    (%eax),%eax
f01033a4:	85 c0                	test   %eax,%eax
f01033a6:	74 1f                	je     f01033c7 <free_disk_frame+0x81>
f01033a8:	8b 15 b8 a1 86 f0    	mov    0xf086a1b8,%edx
f01033ae:	8b 1d dc a0 86 f0    	mov    0xf086a0dc,%ebx
f01033b4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01033b7:	89 c8                	mov    %ecx,%eax
f01033b9:	01 c0                	add    %eax,%eax
f01033bb:	01 c8                	add    %ecx,%eax
f01033bd:	c1 e0 03             	shl    $0x3,%eax
f01033c0:	01 d8                	add    %ebx,%eax
f01033c2:	89 42 04             	mov    %eax,0x4(%edx)
f01033c5:	eb 19                	jmp    f01033e0 <free_disk_frame+0x9a>
f01033c7:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f01033cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01033d0:	89 d0                	mov    %edx,%eax
f01033d2:	01 c0                	add    %eax,%eax
f01033d4:	01 d0                	add    %edx,%eax
f01033d6:	c1 e0 03             	shl    $0x3,%eax
f01033d9:	01 c8                	add    %ecx,%eax
f01033db:	a3 bc a1 86 f0       	mov    %eax,0xf086a1bc
f01033e0:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f01033e6:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e9:	89 d0                	mov    %edx,%eax
f01033eb:	01 c0                	add    %eax,%eax
f01033ed:	01 d0                	add    %edx,%eax
f01033ef:	c1 e0 03             	shl    $0x3,%eax
f01033f2:	01 c8                	add    %ecx,%eax
f01033f4:	a3 b8 a1 86 f0       	mov    %eax,0xf086a1b8
f01033f9:	8b 0d dc a0 86 f0    	mov    0xf086a0dc,%ecx
f01033ff:	8b 55 08             	mov    0x8(%ebp),%edx
f0103402:	89 d0                	mov    %edx,%eax
f0103404:	01 c0                	add    %eax,%eax
f0103406:	01 d0                	add    %edx,%eax
f0103408:	c1 e0 03             	shl    $0x3,%eax
f010340b:	01 c8                	add    %ecx,%eax
f010340d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103414:	a1 c4 a1 86 f0       	mov    0xf086a1c4,%eax
f0103419:	40                   	inc    %eax
f010341a:	a3 c4 a1 86 f0       	mov    %eax,0xf086a1c4
f010341f:	eb 01                	jmp    f0103422 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103421:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103422:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103425:	c9                   	leave  
f0103426:	c3                   	ret    

f0103427 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103427:	55                   	push   %ebp
f0103428:	89 e5                	mov    %esp,%ebp
f010342a:	53                   	push   %ebx
f010342b:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010342e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103431:	c1 e8 16             	shr    $0x16,%eax
f0103434:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010343b:	8b 45 08             	mov    0x8(%ebp),%eax
f010343e:	01 d0                	add    %edx,%eax
f0103440:	8b 00                	mov    (%eax),%eax
f0103442:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103445:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f010344c:	77 1d                	ja     f010346b <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010344e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103451:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	50                   	push   %eax
f010345a:	e8 4c 47 00 00       	call   f0107bab <kheap_virtual_address>
f010345f:	83 c4 10             	add    $0x10,%esp
f0103462:	89 c2                	mov    %eax,%edx
f0103464:	8b 45 14             	mov    0x14(%ebp),%eax
f0103467:	89 10                	mov    %edx,(%eax)
f0103469:	eb 44                	jmp    f01034af <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010346b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010346e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103473:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103476:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103479:	c1 e8 0c             	shr    $0xc,%eax
f010347c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010347f:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0103484:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103487:	72 17                	jb     f01034a0 <get_disk_page_table+0x79>
f0103489:	ff 75 f0             	pushl  -0x10(%ebp)
f010348c:	68 50 5c 13 f0       	push   $0xf0135c50
f0103491:	68 92 00 00 00       	push   $0x92
f0103496:	68 ef 5b 13 f0       	push   $0xf0135bef
f010349b:	e8 65 cd ff ff       	call   f0100205 <_panic>
f01034a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034a3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01034a8:	89 c2                	mov    %eax,%edx
f01034aa:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ad:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f01034af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034b3:	0f 85 80 00 00 00    	jne    f0103539 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f01034b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01034bd:	74 6a                	je     f0103529 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f01034bf:	83 ec 0c             	sub    $0xc,%esp
f01034c2:	68 00 10 00 00       	push   $0x1000
f01034c7:	e8 9e 44 00 00       	call   f010796a <kmalloc>
f01034cc:	83 c4 10             	add    $0x10,%esp
f01034cf:	89 c2                	mov    %eax,%edx
f01034d1:	8b 45 14             	mov    0x14(%ebp),%eax
f01034d4:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01034d6:	8b 45 14             	mov    0x14(%ebp),%eax
f01034d9:	8b 00                	mov    (%eax),%eax
f01034db:	85 c0                	test   %eax,%eax
f01034dd:	75 07                	jne    f01034e6 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01034df:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01034e4:	eb 58                	jmp    f010353e <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01034e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034e9:	c1 e8 16             	shr    $0x16,%eax
f01034ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01034f6:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f01034f9:	8b 45 14             	mov    0x14(%ebp),%eax
f01034fc:	8b 00                	mov    (%eax),%eax
f01034fe:	83 ec 0c             	sub    $0xc,%esp
f0103501:	50                   	push   %eax
f0103502:	e8 c3 46 00 00       	call   f0107bca <kheap_physical_address>
f0103507:	83 c4 10             	add    $0x10,%esp
f010350a:	83 c8 01             	or     $0x1,%eax
f010350d:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010350f:	8b 45 14             	mov    0x14(%ebp),%eax
f0103512:	8b 00                	mov    (%eax),%eax
f0103514:	83 ec 04             	sub    $0x4,%esp
f0103517:	68 00 10 00 00       	push   $0x1000
f010351c:	6a 00                	push   $0x0
f010351e:	50                   	push   %eax
f010351f:	e8 9f e6 02 00       	call   f0131bc3 <memset>
f0103524:	83 c4 10             	add    $0x10,%esp
f0103527:	eb 10                	jmp    f0103539 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103529:	8b 45 14             	mov    0x14(%ebp),%eax
f010352c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103532:	b8 00 00 00 00       	mov    $0x0,%eax
f0103537:	eb 05                	jmp    f010353e <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103539:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010353e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103541:	c9                   	leave  
f0103542:	c3                   	ret    

f0103543 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103543:	55                   	push   %ebp
f0103544:	89 e5                	mov    %esp,%ebp
f0103546:	83 ec 28             	sub    $0x28,%esp
f0103549:	8b 45 10             	mov    0x10(%ebp),%eax
f010354c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010354f:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103553:	74 75                	je     f01035ca <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103555:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010355c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010355f:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103564:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103567:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010356a:	ba 00 00 00 00       	mov    $0x0,%edx
f010356f:	f7 75 f4             	divl   -0xc(%ebp)
f0103572:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103575:	29 d0                	sub    %edx,%eax
f0103577:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010357a:	73 32                	jae    f01035ae <pf_add_empty_env_page+0x6b>
f010357c:	8b 45 08             	mov    0x8(%ebp),%eax
f010357f:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103585:	b8 00 00 00 00       	mov    $0x0,%eax
f010358a:	29 d0                	sub    %edx,%eax
f010358c:	c1 e0 0c             	shl    $0xc,%eax
f010358f:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103594:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103597:	76 15                	jbe    f01035ae <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103599:	8b 45 08             	mov    0x8(%ebp),%eax
f010359c:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01035a2:	8d 50 01             	lea    0x1(%eax),%edx
f01035a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01035a8:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f01035ae:	a1 60 a1 86 f0       	mov    0xf086a160,%eax
f01035b3:	83 ec 04             	sub    $0x4,%esp
f01035b6:	50                   	push   %eax
f01035b7:	ff 75 0c             	pushl  0xc(%ebp)
f01035ba:	ff 75 08             	pushl  0x8(%ebp)
f01035bd:	e8 b2 00 00 00       	call   f0103674 <pf_add_env_page>
f01035c2:	83 c4 10             	add    $0x10,%esp
f01035c5:	e9 a8 00 00 00       	jmp    f0103672 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01035ca:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035d1:	76 19                	jbe    f01035ec <pf_add_empty_env_page+0xa9>
f01035d3:	68 80 5c 13 f0       	push   $0xf0135c80
f01035d8:	68 a6 5c 13 f0       	push   $0xf0135ca6
f01035dd:	68 d1 00 00 00       	push   $0xd1
f01035e2:	68 ef 5b 13 f0       	push   $0xf0135bef
f01035e7:	e8 19 cc ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01035ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01035ef:	83 c0 64             	add    $0x64,%eax
f01035f2:	83 ec 08             	sub    $0x8,%esp
f01035f5:	50                   	push   %eax
f01035f6:	ff 75 08             	pushl  0x8(%ebp)
f01035f9:	e8 10 06 00 00       	call   f0103c0e <get_disk_page_directory>
f01035fe:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103601:	8b 45 08             	mov    0x8(%ebp),%eax
f0103604:	8b 40 64             	mov    0x64(%eax),%eax
f0103607:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010360a:	52                   	push   %edx
f010360b:	6a 01                	push   $0x1
f010360d:	ff 75 0c             	pushl  0xc(%ebp)
f0103610:	50                   	push   %eax
f0103611:	e8 11 fe ff ff       	call   f0103427 <get_disk_page_table>
f0103616:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103619:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010361c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010361f:	c1 ea 0c             	shr    $0xc,%edx
f0103622:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103628:	c1 e2 02             	shl    $0x2,%edx
f010362b:	01 d0                	add    %edx,%eax
f010362d:	8b 00                	mov    (%eax),%eax
f010362f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103632:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103635:	85 c0                	test   %eax,%eax
f0103637:	75 34                	jne    f010366d <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103639:	83 ec 0c             	sub    $0xc,%esp
f010363c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010363f:	50                   	push   %eax
f0103640:	e8 3a fc ff ff       	call   f010327f <allocate_disk_frame>
f0103645:	83 c4 10             	add    $0x10,%esp
f0103648:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010364b:	75 07                	jne    f0103654 <pf_add_empty_env_page+0x111>
f010364d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103652:	eb 1e                	jmp    f0103672 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103654:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103657:	8b 55 0c             	mov    0xc(%ebp),%edx
f010365a:	c1 ea 0c             	shr    $0xc,%edx
f010365d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103663:	c1 e2 02             	shl    $0x2,%edx
f0103666:	01 c2                	add    %eax,%edx
f0103668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010366b:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010366d:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103672:	c9                   	leave  
f0103673:	c3                   	ret    

f0103674 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103674:	55                   	push   %ebp
f0103675:	89 e5                	mov    %esp,%ebp
f0103677:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010367a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103681:	76 19                	jbe    f010369c <pf_add_env_page+0x28>
f0103683:	68 80 5c 13 f0       	push   $0xf0135c80
f0103688:	68 a6 5c 13 f0       	push   $0xf0135ca6
f010368d:	68 e6 00 00 00       	push   $0xe6
f0103692:	68 ef 5b 13 f0       	push   $0xf0135bef
f0103697:	e8 69 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010369c:	8b 45 08             	mov    0x8(%ebp),%eax
f010369f:	83 c0 64             	add    $0x64,%eax
f01036a2:	83 ec 08             	sub    $0x8,%esp
f01036a5:	50                   	push   %eax
f01036a6:	ff 75 08             	pushl  0x8(%ebp)
f01036a9:	e8 60 05 00 00       	call   f0103c0e <get_disk_page_directory>
f01036ae:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b4:	8b 40 64             	mov    0x64(%eax),%eax
f01036b7:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01036ba:	52                   	push   %edx
f01036bb:	6a 01                	push   $0x1
f01036bd:	ff 75 0c             	pushl  0xc(%ebp)
f01036c0:	50                   	push   %eax
f01036c1:	e8 61 fd ff ff       	call   f0103427 <get_disk_page_table>
f01036c6:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036cc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036cf:	c1 ea 0c             	shr    $0xc,%edx
f01036d2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036d8:	c1 e2 02             	shl    $0x2,%edx
f01036db:	01 d0                	add    %edx,%eax
f01036dd:	8b 00                	mov    (%eax),%eax
f01036df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01036e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036e5:	85 c0                	test   %eax,%eax
f01036e7:	75 34                	jne    f010371d <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036e9:	83 ec 0c             	sub    $0xc,%esp
f01036ec:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01036ef:	50                   	push   %eax
f01036f0:	e8 8a fb ff ff       	call   f010327f <allocate_disk_frame>
f01036f5:	83 c4 10             	add    $0x10,%esp
f01036f8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036fb:	75 07                	jne    f0103704 <pf_add_env_page+0x90>
f01036fd:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103702:	eb 31                	jmp    f0103735 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103704:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103707:	8b 55 0c             	mov    0xc(%ebp),%edx
f010370a:	c1 ea 0c             	shr    $0xc,%edx
f010370d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103713:	c1 e2 02             	shl    $0x2,%edx
f0103716:	01 c2                	add    %eax,%edx
f0103718:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010371b:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010371d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103720:	83 ec 08             	sub    $0x8,%esp
f0103723:	ff 75 10             	pushl  0x10(%ebp)
f0103726:	50                   	push   %eax
f0103727:	e8 a6 f9 ff ff       	call   f01030d2 <write_disk_page>
f010372c:	83 c4 10             	add    $0x10,%esp
f010372f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103732:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103735:	c9                   	leave  
f0103736:	c3                   	ret    

f0103737 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103737:	55                   	push   %ebp
f0103738:	89 e5                	mov    %esp,%ebp
f010373a:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010373d:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103744:	76 19                	jbe    f010375f <pf_update_env_page+0x28>
f0103746:	68 80 5c 13 f0       	push   $0xf0135c80
f010374b:	68 a6 5c 13 f0       	push   $0xf0135ca6
f0103750:	68 08 01 00 00       	push   $0x108
f0103755:	68 ef 5b 13 f0       	push   $0xf0135bef
f010375a:	e8 a6 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010375f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103762:	83 c0 64             	add    $0x64,%eax
f0103765:	83 ec 08             	sub    $0x8,%esp
f0103768:	50                   	push   %eax
f0103769:	ff 75 08             	pushl  0x8(%ebp)
f010376c:	e8 9d 04 00 00       	call   f0103c0e <get_disk_page_directory>
f0103771:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103774:	8b 45 08             	mov    0x8(%ebp),%eax
f0103777:	8b 40 64             	mov    0x64(%eax),%eax
f010377a:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010377d:	52                   	push   %edx
f010377e:	6a 00                	push   $0x0
f0103780:	ff 75 0c             	pushl  0xc(%ebp)
f0103783:	50                   	push   %eax
f0103784:	e8 9e fc ff ff       	call   f0103427 <get_disk_page_table>
f0103789:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010378c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010378f:	85 c0                	test   %eax,%eax
f0103791:	74 29                	je     f01037bc <pf_update_env_page+0x85>
f0103793:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103796:	85 c0                	test   %eax,%eax
f0103798:	0f 84 43 01 00 00    	je     f01038e1 <pf_update_env_page+0x1aa>
f010379e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037a1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a4:	c1 ea 0c             	shr    $0xc,%edx
f01037a7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037ad:	c1 e2 02             	shl    $0x2,%edx
f01037b0:	01 d0                	add    %edx,%eax
f01037b2:	8b 00                	mov    (%eax),%eax
f01037b4:	85 c0                	test   %eax,%eax
f01037b6:	0f 85 25 01 00 00    	jne    f01038e1 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f01037bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f01037c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01037c5:	85 c0                	test   %eax,%eax
f01037c7:	79 09                	jns    f01037d2 <pf_update_env_page+0x9b>
f01037c9:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01037d0:	76 38                	jbe    f010380a <pf_update_env_page+0xd3>
f01037d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01037d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037dc:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01037e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01037ec:	f7 75 f0             	divl   -0x10(%ebp)
f01037ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037f2:	29 d0                	sub    %edx,%eax
f01037f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01037f7:	0f 87 cd 00 00 00    	ja     f01038ca <pf_update_env_page+0x193>
f01037fd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103804:	0f 87 c0 00 00 00    	ja     f01038ca <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010380a:	8b 45 08             	mov    0x8(%ebp),%eax
f010380d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103810:	83 ec 04             	sub    $0x4,%esp
f0103813:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103816:	52                   	push   %edx
f0103817:	ff 75 0c             	pushl  0xc(%ebp)
f010381a:	50                   	push   %eax
f010381b:	e8 45 35 00 00       	call   f0106d65 <get_frame_info>
f0103820:	83 c4 10             	add    $0x10,%esp
f0103823:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f0103826:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103829:	3b 45 10             	cmp    0x10(%ebp),%eax
f010382c:	75 52                	jne    f0103880 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f010382e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103831:	83 ec 04             	sub    $0x4,%esp
f0103834:	50                   	push   %eax
f0103835:	ff 75 f4             	pushl  -0xc(%ebp)
f0103838:	ff 75 08             	pushl  0x8(%ebp)
f010383b:	e8 34 fe ff ff       	call   f0103674 <pf_add_env_page>
f0103840:	83 c4 10             	add    $0x10,%esp
f0103843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103846:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010384a:	75 17                	jne    f0103863 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f010384c:	83 ec 04             	sub    $0x4,%esp
f010384f:	68 bc 5c 13 f0       	push   $0xf0135cbc
f0103854:	68 1d 01 00 00       	push   $0x11d
f0103859:	68 ef 5b 13 f0       	push   $0xf0135bef
f010385e:	e8 a2 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103863:	8b 45 08             	mov    0x8(%ebp),%eax
f0103866:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010386c:	8d 50 01             	lea    0x1(%eax),%edx
f010386f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103872:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010387b:	e9 17 01 00 00       	jmp    f0103997 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103880:	83 ec 04             	sub    $0x4,%esp
f0103883:	6a 00                	push   $0x0
f0103885:	ff 75 f4             	pushl  -0xc(%ebp)
f0103888:	ff 75 08             	pushl  0x8(%ebp)
f010388b:	e8 b3 fc ff ff       	call   f0103543 <pf_add_empty_env_page>
f0103890:	83 c4 10             	add    $0x10,%esp
f0103893:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103896:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010389a:	75 17                	jne    f01038b3 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010389c:	83 ec 04             	sub    $0x4,%esp
f010389f:	68 e8 5c 13 f0       	push   $0xf0135ce8
f01038a4:	68 28 01 00 00       	push   $0x128
f01038a9:	68 ef 5b 13 f0       	push   $0xf0135bef
f01038ae:	e8 52 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b6:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038bc:	8d 50 01             	lea    0x1(%eax),%edx
f01038bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01038c2:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01038c8:	eb 17                	jmp    f01038e1 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01038ca:	83 ec 04             	sub    $0x4,%esp
f01038cd:	68 34 5d 13 f0       	push   $0xf0135d34
f01038d2:	68 2f 01 00 00       	push   $0x12f
f01038d7:	68 ef 5b 13 f0       	push   $0xf0135bef
f01038dc:	e8 24 c9 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038e4:	8b 40 64             	mov    0x64(%eax),%eax
f01038e7:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01038ea:	52                   	push   %edx
f01038eb:	6a 00                	push   $0x0
f01038ed:	ff 75 0c             	pushl  0xc(%ebp)
f01038f0:	50                   	push   %eax
f01038f1:	e8 31 fb ff ff       	call   f0103427 <get_disk_page_table>
f01038f6:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01038f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01038fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038ff:	c1 ea 0c             	shr    $0xc,%edx
f0103902:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103908:	c1 e2 02             	shl    $0x2,%edx
f010390b:	01 d0                	add    %edx,%eax
f010390d:	8b 00                	mov    (%eax),%eax
f010390f:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103912:	8b 45 08             	mov    0x8(%ebp),%eax
f0103915:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103918:	6a 00                	push   $0x0
f010391a:	68 00 00 80 ef       	push   $0xef800000
f010391f:	ff 75 10             	pushl  0x10(%ebp)
f0103922:	50                   	push   %eax
f0103923:	e8 78 33 00 00       	call   f0106ca0 <map_frame>
f0103928:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f010392b:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f0103932:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103935:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010393a:	83 ec 08             	sub    $0x8,%esp
f010393d:	50                   	push   %eax
f010393e:	ff 75 e0             	pushl  -0x20(%ebp)
f0103941:	e8 8c f7 ff ff       	call   f01030d2 <write_disk_page>
f0103946:	83 c4 10             	add    $0x10,%esp
f0103949:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f010394c:	8b 45 10             	mov    0x10(%ebp),%eax
f010394f:	8b 40 08             	mov    0x8(%eax),%eax
f0103952:	40                   	inc    %eax
f0103953:	8b 55 10             	mov    0x10(%ebp),%edx
f0103956:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f010395a:	8b 45 08             	mov    0x8(%ebp),%eax
f010395d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103960:	83 ec 08             	sub    $0x8,%esp
f0103963:	68 00 00 80 ef       	push   $0xef800000
f0103968:	50                   	push   %eax
f0103969:	e8 67 34 00 00       	call   f0106dd5 <unmap_frame>
f010396e:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103971:	8b 45 10             	mov    0x10(%ebp),%eax
f0103974:	8b 40 08             	mov    0x8(%eax),%eax
f0103977:	48                   	dec    %eax
f0103978:	8b 55 10             	mov    0x10(%ebp),%edx
f010397b:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010397f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103982:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103988:	8d 50 01             	lea    0x1(%eax),%edx
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103994:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103997:	c9                   	leave  
f0103998:	c3                   	ret    

f0103999 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103999:	55                   	push   %ebp
f010399a:	89 e5                	mov    %esp,%ebp
f010399c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010399f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01039a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039ad:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b3:	8b 40 64             	mov    0x64(%eax),%eax
f01039b6:	85 c0                	test   %eax,%eax
f01039b8:	75 0a                	jne    f01039c4 <pf_read_env_page+0x2b>
f01039ba:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039bf:	e9 90 00 00 00       	jmp    f0103a54 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01039c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01039ca:	8b 40 64             	mov    0x64(%eax),%eax
f01039cd:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01039d0:	51                   	push   %ecx
f01039d1:	6a 00                	push   $0x0
f01039d3:	52                   	push   %edx
f01039d4:	50                   	push   %eax
f01039d5:	e8 4d fa ff ff       	call   f0103427 <get_disk_page_table>
f01039da:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039e0:	85 c0                	test   %eax,%eax
f01039e2:	75 07                	jne    f01039eb <pf_read_env_page+0x52>
f01039e4:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039e9:	eb 69                	jmp    f0103a54 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01039eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039f1:	c1 ea 0c             	shr    $0xc,%edx
f01039f4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039fa:	c1 e2 02             	shl    $0x2,%edx
f01039fd:	01 d0                	add    %edx,%eax
f01039ff:	8b 00                	mov    (%eax),%eax
f0103a01:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a08:	75 07                	jne    f0103a11 <pf_read_env_page+0x78>
f0103a0a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a0f:	eb 43                	jmp    f0103a54 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a11:	83 ec 08             	sub    $0x8,%esp
f0103a14:	ff 75 0c             	pushl  0xc(%ebp)
f0103a17:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a1a:	e8 84 f6 ff ff       	call   f01030a3 <read_disk_page>
f0103a1f:	83 c4 10             	add    $0x10,%esp
f0103a22:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103a25:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a28:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a2e:	6a 40                	push   $0x40
f0103a30:	6a 00                	push   $0x0
f0103a32:	52                   	push   %edx
f0103a33:	50                   	push   %eax
f0103a34:	e8 5a 42 00 00       	call   f0107c93 <pt_set_page_permissions>
f0103a39:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a3f:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103a45:	8d 50 01             	lea    0x1(%eax),%edx
f0103a48:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4b:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103a54:	c9                   	leave  
f0103a55:	c3                   	ret    

f0103a56 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103a56:	55                   	push   %ebp
f0103a57:	89 e5                	mov    %esp,%ebp
f0103a59:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103a5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a5f:	8b 40 64             	mov    0x64(%eax),%eax
f0103a62:	85 c0                	test   %eax,%eax
f0103a64:	74 62                	je     f0103ac8 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a69:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6c:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103a6f:	52                   	push   %edx
f0103a70:	6a 00                	push   $0x0
f0103a72:	ff 75 0c             	pushl  0xc(%ebp)
f0103a75:	50                   	push   %eax
f0103a76:	e8 ac f9 ff ff       	call   f0103427 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	74 46                	je     f0103acb <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a88:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a8b:	c1 ea 0c             	shr    $0xc,%edx
f0103a8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a94:	c1 e2 02             	shl    $0x2,%edx
f0103a97:	01 d0                	add    %edx,%eax
f0103a99:	8b 00                	mov    (%eax),%eax
f0103a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103a9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103aa1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa4:	c1 ea 0c             	shr    $0xc,%edx
f0103aa7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aad:	c1 e2 02             	shl    $0x2,%edx
f0103ab0:	01 d0                	add    %edx,%eax
f0103ab2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103ab8:	83 ec 0c             	sub    $0xc,%esp
f0103abb:	ff 75 f4             	pushl  -0xc(%ebp)
f0103abe:	e8 83 f8 ff ff       	call   f0103346 <free_disk_frame>
f0103ac3:	83 c4 10             	add    $0x10,%esp
f0103ac6:	eb 04                	jmp    f0103acc <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103ac8:	90                   	nop
f0103ac9:	eb 01                	jmp    f0103acc <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103acb:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103acc:	c9                   	leave  
f0103acd:	c3                   	ret    

f0103ace <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103ace:	55                   	push   %ebp
f0103acf:	89 e5                	mov    %esp,%ebp
f0103ad1:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ad4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103adb:	e9 b8 00 00 00       	jmp    f0103b98 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103ae0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae3:	8b 40 64             	mov    0x64(%eax),%eax
f0103ae6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ae9:	c1 e2 02             	shl    $0x2,%edx
f0103aec:	01 d0                	add    %edx,%eax
f0103aee:	8b 00                	mov    (%eax),%eax
f0103af0:	83 e0 01             	and    $0x1,%eax
f0103af3:	85 c0                	test   %eax,%eax
f0103af5:	0f 84 99 00 00 00    	je     f0103b94 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103afb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afe:	8b 40 64             	mov    0x64(%eax),%eax
f0103b01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b04:	c1 e2 02             	shl    $0x2,%edx
f0103b07:	01 d0                	add    %edx,%eax
f0103b09:	8b 00                	mov    (%eax),%eax
f0103b0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b10:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b13:	83 ec 0c             	sub    $0xc,%esp
f0103b16:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b19:	e8 8d 40 00 00       	call   f0107bab <kheap_virtual_address>
f0103b1e:	83 c4 10             	add    $0x10,%esp
f0103b21:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103b2b:	eb 3a                	jmp    f0103b67 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103b2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3a:	01 d0                	add    %edx,%eax
f0103b3c:	8b 00                	mov    (%eax),%eax
f0103b3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b4e:	01 d0                	add    %edx,%eax
f0103b50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103b56:	83 ec 0c             	sub    $0xc,%esp
f0103b59:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103b5c:	e8 e5 f7 ff ff       	call   f0103346 <free_disk_frame>
f0103b61:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b64:	ff 45 f0             	incl   -0x10(%ebp)
f0103b67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103b6e:	76 bd                	jbe    f0103b2d <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103b70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b73:	8b 40 64             	mov    0x64(%eax),%eax
f0103b76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b79:	c1 e2 02             	shl    $0x2,%edx
f0103b7c:	01 d0                	add    %edx,%eax
f0103b7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103b84:	83 ec 0c             	sub    $0xc,%esp
f0103b87:	ff 75 e8             	pushl  -0x18(%ebp)
f0103b8a:	e8 24 3f 00 00       	call   f0107ab3 <kfree>
f0103b8f:	83 c4 10             	add    $0x10,%esp
f0103b92:	eb 01                	jmp    f0103b95 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103b94:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b95:	ff 45 f4             	incl   -0xc(%ebp)
f0103b98:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103b9f:	0f 86 3b ff ff ff    	jbe    f0103ae0 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103ba5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ba8:	8b 40 64             	mov    0x64(%eax),%eax
f0103bab:	83 ec 0c             	sub    $0xc,%esp
f0103bae:	50                   	push   %eax
f0103baf:	e8 ff 3e 00 00       	call   f0107ab3 <kfree>
f0103bb4:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103bb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bba:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103bc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bc4:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103bcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bce:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103bd1:	85 c0                	test   %eax,%eax
f0103bd3:	74 36                	je     f0103c0b <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103bd5:	83 ec 0c             	sub    $0xc,%esp
f0103bd8:	ff 75 08             	pushl  0x8(%ebp)
f0103bdb:	e8 05 03 00 00       	call   f0103ee5 <__pf_remove_env_all_tables>
f0103be0:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103be3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be6:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103be9:	83 ec 0c             	sub    $0xc,%esp
f0103bec:	50                   	push   %eax
f0103bed:	e8 c1 3e 00 00       	call   f0107ab3 <kfree>
f0103bf2:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103bf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf8:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103bff:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c02:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c09:	eb 01                	jmp    f0103c0c <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c0b:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c0c:	c9                   	leave  
f0103c0d:	c3                   	ret    

f0103c0e <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c0e:	55                   	push   %ebp
f0103c0f:	89 e5                	mov    %esp,%ebp
f0103c11:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c17:	8b 50 64             	mov    0x64(%eax),%edx
f0103c1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c1d:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c22:	8b 00                	mov    (%eax),%eax
f0103c24:	85 c0                	test   %eax,%eax
f0103c26:	75 58                	jne    f0103c80 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103c28:	83 ec 0c             	sub    $0xc,%esp
f0103c2b:	68 00 10 00 00       	push   $0x1000
f0103c30:	e8 35 3d 00 00       	call   f010796a <kmalloc>
f0103c35:	83 c4 10             	add    $0x10,%esp
f0103c38:	89 c2                	mov    %eax,%edx
f0103c3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c3d:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c42:	8b 00                	mov    (%eax),%eax
f0103c44:	85 c0                	test   %eax,%eax
f0103c46:	75 07                	jne    f0103c4f <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103c48:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103c4d:	eb 36                	jmp    f0103c85 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c52:	8b 00                	mov    (%eax),%eax
f0103c54:	83 ec 0c             	sub    $0xc,%esp
f0103c57:	50                   	push   %eax
f0103c58:	e8 6d 3f 00 00       	call   f0107bca <kheap_physical_address>
f0103c5d:	83 c4 10             	add    $0x10,%esp
f0103c60:	89 c2                	mov    %eax,%edx
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103c68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c6b:	8b 00                	mov    (%eax),%eax
f0103c6d:	83 ec 04             	sub    $0x4,%esp
f0103c70:	68 00 10 00 00       	push   $0x1000
f0103c75:	6a 00                	push   $0x0
f0103c77:	50                   	push   %eax
f0103c78:	e8 46 df 02 00       	call   f0131bc3 <memset>
f0103c7d:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103c80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c85:	c9                   	leave  
f0103c86:	c3                   	ret    

f0103c87 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103c87:	55                   	push   %ebp
f0103c88:	89 e5                	mov    %esp,%ebp
f0103c8a:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103c8d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103c9b:	eb 78                	jmp    f0103d15 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103c9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca0:	8b 40 64             	mov    0x64(%eax),%eax
f0103ca3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ca6:	c1 e2 02             	shl    $0x2,%edx
f0103ca9:	01 d0                	add    %edx,%eax
f0103cab:	8b 00                	mov    (%eax),%eax
f0103cad:	83 e0 01             	and    $0x1,%eax
f0103cb0:	85 c0                	test   %eax,%eax
f0103cb2:	74 5d                	je     f0103d11 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103cb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb7:	8b 40 64             	mov    0x64(%eax),%eax
f0103cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbd:	c1 e2 02             	shl    $0x2,%edx
f0103cc0:	01 d0                	add    %edx,%eax
f0103cc2:	8b 00                	mov    (%eax),%eax
f0103cc4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103ccc:	83 ec 0c             	sub    $0xc,%esp
f0103ccf:	ff 75 e8             	pushl  -0x18(%ebp)
f0103cd2:	e8 d4 3e 00 00       	call   f0107bab <kheap_virtual_address>
f0103cd7:	83 c4 10             	add    $0x10,%esp
f0103cda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103cdd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103ce4:	eb 20                	jmp    f0103d06 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103ce6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ce9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103cf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103cf3:	01 d0                	add    %edx,%eax
f0103cf5:	8b 00                	mov    (%eax),%eax
f0103cf7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103cfa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103cfe:	74 03                	je     f0103d03 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d00:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d03:	ff 45 ec             	incl   -0x14(%ebp)
f0103d06:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d0d:	76 d7                	jbe    f0103ce6 <pf_calculate_allocated_pages+0x5f>
f0103d0f:	eb 01                	jmp    f0103d12 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d11:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d12:	ff 45 f4             	incl   -0xc(%ebp)
f0103d15:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d1c:	0f 86 7b ff ff ff    	jbe    f0103c9d <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103d25:	c9                   	leave  
f0103d26:	c3                   	ret    

f0103d27 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103d27:	55                   	push   %ebp
f0103d28:	89 e5                	mov    %esp,%ebp
f0103d2a:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103d2d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d34:	a1 b8 a1 86 f0       	mov    0xf086a1b8,%eax
f0103d39:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d3c:	eb 0b                	jmp    f0103d49 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103d3e:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d41:	a1 c0 a1 86 f0       	mov    0xf086a1c0,%eax
f0103d46:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d49:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d4d:	74 07                	je     f0103d56 <pf_calculate_free_frames+0x2f>
f0103d4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103d52:	8b 00                	mov    (%eax),%eax
f0103d54:	eb 05                	jmp    f0103d5b <pf_calculate_free_frames+0x34>
f0103d56:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d5b:	a3 c0 a1 86 f0       	mov    %eax,0xf086a1c0
f0103d60:	a1 c0 a1 86 f0       	mov    0xf086a1c0,%eax
f0103d65:	85 c0                	test   %eax,%eax
f0103d67:	75 d5                	jne    f0103d3e <pf_calculate_free_frames+0x17>
f0103d69:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d6d:	75 cf                	jne    f0103d3e <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103d6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103d72:	c9                   	leave  
f0103d73:	c3                   	ret    

f0103d74 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103d74:	55                   	push   %ebp
f0103d75:	89 e5                	mov    %esp,%ebp
f0103d77:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103d7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7d:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103d80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d83:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103d85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d88:	8b 00                	mov    (%eax),%eax
f0103d8a:	85 c0                	test   %eax,%eax
f0103d8c:	75 58                	jne    f0103de6 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103d8e:	83 ec 0c             	sub    $0xc,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	e8 cf 3b 00 00       	call   f010796a <kmalloc>
f0103d9b:	83 c4 10             	add    $0x10,%esp
f0103d9e:	89 c2                	mov    %eax,%edx
f0103da0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103da3:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103da5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103da8:	8b 00                	mov    (%eax),%eax
f0103daa:	85 c0                	test   %eax,%eax
f0103dac:	75 07                	jne    f0103db5 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103dae:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103db3:	eb 36                	jmp    f0103deb <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103db5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103db8:	8b 00                	mov    (%eax),%eax
f0103dba:	83 ec 0c             	sub    $0xc,%esp
f0103dbd:	50                   	push   %eax
f0103dbe:	e8 07 3e 00 00       	call   f0107bca <kheap_physical_address>
f0103dc3:	83 c4 10             	add    $0x10,%esp
f0103dc6:	89 c2                	mov    %eax,%edx
f0103dc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dcb:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103dce:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dd1:	8b 00                	mov    (%eax),%eax
f0103dd3:	83 ec 04             	sub    $0x4,%esp
f0103dd6:	68 00 10 00 00       	push   $0x1000
f0103ddb:	6a 00                	push   $0x0
f0103ddd:	50                   	push   %eax
f0103dde:	e8 e0 dd 02 00       	call   f0131bc3 <memset>
f0103de3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103deb:	c9                   	leave  
f0103dec:	c3                   	ret    

f0103ded <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ded:	55                   	push   %ebp
f0103dee:	89 e5                	mov    %esp,%ebp
f0103df0:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103df3:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103dfa:	76 19                	jbe    f0103e15 <__pf_write_env_table+0x28>
f0103dfc:	68 80 5c 13 f0       	push   $0xf0135c80
f0103e01:	68 a6 5c 13 f0       	push   $0xf0135ca6
f0103e06:	68 5a 02 00 00       	push   $0x25a
f0103e0b:	68 ef 5b 13 f0       	push   $0xf0135bef
f0103e10:	e8 f0 c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e15:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e18:	83 c0 6c             	add    $0x6c,%eax
f0103e1b:	83 ec 08             	sub    $0x8,%esp
f0103e1e:	50                   	push   %eax
f0103e1f:	ff 75 08             	pushl  0x8(%ebp)
f0103e22:	e8 4d ff ff ff       	call   f0103d74 <get_disk_table_directory>
f0103e27:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e2d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e30:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e33:	c1 ea 16             	shr    $0x16,%edx
f0103e36:	c1 e2 02             	shl    $0x2,%edx
f0103e39:	01 d0                	add    %edx,%eax
f0103e3b:	8b 00                	mov    (%eax),%eax
f0103e3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e43:	85 c0                	test   %eax,%eax
f0103e45:	75 31                	jne    f0103e78 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e47:	83 ec 0c             	sub    $0xc,%esp
f0103e4a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e4d:	50                   	push   %eax
f0103e4e:	e8 2c f4 ff ff       	call   f010327f <allocate_disk_frame>
f0103e53:	83 c4 10             	add    $0x10,%esp
f0103e56:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e59:	75 07                	jne    f0103e62 <__pf_write_env_table+0x75>
f0103e5b:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e60:	eb 2e                	jmp    f0103e90 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e65:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e68:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6b:	c1 ea 16             	shr    $0x16,%edx
f0103e6e:	c1 e2 02             	shl    $0x2,%edx
f0103e71:	01 c2                	add    %eax,%edx
f0103e73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e76:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e7b:	83 ec 08             	sub    $0x8,%esp
f0103e7e:	ff 75 10             	pushl  0x10(%ebp)
f0103e81:	50                   	push   %eax
f0103e82:	e8 4b f2 ff ff       	call   f01030d2 <write_disk_page>
f0103e87:	83 c4 10             	add    $0x10,%esp
f0103e8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e90:	c9                   	leave  
f0103e91:	c3                   	ret    

f0103e92 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e92:	55                   	push   %ebp
f0103e93:	89 e5                	mov    %esp,%ebp
f0103e95:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e9b:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e9e:	85 c0                	test   %eax,%eax
f0103ea0:	75 07                	jne    f0103ea9 <__pf_read_env_table+0x17>
f0103ea2:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103ea7:	eb 3a                	jmp    f0103ee3 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ea9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eac:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb2:	c1 ea 16             	shr    $0x16,%edx
f0103eb5:	c1 e2 02             	shl    $0x2,%edx
f0103eb8:	01 d0                	add    %edx,%eax
f0103eba:	8b 00                	mov    (%eax),%eax
f0103ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ebf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ec3:	75 07                	jne    f0103ecc <__pf_read_env_table+0x3a>
f0103ec5:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103eca:	eb 17                	jmp    f0103ee3 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103ecc:	83 ec 08             	sub    $0x8,%esp
f0103ecf:	ff 75 10             	pushl  0x10(%ebp)
f0103ed2:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ed5:	e8 c9 f1 ff ff       	call   f01030a3 <read_disk_page>
f0103eda:	83 c4 10             	add    $0x10,%esp
f0103edd:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ee3:	c9                   	leave  
f0103ee4:	c3                   	ret    

f0103ee5 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ee5:	55                   	push   %ebp
f0103ee6:	89 e5                	mov    %esp,%ebp
f0103ee8:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103eeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eee:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ef1:	85 c0                	test   %eax,%eax
f0103ef3:	74 4c                	je     f0103f41 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ef5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103efc:	eb 38                	jmp    f0103f36 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f01:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f07:	c1 e2 02             	shl    $0x2,%edx
f0103f0a:	01 d0                	add    %edx,%eax
f0103f0c:	8b 00                	mov    (%eax),%eax
f0103f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f14:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f1a:	c1 e2 02             	shl    $0x2,%edx
f0103f1d:	01 d0                	add    %edx,%eax
f0103f1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103f25:	83 ec 0c             	sub    $0xc,%esp
f0103f28:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f2b:	e8 16 f4 ff ff       	call   f0103346 <free_disk_frame>
f0103f30:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f33:	ff 45 f4             	incl   -0xc(%ebp)
f0103f36:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f3d:	76 bf                	jbe    f0103efe <__pf_remove_env_all_tables+0x19>
f0103f3f:	eb 01                	jmp    f0103f42 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f41:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f42:	c9                   	leave  
f0103f43:	c3                   	ret    

f0103f44 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f44:	55                   	push   %ebp
f0103f45:	89 e5                	mov    %esp,%ebp
f0103f47:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f4a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f4e:	75 10                	jne    f0103f60 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f50:	83 ec 0c             	sub    $0xc,%esp
f0103f53:	68 b0 5d 13 f0       	push   $0xf0135db0
f0103f58:	e8 b1 cd ff ff       	call   f0100d0e <cprintf>
f0103f5d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f60:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f63:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f66:	85 c0                	test   %eax,%eax
f0103f68:	74 3d                	je     f0103fa7 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f6d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f73:	c1 ea 16             	shr    $0x16,%edx
f0103f76:	c1 e2 02             	shl    $0x2,%edx
f0103f79:	01 d0                	add    %edx,%eax
f0103f7b:	8b 00                	mov    (%eax),%eax
f0103f7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f80:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f83:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f89:	c1 ea 16             	shr    $0x16,%edx
f0103f8c:	c1 e2 02             	shl    $0x2,%edx
f0103f8f:	01 d0                	add    %edx,%eax
f0103f91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f97:	83 ec 0c             	sub    $0xc,%esp
f0103f9a:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f9d:	e8 a4 f3 ff ff       	call   f0103346 <free_disk_frame>
f0103fa2:	83 c4 10             	add    $0x10,%esp
f0103fa5:	eb 01                	jmp    f0103fa8 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fa7:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103fa8:	c9                   	leave  
f0103fa9:	c3                   	ret    

f0103faa <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103faa:	55                   	push   %ebp
f0103fab:	89 e5                	mov    %esp,%ebp
f0103fad:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103fb0:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103fb7:	eb 1f                	jmp    f0103fd8 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fbc:	83 ec 04             	sub    $0x4,%esp
f0103fbf:	6a 08                	push   $0x8
f0103fc1:	ff 75 08             	pushl  0x8(%ebp)
f0103fc4:	50                   	push   %eax
f0103fc5:	e8 9e e2 02 00       	call   f0132268 <ide_write>
f0103fca:	83 c4 10             	add    $0x10,%esp
f0103fcd:	85 c0                	test   %eax,%eax
f0103fcf:	75 12                	jne    f0103fe3 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103fd1:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103fd8:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103fdf:	7e d8                	jle    f0103fb9 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103fe1:	eb 01                	jmp    f0103fe4 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103fe3:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103fe4:	90                   	nop
f0103fe5:	c9                   	leave  
f0103fe6:	c3                   	ret    

f0103fe7 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fe7:	55                   	push   %ebp
f0103fe8:	89 e5                	mov    %esp,%ebp
f0103fea:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fed:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ff0:	0f b6 c0             	movzbl %al,%eax
f0103ff3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103ffa:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103ffd:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104000:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104003:	ee                   	out    %al,(%dx)
f0104004:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010400b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010400e:	89 c2                	mov    %eax,%edx
f0104010:	ec                   	in     (%dx),%al
f0104011:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104014:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104017:	0f b6 c0             	movzbl %al,%eax
}
f010401a:	c9                   	leave  
f010401b:	c3                   	ret    

f010401c <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f010401c:	55                   	push   %ebp
f010401d:	89 e5                	mov    %esp,%ebp
f010401f:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104022:	8b 45 08             	mov    0x8(%ebp),%eax
f0104025:	0f b6 c0             	movzbl %al,%eax
f0104028:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010402f:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104032:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104035:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104038:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104039:	8b 45 0c             	mov    0xc(%ebp),%eax
f010403c:	0f b6 c0             	movzbl %al,%eax
f010403f:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104046:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104049:	8a 45 f7             	mov    -0x9(%ebp),%al
f010404c:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010404f:	ee                   	out    %al,(%dx)
}
f0104050:	90                   	nop
f0104051:	c9                   	leave  
f0104052:	c3                   	ret    

f0104053 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104053:	55                   	push   %ebp
f0104054:	89 e5                	mov    %esp,%ebp
f0104056:	53                   	push   %ebx
f0104057:	83 ec 24             	sub    $0x24,%esp
f010405a:	8b 45 08             	mov    0x8(%ebp),%eax
f010405d:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104060:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104067:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010406b:	8a 45 ef             	mov    -0x11(%ebp),%al
f010406e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104071:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104072:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104076:	77 48                	ja     f01040c0 <kclock_start+0x6d>
f0104078:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010407f:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104083:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104086:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104089:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010408a:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010408e:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104093:	99                   	cltd   
f0104094:	f7 fb                	idiv   %ebx
f0104096:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010409c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040a0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01040a5:	99                   	cltd   
f01040a6:	f7 fb                	idiv   %ebx
f01040a8:	89 c3                	mov    %eax,%ebx
f01040aa:	89 c8                	mov    %ecx,%eax
f01040ac:	99                   	cltd   
f01040ad:	f7 fb                	idiv   %ebx
f01040af:	0f b7 c0             	movzwl %ax,%eax
f01040b2:	83 ec 0c             	sub    $0xc,%esp
f01040b5:	50                   	push   %eax
f01040b6:	e8 b8 01 00 00       	call   f0104273 <kclock_write_cnt0_LSB_first>
f01040bb:	83 c4 10             	add    $0x10,%esp
f01040be:	eb 13                	jmp    f01040d3 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01040c0:	6a 35                	push   $0x35
f01040c2:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01040c7:	6a 33                	push   $0x33
f01040c9:	68 30 5e 13 f0       	push   $0xf0135e30
f01040ce:	e8 32 c1 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01040d3:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f01040d9:	0f b7 c0             	movzwl %ax,%eax
f01040dc:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040e1:	83 ec 0c             	sub    $0xc,%esp
f01040e4:	50                   	push   %eax
f01040e5:	e8 bc 1b 00 00       	call   f0105ca6 <irq_setmask_8259A>
f01040ea:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040ed:	90                   	nop
f01040ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040f1:	c9                   	leave  
f01040f2:	c3                   	ret    

f01040f3 <kclock_stop>:

void
kclock_stop(void)
{
f01040f3:	55                   	push   %ebp
f01040f4:	89 e5                	mov    %esp,%ebp
f01040f6:	83 ec 18             	sub    $0x18,%esp
f01040f9:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104100:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104104:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104107:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010410a:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f010410b:	83 ec 0c             	sub    $0xc,%esp
f010410e:	68 ff ff 00 00       	push   $0xffff
f0104113:	e8 8e 1b 00 00       	call   f0105ca6 <irq_setmask_8259A>
f0104118:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f010411b:	90                   	nop
f010411c:	c9                   	leave  
f010411d:	c3                   	ret    

f010411e <kclock_resume>:

void
kclock_resume(void)
{
f010411e:	55                   	push   %ebp
f010411f:	89 e5                	mov    %esp,%ebp
f0104121:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104124:	e8 8c 01 00 00       	call   f01042b5 <kclock_read_cnt0>
f0104129:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f010412d:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104132:	77 06                	ja     f010413a <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104134:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010413a:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010413e:	83 e0 01             	and    $0x1,%eax
f0104141:	66 85 c0             	test   %ax,%ax
f0104144:	74 09                	je     f010414f <kclock_resume+0x31>
		cnt0++;
f0104146:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010414a:	40                   	inc    %eax
f010414b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010414f:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104156:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010415a:	8a 45 ef             	mov    -0x11(%ebp),%al
f010415d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104160:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104161:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104165:	83 ec 0c             	sub    $0xc,%esp
f0104168:	50                   	push   %eax
f0104169:	e8 05 01 00 00       	call   f0104273 <kclock_write_cnt0_LSB_first>
f010416e:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104171:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104177:	0f b7 c0             	movzwl %ax,%eax
f010417a:	25 fe ff 00 00       	and    $0xfffe,%eax
f010417f:	83 ec 0c             	sub    $0xc,%esp
f0104182:	50                   	push   %eax
f0104183:	e8 1e 1b 00 00       	call   f0105ca6 <irq_setmask_8259A>
f0104188:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010418b:	90                   	nop
f010418c:	c9                   	leave  
f010418d:	c3                   	ret    

f010418e <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010418e:	55                   	push   %ebp
f010418f:	89 e5                	mov    %esp,%ebp
f0104191:	83 ec 28             	sub    $0x28,%esp
f0104194:	8b 45 08             	mov    0x8(%ebp),%eax
f0104197:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041ac:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01041b0:	83 ec 0c             	sub    $0xc,%esp
f01041b3:	50                   	push   %eax
f01041b4:	e8 ba 00 00 00       	call   f0104273 <kclock_write_cnt0_LSB_first>
f01041b9:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041bc:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f01041c2:	0f b7 c0             	movzwl %ax,%eax
f01041c5:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041ca:	83 ec 0c             	sub    $0xc,%esp
f01041cd:	50                   	push   %eax
f01041ce:	e8 d3 1a 00 00       	call   f0105ca6 <irq_setmask_8259A>
f01041d3:	83 c4 10             	add    $0x10,%esp

}
f01041d6:	90                   	nop
f01041d7:	c9                   	leave  
f01041d8:	c3                   	ret    

f01041d9 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01041d9:	55                   	push   %ebp
f01041da:	89 e5                	mov    %esp,%ebp
f01041dc:	53                   	push   %ebx
f01041dd:	83 ec 24             	sub    $0x24,%esp
f01041e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01041e3:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041e6:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ea:	77 6c                	ja     f0104258 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041ec:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041f0:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041f5:	99                   	cltd   
f01041f6:	f7 fb                	idiv   %ebx
f01041f8:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041fe:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104202:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104207:	99                   	cltd   
f0104208:	f7 fb                	idiv   %ebx
f010420a:	89 c3                	mov    %eax,%ebx
f010420c:	89 c8                	mov    %ecx,%eax
f010420e:	99                   	cltd   
f010420f:	f7 fb                	idiv   %ebx
f0104211:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104217:	25 01 00 00 80       	and    $0x80000001,%eax
f010421c:	85 c0                	test   %eax,%eax
f010421e:	79 05                	jns    f0104225 <kclock_set_quantum+0x4c>
f0104220:	48                   	dec    %eax
f0104221:	83 c8 fe             	or     $0xfffffffe,%eax
f0104224:	40                   	inc    %eax
f0104225:	83 f8 01             	cmp    $0x1,%eax
f0104228:	75 03                	jne    f010422d <kclock_set_quantum+0x54>
			cnt++;
f010422a:	ff 45 f4             	incl   -0xc(%ebp)
f010422d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104234:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104238:	8a 45 ef             	mov    -0x11(%ebp),%al
f010423b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010423e:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f010423f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104242:	0f b7 c0             	movzwl %ax,%eax
f0104245:	83 ec 0c             	sub    $0xc,%esp
f0104248:	50                   	push   %eax
f0104249:	e8 25 00 00 00       	call   f0104273 <kclock_write_cnt0_LSB_first>
f010424e:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104251:	e8 9d fe ff ff       	call   f01040f3 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104256:	eb 16                	jmp    f010426e <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104258:	6a 35                	push   $0x35
f010425a:	68 d4 5d 13 f0       	push   $0xf0135dd4
f010425f:	68 c9 00 00 00       	push   $0xc9
f0104264:	68 30 5e 13 f0       	push   $0xf0135e30
f0104269:	e8 97 bf ff ff       	call   f0100205 <_panic>
	}
}
f010426e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104271:	c9                   	leave  
f0104272:	c3                   	ret    

f0104273 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104273:	55                   	push   %ebp
f0104274:	89 e5                	mov    %esp,%ebp
f0104276:	83 ec 14             	sub    $0x14,%esp
f0104279:	8b 45 08             	mov    0x8(%ebp),%eax
f010427c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104280:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104283:	0f b6 c0             	movzbl %al,%eax
f0104286:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010428d:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104290:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104293:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104296:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104297:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010429a:	66 c1 e8 08          	shr    $0x8,%ax
f010429e:	0f b6 c0             	movzbl %al,%eax
f01042a1:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01042a8:	88 45 f7             	mov    %al,-0x9(%ebp)
f01042ab:	8a 45 f7             	mov    -0x9(%ebp),%al
f01042ae:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01042b1:	ee                   	out    %al,(%dx)
}
f01042b2:	90                   	nop
f01042b3:	c9                   	leave  
f01042b4:	c3                   	ret    

f01042b5 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01042b5:	55                   	push   %ebp
f01042b6:	89 e5                	mov    %esp,%ebp
f01042b8:	83 ec 20             	sub    $0x20,%esp
f01042bb:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042c5:	89 c2                	mov    %eax,%edx
f01042c7:	ec                   	in     (%dx),%al
f01042c8:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01042cb:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042ce:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d1:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042db:	89 c2                	mov    %eax,%edx
f01042dd:	ec                   	in     (%dx),%al
f01042de:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042e1:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042e7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042eb:	c1 e0 08             	shl    $0x8,%eax
f01042ee:	89 c2                	mov    %eax,%edx
f01042f0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042f4:	09 d0                	or     %edx,%eax
f01042f6:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042fd:	c9                   	leave  
f01042fe:	c3                   	ret    

f01042ff <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ff:	55                   	push   %ebp
f0104300:	89 e5                	mov    %esp,%ebp
f0104302:	83 ec 30             	sub    $0x30,%esp
f0104305:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010430c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010430f:	89 c2                	mov    %eax,%edx
f0104311:	ec                   	in     (%dx),%al
f0104312:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104315:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104318:	88 45 ff             	mov    %al,-0x1(%ebp)
f010431b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104322:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104326:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104329:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010432c:	ee                   	out    %al,(%dx)
f010432d:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104337:	89 c2                	mov    %eax,%edx
f0104339:	ec                   	in     (%dx),%al
f010433a:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010433d:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104340:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104343:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010434a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010434d:	89 c2                	mov    %eax,%edx
f010434f:	ec                   	in     (%dx),%al
f0104350:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104353:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104356:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104359:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010435d:	c1 e0 08             	shl    $0x8,%eax
f0104360:	89 c2                	mov    %eax,%edx
f0104362:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104366:	09 d0                	or     %edx,%eax
f0104368:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010436c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104370:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104377:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010437a:	8a 45 df             	mov    -0x21(%ebp),%al
f010437d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104380:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104381:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104384:	c9                   	leave  
f0104385:	c3                   	ret    

f0104386 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104386:	55                   	push   %ebp
f0104387:	89 e5                	mov    %esp,%ebp
f0104389:	a1 4c a1 86 f0       	mov    0xf086a14c,%eax
f010438e:	85 c0                	test   %eax,%eax
f0104390:	75 07                	jne    f0104399 <isSchedMethodRR+0x13>
f0104392:	b8 01 00 00 00       	mov    $0x1,%eax
f0104397:	eb 05                	jmp    f010439e <isSchedMethodRR+0x18>
f0104399:	b8 00 00 00 00       	mov    $0x0,%eax
f010439e:	5d                   	pop    %ebp
f010439f:	c3                   	ret    

f01043a0 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	a1 4c a1 86 f0       	mov    0xf086a14c,%eax
f01043a8:	83 f8 01             	cmp    $0x1,%eax
f01043ab:	75 07                	jne    f01043b4 <isSchedMethodMLFQ+0x14>
f01043ad:	b8 01 00 00 00       	mov    $0x1,%eax
f01043b2:	eb 05                	jmp    f01043b9 <isSchedMethodMLFQ+0x19>
f01043b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01043b9:	5d                   	pop    %ebp
f01043ba:	c3                   	ret    

f01043bb <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01043bb:	55                   	push   %ebp
f01043bc:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043c2:	74 1d                	je     f01043e1 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01043c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01043cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01043d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01043da:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043e1:	90                   	nop
f01043e2:	5d                   	pop    %ebp
f01043e3:	c3                   	ret    

f01043e4 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043e4:	55                   	push   %ebp
f01043e5:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043eb:	74 08                	je     f01043f5 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01043f3:	eb 05                	jmp    f01043fa <queue_size+0x16>
	}
	else
	{
		return 0;
f01043f5:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043fa:	5d                   	pop    %ebp
f01043fb:	c3                   	ret    

f01043fc <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043fc:	55                   	push   %ebp
f01043fd:	89 e5                	mov    %esp,%ebp
f01043ff:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104402:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104406:	75 16                	jne    f010441e <enqueue+0x22>
f0104408:	68 44 5e 13 f0       	push   $0xf0135e44
f010440d:	68 52 5e 13 f0       	push   $0xf0135e52
f0104412:	6a 2d                	push   $0x2d
f0104414:	68 67 5e 13 f0       	push   $0xf0135e67
f0104419:	e8 e7 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f010441e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104422:	74 66                	je     f010448a <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104424:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104428:	75 14                	jne    f010443e <enqueue+0x42>
f010442a:	83 ec 04             	sub    $0x4,%esp
f010442d:	68 78 5e 13 f0       	push   $0xf0135e78
f0104432:	6a 30                	push   $0x30
f0104434:	68 67 5e 13 f0       	push   $0xf0135e67
f0104439:	e8 c7 bd ff ff       	call   f0100205 <_panic>
f010443e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104441:	8b 10                	mov    (%eax),%edx
f0104443:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104446:	89 50 44             	mov    %edx,0x44(%eax)
f0104449:	8b 45 0c             	mov    0xc(%ebp),%eax
f010444c:	8b 40 44             	mov    0x44(%eax),%eax
f010444f:	85 c0                	test   %eax,%eax
f0104451:	74 0d                	je     f0104460 <enqueue+0x64>
f0104453:	8b 45 08             	mov    0x8(%ebp),%eax
f0104456:	8b 00                	mov    (%eax),%eax
f0104458:	8b 55 0c             	mov    0xc(%ebp),%edx
f010445b:	89 50 48             	mov    %edx,0x48(%eax)
f010445e:	eb 09                	jmp    f0104469 <enqueue+0x6d>
f0104460:	8b 45 08             	mov    0x8(%ebp),%eax
f0104463:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104466:	89 50 04             	mov    %edx,0x4(%eax)
f0104469:	8b 45 08             	mov    0x8(%ebp),%eax
f010446c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010446f:	89 10                	mov    %edx,(%eax)
f0104471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104474:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010447b:	8b 45 08             	mov    0x8(%ebp),%eax
f010447e:	8b 40 0c             	mov    0xc(%eax),%eax
f0104481:	8d 50 01             	lea    0x1(%eax),%edx
f0104484:	8b 45 08             	mov    0x8(%ebp),%eax
f0104487:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010448a:	90                   	nop
f010448b:	c9                   	leave  
f010448c:	c3                   	ret    

f010448d <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010448d:	55                   	push   %ebp
f010448e:	89 e5                	mov    %esp,%ebp
f0104490:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104493:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104497:	75 0a                	jne    f01044a3 <dequeue+0x16>
f0104499:	b8 00 00 00 00       	mov    $0x0,%eax
f010449e:	e9 a0 00 00 00       	jmp    f0104543 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f01044a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a6:	8b 40 04             	mov    0x4(%eax),%eax
f01044a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f01044ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044b0:	0f 84 8a 00 00 00    	je     f0104540 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f01044b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044ba:	75 14                	jne    f01044d0 <dequeue+0x43>
f01044bc:	83 ec 04             	sub    $0x4,%esp
f01044bf:	68 9b 5e 13 f0       	push   $0xf0135e9b
f01044c4:	6a 3a                	push   $0x3a
f01044c6:	68 67 5e 13 f0       	push   $0xf0135e67
f01044cb:	e8 35 bd ff ff       	call   f0100205 <_panic>
f01044d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044d3:	8b 40 44             	mov    0x44(%eax),%eax
f01044d6:	85 c0                	test   %eax,%eax
f01044d8:	74 11                	je     f01044eb <dequeue+0x5e>
f01044da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044dd:	8b 40 44             	mov    0x44(%eax),%eax
f01044e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044e3:	8b 52 48             	mov    0x48(%edx),%edx
f01044e6:	89 50 48             	mov    %edx,0x48(%eax)
f01044e9:	eb 0c                	jmp    f01044f7 <dequeue+0x6a>
f01044eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ee:	8b 50 48             	mov    0x48(%eax),%edx
f01044f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f4:	89 50 04             	mov    %edx,0x4(%eax)
f01044f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fa:	8b 40 48             	mov    0x48(%eax),%eax
f01044fd:	85 c0                	test   %eax,%eax
f01044ff:	74 11                	je     f0104512 <dequeue+0x85>
f0104501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104504:	8b 40 48             	mov    0x48(%eax),%eax
f0104507:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010450a:	8b 52 44             	mov    0x44(%edx),%edx
f010450d:	89 50 44             	mov    %edx,0x44(%eax)
f0104510:	eb 0b                	jmp    f010451d <dequeue+0x90>
f0104512:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104515:	8b 50 44             	mov    0x44(%eax),%edx
f0104518:	8b 45 08             	mov    0x8(%ebp),%eax
f010451b:	89 10                	mov    %edx,(%eax)
f010451d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104520:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104527:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010452a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104531:	8b 45 08             	mov    0x8(%ebp),%eax
f0104534:	8b 40 0c             	mov    0xc(%eax),%eax
f0104537:	8d 50 ff             	lea    -0x1(%eax),%edx
f010453a:	8b 45 08             	mov    0x8(%ebp),%eax
f010453d:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104540:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104543:	c9                   	leave  
f0104544:	c3                   	ret    

f0104545 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104545:	55                   	push   %ebp
f0104546:	89 e5                	mov    %esp,%ebp
f0104548:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f010454b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010454f:	75 16                	jne    f0104567 <remove_from_queue+0x22>
f0104551:	68 44 5e 13 f0       	push   $0xf0135e44
f0104556:	68 52 5e 13 f0       	push   $0xf0135e52
f010455b:	6a 41                	push   $0x41
f010455d:	68 67 5e 13 f0       	push   $0xf0135e67
f0104562:	e8 9e bc ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104567:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010456b:	0f 84 8a 00 00 00    	je     f01045fb <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104571:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104575:	75 14                	jne    f010458b <remove_from_queue+0x46>
f0104577:	83 ec 04             	sub    $0x4,%esp
f010457a:	68 9b 5e 13 f0       	push   $0xf0135e9b
f010457f:	6a 45                	push   $0x45
f0104581:	68 67 5e 13 f0       	push   $0xf0135e67
f0104586:	e8 7a bc ff ff       	call   f0100205 <_panic>
f010458b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010458e:	8b 40 44             	mov    0x44(%eax),%eax
f0104591:	85 c0                	test   %eax,%eax
f0104593:	74 11                	je     f01045a6 <remove_from_queue+0x61>
f0104595:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104598:	8b 40 44             	mov    0x44(%eax),%eax
f010459b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010459e:	8b 52 48             	mov    0x48(%edx),%edx
f01045a1:	89 50 48             	mov    %edx,0x48(%eax)
f01045a4:	eb 0c                	jmp    f01045b2 <remove_from_queue+0x6d>
f01045a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045a9:	8b 50 48             	mov    0x48(%eax),%edx
f01045ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01045af:	89 50 04             	mov    %edx,0x4(%eax)
f01045b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045b5:	8b 40 48             	mov    0x48(%eax),%eax
f01045b8:	85 c0                	test   %eax,%eax
f01045ba:	74 11                	je     f01045cd <remove_from_queue+0x88>
f01045bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045bf:	8b 40 48             	mov    0x48(%eax),%eax
f01045c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01045c5:	8b 52 44             	mov    0x44(%edx),%edx
f01045c8:	89 50 44             	mov    %edx,0x44(%eax)
f01045cb:	eb 0b                	jmp    f01045d8 <remove_from_queue+0x93>
f01045cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045d0:	8b 50 44             	mov    0x44(%eax),%edx
f01045d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d6:	89 10                	mov    %edx,(%eax)
f01045d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045db:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045e5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01045ef:	8b 40 0c             	mov    0xc(%eax),%eax
f01045f2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f8:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01045fb:	90                   	nop
f01045fc:	c9                   	leave  
f01045fd:	c3                   	ret    

f01045fe <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01045fe:	55                   	push   %ebp
f01045ff:	89 e5                	mov    %esp,%ebp
f0104601:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104604:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104608:	75 07                	jne    f0104611 <find_env_in_queue+0x13>
f010460a:	b8 00 00 00 00       	mov    $0x0,%eax
f010460f:	eb 58                	jmp    f0104669 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104611:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104618:	8b 45 08             	mov    0x8(%ebp),%eax
f010461b:	8b 00                	mov    (%eax),%eax
f010461d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104620:	eb 19                	jmp    f010463b <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104622:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104625:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104628:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010462b:	75 05                	jne    f0104632 <find_env_in_queue+0x34>
		{
			return ptr_env;
f010462d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104630:	eb 37                	jmp    f0104669 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104632:	8b 45 08             	mov    0x8(%ebp),%eax
f0104635:	8b 40 08             	mov    0x8(%eax),%eax
f0104638:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010463b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010463f:	74 08                	je     f0104649 <find_env_in_queue+0x4b>
f0104641:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104644:	8b 40 44             	mov    0x44(%eax),%eax
f0104647:	eb 05                	jmp    f010464e <find_env_in_queue+0x50>
f0104649:	b8 00 00 00 00       	mov    $0x0,%eax
f010464e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104651:	89 42 08             	mov    %eax,0x8(%edx)
f0104654:	8b 45 08             	mov    0x8(%ebp),%eax
f0104657:	8b 40 08             	mov    0x8(%eax),%eax
f010465a:	85 c0                	test   %eax,%eax
f010465c:	75 c4                	jne    f0104622 <find_env_in_queue+0x24>
f010465e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104662:	75 be                	jne    f0104622 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104664:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104669:	c9                   	leave  
f010466a:	c3                   	ret    

f010466b <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010466b:	55                   	push   %ebp
f010466c:	89 e5                	mov    %esp,%ebp
f010466e:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104671:	83 ec 04             	sub    $0x4,%esp
f0104674:	68 bc 5e 13 f0       	push   $0xf0135ebc
f0104679:	6a 5e                	push   $0x5e
f010467b:	68 67 5e 13 f0       	push   $0xf0135e67
f0104680:	e8 80 bb ff ff       	call   f0100205 <_panic>

f0104685 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104685:	55                   	push   %ebp
f0104686:	89 e5                	mov    %esp,%ebp
f0104688:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010468b:	e8 04 c6 02 00       	call   f0130c94 <chk1>
	scheduler_status = SCH_STARTED;
f0104690:	c7 05 58 a1 86 f0 01 	movl   $0x1,0xf086a158
f0104697:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010469a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f01046a1:	a1 4c a1 86 f0       	mov    0xf086a14c,%eax
f01046a6:	85 c0                	test   %eax,%eax
f01046a8:	75 4d                	jne    f01046f7 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f01046aa:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01046af:	85 c0                	test   %eax,%eax
f01046b1:	74 18                	je     f01046cb <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f01046b3:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f01046b9:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01046be:	83 ec 08             	sub    $0x8,%esp
f01046c1:	52                   	push   %edx
f01046c2:	50                   	push   %eax
f01046c3:	e8 34 fd ff ff       	call   f01043fc <enqueue>
f01046c8:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f01046cb:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01046d0:	83 ec 0c             	sub    $0xc,%esp
f01046d3:	50                   	push   %eax
f01046d4:	e8 b4 fd ff ff       	call   f010448d <dequeue>
f01046d9:	83 c4 10             	add    $0x10,%esp
f01046dc:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f01046df:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f01046e4:	8a 00                	mov    (%eax),%al
f01046e6:	0f b6 c0             	movzbl %al,%eax
f01046e9:	83 ec 0c             	sub    $0xc,%esp
f01046ec:	50                   	push   %eax
f01046ed:	e8 e7 fa ff ff       	call   f01041d9 <kclock_set_quantum>
f01046f2:	83 c4 10             	add    $0x10,%esp
f01046f5:	eb 12                	jmp    f0104709 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01046f7:	a1 4c a1 86 f0       	mov    0xf086a14c,%eax
f01046fc:	83 f8 01             	cmp    $0x1,%eax
f01046ff:	75 08                	jne    f0104709 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0104701:	e8 65 ff ff ff       	call   f010466b <fos_scheduler_MLFQ>
f0104706:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0104709:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010470e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	a3 f4 97 86 f0       	mov    %eax,0xf08697f4
	chk2(next_env) ;
f0104719:	83 ec 0c             	sub    $0xc,%esp
f010471c:	ff 75 f4             	pushl  -0xc(%ebp)
f010471f:	e8 ad c5 02 00       	call   f0130cd1 <chk2>
f0104724:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104727:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010472a:	a3 f4 97 86 f0       	mov    %eax,0xf08697f4

	//sched_print_all();

	if(next_env != NULL)
f010472f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104733:	74 0b                	je     f0104740 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104735:	83 ec 0c             	sub    $0xc,%esp
f0104738:	ff 75 f4             	pushl  -0xc(%ebp)
f010473b:	e8 e9 57 00 00       	call   f0109f29 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0104740:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f0104747:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010474a:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f010474f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0104752:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104755:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104758:	c7 05 58 a1 86 f0 00 	movl   $0x0,0xf086a158
f010475f:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104762:	83 ec 0c             	sub    $0xc,%esp
f0104765:	6a 00                	push   $0x0
f0104767:	e8 c8 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010476c:	83 c4 10             	add    $0x10,%esp
f010476f:	eb f1                	jmp    f0104762 <fos_scheduler+0xdd>

f0104771 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104771:	55                   	push   %ebp
f0104772:	89 e5                	mov    %esp,%ebp
f0104774:	83 ec 18             	sub    $0x18,%esp
f0104777:	8b 45 08             	mov    0x8(%ebp),%eax
f010477a:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010477d:	c6 05 80 a1 86 f0 01 	movb   $0x1,0xf086a180
#if USE_KHEAP
	sched_delete_ready_queues();
f0104784:	e8 e5 00 00 00       	call   f010486e <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0104789:	83 ec 0c             	sub    $0xc,%esp
f010478c:	6a 10                	push   $0x10
f010478e:	e8 d7 31 00 00       	call   f010796a <kmalloc>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	a3 e8 a0 86 f0       	mov    %eax,0xf086a0e8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010479b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01047a0:	0f b6 c0             	movzbl %al,%eax
f01047a3:	83 ec 0c             	sub    $0xc,%esp
f01047a6:	50                   	push   %eax
f01047a7:	e8 be 31 00 00       	call   f010796a <kmalloc>
f01047ac:	83 c4 10             	add    $0x10,%esp
f01047af:	a3 2c a1 86 f0       	mov    %eax,0xf086a12c
#endif
	quantums[0] = quantum;
f01047b4:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f01047b9:	8a 55 f4             	mov    -0xc(%ebp),%dl
f01047bc:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f01047be:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f01047c3:	8a 00                	mov    (%eax),%al
f01047c5:	0f b6 c0             	movzbl %al,%eax
f01047c8:	83 ec 0c             	sub    $0xc,%esp
f01047cb:	50                   	push   %eax
f01047cc:	e8 08 fa ff ff       	call   f01041d9 <kclock_set_quantum>
f01047d1:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01047d4:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01047d9:	83 ec 0c             	sub    $0xc,%esp
f01047dc:	50                   	push   %eax
f01047dd:	e8 d9 fb ff ff       	call   f01043bb <init_queue>
f01047e2:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f01047e5:	c7 05 58 a1 86 f0 00 	movl   $0x0,0xf086a158
f01047ec:	00 00 00 
	scheduler_method = SCH_RR;
f01047ef:	c7 05 4c a1 86 f0 00 	movl   $0x0,0xf086a14c
f01047f6:	00 00 00 
	//=========================================
	//=========================================
}
f01047f9:	90                   	nop
f01047fa:	c9                   	leave  
f01047fb:	c3                   	ret    

f01047fc <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01047fc:	55                   	push   %ebp
f01047fd:	89 e5                	mov    %esp,%ebp
f01047ff:	83 ec 18             	sub    $0x18,%esp
f0104802:	8b 45 08             	mov    0x8(%ebp),%eax
f0104805:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0104808:	e8 61 00 00 00       	call   f010486e <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f010480d:	83 ec 04             	sub    $0x4,%esp
f0104810:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0104815:	68 d1 00 00 00       	push   $0xd1
f010481a:	68 67 5e 13 f0       	push   $0xf0135e67
f010481f:	e8 e1 b9 ff ff       	call   f0100205 <_panic>

f0104824 <sched_init>:

}


void sched_init()
{
f0104824:	55                   	push   %ebp
f0104825:	89 e5                	mov    %esp,%ebp
f0104827:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f010482a:	c7 05 08 a1 86 f0 00 	movl   $0x0,0xf086a108
f0104831:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104834:	83 ec 0c             	sub    $0xc,%esp
f0104837:	6a 0a                	push   $0xa
f0104839:	e8 33 ff ff ff       	call   f0104771 <sched_init_RR>
f010483e:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104841:	83 ec 0c             	sub    $0xc,%esp
f0104844:	68 3c a1 86 f0       	push   $0xf086a13c
f0104849:	e8 6d fb ff ff       	call   f01043bb <init_queue>
f010484e:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104851:	83 ec 0c             	sub    $0xc,%esp
f0104854:	68 f4 a0 86 f0       	push   $0xf086a0f4
f0104859:	e8 5d fb ff ff       	call   f01043bb <init_queue>
f010485e:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104861:	c7 05 58 a1 86 f0 00 	movl   $0x0,0xf086a158
f0104868:	00 00 00 
}
f010486b:	90                   	nop
f010486c:	c9                   	leave  
f010486d:	c3                   	ret    

f010486e <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010486e:	55                   	push   %ebp
f010486f:	89 e5                	mov    %esp,%ebp
f0104871:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104874:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104879:	85 c0                	test   %eax,%eax
f010487b:	74 11                	je     f010488e <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010487d:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104882:	83 ec 0c             	sub    $0xc,%esp
f0104885:	50                   	push   %eax
f0104886:	e8 28 32 00 00       	call   f0107ab3 <kfree>
f010488b:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010488e:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f0104893:	85 c0                	test   %eax,%eax
f0104895:	74 11                	je     f01048a8 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104897:	a1 2c a1 86 f0       	mov    0xf086a12c,%eax
f010489c:	83 ec 0c             	sub    $0xc,%esp
f010489f:	50                   	push   %eax
f01048a0:	e8 0e 32 00 00       	call   f0107ab3 <kfree>
f01048a5:	83 c4 10             	add    $0x10,%esp
#endif
}
f01048a8:	90                   	nop
f01048a9:	c9                   	leave  
f01048aa:	c3                   	ret    

f01048ab <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01048ab:	55                   	push   %ebp
f01048ac:	89 e5                	mov    %esp,%ebp
f01048ae:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048b5:	74 1e                	je     f01048d5 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f01048b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ba:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01048c1:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01048c6:	83 ec 08             	sub    $0x8,%esp
f01048c9:	ff 75 08             	pushl  0x8(%ebp)
f01048cc:	50                   	push   %eax
f01048cd:	e8 2a fb ff ff       	call   f01043fc <enqueue>
f01048d2:	83 c4 10             	add    $0x10,%esp
	}
}
f01048d5:	90                   	nop
f01048d6:	c9                   	leave  
f01048d7:	c3                   	ret    

f01048d8 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01048d8:	55                   	push   %ebp
f01048d9:	89 e5                	mov    %esp,%ebp
f01048db:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01048de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048e2:	0f 84 fe 00 00 00    	je     f01049e6 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048ef:	e9 e1 00 00 00       	jmp    f01049d5 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01048f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01048f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048fa:	89 c2                	mov    %eax,%edx
f01048fc:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104901:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0104904:	c1 e1 04             	shl    $0x4,%ecx
f0104907:	01 c8                	add    %ecx,%eax
f0104909:	52                   	push   %edx
f010490a:	50                   	push   %eax
f010490b:	e8 ee fc ff ff       	call   f01045fe <find_env_in_queue>
f0104910:	83 c4 08             	add    $0x8,%esp
f0104913:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104916:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010491a:	0f 84 b2 00 00 00    	je     f01049d2 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104920:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104924:	75 17                	jne    f010493d <sched_remove_ready+0x65>
f0104926:	83 ec 04             	sub    $0x4,%esp
f0104929:	68 9b 5e 13 f0       	push   $0xf0135e9b
f010492e:	68 0b 01 00 00       	push   $0x10b
f0104933:	68 67 5e 13 f0       	push   $0xf0135e67
f0104938:	e8 c8 b8 ff ff       	call   f0100205 <_panic>
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 40 44             	mov    0x44(%eax),%eax
f0104943:	85 c0                	test   %eax,%eax
f0104945:	74 11                	je     f0104958 <sched_remove_ready+0x80>
f0104947:	8b 45 08             	mov    0x8(%ebp),%eax
f010494a:	8b 40 44             	mov    0x44(%eax),%eax
f010494d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104950:	8b 52 48             	mov    0x48(%edx),%edx
f0104953:	89 50 48             	mov    %edx,0x48(%eax)
f0104956:	eb 16                	jmp    f010496e <sched_remove_ready+0x96>
f0104958:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010495d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104960:	c1 e2 04             	shl    $0x4,%edx
f0104963:	01 c2                	add    %eax,%edx
f0104965:	8b 45 08             	mov    0x8(%ebp),%eax
f0104968:	8b 40 48             	mov    0x48(%eax),%eax
f010496b:	89 42 04             	mov    %eax,0x4(%edx)
f010496e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104971:	8b 40 48             	mov    0x48(%eax),%eax
f0104974:	85 c0                	test   %eax,%eax
f0104976:	74 11                	je     f0104989 <sched_remove_ready+0xb1>
f0104978:	8b 45 08             	mov    0x8(%ebp),%eax
f010497b:	8b 40 48             	mov    0x48(%eax),%eax
f010497e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104981:	8b 52 44             	mov    0x44(%edx),%edx
f0104984:	89 50 44             	mov    %edx,0x44(%eax)
f0104987:	eb 15                	jmp    f010499e <sched_remove_ready+0xc6>
f0104989:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010498e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104991:	c1 e2 04             	shl    $0x4,%edx
f0104994:	01 c2                	add    %eax,%edx
f0104996:	8b 45 08             	mov    0x8(%ebp),%eax
f0104999:	8b 40 44             	mov    0x44(%eax),%eax
f010499c:	89 02                	mov    %eax,(%edx)
f010499e:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ab:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049b2:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01049b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01049ba:	c1 e2 04             	shl    $0x4,%edx
f01049bd:	01 d0                	add    %edx,%eax
f01049bf:	8b 50 0c             	mov    0xc(%eax),%edx
f01049c2:	4a                   	dec    %edx
f01049c3:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01049d0:	eb 14                	jmp    f01049e6 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01049d2:	ff 45 f4             	incl   -0xc(%ebp)
f01049d5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01049da:	0f b6 c0             	movzbl %al,%eax
f01049dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049e0:	0f 8f 0e ff ff ff    	jg     f01048f4 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01049e6:	c9                   	leave  
f01049e7:	c3                   	ret    

f01049e8 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01049e8:	55                   	push   %ebp
f01049e9:	89 e5                	mov    %esp,%ebp
f01049eb:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f2:	74 1d                	je     f0104a11 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f01049f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f7:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f01049fe:	83 ec 08             	sub    $0x8,%esp
f0104a01:	ff 75 08             	pushl  0x8(%ebp)
f0104a04:	68 3c a1 86 f0       	push   $0xf086a13c
f0104a09:	e8 ee f9 ff ff       	call   f01043fc <enqueue>
f0104a0e:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a11:	90                   	nop
f0104a12:	c9                   	leave  
f0104a13:	c3                   	ret    

f0104a14 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104a14:	55                   	push   %ebp
f0104a15:	89 e5                	mov    %esp,%ebp
f0104a17:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1e:	0f 84 92 00 00 00    	je     f0104ab6 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104a24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a28:	75 17                	jne    f0104a41 <sched_remove_new+0x2d>
f0104a2a:	83 ec 04             	sub    $0x4,%esp
f0104a2d:	68 9b 5e 13 f0       	push   $0xf0135e9b
f0104a32:	68 1f 01 00 00       	push   $0x11f
f0104a37:	68 67 5e 13 f0       	push   $0xf0135e67
f0104a3c:	e8 c4 b7 ff ff       	call   f0100205 <_panic>
f0104a41:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a44:	8b 40 44             	mov    0x44(%eax),%eax
f0104a47:	85 c0                	test   %eax,%eax
f0104a49:	74 11                	je     f0104a5c <sched_remove_new+0x48>
f0104a4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4e:	8b 40 44             	mov    0x44(%eax),%eax
f0104a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a54:	8b 52 48             	mov    0x48(%edx),%edx
f0104a57:	89 50 48             	mov    %edx,0x48(%eax)
f0104a5a:	eb 0b                	jmp    f0104a67 <sched_remove_new+0x53>
f0104a5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5f:	8b 40 48             	mov    0x48(%eax),%eax
f0104a62:	a3 40 a1 86 f0       	mov    %eax,0xf086a140
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6d:	85 c0                	test   %eax,%eax
f0104a6f:	74 11                	je     f0104a82 <sched_remove_new+0x6e>
f0104a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a74:	8b 40 48             	mov    0x48(%eax),%eax
f0104a77:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a7a:	8b 52 44             	mov    0x44(%edx),%edx
f0104a7d:	89 50 44             	mov    %edx,0x44(%eax)
f0104a80:	eb 0b                	jmp    f0104a8d <sched_remove_new+0x79>
f0104a82:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a85:	8b 40 44             	mov    0x44(%eax),%eax
f0104a88:	a3 3c a1 86 f0       	mov    %eax,0xf086a13c
f0104a8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a90:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a97:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a9a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104aa1:	a1 48 a1 86 f0       	mov    0xf086a148,%eax
f0104aa6:	48                   	dec    %eax
f0104aa7:	a3 48 a1 86 f0       	mov    %eax,0xf086a148
		env->env_status = ENV_UNKNOWN;
f0104aac:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aaf:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104ab6:	90                   	nop
f0104ab7:	c9                   	leave  
f0104ab8:	c3                   	ret    

f0104ab9 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104ab9:	55                   	push   %ebp
f0104aba:	89 e5                	mov    %esp,%ebp
f0104abc:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac3:	74 34                	je     f0104af9 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104ac5:	e8 f8 97 00 00       	call   f010e2c2 <isBufferingEnabled>
f0104aca:	84 c0                	test   %al,%al
f0104acc:	74 0e                	je     f0104adc <sched_insert_exit+0x23>
f0104ace:	83 ec 0c             	sub    $0xc,%esp
f0104ad1:	ff 75 08             	pushl  0x8(%ebp)
f0104ad4:	e8 be 68 00 00       	call   f010b397 <cleanup_buffers>
f0104ad9:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104adf:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ae6:	83 ec 08             	sub    $0x8,%esp
f0104ae9:	ff 75 08             	pushl  0x8(%ebp)
f0104aec:	68 f4 a0 86 f0       	push   $0xf086a0f4
f0104af1:	e8 06 f9 ff ff       	call   f01043fc <enqueue>
f0104af6:	83 c4 10             	add    $0x10,%esp
	}
}
f0104af9:	90                   	nop
f0104afa:	c9                   	leave  
f0104afb:	c3                   	ret    

f0104afc <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104afc:	55                   	push   %ebp
f0104afd:	89 e5                	mov    %esp,%ebp
f0104aff:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b06:	0f 84 92 00 00 00    	je     f0104b9e <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104b0c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b10:	75 17                	jne    f0104b29 <sched_remove_exit+0x2d>
f0104b12:	83 ec 04             	sub    $0x4,%esp
f0104b15:	68 9b 5e 13 f0       	push   $0xf0135e9b
f0104b1a:	68 31 01 00 00       	push   $0x131
f0104b1f:	68 67 5e 13 f0       	push   $0xf0135e67
f0104b24:	e8 dc b6 ff ff       	call   f0100205 <_panic>
f0104b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2c:	8b 40 44             	mov    0x44(%eax),%eax
f0104b2f:	85 c0                	test   %eax,%eax
f0104b31:	74 11                	je     f0104b44 <sched_remove_exit+0x48>
f0104b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b36:	8b 40 44             	mov    0x44(%eax),%eax
f0104b39:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b3c:	8b 52 48             	mov    0x48(%edx),%edx
f0104b3f:	89 50 48             	mov    %edx,0x48(%eax)
f0104b42:	eb 0b                	jmp    f0104b4f <sched_remove_exit+0x53>
f0104b44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b47:	8b 40 48             	mov    0x48(%eax),%eax
f0104b4a:	a3 f8 a0 86 f0       	mov    %eax,0xf086a0f8
f0104b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b52:	8b 40 48             	mov    0x48(%eax),%eax
f0104b55:	85 c0                	test   %eax,%eax
f0104b57:	74 11                	je     f0104b6a <sched_remove_exit+0x6e>
f0104b59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b5c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b5f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b62:	8b 52 44             	mov    0x44(%edx),%edx
f0104b65:	89 50 44             	mov    %edx,0x44(%eax)
f0104b68:	eb 0b                	jmp    f0104b75 <sched_remove_exit+0x79>
f0104b6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b6d:	8b 40 44             	mov    0x44(%eax),%eax
f0104b70:	a3 f4 a0 86 f0       	mov    %eax,0xf086a0f4
f0104b75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b78:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b82:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b89:	a1 00 a1 86 f0       	mov    0xf086a100,%eax
f0104b8e:	48                   	dec    %eax
f0104b8f:	a3 00 a1 86 f0       	mov    %eax,0xf086a100
		env->env_status = ENV_UNKNOWN;
f0104b94:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b97:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b9e:	90                   	nop
f0104b9f:	c9                   	leave  
f0104ba0:	c3                   	ret    

f0104ba1 <sched_print_all>:

void sched_print_all()
{
f0104ba1:	55                   	push   %ebp
f0104ba2:	89 e5                	mov    %esp,%ebp
f0104ba4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ba7:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0104bac:	85 c0                	test   %eax,%eax
f0104bae:	74 6c                	je     f0104c1c <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104bb0:	83 ec 0c             	sub    $0xc,%esp
f0104bb3:	68 20 5f 13 f0       	push   $0xf0135f20
f0104bb8:	e8 51 c1 ff ff       	call   f0100d0e <cprintf>
f0104bbd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104bc0:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0104bc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bc8:	eb 29                	jmp    f0104bf3 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bcd:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104bd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bd6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104bd9:	83 ec 04             	sub    $0x4,%esp
f0104bdc:	52                   	push   %edx
f0104bdd:	50                   	push   %eax
f0104bde:	68 42 5f 13 f0       	push   $0xf0135f42
f0104be3:	e8 26 c1 ff ff       	call   f0100d0e <cprintf>
f0104be8:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104beb:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104bf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf7:	74 08                	je     f0104c01 <sched_print_all+0x60>
f0104bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104bff:	eb 05                	jmp    f0104c06 <sched_print_all+0x65>
f0104c01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c06:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f0104c0b:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104c10:	85 c0                	test   %eax,%eax
f0104c12:	75 b6                	jne    f0104bca <sched_print_all+0x29>
f0104c14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c18:	75 b0                	jne    f0104bca <sched_print_all+0x29>
f0104c1a:	eb 10                	jmp    f0104c2c <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104c1c:	83 ec 0c             	sub    $0xc,%esp
f0104c1f:	68 4c 5f 13 f0       	push   $0xf0135f4c
f0104c24:	e8 e5 c0 ff ff       	call   f0100d0e <cprintf>
f0104c29:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104c2c:	83 ec 0c             	sub    $0xc,%esp
f0104c2f:	68 68 5f 13 f0       	push   $0xf0135f68
f0104c34:	e8 d5 c0 ff ff       	call   f0100d0e <cprintf>
f0104c39:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104c43:	e9 ca 00 00 00       	jmp    f0104d12 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104c48:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104c4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c50:	c1 e2 04             	shl    $0x4,%edx
f0104c53:	01 d0                	add    %edx,%eax
f0104c55:	8b 00                	mov    (%eax),%eax
f0104c57:	85 c0                	test   %eax,%eax
f0104c59:	0f 84 8d 00 00 00    	je     f0104cec <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104c5f:	83 ec 08             	sub    $0x8,%esp
f0104c62:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c65:	68 9c 5f 13 f0       	push   $0xf0135f9c
f0104c6a:	e8 9f c0 ff ff       	call   f0100d0e <cprintf>
f0104c6f:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c72:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104c77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c7a:	c1 e2 04             	shl    $0x4,%edx
f0104c7d:	01 d0                	add    %edx,%eax
f0104c7f:	8b 00                	mov    (%eax),%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	eb 34                	jmp    f0104cba <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c89:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c92:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c95:	83 ec 04             	sub    $0x4,%esp
f0104c98:	52                   	push   %edx
f0104c99:	50                   	push   %eax
f0104c9a:	68 42 5f 13 f0       	push   $0xf0135f42
f0104c9f:	e8 6a c0 ff ff       	call   f0100d0e <cprintf>
f0104ca4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ca7:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104cac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104caf:	c1 e2 04             	shl    $0x4,%edx
f0104cb2:	01 d0                	add    %edx,%eax
f0104cb4:	8b 40 08             	mov    0x8(%eax),%eax
f0104cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cba:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104cbf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cc2:	c1 e2 04             	shl    $0x4,%edx
f0104cc5:	01 d0                	add    %edx,%eax
f0104cc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ccb:	74 08                	je     f0104cd5 <sched_print_all+0x134>
f0104ccd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104cd0:	8b 52 44             	mov    0x44(%edx),%edx
f0104cd3:	eb 05                	jmp    f0104cda <sched_print_all+0x139>
f0104cd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0104cda:	89 50 08             	mov    %edx,0x8(%eax)
f0104cdd:	8b 40 08             	mov    0x8(%eax),%eax
f0104ce0:	85 c0                	test   %eax,%eax
f0104ce2:	75 a2                	jne    f0104c86 <sched_print_all+0xe5>
f0104ce4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ce8:	75 9c                	jne    f0104c86 <sched_print_all+0xe5>
f0104cea:	eb 13                	jmp    f0104cff <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104cec:	83 ec 08             	sub    $0x8,%esp
f0104cef:	ff 75 f0             	pushl  -0x10(%ebp)
f0104cf2:	68 c4 5f 13 f0       	push   $0xf0135fc4
f0104cf7:	e8 12 c0 ff ff       	call   f0100d0e <cprintf>
f0104cfc:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104cff:	83 ec 0c             	sub    $0xc,%esp
f0104d02:	68 68 5f 13 f0       	push   $0xf0135f68
f0104d07:	e8 02 c0 ff ff       	call   f0100d0e <cprintf>
f0104d0c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d0f:	ff 45 f0             	incl   -0x10(%ebp)
f0104d12:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0104d17:	0f b6 c0             	movzbl %al,%eax
f0104d1a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104d1d:	0f 8f 25 ff ff ff    	jg     f0104c48 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104d23:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f0104d28:	85 c0                	test   %eax,%eax
f0104d2a:	74 6c                	je     f0104d98 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104d2c:	83 ec 0c             	sub    $0xc,%esp
f0104d2f:	68 e8 5f 13 f0       	push   $0xf0135fe8
f0104d34:	e8 d5 bf ff ff       	call   f0100d0e <cprintf>
f0104d39:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d3c:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f0104d41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d44:	eb 29                	jmp    f0104d6f <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d49:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d52:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d55:	83 ec 04             	sub    $0x4,%esp
f0104d58:	52                   	push   %edx
f0104d59:	50                   	push   %eax
f0104d5a:	68 42 5f 13 f0       	push   $0xf0135f42
f0104d5f:	e8 aa bf ff ff       	call   f0100d0e <cprintf>
f0104d64:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d67:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0104d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d73:	74 08                	je     f0104d7d <sched_print_all+0x1dc>
f0104d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d78:	8b 40 44             	mov    0x44(%eax),%eax
f0104d7b:	eb 05                	jmp    f0104d82 <sched_print_all+0x1e1>
f0104d7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d82:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f0104d87:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0104d8c:	85 c0                	test   %eax,%eax
f0104d8e:	75 b6                	jne    f0104d46 <sched_print_all+0x1a5>
f0104d90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d94:	75 b0                	jne    f0104d46 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104d96:	eb 10                	jmp    f0104da8 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104d98:	83 ec 0c             	sub    $0xc,%esp
f0104d9b:	68 0a 60 13 f0       	push   $0xf013600a
f0104da0:	e8 69 bf ff ff       	call   f0100d0e <cprintf>
f0104da5:	83 c4 10             	add    $0x10,%esp
	}
}
f0104da8:	90                   	nop
f0104da9:	c9                   	leave  
f0104daa:	c3                   	ret    

f0104dab <sched_run_all>:

void sched_run_all()
{
f0104dab:	55                   	push   %ebp
f0104dac:	89 e5                	mov    %esp,%ebp
f0104dae:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104db8:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0104dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc0:	eb 24                	jmp    f0104de6 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104dc2:	83 ec 0c             	sub    $0xc,%esp
f0104dc5:	ff 75 f4             	pushl  -0xc(%ebp)
f0104dc8:	e8 47 fc ff ff       	call   f0104a14 <sched_remove_new>
f0104dcd:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104dd0:	83 ec 0c             	sub    $0xc,%esp
f0104dd3:	ff 75 f4             	pushl  -0xc(%ebp)
f0104dd6:	e8 d0 fa ff ff       	call   f01048ab <sched_insert_ready>
f0104ddb:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104dde:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104de3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dea:	74 08                	je     f0104df4 <sched_run_all+0x49>
f0104dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104def:	8b 40 44             	mov    0x44(%eax),%eax
f0104df2:	eb 05                	jmp    f0104df9 <sched_run_all+0x4e>
f0104df4:	b8 00 00 00 00       	mov    $0x0,%eax
f0104df9:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f0104dfe:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104e03:	85 c0                	test   %eax,%eax
f0104e05:	75 bb                	jne    f0104dc2 <sched_run_all+0x17>
f0104e07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e0b:	75 b5                	jne    f0104dc2 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104e0d:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f0104e12:	85 c0                	test   %eax,%eax
f0104e14:	75 05                	jne    f0104e1b <sched_run_all+0x70>
		fos_scheduler();
f0104e16:	e8 6a f8 ff ff       	call   f0104685 <fos_scheduler>
}
f0104e1b:	90                   	nop
f0104e1c:	c9                   	leave  
f0104e1d:	c3                   	ret    

f0104e1e <sched_kill_all>:

void sched_kill_all()
{
f0104e1e:	55                   	push   %ebp
f0104e1f:	89 e5                	mov    %esp,%ebp
f0104e21:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104e24:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0104e29:	85 c0                	test   %eax,%eax
f0104e2b:	0f 84 98 00 00 00    	je     f0104ec9 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104e31:	83 ec 0c             	sub    $0xc,%esp
f0104e34:	68 28 60 13 f0       	push   $0xf0136028
f0104e39:	e8 d0 be ff ff       	call   f0100d0e <cprintf>
f0104e3e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e41:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0104e46:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e49:	eb 55                	jmp    f0104ea0 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e57:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e5a:	83 ec 04             	sub    $0x4,%esp
f0104e5d:	52                   	push   %edx
f0104e5e:	50                   	push   %eax
f0104e5f:	68 54 60 13 f0       	push   $0xf0136054
f0104e64:	e8 a5 be ff ff       	call   f0100d0e <cprintf>
f0104e69:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104e6c:	83 ec 0c             	sub    $0xc,%esp
f0104e6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e72:	e8 9d fb ff ff       	call   f0104a14 <sched_remove_new>
f0104e77:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104e7a:	83 ec 0c             	sub    $0xc,%esp
f0104e7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e80:	e8 f8 50 00 00       	call   f0109f7d <env_free>
f0104e85:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104e88:	83 ec 0c             	sub    $0xc,%esp
f0104e8b:	68 67 60 13 f0       	push   $0xf0136067
f0104e90:	e8 79 be ff ff       	call   f0100d0e <cprintf>
f0104e95:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e98:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104e9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ea0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ea4:	74 08                	je     f0104eae <sched_kill_all+0x90>
f0104ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea9:	8b 40 44             	mov    0x44(%eax),%eax
f0104eac:	eb 05                	jmp    f0104eb3 <sched_kill_all+0x95>
f0104eae:	b8 00 00 00 00       	mov    $0x0,%eax
f0104eb3:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f0104eb8:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f0104ebd:	85 c0                	test   %eax,%eax
f0104ebf:	75 8a                	jne    f0104e4b <sched_kill_all+0x2d>
f0104ec1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ec5:	75 84                	jne    f0104e4b <sched_kill_all+0x2d>
f0104ec7:	eb 10                	jmp    f0104ed9 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104ec9:	83 ec 0c             	sub    $0xc,%esp
f0104ecc:	68 6d 60 13 f0       	push   $0xf013606d
f0104ed1:	e8 38 be ff ff       	call   f0100d0e <cprintf>
f0104ed6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ed9:	83 ec 0c             	sub    $0xc,%esp
f0104edc:	68 68 5f 13 f0       	push   $0xf0135f68
f0104ee1:	e8 28 be ff ff       	call   f0100d0e <cprintf>
f0104ee6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104ee9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ef0:	e9 99 01 00 00       	jmp    f010508e <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ef5:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104efa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104efd:	c1 e2 04             	shl    $0x4,%edx
f0104f00:	01 d0                	add    %edx,%eax
f0104f02:	8b 00                	mov    (%eax),%eax
f0104f04:	85 c0                	test   %eax,%eax
f0104f06:	0f 84 5c 01 00 00    	je     f0105068 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104f0c:	83 ec 08             	sub    $0x8,%esp
f0104f0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f12:	68 88 60 13 f0       	push   $0xf0136088
f0104f17:	e8 f2 bd ff ff       	call   f0100d0e <cprintf>
f0104f1c:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f1f:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104f24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f27:	c1 e2 04             	shl    $0x4,%edx
f0104f2a:	01 d0                	add    %edx,%eax
f0104f2c:	8b 00                	mov    (%eax),%eax
f0104f2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f31:	e9 f8 00 00 00       	jmp    f010502e <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f39:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f42:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f45:	83 ec 04             	sub    $0x4,%esp
f0104f48:	52                   	push   %edx
f0104f49:	50                   	push   %eax
f0104f4a:	68 54 60 13 f0       	push   $0xf0136054
f0104f4f:	e8 ba bd ff ff       	call   f0100d0e <cprintf>
f0104f54:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104f57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f5b:	75 17                	jne    f0104f74 <sched_kill_all+0x156>
f0104f5d:	83 ec 04             	sub    $0x4,%esp
f0104f60:	68 9b 5e 13 f0       	push   $0xf0135e9b
f0104f65:	68 8c 01 00 00       	push   $0x18c
f0104f6a:	68 67 5e 13 f0       	push   $0xf0135e67
f0104f6f:	e8 91 b2 ff ff       	call   f0100205 <_panic>
f0104f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f77:	8b 40 44             	mov    0x44(%eax),%eax
f0104f7a:	85 c0                	test   %eax,%eax
f0104f7c:	74 11                	je     f0104f8f <sched_kill_all+0x171>
f0104f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f81:	8b 40 44             	mov    0x44(%eax),%eax
f0104f84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f87:	8b 52 48             	mov    0x48(%edx),%edx
f0104f8a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f8d:	eb 16                	jmp    f0104fa5 <sched_kill_all+0x187>
f0104f8f:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104f94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f97:	c1 e2 04             	shl    $0x4,%edx
f0104f9a:	01 c2                	add    %eax,%edx
f0104f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9f:	8b 40 48             	mov    0x48(%eax),%eax
f0104fa2:	89 42 04             	mov    %eax,0x4(%edx)
f0104fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fa8:	8b 40 48             	mov    0x48(%eax),%eax
f0104fab:	85 c0                	test   %eax,%eax
f0104fad:	74 11                	je     f0104fc0 <sched_kill_all+0x1a2>
f0104faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fb2:	8b 40 48             	mov    0x48(%eax),%eax
f0104fb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104fb8:	8b 52 44             	mov    0x44(%edx),%edx
f0104fbb:	89 50 44             	mov    %edx,0x44(%eax)
f0104fbe:	eb 15                	jmp    f0104fd5 <sched_kill_all+0x1b7>
f0104fc0:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 c2                	add    %eax,%edx
f0104fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fd0:	8b 40 44             	mov    0x44(%eax),%eax
f0104fd3:	89 02                	mov    %eax,(%edx)
f0104fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fd8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fe9:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0104fee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ff1:	c1 e2 04             	shl    $0x4,%edx
f0104ff4:	01 d0                	add    %edx,%eax
f0104ff6:	8b 50 0c             	mov    0xc(%eax),%edx
f0104ff9:	4a                   	dec    %edx
f0104ffa:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0104ffd:	83 ec 0c             	sub    $0xc,%esp
f0105000:	ff 75 f4             	pushl  -0xc(%ebp)
f0105003:	e8 75 4f 00 00       	call   f0109f7d <env_free>
f0105008:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010500b:	83 ec 0c             	sub    $0xc,%esp
f010500e:	68 67 60 13 f0       	push   $0xf0136067
f0105013:	e8 f6 bc ff ff       	call   f0100d0e <cprintf>
f0105018:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010501b:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105020:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105023:	c1 e2 04             	shl    $0x4,%edx
f0105026:	01 d0                	add    %edx,%eax
f0105028:	8b 40 08             	mov    0x8(%eax),%eax
f010502b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502e:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105033:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105036:	c1 e2 04             	shl    $0x4,%edx
f0105039:	01 d0                	add    %edx,%eax
f010503b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010503f:	74 08                	je     f0105049 <sched_kill_all+0x22b>
f0105041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105044:	8b 52 44             	mov    0x44(%edx),%edx
f0105047:	eb 05                	jmp    f010504e <sched_kill_all+0x230>
f0105049:	ba 00 00 00 00       	mov    $0x0,%edx
f010504e:	89 50 08             	mov    %edx,0x8(%eax)
f0105051:	8b 40 08             	mov    0x8(%eax),%eax
f0105054:	85 c0                	test   %eax,%eax
f0105056:	0f 85 da fe ff ff    	jne    f0104f36 <sched_kill_all+0x118>
f010505c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105060:	0f 85 d0 fe ff ff    	jne    f0104f36 <sched_kill_all+0x118>
f0105066:	eb 13                	jmp    f010507b <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105068:	83 ec 08             	sub    $0x8,%esp
f010506b:	ff 75 f0             	pushl  -0x10(%ebp)
f010506e:	68 c4 5f 13 f0       	push   $0xf0135fc4
f0105073:	e8 96 bc ff ff       	call   f0100d0e <cprintf>
f0105078:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010507b:	83 ec 0c             	sub    $0xc,%esp
f010507e:	68 68 5f 13 f0       	push   $0xf0135f68
f0105083:	e8 86 bc ff ff       	call   f0100d0e <cprintf>
f0105088:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010508b:	ff 45 f0             	incl   -0x10(%ebp)
f010508e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0105093:	0f b6 c0             	movzbl %al,%eax
f0105096:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105099:	0f 8f 56 fe ff ff    	jg     f0104ef5 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010509f:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f01050a4:	85 c0                	test   %eax,%eax
f01050a6:	0f 84 98 00 00 00    	je     f0105144 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 bc 60 13 f0       	push   $0xf01360bc
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01050bc:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f01050c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050c4:	eb 55                	jmp    f010511b <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01050c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050c9:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01050cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050d5:	83 ec 04             	sub    $0x4,%esp
f01050d8:	52                   	push   %edx
f01050d9:	50                   	push   %eax
f01050da:	68 54 60 13 f0       	push   $0xf0136054
f01050df:	e8 2a bc ff ff       	call   f0100d0e <cprintf>
f01050e4:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01050e7:	83 ec 0c             	sub    $0xc,%esp
f01050ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ed:	e8 0a fa ff ff       	call   f0104afc <sched_remove_exit>
f01050f2:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01050f5:	83 ec 0c             	sub    $0xc,%esp
f01050f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01050fb:	e8 7d 4e 00 00       	call   f0109f7d <env_free>
f0105100:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105103:	83 ec 0c             	sub    $0xc,%esp
f0105106:	68 67 60 13 f0       	push   $0xf0136067
f010510b:	e8 fe bb ff ff       	call   f0100d0e <cprintf>
f0105110:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105113:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0105118:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010511b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010511f:	74 08                	je     f0105129 <sched_kill_all+0x30b>
f0105121:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105124:	8b 40 44             	mov    0x44(%eax),%eax
f0105127:	eb 05                	jmp    f010512e <sched_kill_all+0x310>
f0105129:	b8 00 00 00 00       	mov    $0x0,%eax
f010512e:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f0105133:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0105138:	85 c0                	test   %eax,%eax
f010513a:	75 8a                	jne    f01050c6 <sched_kill_all+0x2a8>
f010513c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105140:	75 84                	jne    f01050c6 <sched_kill_all+0x2a8>
f0105142:	eb 10                	jmp    f0105154 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	68 0a 60 13 f0       	push   $0xf013600a
f010514c:	e8 bd bb ff ff       	call   f0100d0e <cprintf>
f0105151:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105154:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f010515b:	00 00 00 
	fos_scheduler();
f010515e:	e8 22 f5 ff ff       	call   f0104685 <fos_scheduler>

f0105163 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105163:	55                   	push   %ebp
f0105164:	89 e5                	mov    %esp,%ebp
f0105166:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105169:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010516d:	74 0e                	je     f010517d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010516f:	83 ec 0c             	sub    $0xc,%esp
f0105172:	ff 75 08             	pushl  0x8(%ebp)
f0105175:	e8 6e f8 ff ff       	call   f01049e8 <sched_insert_new>
f010517a:	83 c4 10             	add    $0x10,%esp
	}
}
f010517d:	90                   	nop
f010517e:	c9                   	leave  
f010517f:	c3                   	ret    

f0105180 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105180:	55                   	push   %ebp
f0105181:	89 e5                	mov    %esp,%ebp
f0105183:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105186:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010518d:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0105192:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105195:	eb 3d                	jmp    f01051d4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010519a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010519d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051a0:	75 2a                	jne    f01051cc <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01051a2:	83 ec 0c             	sub    $0xc,%esp
f01051a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01051a8:	e8 67 f8 ff ff       	call   f0104a14 <sched_remove_new>
f01051ad:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01051b0:	83 ec 0c             	sub    $0xc,%esp
f01051b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01051b6:	e8 f0 f6 ff ff       	call   f01048ab <sched_insert_ready>
f01051bb:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01051be:	a1 58 a1 86 f0       	mov    0xf086a158,%eax
f01051c3:	85 c0                	test   %eax,%eax
f01051c5:	75 36                	jne    f01051fd <sched_run_env+0x7d>
			{
				fos_scheduler();
f01051c7:	e8 b9 f4 ff ff       	call   f0104685 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01051cc:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f01051d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051d8:	74 08                	je     f01051e2 <sched_run_env+0x62>
f01051da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051dd:	8b 40 44             	mov    0x44(%eax),%eax
f01051e0:	eb 05                	jmp    f01051e7 <sched_run_env+0x67>
f01051e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01051e7:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f01051ec:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f01051f1:	85 c0                	test   %eax,%eax
f01051f3:	75 a2                	jne    f0105197 <sched_run_env+0x17>
f01051f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051f9:	75 9c                	jne    f0105197 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051fb:	eb 01                	jmp    f01051fe <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01051fd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051fe:	90                   	nop
f01051ff:	c9                   	leave  
f0105200:	c3                   	ret    

f0105201 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105201:	55                   	push   %ebp
f0105202:	89 e5                	mov    %esp,%ebp
f0105204:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105207:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010520e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105215:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105219:	75 59                	jne    f0105274 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010521b:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f0105220:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105223:	eb 28                	jmp    f010524d <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105225:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105228:	8b 40 4c             	mov    0x4c(%eax),%eax
f010522b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010522e:	75 15                	jne    f0105245 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105230:	83 ec 0c             	sub    $0xc,%esp
f0105233:	ff 75 f4             	pushl  -0xc(%ebp)
f0105236:	e8 d9 f7 ff ff       	call   f0104a14 <sched_remove_new>
f010523b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010523e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105245:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f010524a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010524d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105251:	74 08                	je     f010525b <sched_exit_env+0x5a>
f0105253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105256:	8b 40 44             	mov    0x44(%eax),%eax
f0105259:	eb 05                	jmp    f0105260 <sched_exit_env+0x5f>
f010525b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105260:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f0105265:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f010526a:	85 c0                	test   %eax,%eax
f010526c:	75 b7                	jne    f0105225 <sched_exit_env+0x24>
f010526e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105272:	75 b1                	jne    f0105225 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105274:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105278:	0f 85 67 01 00 00    	jne    f01053e5 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010527e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105285:	e9 47 01 00 00       	jmp    f01053d1 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010528a:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010528f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105292:	c1 e2 04             	shl    $0x4,%edx
f0105295:	01 d0                	add    %edx,%eax
f0105297:	8b 00                	mov    (%eax),%eax
f0105299:	85 c0                	test   %eax,%eax
f010529b:	0f 84 27 01 00 00    	je     f01053c8 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f01052a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01052a8:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01052ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b0:	c1 e2 04             	shl    $0x4,%edx
f01052b3:	01 d0                	add    %edx,%eax
f01052b5:	8b 00                	mov    (%eax),%eax
f01052b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ba:	e9 d1 00 00 00       	jmp    f0105390 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f01052bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052c5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052c8:	0f 85 af 00 00 00    	jne    f010537d <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01052ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052d2:	75 17                	jne    f01052eb <sched_exit_env+0xea>
f01052d4:	83 ec 04             	sub    $0x4,%esp
f01052d7:	68 9b 5e 13 f0       	push   $0xf0135e9b
f01052dc:	68 f7 01 00 00       	push   $0x1f7
f01052e1:	68 67 5e 13 f0       	push   $0xf0135e67
f01052e6:	e8 1a af ff ff       	call   f0100205 <_panic>
f01052eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ee:	8b 40 44             	mov    0x44(%eax),%eax
f01052f1:	85 c0                	test   %eax,%eax
f01052f3:	74 11                	je     f0105306 <sched_exit_env+0x105>
f01052f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f8:	8b 40 44             	mov    0x44(%eax),%eax
f01052fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052fe:	8b 52 48             	mov    0x48(%edx),%edx
f0105301:	89 50 48             	mov    %edx,0x48(%eax)
f0105304:	eb 16                	jmp    f010531c <sched_exit_env+0x11b>
f0105306:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010530b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010530e:	c1 e2 04             	shl    $0x4,%edx
f0105311:	01 c2                	add    %eax,%edx
f0105313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105316:	8b 40 48             	mov    0x48(%eax),%eax
f0105319:	89 42 04             	mov    %eax,0x4(%edx)
f010531c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010531f:	8b 40 48             	mov    0x48(%eax),%eax
f0105322:	85 c0                	test   %eax,%eax
f0105324:	74 11                	je     f0105337 <sched_exit_env+0x136>
f0105326:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105329:	8b 40 48             	mov    0x48(%eax),%eax
f010532c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010532f:	8b 52 44             	mov    0x44(%edx),%edx
f0105332:	89 50 44             	mov    %edx,0x44(%eax)
f0105335:	eb 15                	jmp    f010534c <sched_exit_env+0x14b>
f0105337:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010533c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010533f:	c1 e2 04             	shl    $0x4,%edx
f0105342:	01 c2                	add    %eax,%edx
f0105344:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105347:	8b 40 44             	mov    0x44(%eax),%eax
f010534a:	89 02                	mov    %eax,(%edx)
f010534c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105359:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105360:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105365:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105368:	c1 e2 04             	shl    $0x4,%edx
f010536b:	01 d0                	add    %edx,%eax
f010536d:	8b 50 0c             	mov    0xc(%eax),%edx
f0105370:	4a                   	dec    %edx
f0105371:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105374:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010537b:	eb 4b                	jmp    f01053c8 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010537d:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105382:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105385:	c1 e2 04             	shl    $0x4,%edx
f0105388:	01 d0                	add    %edx,%eax
f010538a:	8b 40 08             	mov    0x8(%eax),%eax
f010538d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105390:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105395:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105398:	c1 e2 04             	shl    $0x4,%edx
f010539b:	01 d0                	add    %edx,%eax
f010539d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a1:	74 08                	je     f01053ab <sched_exit_env+0x1aa>
f01053a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053a6:	8b 52 44             	mov    0x44(%edx),%edx
f01053a9:	eb 05                	jmp    f01053b0 <sched_exit_env+0x1af>
f01053ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01053b0:	89 50 08             	mov    %edx,0x8(%eax)
f01053b3:	8b 40 08             	mov    0x8(%eax),%eax
f01053b6:	85 c0                	test   %eax,%eax
f01053b8:	0f 85 01 ff ff ff    	jne    f01052bf <sched_exit_env+0xbe>
f01053be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c2:	0f 85 f7 fe ff ff    	jne    f01052bf <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01053c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053cc:	75 16                	jne    f01053e4 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053ce:	ff 45 ec             	incl   -0x14(%ebp)
f01053d1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01053d6:	0f b6 c0             	movzbl %al,%eax
f01053d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01053dc:	0f 8f a8 fe ff ff    	jg     f010528a <sched_exit_env+0x89>
f01053e2:	eb 01                	jmp    f01053e5 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01053e4:	90                   	nop
		}
	}
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 1c                	jne    f0105407 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01053eb:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01053f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053f3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053f6:	75 0f                	jne    f0105407 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01053f8:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01053fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105400:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105407:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010540b:	74 2a                	je     f0105437 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f010540d:	83 ec 0c             	sub    $0xc,%esp
f0105410:	ff 75 f4             	pushl  -0xc(%ebp)
f0105413:	e8 a1 f6 ff ff       	call   f0104ab9 <sched_insert_exit>
f0105418:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010541b:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0105420:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105423:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105426:	75 0f                	jne    f0105437 <sched_exit_env+0x236>
		{
			curenv = NULL;
f0105428:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f010542f:	00 00 00 
			fos_scheduler();
f0105432:	e8 4e f2 ff ff       	call   f0104685 <fos_scheduler>
		}
	}
}
f0105437:	90                   	nop
f0105438:	c9                   	leave  
f0105439:	c3                   	ret    

f010543a <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f010543a:	55                   	push   %ebp
f010543b:	89 e5                	mov    %esp,%ebp
f010543d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105440:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105447:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010544e:	e9 37 01 00 00       	jmp    f010558a <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105453:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105458:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010545b:	c1 e2 04             	shl    $0x4,%edx
f010545e:	01 d0                	add    %edx,%eax
f0105460:	8b 00                	mov    (%eax),%eax
f0105462:	85 c0                	test   %eax,%eax
f0105464:	0f 84 1d 01 00 00    	je     f0105587 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010546a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105471:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105476:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105479:	c1 e2 04             	shl    $0x4,%edx
f010547c:	01 d0                	add    %edx,%eax
f010547e:	8b 00                	mov    (%eax),%eax
f0105480:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105483:	e9 c7 00 00 00       	jmp    f010554f <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105488:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010548c:	75 17                	jne    f01054a5 <sched_exit_all_ready_envs+0x6b>
f010548e:	83 ec 04             	sub    $0x4,%esp
f0105491:	68 9b 5e 13 f0       	push   $0xf0135e9b
f0105496:	68 22 02 00 00       	push   $0x222
f010549b:	68 67 5e 13 f0       	push   $0xf0135e67
f01054a0:	e8 60 ad ff ff       	call   f0100205 <_panic>
f01054a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a8:	8b 40 44             	mov    0x44(%eax),%eax
f01054ab:	85 c0                	test   %eax,%eax
f01054ad:	74 11                	je     f01054c0 <sched_exit_all_ready_envs+0x86>
f01054af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054b2:	8b 40 44             	mov    0x44(%eax),%eax
f01054b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054b8:	8b 52 48             	mov    0x48(%edx),%edx
f01054bb:	89 50 48             	mov    %edx,0x48(%eax)
f01054be:	eb 16                	jmp    f01054d6 <sched_exit_all_ready_envs+0x9c>
f01054c0:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01054c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054c8:	c1 e2 04             	shl    $0x4,%edx
f01054cb:	01 c2                	add    %eax,%edx
f01054cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d0:	8b 40 48             	mov    0x48(%eax),%eax
f01054d3:	89 42 04             	mov    %eax,0x4(%edx)
f01054d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d9:	8b 40 48             	mov    0x48(%eax),%eax
f01054dc:	85 c0                	test   %eax,%eax
f01054de:	74 11                	je     f01054f1 <sched_exit_all_ready_envs+0xb7>
f01054e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e3:	8b 40 48             	mov    0x48(%eax),%eax
f01054e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054e9:	8b 52 44             	mov    0x44(%edx),%edx
f01054ec:	89 50 44             	mov    %edx,0x44(%eax)
f01054ef:	eb 15                	jmp    f0105506 <sched_exit_all_ready_envs+0xcc>
f01054f1:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01054f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054f9:	c1 e2 04             	shl    $0x4,%edx
f01054fc:	01 c2                	add    %eax,%edx
f01054fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105501:	8b 40 44             	mov    0x44(%eax),%eax
f0105504:	89 02                	mov    %eax,(%edx)
f0105506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105509:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010551a:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010551f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105522:	c1 e2 04             	shl    $0x4,%edx
f0105525:	01 d0                	add    %edx,%eax
f0105527:	8b 50 0c             	mov    0xc(%eax),%edx
f010552a:	4a                   	dec    %edx
f010552b:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f010552e:	83 ec 0c             	sub    $0xc,%esp
f0105531:	ff 75 f4             	pushl  -0xc(%ebp)
f0105534:	e8 80 f5 ff ff       	call   f0104ab9 <sched_insert_exit>
f0105539:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010553c:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105541:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105544:	c1 e2 04             	shl    $0x4,%edx
f0105547:	01 d0                	add    %edx,%eax
f0105549:	8b 40 08             	mov    0x8(%eax),%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105554:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105557:	c1 e2 04             	shl    $0x4,%edx
f010555a:	01 d0                	add    %edx,%eax
f010555c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105560:	74 08                	je     f010556a <sched_exit_all_ready_envs+0x130>
f0105562:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105565:	8b 52 44             	mov    0x44(%edx),%edx
f0105568:	eb 05                	jmp    f010556f <sched_exit_all_ready_envs+0x135>
f010556a:	ba 00 00 00 00       	mov    $0x0,%edx
f010556f:	89 50 08             	mov    %edx,0x8(%eax)
f0105572:	8b 40 08             	mov    0x8(%eax),%eax
f0105575:	85 c0                	test   %eax,%eax
f0105577:	0f 85 0b ff ff ff    	jne    f0105488 <sched_exit_all_ready_envs+0x4e>
f010557d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105581:	0f 85 01 ff ff ff    	jne    f0105488 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105587:	ff 45 f0             	incl   -0x10(%ebp)
f010558a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f010558f:	0f b6 c0             	movzbl %al,%eax
f0105592:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105595:	0f 8f b8 fe ff ff    	jg     f0105453 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010559b:	90                   	nop
f010559c:	c9                   	leave  
f010559d:	c3                   	ret    

f010559e <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010559e:	55                   	push   %ebp
f010559f:	89 e5                	mov    %esp,%ebp
f01055a1:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01055a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01055ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01055b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055b6:	0f 85 a0 00 00 00    	jne    f010565c <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055bc:	a1 3c a1 86 f0       	mov    0xf086a13c,%eax
f01055c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c4:	eb 67                	jmp    f010562d <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01055c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cf:	75 54                	jne    f0105625 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01055d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d4:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01055da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055dd:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e0:	83 ec 04             	sub    $0x4,%esp
f01055e3:	52                   	push   %edx
f01055e4:	50                   	push   %eax
f01055e5:	68 e8 60 13 f0       	push   $0xf01360e8
f01055ea:	e8 1f b7 ff ff       	call   f0100d0e <cprintf>
f01055ef:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01055f2:	83 ec 0c             	sub    $0xc,%esp
f01055f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01055f8:	e8 17 f4 ff ff       	call   f0104a14 <sched_remove_new>
f01055fd:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105600:	83 ec 0c             	sub    $0xc,%esp
f0105603:	ff 75 f4             	pushl  -0xc(%ebp)
f0105606:	e8 72 49 00 00       	call   f0109f7d <env_free>
f010560b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010560e:	83 ec 0c             	sub    $0xc,%esp
f0105611:	68 67 60 13 f0       	push   $0xf0136067
f0105616:	e8 f3 b6 ff ff       	call   f0100d0e <cprintf>
f010561b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010561e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105625:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f010562a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010562d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105631:	74 08                	je     f010563b <sched_kill_env+0x9d>
f0105633:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105636:	8b 40 44             	mov    0x44(%eax),%eax
f0105639:	eb 05                	jmp    f0105640 <sched_kill_env+0xa2>
f010563b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105640:	a3 44 a1 86 f0       	mov    %eax,0xf086a144
f0105645:	a1 44 a1 86 f0       	mov    0xf086a144,%eax
f010564a:	85 c0                	test   %eax,%eax
f010564c:	0f 85 74 ff ff ff    	jne    f01055c6 <sched_kill_env+0x28>
f0105652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105656:	0f 85 6a ff ff ff    	jne    f01055c6 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010565c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105660:	0f 85 a6 01 00 00    	jne    f010580c <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105666:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010566d:	e9 86 01 00 00       	jmp    f01057f8 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105672:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105677:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010567a:	c1 e2 04             	shl    $0x4,%edx
f010567d:	01 d0                	add    %edx,%eax
f010567f:	8b 00                	mov    (%eax),%eax
f0105681:	85 c0                	test   %eax,%eax
f0105683:	0f 84 66 01 00 00    	je     f01057ef <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105689:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105690:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105695:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105698:	c1 e2 04             	shl    $0x4,%edx
f010569b:	01 d0                	add    %edx,%eax
f010569d:	8b 00                	mov    (%eax),%eax
f010569f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056a2:	e9 10 01 00 00       	jmp    f01057b7 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f01056a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056aa:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056ad:	3b 45 08             	cmp    0x8(%ebp),%eax
f01056b0:	0f 85 ee 00 00 00    	jne    f01057a4 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01056b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056b9:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01056bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056c5:	ff 75 ec             	pushl  -0x14(%ebp)
f01056c8:	52                   	push   %edx
f01056c9:	50                   	push   %eax
f01056ca:	68 10 61 13 f0       	push   $0xf0136110
f01056cf:	e8 3a b6 ff ff       	call   f0100d0e <cprintf>
f01056d4:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056db:	75 17                	jne    f01056f4 <sched_kill_env+0x156>
f01056dd:	83 ec 04             	sub    $0x4,%esp
f01056e0:	68 9b 5e 13 f0       	push   $0xf0135e9b
f01056e5:	68 49 02 00 00       	push   $0x249
f01056ea:	68 67 5e 13 f0       	push   $0xf0135e67
f01056ef:	e8 11 ab ff ff       	call   f0100205 <_panic>
f01056f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f7:	8b 40 44             	mov    0x44(%eax),%eax
f01056fa:	85 c0                	test   %eax,%eax
f01056fc:	74 11                	je     f010570f <sched_kill_env+0x171>
f01056fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105701:	8b 40 44             	mov    0x44(%eax),%eax
f0105704:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105707:	8b 52 48             	mov    0x48(%edx),%edx
f010570a:	89 50 48             	mov    %edx,0x48(%eax)
f010570d:	eb 16                	jmp    f0105725 <sched_kill_env+0x187>
f010570f:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105714:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105717:	c1 e2 04             	shl    $0x4,%edx
f010571a:	01 c2                	add    %eax,%edx
f010571c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571f:	8b 40 48             	mov    0x48(%eax),%eax
f0105722:	89 42 04             	mov    %eax,0x4(%edx)
f0105725:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105728:	8b 40 48             	mov    0x48(%eax),%eax
f010572b:	85 c0                	test   %eax,%eax
f010572d:	74 11                	je     f0105740 <sched_kill_env+0x1a2>
f010572f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105732:	8b 40 48             	mov    0x48(%eax),%eax
f0105735:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105738:	8b 52 44             	mov    0x44(%edx),%edx
f010573b:	89 50 44             	mov    %edx,0x44(%eax)
f010573e:	eb 15                	jmp    f0105755 <sched_kill_env+0x1b7>
f0105740:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0105745:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105748:	c1 e2 04             	shl    $0x4,%edx
f010574b:	01 c2                	add    %eax,%edx
f010574d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105750:	8b 40 44             	mov    0x44(%eax),%eax
f0105753:	89 02                	mov    %eax,(%edx)
f0105755:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105758:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010575f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105762:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105769:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f010576e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105771:	c1 e2 04             	shl    $0x4,%edx
f0105774:	01 d0                	add    %edx,%eax
f0105776:	8b 50 0c             	mov    0xc(%eax),%edx
f0105779:	4a                   	dec    %edx
f010577a:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010577d:	83 ec 0c             	sub    $0xc,%esp
f0105780:	ff 75 f4             	pushl  -0xc(%ebp)
f0105783:	e8 f5 47 00 00       	call   f0109f7d <env_free>
f0105788:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010578b:	83 ec 0c             	sub    $0xc,%esp
f010578e:	68 67 60 13 f0       	push   $0xf0136067
f0105793:	e8 76 b5 ff ff       	call   f0100d0e <cprintf>
f0105798:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010579b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01057a2:	eb 4b                	jmp    f01057ef <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01057a4:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01057a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057ac:	c1 e2 04             	shl    $0x4,%edx
f01057af:	01 d0                	add    %edx,%eax
f01057b1:	8b 40 08             	mov    0x8(%eax),%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01057bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057bf:	c1 e2 04             	shl    $0x4,%edx
f01057c2:	01 d0                	add    %edx,%eax
f01057c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057c8:	74 08                	je     f01057d2 <sched_kill_env+0x234>
f01057ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057cd:	8b 52 44             	mov    0x44(%edx),%edx
f01057d0:	eb 05                	jmp    f01057d7 <sched_kill_env+0x239>
f01057d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01057d7:	89 50 08             	mov    %edx,0x8(%eax)
f01057da:	8b 40 08             	mov    0x8(%eax),%eax
f01057dd:	85 c0                	test   %eax,%eax
f01057df:	0f 85 c2 fe ff ff    	jne    f01056a7 <sched_kill_env+0x109>
f01057e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e9:	0f 85 b8 fe ff ff    	jne    f01056a7 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01057ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f3:	75 16                	jne    f010580b <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01057f5:	ff 45 ec             	incl   -0x14(%ebp)
f01057f8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01057fd:	0f b6 c0             	movzbl %al,%eax
f0105800:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105803:	0f 8f 69 fe ff ff    	jg     f0105672 <sched_kill_env+0xd4>
f0105809:	eb 01                	jmp    f010580c <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f010580b:	90                   	nop
		}
	}
	if (!found)
f010580c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105810:	0f 85 a7 00 00 00    	jne    f01058bd <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f0105816:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010581d:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f0105822:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105825:	eb 67                	jmp    f010588e <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f0105827:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010582d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105830:	75 54                	jne    f0105886 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105832:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105835:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010583b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010583e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105841:	83 ec 04             	sub    $0x4,%esp
f0105844:	52                   	push   %edx
f0105845:	50                   	push   %eax
f0105846:	68 3c 61 13 f0       	push   $0xf013613c
f010584b:	e8 be b4 ff ff       	call   f0100d0e <cprintf>
f0105850:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105853:	83 ec 0c             	sub    $0xc,%esp
f0105856:	ff 75 f4             	pushl  -0xc(%ebp)
f0105859:	e8 9e f2 ff ff       	call   f0104afc <sched_remove_exit>
f010585e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105861:	83 ec 0c             	sub    $0xc,%esp
f0105864:	ff 75 f4             	pushl  -0xc(%ebp)
f0105867:	e8 11 47 00 00       	call   f0109f7d <env_free>
f010586c:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010586f:	83 ec 0c             	sub    $0xc,%esp
f0105872:	68 67 60 13 f0       	push   $0xf0136067
f0105877:	e8 92 b4 ff ff       	call   f0100d0e <cprintf>
f010587c:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010587f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105886:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f010588b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010588e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105892:	74 08                	je     f010589c <sched_kill_env+0x2fe>
f0105894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105897:	8b 40 44             	mov    0x44(%eax),%eax
f010589a:	eb 05                	jmp    f01058a1 <sched_kill_env+0x303>
f010589c:	b8 00 00 00 00       	mov    $0x0,%eax
f01058a1:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f01058a6:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f01058ab:	85 c0                	test   %eax,%eax
f01058ad:	0f 85 74 ff ff ff    	jne    f0105827 <sched_kill_env+0x289>
f01058b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058b7:	0f 85 6a ff ff ff    	jne    f0105827 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f01058bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058c1:	0f 85 a0 00 00 00    	jne    f0105967 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f01058c7:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01058cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058cf:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d2:	0f 85 8f 00 00 00    	jne    f0105967 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01058d8:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f01058dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01058e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e6:	83 f8 02             	cmp    $0x2,%eax
f01058e9:	74 19                	je     f0105904 <sched_kill_env+0x366>
f01058eb:	68 64 61 13 f0       	push   $0xf0136164
f01058f0:	68 52 5e 13 f0       	push   $0xf0135e52
f01058f5:	68 6c 02 00 00       	push   $0x26c
f01058fa:	68 67 5e 13 f0       	push   $0xf0135e67
f01058ff:	e8 01 a9 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105904:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105907:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010590d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105910:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105913:	83 ec 04             	sub    $0x4,%esp
f0105916:	52                   	push   %edx
f0105917:	50                   	push   %eax
f0105918:	68 84 61 13 f0       	push   $0xf0136184
f010591d:	e8 ec b3 ff ff       	call   f0100d0e <cprintf>
f0105922:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105925:	83 ec 0c             	sub    $0xc,%esp
f0105928:	ff 75 f4             	pushl  -0xc(%ebp)
f010592b:	e8 4d 46 00 00       	call   f0109f7d <env_free>
f0105930:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105933:	83 ec 0c             	sub    $0xc,%esp
f0105936:	68 67 60 13 f0       	push   $0xf0136067
f010593b:	e8 ce b3 ff ff       	call   f0100d0e <cprintf>
f0105940:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105943:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010594a:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f010594f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105952:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105955:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105958:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f010595f:	00 00 00 
			fos_scheduler();
f0105962:	e8 1e ed ff ff       	call   f0104685 <fos_scheduler>
		}
	}
}
f0105967:	90                   	nop
f0105968:	c9                   	leave  
f0105969:	c3                   	ret    

f010596a <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010596a:	55                   	push   %ebp
f010596b:	89 e5                	mov    %esp,%ebp
f010596d:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105970:	83 ec 0c             	sub    $0xc,%esp
f0105973:	6a 01                	push   $0x1
f0105975:	e8 85 88 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010597a:	83 c4 10             	add    $0x10,%esp
f010597d:	85 c0                	test   %eax,%eax
f010597f:	74 05                	je     f0105986 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105981:	e8 05 00 00 00       	call   f010598b <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105986:	e8 fa ec ff ff       	call   f0104685 <fos_scheduler>

f010598b <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f010598b:	55                   	push   %ebp
f010598c:	89 e5                	mov    %esp,%ebp
f010598e:	53                   	push   %ebx
f010598f:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105992:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0105997:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f010599a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010599e:	0f 84 cc 01 00 00    	je     f0105b70 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01059ab:	e9 cf 00 00 00       	jmp    f0105a7f <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01059b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b3:	8b 48 78             	mov    0x78(%eax),%ecx
f01059b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059b9:	89 d0                	mov    %edx,%eax
f01059bb:	01 c0                	add    %eax,%eax
f01059bd:	01 d0                	add    %edx,%eax
f01059bf:	c1 e0 03             	shl    $0x3,%eax
f01059c2:	01 c8                	add    %ecx,%eax
f01059c4:	8a 40 04             	mov    0x4(%eax),%al
f01059c7:	3c 01                	cmp    $0x1,%al
f01059c9:	0f 84 ad 00 00 00    	je     f0105a7c <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01059cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059d2:	8b 48 78             	mov    0x78(%eax),%ecx
f01059d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d8:	89 d0                	mov    %edx,%eax
f01059da:	01 c0                	add    %eax,%eax
f01059dc:	01 d0                	add    %edx,%eax
f01059de:	c1 e0 03             	shl    $0x3,%eax
f01059e1:	01 c8                	add    %ecx,%eax
f01059e3:	8b 00                	mov    (%eax),%eax
f01059e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01059e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059eb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01059ee:	83 ec 08             	sub    $0x8,%esp
f01059f1:	ff 75 e8             	pushl  -0x18(%ebp)
f01059f4:	50                   	push   %eax
f01059f5:	e8 4e 23 00 00       	call   f0107d48 <pt_get_page_permissions>
f01059fa:	83 c4 10             	add    $0x10,%esp
f01059fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105a00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a09:	89 d0                	mov    %edx,%eax
f0105a0b:	01 c0                	add    %eax,%eax
f0105a0d:	01 d0                	add    %edx,%eax
f0105a0f:	c1 e0 03             	shl    $0x3,%eax
f0105a12:	01 c8                	add    %ecx,%eax
f0105a14:	8b 40 08             	mov    0x8(%eax),%eax
f0105a17:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105a1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1d:	83 e0 20             	and    $0x20,%eax
f0105a20:	85 c0                	test   %eax,%eax
f0105a22:	74 3b                	je     f0105a5f <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a24:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a27:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a2d:	89 d0                	mov    %edx,%eax
f0105a2f:	01 c0                	add    %eax,%eax
f0105a31:	01 d0                	add    %edx,%eax
f0105a33:	c1 e0 03             	shl    $0x3,%eax
f0105a36:	01 c8                	add    %ecx,%eax
f0105a38:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a3b:	c1 ea 02             	shr    $0x2,%edx
f0105a3e:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105a44:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a4a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a4d:	6a 20                	push   $0x20
f0105a4f:	6a 00                	push   $0x0
f0105a51:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a54:	50                   	push   %eax
f0105a55:	e8 39 22 00 00       	call   f0107c93 <pt_set_page_permissions>
f0105a5a:	83 c4 10             	add    $0x10,%esp
f0105a5d:	eb 1d                	jmp    f0105a7c <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105a5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a62:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a68:	89 d0                	mov    %edx,%eax
f0105a6a:	01 c0                	add    %eax,%eax
f0105a6c:	01 d0                	add    %edx,%eax
f0105a6e:	c1 e0 03             	shl    $0x3,%eax
f0105a71:	01 c8                	add    %ecx,%eax
f0105a73:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a76:	c1 ea 02             	shr    $0x2,%edx
f0105a79:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a7c:	ff 45 f4             	incl   -0xc(%ebp)
f0105a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a82:	8b 50 74             	mov    0x74(%eax),%edx
f0105a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a88:	39 c2                	cmp    %eax,%edx
f0105a8a:	0f 87 20 ff ff ff    	ja     f01059b0 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a90:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a97:	e9 ca 00 00 00       	jmp    f0105b66 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105a9c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa2:	89 d0                	mov    %edx,%eax
f0105aa4:	01 c0                	add    %eax,%eax
f0105aa6:	01 d0                	add    %edx,%eax
f0105aa8:	c1 e0 03             	shl    $0x3,%eax
f0105aab:	01 c8                	add    %ecx,%eax
f0105aad:	83 e8 80             	sub    $0xffffff80,%eax
f0105ab0:	8a 00                	mov    (%eax),%al
f0105ab2:	3c 01                	cmp    $0x1,%al
f0105ab4:	0f 84 a9 00 00 00    	je     f0105b63 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105aba:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105abd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ac0:	89 d0                	mov    %edx,%eax
f0105ac2:	01 c0                	add    %eax,%eax
f0105ac4:	01 d0                	add    %edx,%eax
f0105ac6:	c1 e0 03             	shl    $0x3,%eax
f0105ac9:	01 c8                	add    %ecx,%eax
f0105acb:	83 c0 7c             	add    $0x7c,%eax
f0105ace:	8b 00                	mov    (%eax),%eax
f0105ad0:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105ad3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105ad6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad9:	89 d0                	mov    %edx,%eax
f0105adb:	01 c0                	add    %eax,%eax
f0105add:	01 d0                	add    %edx,%eax
f0105adf:	c1 e0 03             	shl    $0x3,%eax
f0105ae2:	01 c8                	add    %ecx,%eax
f0105ae4:	05 84 00 00 00       	add    $0x84,%eax
f0105ae9:	8b 00                	mov    (%eax),%eax
f0105aeb:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105aee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105af4:	83 ec 08             	sub    $0x8,%esp
f0105af7:	ff 75 dc             	pushl  -0x24(%ebp)
f0105afa:	50                   	push   %eax
f0105afb:	e8 8f 23 00 00       	call   f0107e8f <pd_is_table_used>
f0105b00:	83 c4 10             	add    $0x10,%esp
f0105b03:	85 c0                	test   %eax,%eax
f0105b05:	74 3c                	je     f0105b43 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105b07:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b0a:	c1 e8 02             	shr    $0x2,%eax
f0105b0d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105b12:	89 c1                	mov    %eax,%ecx
f0105b14:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b1a:	89 d0                	mov    %edx,%eax
f0105b1c:	01 c0                	add    %eax,%eax
f0105b1e:	01 d0                	add    %edx,%eax
f0105b20:	c1 e0 03             	shl    $0x3,%eax
f0105b23:	01 d8                	add    %ebx,%eax
f0105b25:	05 84 00 00 00       	add    $0x84,%eax
f0105b2a:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105b2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b2f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b32:	83 ec 08             	sub    $0x8,%esp
f0105b35:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b38:	50                   	push   %eax
f0105b39:	e8 75 23 00 00       	call   f0107eb3 <pd_set_table_unused>
f0105b3e:	83 c4 10             	add    $0x10,%esp
f0105b41:	eb 20                	jmp    f0105b63 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105b43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b46:	c1 e8 02             	shr    $0x2,%eax
f0105b49:	89 c1                	mov    %eax,%ecx
f0105b4b:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b4e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b51:	89 d0                	mov    %edx,%eax
f0105b53:	01 c0                	add    %eax,%eax
f0105b55:	01 d0                	add    %edx,%eax
f0105b57:	c1 e0 03             	shl    $0x3,%eax
f0105b5a:	01 d8                	add    %ebx,%eax
f0105b5c:	05 84 00 00 00       	add    $0x84,%eax
f0105b61:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b63:	ff 45 f0             	incl   -0x10(%ebp)
f0105b66:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105b6a:	0f 8e 2c ff ff ff    	jle    f0105a9c <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105b70:	90                   	nop
f0105b71:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105b74:	c9                   	leave  
f0105b75:	c3                   	ret    

f0105b76 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105b76:	55                   	push   %ebp
f0105b77:	89 e5                	mov    %esp,%ebp
f0105b79:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105b7c:	c7 05 ec 97 86 f0 01 	movl   $0x1,0xf08697ec
f0105b83:	00 00 00 
f0105b86:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105b8d:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105b91:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105b94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b97:	ee                   	out    %al,(%dx)
f0105b98:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105b9f:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105ba3:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ba6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ba9:	ee                   	out    %al,(%dx)
f0105baa:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105bb1:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105bb5:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105bb8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bbb:	ee                   	out    %al,(%dx)
f0105bbc:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105bc3:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105bc7:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105bca:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105bcd:	ee                   	out    %al,(%dx)
f0105bce:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105bd5:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105bd9:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105bdc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105bdf:	ee                   	out    %al,(%dx)
f0105be0:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105be7:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105beb:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105bee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105bf1:	ee                   	out    %al,(%dx)
f0105bf2:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105bf9:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105bfd:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105c00:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105c03:	ee                   	out    %al,(%dx)
f0105c04:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105c0b:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105c0f:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105c12:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105c15:	ee                   	out    %al,(%dx)
f0105c16:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105c1d:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105c21:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105c24:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105c27:	ee                   	out    %al,(%dx)
f0105c28:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105c2f:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105c33:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105c36:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105c39:	ee                   	out    %al,(%dx)
f0105c3a:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105c41:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105c45:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105c48:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105c4b:	ee                   	out    %al,(%dx)
f0105c4c:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105c53:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105c57:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105c5a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105c5d:	ee                   	out    %al,(%dx)
f0105c5e:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105c65:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105c69:	8a 45 be             	mov    -0x42(%ebp),%al
f0105c6c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105c6f:	ee                   	out    %al,(%dx)
f0105c70:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105c77:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105c7b:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105c7e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105c81:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105c82:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105c88:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105c8c:	74 15                	je     f0105ca3 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105c8e:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105c94:	0f b7 c0             	movzwl %ax,%eax
f0105c97:	83 ec 0c             	sub    $0xc,%esp
f0105c9a:	50                   	push   %eax
f0105c9b:	e8 06 00 00 00       	call   f0105ca6 <irq_setmask_8259A>
f0105ca0:	83 c4 10             	add    $0x10,%esp
}
f0105ca3:	90                   	nop
f0105ca4:	c9                   	leave  
f0105ca5:	c3                   	ret    

f0105ca6 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105ca6:	55                   	push   %ebp
f0105ca7:	89 e5                	mov    %esp,%ebp
f0105ca9:	83 ec 14             	sub    $0x14,%esp
f0105cac:	8b 45 08             	mov    0x8(%ebp),%eax
f0105caf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105cb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105cb6:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105cbc:	a1 ec 97 86 f0       	mov    0xf08697ec,%eax
f0105cc1:	85 c0                	test   %eax,%eax
f0105cc3:	74 34                	je     f0105cf9 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105cc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105cc8:	0f b6 c0             	movzbl %al,%eax
f0105ccb:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105cd2:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105cd5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105cd8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105cdb:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105cdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105cdf:	66 c1 e8 08          	shr    $0x8,%ax
f0105ce3:	0f b6 c0             	movzbl %al,%eax
f0105ce6:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105ced:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105cf0:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105cf3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105cf6:	ee                   	out    %al,(%dx)
f0105cf7:	eb 01                	jmp    f0105cfa <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105cf9:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105cfa:	c9                   	leave  
f0105cfb:	c3                   	ret    

f0105cfc <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105cfc:	55                   	push   %ebp
f0105cfd:	89 e5                	mov    %esp,%ebp
f0105cff:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105d02:	83 ec 08             	sub    $0x8,%esp
f0105d05:	68 00 10 00 00       	push   $0x1000
f0105d0a:	68 00 10 00 00       	push   $0x1000
f0105d0f:	e8 6a 02 00 00       	call   f0105f7e <boot_allocate_space>
f0105d14:	83 c4 10             	add    $0x10,%esp
f0105d17:	a3 7c a1 86 f0       	mov    %eax,0xf086a17c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105d1c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105d21:	83 ec 04             	sub    $0x4,%esp
f0105d24:	68 00 10 00 00       	push   $0x1000
f0105d29:	6a 00                	push   $0x0
f0105d2b:	50                   	push   %eax
f0105d2c:	e8 92 be 02 00       	call   f0131bc3 <memset>
f0105d31:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105d34:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105d39:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105d3c:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105d43:	77 14                	ja     f0105d59 <initialize_kernel_VM+0x5d>
f0105d45:	ff 75 e8             	pushl  -0x18(%ebp)
f0105d48:	68 b0 61 13 f0       	push   $0xf01361b0
f0105d4d:	6a 45                	push   $0x45
f0105d4f:	68 e4 61 13 f0       	push   $0xf01361e4
f0105d54:	e8 ac a4 ff ff       	call   f0100205 <_panic>
f0105d59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105d5c:	05 00 00 00 10       	add    $0x10000000,%eax
f0105d61:	a3 ac a1 86 f0       	mov    %eax,0xf086a1ac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105d66:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105d6d:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105d74:	77 14                	ja     f0105d8a <initialize_kernel_VM+0x8e>
f0105d76:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d79:	68 b0 61 13 f0       	push   $0xf01361b0
f0105d7e:	6a 4d                	push   $0x4d
f0105d80:	68 e4 61 13 f0       	push   $0xf01361e4
f0105d85:	e8 7b a4 ff ff       	call   f0100205 <_panic>
f0105d8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d8d:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105d93:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105d98:	83 ec 0c             	sub    $0xc,%esp
f0105d9b:	6a 02                	push   $0x2
f0105d9d:	52                   	push   %edx
f0105d9e:	68 00 80 00 00       	push   $0x8000
f0105da3:	68 00 80 bf ef       	push   $0xefbf8000
f0105da8:	50                   	push   %eax
f0105da9:	e8 31 02 00 00       	call   f0105fdf <boot_map_range>
f0105dae:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105db1:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105db8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105dbf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105dc6:	eb 25                	jmp    f0105ded <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105dc8:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dce:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105dd3:	83 ec 04             	sub    $0x4,%esp
f0105dd6:	6a 01                	push   $0x1
f0105dd8:	52                   	push   %edx
f0105dd9:	50                   	push   %eax
f0105dda:	e8 74 02 00 00       	call   f0106053 <boot_get_page_table>
f0105ddf:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105de2:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105de9:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105ded:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105df1:	72 d5                	jb     f0105dc8 <initialize_kernel_VM+0xcc>
f0105df3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105df7:	77 06                	ja     f0105dff <initialize_kernel_VM+0x103>
f0105df9:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105dfd:	76 c9                	jbe    f0105dc8 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105dff:	8b 15 10 a1 86 f0    	mov    0xf086a110,%edx
f0105e05:	89 d0                	mov    %edx,%eax
f0105e07:	01 c0                	add    %eax,%eax
f0105e09:	01 d0                	add    %edx,%eax
f0105e0b:	c1 e0 03             	shl    $0x3,%eax
f0105e0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105e11:	83 ec 08             	sub    $0x8,%esp
f0105e14:	68 00 10 00 00       	push   $0x1000
f0105e19:	ff 75 e0             	pushl  -0x20(%ebp)
f0105e1c:	e8 5d 01 00 00       	call   f0105f7e <boot_allocate_space>
f0105e21:	83 c4 10             	add    $0x10,%esp
f0105e24:	a3 54 a1 86 f0       	mov    %eax,0xf086a154
	memset(frames_info, 0, array_size);
f0105e29:	a1 54 a1 86 f0       	mov    0xf086a154,%eax
f0105e2e:	83 ec 04             	sub    $0x4,%esp
f0105e31:	ff 75 e0             	pushl  -0x20(%ebp)
f0105e34:	6a 00                	push   $0x0
f0105e36:	50                   	push   %eax
f0105e37:	e8 87 bd 02 00       	call   f0131bc3 <memset>
f0105e3c:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105e3f:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105e46:	83 ec 08             	sub    $0x8,%esp
f0105e49:	68 00 10 00 00       	push   $0x1000
f0105e4e:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e51:	e8 28 01 00 00       	call   f0105f7e <boot_allocate_space>
f0105e56:	83 c4 10             	add    $0x10,%esp
f0105e59:	a3 dc a0 86 f0       	mov    %eax,0xf086a0dc
	memset(disk_frames_info , 0, disk_array_size);
f0105e5e:	a1 dc a0 86 f0       	mov    0xf086a0dc,%eax
f0105e63:	83 ec 04             	sub    $0x4,%esp
f0105e66:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e69:	6a 00                	push   $0x0
f0105e6b:	50                   	push   %eax
f0105e6c:	e8 52 bd 02 00       	call   f0131bc3 <memset>
f0105e71:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105e74:	e8 d5 04 00 00       	call   f010634e <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105e79:	83 ec 0c             	sub    $0xc,%esp
f0105e7c:	68 b1 02 00 00       	push   $0x2b1
f0105e81:	e8 c1 a8 02 00       	call   f0130747 <nearest_pow2_ceil>
f0105e86:	83 c4 10             	add    $0x10,%esp
f0105e89:	83 ec 04             	sub    $0x4,%esp
f0105e8c:	50                   	push   %eax
f0105e8d:	68 b1 02 00 00       	push   $0x2b1
f0105e92:	68 04 62 13 f0       	push   $0xf0136204
f0105e97:	e8 72 ae ff ff       	call   f0100d0e <cprintf>
f0105e9c:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105e9f:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105ea6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ea9:	83 ec 08             	sub    $0x8,%esp
f0105eac:	68 00 10 00 00       	push   $0x1000
f0105eb1:	50                   	push   %eax
f0105eb2:	e8 c7 00 00 00       	call   f0105f7e <boot_allocate_space>
f0105eb7:	83 c4 10             	add    $0x10,%esp
f0105eba:	a3 f0 97 86 f0       	mov    %eax,0xf08697f0
	memset(envs , 0, envs_size);
f0105ebf:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ec2:	a1 f0 97 86 f0       	mov    0xf08697f0,%eax
f0105ec7:	83 ec 04             	sub    $0x4,%esp
f0105eca:	52                   	push   %edx
f0105ecb:	6a 00                	push   $0x0
f0105ecd:	50                   	push   %eax
f0105ece:	e8 f0 bc 02 00       	call   f0131bc3 <memset>
f0105ed3:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105ed6:	a1 f0 97 86 f0       	mov    0xf08697f0,%eax
f0105edb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105ede:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105ee5:	77 17                	ja     f0105efe <initialize_kernel_VM+0x202>
f0105ee7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105eea:	68 b0 61 13 f0       	push   $0xf01361b0
f0105eef:	68 96 00 00 00       	push   $0x96
f0105ef4:	68 e4 61 13 f0       	push   $0xf01361e4
f0105ef9:	e8 07 a3 ff ff       	call   f0100205 <_panic>
f0105efe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105f01:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105f07:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f0a:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105f0f:	83 ec 0c             	sub    $0xc,%esp
f0105f12:	6a 04                	push   $0x4
f0105f14:	51                   	push   %ecx
f0105f15:	52                   	push   %edx
f0105f16:	68 00 00 c0 ee       	push   $0xeec00000
f0105f1b:	50                   	push   %eax
f0105f1c:	e8 be 00 00 00       	call   f0105fdf <boot_map_range>
f0105f21:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105f24:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105f29:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105f2e:	8b 15 7c a1 86 f0    	mov    0xf086a17c,%edx
f0105f34:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105f3a:	8b 12                	mov    (%edx),%edx
f0105f3c:	83 ca 05             	or     $0x5,%edx
f0105f3f:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105f41:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0105f46:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105f4c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0105f51:	83 ec 0c             	sub    $0xc,%esp
f0105f54:	6a 02                	push   $0x2
f0105f56:	6a 00                	push   $0x0
f0105f58:	52                   	push   %edx
f0105f59:	68 00 00 00 f0       	push   $0xf0000000
f0105f5e:	50                   	push   %eax
f0105f5f:	e8 7b 00 00 00       	call   f0105fdf <boot_map_range>
f0105f64:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105f67:	e8 c2 af 02 00       	call   f0130f2e <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105f6c:	c7 05 f0 a0 86 f0 19 	movl   $0x19,0xf086a0f0
f0105f73:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105f76:	e8 d3 02 00 00       	call   f010624e <turn_on_paging>
}
f0105f7b:	90                   	nop
f0105f7c:	c9                   	leave  
f0105f7d:	c3                   	ret    

f0105f7e <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105f7e:	55                   	push   %ebp
f0105f7f:	89 e5                	mov    %esp,%ebp
f0105f81:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105f84:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0105f89:	85 c0                	test   %eax,%eax
f0105f8b:	75 0a                	jne    f0105f97 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105f8d:	c7 05 78 a1 86 f0 c0 	movl   $0xf086a2c0,0xf086a178
f0105f94:	a2 86 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105f97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105f9d:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0105fa2:	89 c2                	mov    %eax,%edx
f0105fa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105fa7:	01 d0                	add    %edx,%eax
f0105fa9:	48                   	dec    %eax
f0105faa:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105fad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105fb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0105fb5:	f7 75 fc             	divl   -0x4(%ebp)
f0105fb8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105fbb:	29 d0                	sub    %edx,%eax
f0105fbd:	a3 78 a1 86 f0       	mov    %eax,0xf086a178

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105fc2:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0105fc7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105fca:	8b 15 78 a1 86 f0    	mov    0xf086a178,%edx
f0105fd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0105fd3:	01 d0                	add    %edx,%eax
f0105fd5:	a3 78 a1 86 f0       	mov    %eax,0xf086a178

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105fda:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105fdd:	c9                   	leave  
f0105fde:	c3                   	ret    

f0105fdf <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105fdf:	55                   	push   %ebp
f0105fe0:	89 e5                	mov    %esp,%ebp
f0105fe2:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105fe5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105ff3:	eb 53                	jmp    f0106048 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105ff5:	83 ec 04             	sub    $0x4,%esp
f0105ff8:	6a 01                	push   $0x1
f0105ffa:	ff 75 0c             	pushl  0xc(%ebp)
f0105ffd:	ff 75 08             	pushl  0x8(%ebp)
f0106000:	e8 4e 00 00 00       	call   f0106053 <boot_get_page_table>
f0106005:	83 c4 10             	add    $0x10,%esp
f0106008:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f010600b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010600e:	c1 e8 0c             	shr    $0xc,%eax
f0106011:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106016:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106019:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010601c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106026:	01 c2                	add    %eax,%edx
f0106028:	8b 45 18             	mov    0x18(%ebp),%eax
f010602b:	0b 45 14             	or     0x14(%ebp),%eax
f010602e:	83 c8 01             	or     $0x1,%eax
f0106031:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106033:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f010603a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106041:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106048:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010604b:	3b 45 10             	cmp    0x10(%ebp),%eax
f010604e:	72 a5                	jb     f0105ff5 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106050:	90                   	nop
f0106051:	c9                   	leave  
f0106052:	c3                   	ret    

f0106053 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106053:	55                   	push   %ebp
f0106054:	89 e5                	mov    %esp,%ebp
f0106056:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106059:	8b 45 0c             	mov    0xc(%ebp),%eax
f010605c:	c1 e8 16             	shr    $0x16,%eax
f010605f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106062:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106065:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010606c:	8b 45 08             	mov    0x8(%ebp),%eax
f010606f:	01 d0                	add    %edx,%eax
f0106071:	8b 00                	mov    (%eax),%eax
f0106073:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106079:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010607e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106081:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106084:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010608a:	c1 e8 0c             	shr    $0xc,%eax
f010608d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106090:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106095:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106098:	72 17                	jb     f01060b1 <boot_get_page_table+0x5e>
f010609a:	ff 75 e8             	pushl  -0x18(%ebp)
f010609d:	68 2c 62 13 f0       	push   $0xf013622c
f01060a2:	68 15 01 00 00       	push   $0x115
f01060a7:	68 e4 61 13 f0       	push   $0xf01361e4
f01060ac:	e8 54 a1 ff ff       	call   f0100205 <_panic>
f01060b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01060b4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01060b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01060bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01060c0:	75 72                	jne    f0106134 <boot_get_page_table+0xe1>
	{
		if (create)
f01060c2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01060c6:	74 65                	je     f010612d <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01060c8:	83 ec 08             	sub    $0x8,%esp
f01060cb:	68 00 10 00 00       	push   $0x1000
f01060d0:	68 00 10 00 00       	push   $0x1000
f01060d5:	e8 a4 fe ff ff       	call   f0105f7e <boot_allocate_space>
f01060da:	83 c4 10             	add    $0x10,%esp
f01060dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01060e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01060e6:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01060ed:	77 17                	ja     f0106106 <boot_get_page_table+0xb3>
f01060ef:	ff 75 dc             	pushl  -0x24(%ebp)
f01060f2:	68 b0 61 13 f0       	push   $0xf01361b0
f01060f7:	68 1b 01 00 00       	push   $0x11b
f01060fc:	68 e4 61 13 f0       	push   $0xf01361e4
f0106101:	e8 ff a0 ff ff       	call   f0100205 <_panic>
f0106106:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106109:	05 00 00 00 10       	add    $0x10000000,%eax
f010610e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106111:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106114:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010611b:	8b 45 08             	mov    0x8(%ebp),%eax
f010611e:	01 d0                	add    %edx,%eax
f0106120:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106123:	83 ca 03             	or     $0x3,%edx
f0106126:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106128:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010612b:	eb 0a                	jmp    f0106137 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010612d:	b8 00 00 00 00       	mov    $0x0,%eax
f0106132:	eb 03                	jmp    f0106137 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106134:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106137:	c9                   	leave  
f0106138:	c3                   	ret    

f0106139 <nvram_read>:


int nvram_read(int r)
{
f0106139:	55                   	push   %ebp
f010613a:	89 e5                	mov    %esp,%ebp
f010613c:	53                   	push   %ebx
f010613d:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106140:	8b 45 08             	mov    0x8(%ebp),%eax
f0106143:	83 ec 0c             	sub    $0xc,%esp
f0106146:	50                   	push   %eax
f0106147:	e8 9b de ff ff       	call   f0103fe7 <mc146818_read>
f010614c:	83 c4 10             	add    $0x10,%esp
f010614f:	89 c3                	mov    %eax,%ebx
f0106151:	8b 45 08             	mov    0x8(%ebp),%eax
f0106154:	40                   	inc    %eax
f0106155:	83 ec 0c             	sub    $0xc,%esp
f0106158:	50                   	push   %eax
f0106159:	e8 89 de ff ff       	call   f0103fe7 <mc146818_read>
f010615e:	83 c4 10             	add    $0x10,%esp
f0106161:	c1 e0 08             	shl    $0x8,%eax
f0106164:	09 d8                	or     %ebx,%eax
}
f0106166:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106169:	c9                   	leave  
f010616a:	c3                   	ret    

f010616b <detect_memory>:

void detect_memory()
{
f010616b:	55                   	push   %ebp
f010616c:	89 e5                	mov    %esp,%ebp
f010616e:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106171:	83 ec 0c             	sub    $0xc,%esp
f0106174:	6a 15                	push   $0x15
f0106176:	e8 be ff ff ff       	call   f0106139 <nvram_read>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	c1 e0 0a             	shl    $0xa,%eax
f0106181:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106184:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106187:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010618c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f010618f:	83 ec 0c             	sub    $0xc,%esp
f0106192:	6a 17                	push   $0x17
f0106194:	e8 a0 ff ff ff       	call   f0106139 <nvram_read>
f0106199:	83 c4 10             	add    $0x10,%esp
f010619c:	c1 e0 0a             	shl    $0xa,%eax
f010619f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01061a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01061a5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01061aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01061ad:	83 ec 0c             	sub    $0xc,%esp
f01061b0:	6a 34                	push   $0x34
f01061b2:	e8 82 ff ff ff       	call   f0106139 <nvram_read>
f01061b7:	83 c4 10             	add    $0x10,%esp
f01061ba:	c1 e0 10             	shl    $0x10,%eax
f01061bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01061c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01061c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01061cb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01061cf:	74 18                	je     f01061e9 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01061d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061d4:	05 00 00 00 01       	add    $0x1000000,%eax
f01061d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01061dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061df:	2d 00 00 10 00       	sub    $0x100000,%eax
f01061e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061e7:	eb 19                	jmp    f0106202 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01061e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01061ed:	74 0d                	je     f01061fc <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01061ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f2:	05 00 00 10 00       	add    $0x100000,%eax
f01061f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01061fa:	eb 06                	jmp    f0106202 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01061fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106202:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106209:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010620c:	c1 e8 0c             	shr    $0xc,%eax
f010620f:	a3 10 a1 86 f0       	mov    %eax,0xf086a110

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106217:	c1 e8 0a             	shr    $0xa,%eax
f010621a:	83 ec 08             	sub    $0x8,%esp
f010621d:	50                   	push   %eax
f010621e:	68 5c 62 13 f0       	push   $0xf013625c
f0106223:	e8 e6 aa ff ff       	call   f0100d0e <cprintf>
f0106228:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f010622b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010622e:	c1 e8 0a             	shr    $0xa,%eax
f0106231:	89 c2                	mov    %eax,%edx
f0106233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106236:	c1 e8 0a             	shr    $0xa,%eax
f0106239:	83 ec 04             	sub    $0x4,%esp
f010623c:	52                   	push   %edx
f010623d:	50                   	push   %eax
f010623e:	68 7d 62 13 f0       	push   $0xf013627d
f0106243:	e8 c6 aa ff ff       	call   f0100d0e <cprintf>
f0106248:	83 c4 10             	add    $0x10,%esp
}
f010624b:	90                   	nop
f010624c:	c9                   	leave  
f010624d:	c3                   	ret    

f010624e <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f010624e:	55                   	push   %ebp
f010624f:	89 e5                	mov    %esp,%ebp
f0106251:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106254:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f010625b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106262:	eb 24                	jmp    f0106288 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106264:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0106269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010626c:	c1 e2 02             	shl    $0x2,%edx
f010626f:	01 c2                	add    %eax,%edx
f0106271:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0106276:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106279:	c1 e1 02             	shl    $0x2,%ecx
f010627c:	01 c8                	add    %ecx,%eax
f010627e:	8b 00                	mov    (%eax),%eax
f0106280:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106282:	ff 45 fc             	incl   -0x4(%ebp)
f0106285:	ff 45 f8             	incl   -0x8(%ebp)
f0106288:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f010628d:	c1 e8 16             	shr    $0x16,%eax
f0106290:	89 c2                	mov    %eax,%edx
f0106292:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106295:	39 c2                	cmp    %eax,%edx
f0106297:	77 cb                	ja     f0106264 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106299:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f010629e:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01062a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062a4:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f01062a7:	0f 20 c0             	mov    %cr0,%eax
f01062aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f01062ad:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f01062b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f01062b3:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f01062ba:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f01062be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01062c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f01062c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01062c7:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f01062ca:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f01062d1:	b8 23 00 00 00       	mov    $0x23,%eax
f01062d6:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01062d8:	b8 23 00 00 00       	mov    $0x23,%eax
f01062dd:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01062df:	b8 10 00 00 00       	mov    $0x10,%eax
f01062e4:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01062e6:	b8 10 00 00 00       	mov    $0x10,%eax
f01062eb:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01062ed:	b8 10 00 00 00       	mov    $0x10,%eax
f01062f2:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01062f4:	ea fb 62 10 f0 08 00 	ljmp   $0x8,$0xf01062fb
	asm volatile("lldt %%ax" :: "a" (0));
f01062fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0106300:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106303:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f010630a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106311:	eb 19                	jmp    f010632c <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106313:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0106318:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010631b:	c1 e2 02             	shl    $0x2,%edx
f010631e:	01 d0                	add    %edx,%eax
f0106320:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106326:	ff 45 f4             	incl   -0xc(%ebp)
f0106329:	ff 45 f0             	incl   -0x10(%ebp)
f010632c:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0106331:	c1 e8 16             	shr    $0x16,%eax
f0106334:	89 c2                	mov    %eax,%edx
f0106336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106339:	39 c2                	cmp    %eax,%edx
f010633b:	77 d6                	ja     f0106313 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f010633d:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f0106342:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106345:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106348:	0f 22 d8             	mov    %eax,%cr3
}
f010634b:	90                   	nop
f010634c:	c9                   	leave  
f010634d:	c3                   	ret    

f010634e <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f010634e:	55                   	push   %ebp
f010634f:	89 e5                	mov    %esp,%ebp
f0106351:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106354:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0106359:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010635c:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106363:	77 17                	ja     f010637c <setup_listing_to_all_page_tables_entries+0x2e>
f0106365:	ff 75 f4             	pushl  -0xc(%ebp)
f0106368:	68 b0 61 13 f0       	push   $0xf01361b0
f010636d:	68 ab 01 00 00       	push   $0x1ab
f0106372:	68 e4 61 13 f0       	push   $0xf01361e4
f0106377:	e8 89 9e ff ff       	call   f0100205 <_panic>
f010637c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010637f:	05 00 00 00 10       	add    $0x10000000,%eax
f0106384:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106387:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f010638c:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106391:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106394:	83 ca 03             	or     $0x3,%edx
f0106397:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106399:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f010639e:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01063a4:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01063a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01063ac:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f01063b3:	77 17                	ja     f01063cc <setup_listing_to_all_page_tables_entries+0x7e>
f01063b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01063b8:	68 b0 61 13 f0       	push   $0xf01361b0
f01063bd:	68 b0 01 00 00       	push   $0x1b0
f01063c2:	68 e4 61 13 f0       	push   $0xf01361e4
f01063c7:	e8 39 9e ff ff       	call   f0100205 <_panic>
f01063cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063cf:	05 00 00 00 10       	add    $0x10000000,%eax
f01063d4:	83 c8 05             	or     $0x5,%eax
f01063d7:	89 02                	mov    %eax,(%edx)

}
f01063d9:	90                   	nop
f01063da:	c9                   	leave  
f01063db:	c3                   	ret    

f01063dc <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01063dc:	55                   	push   %ebp
f01063dd:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01063df:	8b 45 08             	mov    0x8(%ebp),%eax
f01063e2:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f01063e8:	29 d0                	sub    %edx,%eax
f01063ea:	c1 f8 03             	sar    $0x3,%eax
f01063ed:	89 c2                	mov    %eax,%edx
f01063ef:	89 d0                	mov    %edx,%eax
f01063f1:	c1 e0 02             	shl    $0x2,%eax
f01063f4:	01 d0                	add    %edx,%eax
f01063f6:	c1 e0 02             	shl    $0x2,%eax
f01063f9:	01 d0                	add    %edx,%eax
f01063fb:	c1 e0 02             	shl    $0x2,%eax
f01063fe:	01 d0                	add    %edx,%eax
f0106400:	89 c1                	mov    %eax,%ecx
f0106402:	c1 e1 08             	shl    $0x8,%ecx
f0106405:	01 c8                	add    %ecx,%eax
f0106407:	89 c1                	mov    %eax,%ecx
f0106409:	c1 e1 10             	shl    $0x10,%ecx
f010640c:	01 c8                	add    %ecx,%eax
f010640e:	01 c0                	add    %eax,%eax
f0106410:	01 d0                	add    %edx,%eax
}
f0106412:	5d                   	pop    %ebp
f0106413:	c3                   	ret    

f0106414 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106414:	55                   	push   %ebp
f0106415:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106417:	ff 75 08             	pushl  0x8(%ebp)
f010641a:	e8 bd ff ff ff       	call   f01063dc <to_frame_number>
f010641f:	83 c4 04             	add    $0x4,%esp
f0106422:	c1 e0 0c             	shl    $0xc,%eax
}
f0106425:	c9                   	leave  
f0106426:	c3                   	ret    

f0106427 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106427:	55                   	push   %ebp
f0106428:	89 e5                	mov    %esp,%ebp
f010642a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010642d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106430:	c1 e8 0c             	shr    $0xc,%eax
f0106433:	89 c2                	mov    %eax,%edx
f0106435:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f010643a:	39 c2                	cmp    %eax,%edx
f010643c:	72 14                	jb     f0106452 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010643e:	83 ec 04             	sub    $0x4,%esp
f0106441:	68 9c 62 13 f0       	push   $0xf013629c
f0106446:	6a 55                	push   $0x55
f0106448:	68 c1 62 13 f0       	push   $0xf01362c1
f010644d:	e8 b3 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0106452:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f0106458:	8b 45 08             	mov    0x8(%ebp),%eax
f010645b:	c1 e8 0c             	shr    $0xc,%eax
f010645e:	89 c1                	mov    %eax,%ecx
f0106460:	89 c8                	mov    %ecx,%eax
f0106462:	01 c0                	add    %eax,%eax
f0106464:	01 c8                	add    %ecx,%eax
f0106466:	c1 e0 03             	shl    $0x3,%eax
f0106469:	01 d0                	add    %edx,%eax
}
f010646b:	c9                   	leave  
f010646c:	c3                   	ret    

f010646d <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010646d:	55                   	push   %ebp
f010646e:	89 e5                	mov    %esp,%ebp
f0106470:	83 ec 10             	sub    $0x10,%esp
f0106473:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106476:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106479:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010647c:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f010647f:	90                   	nop
f0106480:	c9                   	leave  
f0106481:	c3                   	ret    

f0106482 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106482:	55                   	push   %ebp
f0106483:	89 e5                	mov    %esp,%ebp
f0106485:	53                   	push   %ebx
f0106486:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106489:	c7 05 18 a1 86 f0 00 	movl   $0x0,0xf086a118
f0106490:	00 00 00 
f0106493:	c7 05 1c a1 86 f0 00 	movl   $0x0,0xf086a11c
f010649a:	00 00 00 
f010649d:	c7 05 24 a1 86 f0 00 	movl   $0x0,0xf086a124
f01064a4:	00 00 00 
	LIST_INIT(&modified_frame_list);
f01064a7:	c7 05 b8 a0 86 f0 00 	movl   $0x0,0xf086a0b8
f01064ae:	00 00 00 
f01064b1:	c7 05 bc a0 86 f0 00 	movl   $0x0,0xf086a0bc
f01064b8:	00 00 00 
f01064bb:	c7 05 c4 a0 86 f0 00 	movl   $0x0,0xf086a0c4
f01064c2:	00 00 00 

	frames_info[0].references = 1;
f01064c5:	a1 54 a1 86 f0       	mov    0xf086a154,%eax
f01064ca:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f01064d0:	a1 54 a1 86 f0       	mov    0xf086a154,%eax
f01064d5:	83 c0 18             	add    $0x18,%eax
f01064d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01064de:	a1 54 a1 86 f0       	mov    0xf086a154,%eax
f01064e3:	83 c0 30             	add    $0x30,%eax
f01064e6:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01064ec:	c7 05 60 a1 86 f0 00 	movl   $0xf0001000,0xf086a160
f01064f3:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01064f6:	c7 05 84 a1 86 f0 00 	movl   $0xf0002000,0xf086a184
f01064fd:	20 00 f0 
	i =0;
f0106500:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106507:	eb 1f                	jmp    f0106528 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106509:	8b 15 60 a1 86 f0    	mov    0xf086a160,%edx
f010650f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106512:	01 d0                	add    %edx,%eax
f0106514:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106517:	8b 15 84 a1 86 f0    	mov    0xf086a184,%edx
f010651d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106520:	01 d0                	add    %edx,%eax
f0106522:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106525:	ff 45 f4             	incl   -0xc(%ebp)
f0106528:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010652f:	7e d8                	jle    f0106509 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106531:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106538:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010653b:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106540:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106543:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106546:	ba 00 00 00 00       	mov    $0x0,%edx
f010654b:	f7 75 f0             	divl   -0x10(%ebp)
f010654e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106551:	29 d0                	sub    %edx,%eax
f0106553:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106556:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f010655d:	e9 e8 00 00 00       	jmp    f010664a <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106562:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106568:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656b:	89 d0                	mov    %edx,%eax
f010656d:	01 c0                	add    %eax,%eax
f010656f:	01 d0                	add    %edx,%eax
f0106571:	c1 e0 03             	shl    $0x3,%eax
f0106574:	01 c8                	add    %ecx,%eax
f0106576:	83 ec 0c             	sub    $0xc,%esp
f0106579:	50                   	push   %eax
f010657a:	e8 b7 02 00 00       	call   f0106836 <initialize_frame_info>
f010657f:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106582:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106588:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010658b:	89 d0                	mov    %edx,%eax
f010658d:	01 c0                	add    %eax,%eax
f010658f:	01 d0                	add    %edx,%eax
f0106591:	c1 e0 03             	shl    $0x3,%eax
f0106594:	01 c8                	add    %ecx,%eax
f0106596:	85 c0                	test   %eax,%eax
f0106598:	75 14                	jne    f01065ae <initialize_paging+0x12c>
f010659a:	83 ec 04             	sub    $0x4,%esp
f010659d:	68 dc 62 13 f0       	push   $0xf01362dc
f01065a2:	6a 5c                	push   $0x5c
f01065a4:	68 ff 62 13 f0       	push   $0xf01362ff
f01065a9:	e8 57 9c ff ff       	call   f0100205 <_panic>
f01065ae:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01065b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065b7:	89 d0                	mov    %edx,%eax
f01065b9:	01 c0                	add    %eax,%eax
f01065bb:	01 d0                	add    %edx,%eax
f01065bd:	c1 e0 03             	shl    $0x3,%eax
f01065c0:	01 c8                	add    %ecx,%eax
f01065c2:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f01065c8:	89 10                	mov    %edx,(%eax)
f01065ca:	8b 00                	mov    (%eax),%eax
f01065cc:	85 c0                	test   %eax,%eax
f01065ce:	74 1f                	je     f01065ef <initialize_paging+0x16d>
f01065d0:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f01065d6:	8b 1d 54 a1 86 f0    	mov    0xf086a154,%ebx
f01065dc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01065df:	89 c8                	mov    %ecx,%eax
f01065e1:	01 c0                	add    %eax,%eax
f01065e3:	01 c8                	add    %ecx,%eax
f01065e5:	c1 e0 03             	shl    $0x3,%eax
f01065e8:	01 d8                	add    %ebx,%eax
f01065ea:	89 42 04             	mov    %eax,0x4(%edx)
f01065ed:	eb 19                	jmp    f0106608 <initialize_paging+0x186>
f01065ef:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01065f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f8:	89 d0                	mov    %edx,%eax
f01065fa:	01 c0                	add    %eax,%eax
f01065fc:	01 d0                	add    %edx,%eax
f01065fe:	c1 e0 03             	shl    $0x3,%eax
f0106601:	01 c8                	add    %ecx,%eax
f0106603:	a3 1c a1 86 f0       	mov    %eax,0xf086a11c
f0106608:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f010660e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106611:	89 d0                	mov    %edx,%eax
f0106613:	01 c0                	add    %eax,%eax
f0106615:	01 d0                	add    %edx,%eax
f0106617:	c1 e0 03             	shl    $0x3,%eax
f010661a:	01 c8                	add    %ecx,%eax
f010661c:	a3 18 a1 86 f0       	mov    %eax,0xf086a118
f0106621:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106627:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662a:	89 d0                	mov    %edx,%eax
f010662c:	01 c0                	add    %eax,%eax
f010662e:	01 d0                	add    %edx,%eax
f0106630:	c1 e0 03             	shl    $0x3,%eax
f0106633:	01 c8                	add    %ecx,%eax
f0106635:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010663c:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f0106641:	40                   	inc    %eax
f0106642:	a3 24 a1 86 f0       	mov    %eax,0xf086a124
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106647:	ff 45 f4             	incl   -0xc(%ebp)
f010664a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010664d:	85 c0                	test   %eax,%eax
f010664f:	79 05                	jns    f0106656 <initialize_paging+0x1d4>
f0106651:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106656:	c1 f8 0c             	sar    $0xc,%eax
f0106659:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010665c:	0f 8f 00 ff ff ff    	jg     f0106562 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106662:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106669:	eb 1d                	jmp    f0106688 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010666b:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106671:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106674:	89 d0                	mov    %edx,%eax
f0106676:	01 c0                	add    %eax,%eax
f0106678:	01 d0                	add    %edx,%eax
f010667a:	c1 e0 03             	shl    $0x3,%eax
f010667d:	01 c8                	add    %ecx,%eax
f010667f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106685:	ff 45 f4             	incl   -0xc(%ebp)
f0106688:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010668f:	7e da                	jle    f010666b <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106691:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106698:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f010669d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01066a0:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f01066a7:	77 14                	ja     f01066bd <initialize_paging+0x23b>
f01066a9:	ff 75 e0             	pushl  -0x20(%ebp)
f01066ac:	68 1c 63 13 f0       	push   $0xf013631c
f01066b1:	6a 64                	push   $0x64
f01066b3:	68 ff 62 13 f0       	push   $0xf01362ff
f01066b8:	e8 48 9b ff ff       	call   f0100205 <_panic>
f01066bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01066c0:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01066c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01066c9:	01 d0                	add    %edx,%eax
f01066cb:	48                   	dec    %eax
f01066cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01066cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01066d7:	f7 75 e4             	divl   -0x1c(%ebp)
f01066da:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066dd:	29 d0                	sub    %edx,%eax
f01066df:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066e2:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01066e9:	eb 1d                	jmp    f0106708 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01066eb:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01066f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066f4:	89 d0                	mov    %edx,%eax
f01066f6:	01 c0                	add    %eax,%eax
f01066f8:	01 d0                	add    %edx,%eax
f01066fa:	c1 e0 03             	shl    $0x3,%eax
f01066fd:	01 c8                	add    %ecx,%eax
f01066ff:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106705:	ff 45 f4             	incl   -0xc(%ebp)
f0106708:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010670b:	85 c0                	test   %eax,%eax
f010670d:	79 05                	jns    f0106714 <initialize_paging+0x292>
f010670f:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106714:	c1 f8 0c             	sar    $0xc,%eax
f0106717:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010671a:	7f cf                	jg     f01066eb <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010671c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010671f:	85 c0                	test   %eax,%eax
f0106721:	79 05                	jns    f0106728 <initialize_paging+0x2a6>
f0106723:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106728:	c1 f8 0c             	sar    $0xc,%eax
f010672b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010672e:	e9 e8 00 00 00       	jmp    f010681b <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f0106733:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106739:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673c:	89 d0                	mov    %edx,%eax
f010673e:	01 c0                	add    %eax,%eax
f0106740:	01 d0                	add    %edx,%eax
f0106742:	c1 e0 03             	shl    $0x3,%eax
f0106745:	01 c8                	add    %ecx,%eax
f0106747:	83 ec 0c             	sub    $0xc,%esp
f010674a:	50                   	push   %eax
f010674b:	e8 e6 00 00 00       	call   f0106836 <initialize_frame_info>
f0106750:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106753:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106759:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010675c:	89 d0                	mov    %edx,%eax
f010675e:	01 c0                	add    %eax,%eax
f0106760:	01 d0                	add    %edx,%eax
f0106762:	c1 e0 03             	shl    $0x3,%eax
f0106765:	01 c8                	add    %ecx,%eax
f0106767:	85 c0                	test   %eax,%eax
f0106769:	75 14                	jne    f010677f <initialize_paging+0x2fd>
f010676b:	83 ec 04             	sub    $0x4,%esp
f010676e:	68 dc 62 13 f0       	push   $0xf01362dc
f0106773:	6a 70                	push   $0x70
f0106775:	68 ff 62 13 f0       	push   $0xf01362ff
f010677a:	e8 86 9a ff ff       	call   f0100205 <_panic>
f010677f:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f0106785:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106788:	89 d0                	mov    %edx,%eax
f010678a:	01 c0                	add    %eax,%eax
f010678c:	01 d0                	add    %edx,%eax
f010678e:	c1 e0 03             	shl    $0x3,%eax
f0106791:	01 c8                	add    %ecx,%eax
f0106793:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f0106799:	89 10                	mov    %edx,(%eax)
f010679b:	8b 00                	mov    (%eax),%eax
f010679d:	85 c0                	test   %eax,%eax
f010679f:	74 1f                	je     f01067c0 <initialize_paging+0x33e>
f01067a1:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f01067a7:	8b 1d 54 a1 86 f0    	mov    0xf086a154,%ebx
f01067ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01067b0:	89 c8                	mov    %ecx,%eax
f01067b2:	01 c0                	add    %eax,%eax
f01067b4:	01 c8                	add    %ecx,%eax
f01067b6:	c1 e0 03             	shl    $0x3,%eax
f01067b9:	01 d8                	add    %ebx,%eax
f01067bb:	89 42 04             	mov    %eax,0x4(%edx)
f01067be:	eb 19                	jmp    f01067d9 <initialize_paging+0x357>
f01067c0:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01067c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c9:	89 d0                	mov    %edx,%eax
f01067cb:	01 c0                	add    %eax,%eax
f01067cd:	01 d0                	add    %edx,%eax
f01067cf:	c1 e0 03             	shl    $0x3,%eax
f01067d2:	01 c8                	add    %ecx,%eax
f01067d4:	a3 1c a1 86 f0       	mov    %eax,0xf086a11c
f01067d9:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01067df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e2:	89 d0                	mov    %edx,%eax
f01067e4:	01 c0                	add    %eax,%eax
f01067e6:	01 d0                	add    %edx,%eax
f01067e8:	c1 e0 03             	shl    $0x3,%eax
f01067eb:	01 c8                	add    %ecx,%eax
f01067ed:	a3 18 a1 86 f0       	mov    %eax,0xf086a118
f01067f2:	8b 0d 54 a1 86 f0    	mov    0xf086a154,%ecx
f01067f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fb:	89 d0                	mov    %edx,%eax
f01067fd:	01 c0                	add    %eax,%eax
f01067ff:	01 d0                	add    %edx,%eax
f0106801:	c1 e0 03             	shl    $0x3,%eax
f0106804:	01 c8                	add    %ecx,%eax
f0106806:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010680d:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f0106812:	40                   	inc    %eax
f0106813:	a3 24 a1 86 f0       	mov    %eax,0xf086a124
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106818:	ff 45 f4             	incl   -0xc(%ebp)
f010681b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010681e:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106823:	39 c2                	cmp    %eax,%edx
f0106825:	0f 82 08 ff ff ff    	jb     f0106733 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f010682b:	e8 eb c8 ff ff       	call   f010311b <initialize_disk_page_file>
}
f0106830:	90                   	nop
f0106831:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106834:	c9                   	leave  
f0106835:	c3                   	ret    

f0106836 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106836:	55                   	push   %ebp
f0106837:	89 e5                	mov    %esp,%ebp
f0106839:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f010683c:	83 ec 04             	sub    $0x4,%esp
f010683f:	6a 18                	push   $0x18
f0106841:	6a 00                	push   $0x0
f0106843:	ff 75 08             	pushl  0x8(%ebp)
f0106846:	e8 78 b3 02 00       	call   f0131bc3 <memset>
f010684b:	83 c4 10             	add    $0x10,%esp
}
f010684e:	90                   	nop
f010684f:	c9                   	leave  
f0106850:	c3                   	ret    

f0106851 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0106851:	55                   	push   %ebp
f0106852:	89 e5                	mov    %esp,%ebp
f0106854:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106857:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f010685d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106860:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106862:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106869:	8b 45 08             	mov    0x8(%ebp),%eax
f010686c:	8b 00                	mov    (%eax),%eax
f010686e:	85 c0                	test   %eax,%eax
f0106870:	75 17                	jne    f0106889 <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106872:	83 ec 04             	sub    $0x4,%esp
f0106875:	68 50 63 13 f0       	push   $0xf0136350
f010687a:	68 99 00 00 00       	push   $0x99
f010687f:	68 ff 62 13 f0       	push   $0xf01362ff
f0106884:	e8 7c 99 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106889:	8b 45 08             	mov    0x8(%ebp),%eax
f010688c:	8b 00                	mov    (%eax),%eax
f010688e:	85 c0                	test   %eax,%eax
f0106890:	75 17                	jne    f01068a9 <allocate_frame+0x58>
f0106892:	83 ec 04             	sub    $0x4,%esp
f0106895:	68 9d 63 13 f0       	push   $0xf013639d
f010689a:	68 9c 00 00 00       	push   $0x9c
f010689f:	68 ff 62 13 f0       	push   $0xf01362ff
f01068a4:	e8 5c 99 ff ff       	call   f0100205 <_panic>
f01068a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ac:	8b 00                	mov    (%eax),%eax
f01068ae:	8b 00                	mov    (%eax),%eax
f01068b0:	85 c0                	test   %eax,%eax
f01068b2:	74 14                	je     f01068c8 <allocate_frame+0x77>
f01068b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01068b7:	8b 00                	mov    (%eax),%eax
f01068b9:	8b 00                	mov    (%eax),%eax
f01068bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01068be:	8b 12                	mov    (%edx),%edx
f01068c0:	8b 52 04             	mov    0x4(%edx),%edx
f01068c3:	89 50 04             	mov    %edx,0x4(%eax)
f01068c6:	eb 0d                	jmp    f01068d5 <allocate_frame+0x84>
f01068c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cb:	8b 00                	mov    (%eax),%eax
f01068cd:	8b 40 04             	mov    0x4(%eax),%eax
f01068d0:	a3 1c a1 86 f0       	mov    %eax,0xf086a11c
f01068d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068d8:	8b 00                	mov    (%eax),%eax
f01068da:	8b 40 04             	mov    0x4(%eax),%eax
f01068dd:	85 c0                	test   %eax,%eax
f01068df:	74 13                	je     f01068f4 <allocate_frame+0xa3>
f01068e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01068e4:	8b 00                	mov    (%eax),%eax
f01068e6:	8b 40 04             	mov    0x4(%eax),%eax
f01068e9:	8b 55 08             	mov    0x8(%ebp),%edx
f01068ec:	8b 12                	mov    (%edx),%edx
f01068ee:	8b 12                	mov    (%edx),%edx
f01068f0:	89 10                	mov    %edx,(%eax)
f01068f2:	eb 0c                	jmp    f0106900 <allocate_frame+0xaf>
f01068f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f7:	8b 00                	mov    (%eax),%eax
f01068f9:	8b 00                	mov    (%eax),%eax
f01068fb:	a3 18 a1 86 f0       	mov    %eax,0xf086a118
f0106900:	8b 45 08             	mov    0x8(%ebp),%eax
f0106903:	8b 00                	mov    (%eax),%eax
f0106905:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010690b:	8b 45 08             	mov    0x8(%ebp),%eax
f010690e:	8b 00                	mov    (%eax),%eax
f0106910:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106917:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f010691c:	48                   	dec    %eax
f010691d:	a3 24 a1 86 f0       	mov    %eax,0xf086a124

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0106922:	8b 45 08             	mov    0x8(%ebp),%eax
f0106925:	8b 00                	mov    (%eax),%eax
f0106927:	8a 40 14             	mov    0x14(%eax),%al
f010692a:	84 c0                	test   %al,%al
f010692c:	74 20                	je     f010694e <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f010692e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106931:	8b 00                	mov    (%eax),%eax
f0106933:	8b 50 0c             	mov    0xc(%eax),%edx
f0106936:	8b 45 08             	mov    0x8(%ebp),%eax
f0106939:	8b 00                	mov    (%eax),%eax
f010693b:	8b 40 10             	mov    0x10(%eax),%eax
f010693e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106941:	83 ec 08             	sub    $0x8,%esp
f0106944:	52                   	push   %edx
f0106945:	50                   	push   %eax
f0106946:	e8 5b 14 00 00       	call   f0107da6 <pt_clear_page_table_entry>
f010694b:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f010694e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106951:	8b 00                	mov    (%eax),%eax
f0106953:	83 ec 0c             	sub    $0xc,%esp
f0106956:	50                   	push   %eax
f0106957:	e8 da fe ff ff       	call   f0106836 <initialize_frame_info>
f010695c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010695f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106964:	c9                   	leave  
f0106965:	c3                   	ret    

f0106966 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106966:	55                   	push   %ebp
f0106967:	89 e5                	mov    %esp,%ebp
f0106969:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f010696c:	83 ec 0c             	sub    $0xc,%esp
f010696f:	ff 75 08             	pushl  0x8(%ebp)
f0106972:	e8 bf fe ff ff       	call   f0106836 <initialize_frame_info>
f0106977:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f010697a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010697e:	75 17                	jne    f0106997 <free_frame+0x31>
f0106980:	83 ec 04             	sub    $0x4,%esp
f0106983:	68 dc 62 13 f0       	push   $0xf01362dc
f0106988:	68 b9 00 00 00       	push   $0xb9
f010698d:	68 ff 62 13 f0       	push   $0xf01362ff
f0106992:	e8 6e 98 ff ff       	call   f0100205 <_panic>
f0106997:	8b 15 18 a1 86 f0    	mov    0xf086a118,%edx
f010699d:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a0:	89 10                	mov    %edx,(%eax)
f01069a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a5:	8b 00                	mov    (%eax),%eax
f01069a7:	85 c0                	test   %eax,%eax
f01069a9:	74 0d                	je     f01069b8 <free_frame+0x52>
f01069ab:	a1 18 a1 86 f0       	mov    0xf086a118,%eax
f01069b0:	8b 55 08             	mov    0x8(%ebp),%edx
f01069b3:	89 50 04             	mov    %edx,0x4(%eax)
f01069b6:	eb 08                	jmp    f01069c0 <free_frame+0x5a>
f01069b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01069bb:	a3 1c a1 86 f0       	mov    %eax,0xf086a11c
f01069c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c3:	a3 18 a1 86 f0       	mov    %eax,0xf086a118
f01069c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01069cb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069d2:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f01069d7:	40                   	inc    %eax
f01069d8:	a3 24 a1 86 f0       	mov    %eax,0xf086a124
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f01069dd:	90                   	nop
f01069de:	c9                   	leave  
f01069df:	c3                   	ret    

f01069e0 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01069e0:	55                   	push   %ebp
f01069e1:	89 e5                	mov    %esp,%ebp
f01069e3:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01069e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01069e9:	8b 40 08             	mov    0x8(%eax),%eax
f01069ec:	48                   	dec    %eax
f01069ed:	8b 55 08             	mov    0x8(%ebp),%edx
f01069f0:	66 89 42 08          	mov    %ax,0x8(%edx)
f01069f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f7:	8b 40 08             	mov    0x8(%eax),%eax
f01069fa:	66 85 c0             	test   %ax,%ax
f01069fd:	75 0e                	jne    f0106a0d <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01069ff:	83 ec 0c             	sub    $0xc,%esp
f0106a02:	ff 75 08             	pushl  0x8(%ebp)
f0106a05:	e8 5c ff ff ff       	call   f0106966 <free_frame>
f0106a0a:	83 c4 10             	add    $0x10,%esp
}
f0106a0d:	90                   	nop
f0106a0e:	c9                   	leave  
f0106a0f:	c3                   	ret    

f0106a10 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a10:	55                   	push   %ebp
f0106a11:	89 e5                	mov    %esp,%ebp
f0106a13:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a19:	c1 e8 16             	shr    $0x16,%eax
f0106a1c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a26:	01 d0                	add    %edx,%eax
f0106a28:	8b 00                	mov    (%eax),%eax
f0106a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a30:	83 e0 01             	and    $0x1,%eax
f0106a33:	85 c0                	test   %eax,%eax
f0106a35:	74 74                	je     f0106aab <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106a37:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106a3e:	77 1d                	ja     f0106a5d <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a48:	83 ec 0c             	sub    $0xc,%esp
f0106a4b:	50                   	push   %eax
f0106a4c:	e8 5a 11 00 00       	call   f0107bab <kheap_virtual_address>
f0106a51:	83 c4 10             	add    $0x10,%esp
f0106a54:	89 c2                	mov    %eax,%edx
f0106a56:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a59:	89 10                	mov    %edx,(%eax)
f0106a5b:	eb 44                	jmp    f0106aa1 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106a68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a6b:	c1 e8 0c             	shr    $0xc,%eax
f0106a6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a71:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106a76:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106a79:	72 17                	jb     f0106a92 <get_page_table+0x82>
f0106a7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0106a7e:	68 bc 63 13 f0       	push   $0xf01363bc
f0106a83:	68 e2 00 00 00       	push   $0xe2
f0106a88:	68 ff 62 13 f0       	push   $0xf01362ff
f0106a8d:	e8 73 97 ff ff       	call   f0100205 <_panic>
f0106a92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a95:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a9a:	89 c2                	mov    %eax,%edx
f0106a9c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a9f:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0106aa6:	e9 b9 00 00 00       	jmp    f0106b64 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106aab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106aaf:	0f 84 a1 00 00 00    	je     f0106b56 <get_page_table+0x146>
f0106ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106abb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106abe:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106ac1:	83 ec 0c             	sub    $0xc,%esp
f0106ac4:	6a 00                	push   $0x0
f0106ac6:	e8 a1 60 00 00       	call   f010cb6c <fault_handler>
f0106acb:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ace:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ad1:	c1 e8 16             	shr    $0x16,%eax
f0106ad4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ade:	01 d0                	add    %edx,%eax
f0106ae0:	8b 00                	mov    (%eax),%eax
f0106ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ae5:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106aec:	77 1d                	ja     f0106b0b <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106af1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106af6:	83 ec 0c             	sub    $0xc,%esp
f0106af9:	50                   	push   %eax
f0106afa:	e8 ac 10 00 00       	call   f0107bab <kheap_virtual_address>
f0106aff:	83 c4 10             	add    $0x10,%esp
f0106b02:	89 c2                	mov    %eax,%edx
f0106b04:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b07:	89 10                	mov    %edx,(%eax)
f0106b09:	eb 44                	jmp    f0106b4f <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b0e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b13:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106b16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b19:	c1 e8 0c             	shr    $0xc,%eax
f0106b1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106b1f:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106b24:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106b27:	72 17                	jb     f0106b40 <get_page_table+0x130>
f0106b29:	ff 75 e8             	pushl  -0x18(%ebp)
f0106b2c:	68 bc 63 13 f0       	push   $0xf01363bc
f0106b31:	68 fa 00 00 00       	push   $0xfa
f0106b36:	68 ff 62 13 f0       	push   $0xf01362ff
f0106b3b:	e8 c5 96 ff ff       	call   f0100205 <_panic>
f0106b40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b43:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b48:	89 c2                	mov    %eax,%edx
f0106b4a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b4d:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106b4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b54:	eb 0e                	jmp    f0106b64 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106b56:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106b5f:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106b64:	c9                   	leave  
f0106b65:	c3                   	ret    

f0106b66 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106b66:	55                   	push   %ebp
f0106b67:	89 e5                	mov    %esp,%ebp
f0106b69:	53                   	push   %ebx
f0106b6a:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106b6d:	83 ec 0c             	sub    $0xc,%esp
f0106b70:	68 00 10 00 00       	push   $0x1000
f0106b75:	e8 f0 0d 00 00       	call   f010796a <kmalloc>
f0106b7a:	83 c4 10             	add    $0x10,%esp
f0106b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b84:	75 17                	jne    f0106b9d <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106b86:	83 ec 04             	sub    $0x4,%esp
f0106b89:	68 eb 63 13 f0       	push   $0xf01363eb
f0106b8e:	68 18 01 00 00       	push   $0x118
f0106b93:	68 ff 62 13 f0       	push   $0xf01362ff
f0106b98:	e8 68 96 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ba0:	c1 e8 16             	shr    $0x16,%eax
f0106ba3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0106bad:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bb3:	83 ec 0c             	sub    $0xc,%esp
f0106bb6:	50                   	push   %eax
f0106bb7:	e8 0e 10 00 00       	call   f0107bca <kheap_physical_address>
f0106bbc:	83 c4 10             	add    $0x10,%esp
f0106bbf:	83 c8 07             	or     $0x7,%eax
f0106bc2:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106bc4:	83 ec 04             	sub    $0x4,%esp
f0106bc7:	68 00 10 00 00       	push   $0x1000
f0106bcc:	6a 00                	push   $0x0
f0106bce:	ff 75 f4             	pushl  -0xc(%ebp)
f0106bd1:	e8 ed af 02 00       	call   f0131bc3 <memset>
f0106bd6:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106bd9:	0f 20 d8             	mov    %cr3,%eax
f0106bdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106bdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be2:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106be5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106be8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106beb:	c9                   	leave  
f0106bec:	c3                   	ret    

f0106bed <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106bed:	55                   	push   %ebp
f0106bee:	89 e5                	mov    %esp,%ebp
f0106bf0:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106bf3:	83 ec 0c             	sub    $0xc,%esp
f0106bf6:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106bf9:	50                   	push   %eax
f0106bfa:	e8 52 fc ff ff       	call   f0106851 <allocate_frame>
f0106bff:	83 c4 10             	add    $0x10,%esp
f0106c02:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106c05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c08:	83 ec 0c             	sub    $0xc,%esp
f0106c0b:	50                   	push   %eax
f0106c0c:	e8 03 f8 ff ff       	call   f0106414 <to_physical_address>
f0106c11:	83 c4 10             	add    $0x10,%esp
f0106c14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106c17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c20:	c1 e8 0c             	shr    $0xc,%eax
f0106c23:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106c26:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106c2b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106c2e:	72 17                	jb     f0106c47 <__static_cpt+0x5a>
f0106c30:	ff 75 ec             	pushl  -0x14(%ebp)
f0106c33:	68 bc 63 13 f0       	push   $0xf01363bc
f0106c38:	68 30 01 00 00       	push   $0x130
f0106c3d:	68 ff 62 13 f0       	push   $0xf01362ff
f0106c42:	e8 be 95 ff ff       	call   f0100205 <_panic>
f0106c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c4a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c4f:	89 c2                	mov    %eax,%edx
f0106c51:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c54:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106c56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c59:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106c5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c62:	c1 e8 16             	shr    $0x16,%eax
f0106c65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c6f:	01 d0                	add    %edx,%eax
f0106c71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c74:	83 ca 07             	or     $0x7,%edx
f0106c77:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106c79:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c7c:	8b 00                	mov    (%eax),%eax
f0106c7e:	83 ec 04             	sub    $0x4,%esp
f0106c81:	68 00 10 00 00       	push   $0x1000
f0106c86:	6a 00                	push   $0x0
f0106c88:	50                   	push   %eax
f0106c89:	e8 35 af 02 00       	call   f0131bc3 <memset>
f0106c8e:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c91:	0f 20 d8             	mov    %cr3,%eax
f0106c94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106c9a:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106c9d:	90                   	nop
f0106c9e:	c9                   	leave  
f0106c9f:	c3                   	ret    

f0106ca0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106ca0:	55                   	push   %ebp
f0106ca1:	89 e5                	mov    %esp,%ebp
f0106ca3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106ca6:	ff 75 0c             	pushl  0xc(%ebp)
f0106ca9:	e8 66 f7 ff ff       	call   f0106414 <to_physical_address>
f0106cae:	83 c4 04             	add    $0x4,%esp
f0106cb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106cb4:	83 ec 04             	sub    $0x4,%esp
f0106cb7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106cba:	50                   	push   %eax
f0106cbb:	ff 75 10             	pushl  0x10(%ebp)
f0106cbe:	ff 75 08             	pushl  0x8(%ebp)
f0106cc1:	e8 4a fd ff ff       	call   f0106a10 <get_page_table>
f0106cc6:	83 c4 10             	add    $0x10,%esp
f0106cc9:	83 f8 01             	cmp    $0x1,%eax
f0106ccc:	75 1b                	jne    f0106ce9 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106cce:	83 ec 08             	sub    $0x8,%esp
f0106cd1:	ff 75 10             	pushl  0x10(%ebp)
f0106cd4:	ff 75 08             	pushl  0x8(%ebp)
f0106cd7:	e8 8a fe ff ff       	call   f0106b66 <create_page_table>
f0106cdc:	83 c4 10             	add    $0x10,%esp
f0106cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106ce2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cec:	8b 55 10             	mov    0x10(%ebp),%edx
f0106cef:	c1 ea 0c             	shr    $0xc,%edx
f0106cf2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cf8:	c1 e2 02             	shl    $0x2,%edx
f0106cfb:	01 d0                	add    %edx,%eax
f0106cfd:	8b 00                	mov    (%eax),%eax
f0106cff:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106d02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d05:	83 e0 01             	and    $0x1,%eax
f0106d08:	85 c0                	test   %eax,%eax
f0106d0a:	74 25                	je     f0106d31 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106d0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106d17:	75 07                	jne    f0106d20 <map_frame+0x80>
			return 0;
f0106d19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d1e:	eb 43                	jmp    f0106d63 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106d20:	83 ec 08             	sub    $0x8,%esp
f0106d23:	ff 75 10             	pushl  0x10(%ebp)
f0106d26:	ff 75 08             	pushl  0x8(%ebp)
f0106d29:	e8 a7 00 00 00       	call   f0106dd5 <unmap_frame>
f0106d2e:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106d31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d34:	8b 40 08             	mov    0x8(%eax),%eax
f0106d37:	40                   	inc    %eax
f0106d38:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d3b:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d42:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d45:	c1 ea 0c             	shr    $0xc,%edx
f0106d48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d4e:	c1 e2 02             	shl    $0x2,%edx
f0106d51:	01 c2                	add    %eax,%edx
f0106d53:	8b 45 14             	mov    0x14(%ebp),%eax
f0106d56:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106d59:	83 c8 01             	or     $0x1,%eax
f0106d5c:	89 02                	mov    %eax,(%edx)

	return 0;
f0106d5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d63:	c9                   	leave  
f0106d64:	c3                   	ret    

f0106d65 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106d65:	55                   	push   %ebp
f0106d66:	89 e5                	mov    %esp,%ebp
f0106d68:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106d6b:	83 ec 04             	sub    $0x4,%esp
f0106d6e:	ff 75 10             	pushl  0x10(%ebp)
f0106d71:	ff 75 0c             	pushl  0xc(%ebp)
f0106d74:	ff 75 08             	pushl  0x8(%ebp)
f0106d77:	e8 94 fc ff ff       	call   f0106a10 <get_page_table>
f0106d7c:	83 c4 10             	add    $0x10,%esp
f0106d7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106d82:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d85:	8b 00                	mov    (%eax),%eax
f0106d87:	85 c0                	test   %eax,%eax
f0106d89:	74 43                	je     f0106dce <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106d8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d8e:	c1 e8 0c             	shr    $0xc,%eax
f0106d91:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106d96:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106d99:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d9c:	8b 00                	mov    (%eax),%eax
f0106d9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106da1:	c1 e2 02             	shl    $0x2,%edx
f0106da4:	01 d0                	add    %edx,%eax
f0106da6:	8b 00                	mov    (%eax),%eax
f0106da8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106dab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106daf:	74 16                	je     f0106dc7 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db9:	83 ec 0c             	sub    $0xc,%esp
f0106dbc:	50                   	push   %eax
f0106dbd:	e8 65 f6 ff ff       	call   f0106427 <to_frame_info>
f0106dc2:	83 c4 10             	add    $0x10,%esp
f0106dc5:	eb 0c                	jmp    f0106dd3 <get_frame_info+0x6e>
		}
		return 0;
f0106dc7:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dcc:	eb 05                	jmp    f0106dd3 <get_frame_info+0x6e>
	}
	return 0;
f0106dce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106dd3:	c9                   	leave  
f0106dd4:	c3                   	ret    

f0106dd5 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106dd5:	55                   	push   %ebp
f0106dd6:	89 e5                	mov    %esp,%ebp
f0106dd8:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106ddb:	83 ec 04             	sub    $0x4,%esp
f0106dde:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106de1:	50                   	push   %eax
f0106de2:	ff 75 0c             	pushl  0xc(%ebp)
f0106de5:	ff 75 08             	pushl  0x8(%ebp)
f0106de8:	e8 78 ff ff ff       	call   f0106d65 <get_frame_info>
f0106ded:	83 c4 10             	add    $0x10,%esp
f0106df0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106df3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106df7:	74 60                	je     f0106e59 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dfc:	8a 40 14             	mov    0x14(%eax),%al
f0106dff:	84 c0                	test   %al,%al
f0106e01:	74 1c                	je     f0106e1f <unmap_frame+0x4a>
f0106e03:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106e0a:	77 13                	ja     f0106e1f <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106e0c:	83 ec 08             	sub    $0x8,%esp
f0106e0f:	ff 75 0c             	pushl  0xc(%ebp)
f0106e12:	68 08 64 13 f0       	push   $0xf0136408
f0106e17:	e8 f2 9e ff ff       	call   f0100d0e <cprintf>
f0106e1c:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106e1f:	83 ec 0c             	sub    $0xc,%esp
f0106e22:	ff 75 f4             	pushl  -0xc(%ebp)
f0106e25:	e8 b6 fb ff ff       	call   f01069e0 <decrement_references>
f0106e2a:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106e2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e30:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106e33:	c1 ea 0c             	shr    $0xc,%edx
f0106e36:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e3c:	c1 e2 02             	shl    $0x2,%edx
f0106e3f:	01 d0                	add    %edx,%eax
f0106e41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106e47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e4a:	83 ec 08             	sub    $0x8,%esp
f0106e4d:	50                   	push   %eax
f0106e4e:	ff 75 08             	pushl  0x8(%ebp)
f0106e51:	e8 17 f6 ff ff       	call   f010646d <tlb_invalidate>
f0106e56:	83 c4 10             	add    $0x10,%esp
	}
}
f0106e59:	90                   	nop
f0106e5a:	c9                   	leave  
f0106e5b:	c3                   	ret    

f0106e5c <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106e5c:	55                   	push   %ebp
f0106e5d:	89 e5                	mov    %esp,%ebp
f0106e5f:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106e62:	ff 75 0c             	pushl  0xc(%ebp)
f0106e65:	e8 aa f5 ff ff       	call   f0106414 <to_physical_address>
f0106e6a:	83 c4 04             	add    $0x4,%esp
f0106e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106e70:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e73:	c1 e8 16             	shr    $0x16,%eax
f0106e76:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e80:	01 d0                	add    %edx,%eax
f0106e82:	8b 00                	mov    (%eax),%eax
f0106e84:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106e87:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106e8e:	77 19                	ja     f0106ea9 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e93:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e98:	83 ec 0c             	sub    $0xc,%esp
f0106e9b:	50                   	push   %eax
f0106e9c:	e8 0a 0d 00 00       	call   f0107bab <kheap_virtual_address>
f0106ea1:	83 c4 10             	add    $0x10,%esp
f0106ea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106ea7:	eb 40                	jmp    f0106ee9 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106eac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106eb1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106eb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106eb7:	c1 e8 0c             	shr    $0xc,%eax
f0106eba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ebd:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0106ec2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106ec5:	72 17                	jb     f0106ede <loadtime_map_frame+0x82>
f0106ec7:	ff 75 e8             	pushl  -0x18(%ebp)
f0106eca:	68 bc 63 13 f0       	push   $0xf01363bc
f0106ecf:	68 e6 01 00 00       	push   $0x1e6
f0106ed4:	68 ff 62 13 f0       	push   $0xf01362ff
f0106ed9:	e8 27 93 ff ff       	call   f0100205 <_panic>
f0106ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ee1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106ee9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106eed:	75 14                	jne    f0106f03 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106eef:	83 ec 08             	sub    $0x8,%esp
f0106ef2:	ff 75 10             	pushl  0x10(%ebp)
f0106ef5:	ff 75 08             	pushl  0x8(%ebp)
f0106ef8:	e8 69 fc ff ff       	call   f0106b66 <create_page_table>
f0106efd:	83 c4 10             	add    $0x10,%esp
f0106f00:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106f03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f06:	8b 40 08             	mov    0x8(%eax),%eax
f0106f09:	40                   	inc    %eax
f0106f0a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f0d:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 0c             	shr    $0xc,%eax
f0106f17:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106f1c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f26:	01 c2                	add    %eax,%edx
f0106f28:	8b 45 14             	mov    0x14(%ebp),%eax
f0106f2b:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106f2e:	83 c8 01             	or     $0x1,%eax
f0106f31:	89 02                	mov    %eax,(%edx)

	return 0;
f0106f33:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106f38:	c9                   	leave  
f0106f39:	c3                   	ret    

f0106f3a <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106f3a:	55                   	push   %ebp
f0106f3b:	89 e5                	mov    %esp,%ebp
f0106f3d:	57                   	push   %edi
f0106f3e:	56                   	push   %esi
f0106f3f:	53                   	push   %ebx
f0106f40:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106f43:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106f4a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106f51:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106f58:	a1 18 a1 86 f0       	mov    0xf086a118,%eax
f0106f5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f60:	eb 1a                	jmp    f0106f7c <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f65:	8a 40 14             	mov    0x14(%eax),%al
f0106f68:	84 c0                	test   %al,%al
f0106f6a:	74 05                	je     f0106f71 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106f6c:	ff 45 e8             	incl   -0x18(%ebp)
f0106f6f:	eb 03                	jmp    f0106f74 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106f71:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106f74:	a1 20 a1 86 f0       	mov    0xf086a120,%eax
f0106f79:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f7c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f80:	74 07                	je     f0106f89 <calculate_available_frames+0x4f>
f0106f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f85:	8b 00                	mov    (%eax),%eax
f0106f87:	eb 05                	jmp    f0106f8e <calculate_available_frames+0x54>
f0106f89:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f8e:	a3 20 a1 86 f0       	mov    %eax,0xf086a120
f0106f93:	a1 20 a1 86 f0       	mov    0xf086a120,%eax
f0106f98:	85 c0                	test   %eax,%eax
f0106f9a:	75 c6                	jne    f0106f62 <calculate_available_frames+0x28>
f0106f9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fa0:	75 c0                	jne    f0106f62 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106fa2:	a1 b8 a0 86 f0       	mov    0xf086a0b8,%eax
f0106fa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106faa:	eb 0b                	jmp    f0106fb7 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106fac:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106faf:	a1 c0 a0 86 f0       	mov    0xf086a0c0,%eax
f0106fb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106fb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fbb:	74 07                	je     f0106fc4 <calculate_available_frames+0x8a>
f0106fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fc0:	8b 00                	mov    (%eax),%eax
f0106fc2:	eb 05                	jmp    f0106fc9 <calculate_available_frames+0x8f>
f0106fc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0106fc9:	a3 c0 a0 86 f0       	mov    %eax,0xf086a0c0
f0106fce:	a1 c0 a0 86 f0       	mov    0xf086a0c0,%eax
f0106fd3:	85 c0                	test   %eax,%eax
f0106fd5:	75 d5                	jne    f0106fac <calculate_available_frames+0x72>
f0106fd7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fdb:	75 cf                	jne    f0106fac <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106fdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106fe0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fe6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106fe9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106fec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106fef:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ff2:	89 c3                	mov    %eax,%ebx
f0106ff4:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106ff7:	ba 03 00 00 00       	mov    $0x3,%edx
f0106ffc:	89 df                	mov    %ebx,%edi
f0106ffe:	89 c6                	mov    %eax,%esi
f0107000:	89 d1                	mov    %edx,%ecx
f0107002:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0107004:	8b 45 08             	mov    0x8(%ebp),%eax
f0107007:	83 c4 20             	add    $0x20,%esp
f010700a:	5b                   	pop    %ebx
f010700b:	5e                   	pop    %esi
f010700c:	5f                   	pop    %edi
f010700d:	5d                   	pop    %ebp
f010700e:	c2 04 00             	ret    $0x4

f0107011 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107011:	55                   	push   %ebp
f0107012:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107014:	8b 45 08             	mov    0x8(%ebp),%eax
f0107017:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f010701d:	29 d0                	sub    %edx,%eax
f010701f:	c1 f8 03             	sar    $0x3,%eax
f0107022:	89 c2                	mov    %eax,%edx
f0107024:	89 d0                	mov    %edx,%eax
f0107026:	c1 e0 02             	shl    $0x2,%eax
f0107029:	01 d0                	add    %edx,%eax
f010702b:	c1 e0 02             	shl    $0x2,%eax
f010702e:	01 d0                	add    %edx,%eax
f0107030:	c1 e0 02             	shl    $0x2,%eax
f0107033:	01 d0                	add    %edx,%eax
f0107035:	89 c1                	mov    %eax,%ecx
f0107037:	c1 e1 08             	shl    $0x8,%ecx
f010703a:	01 c8                	add    %ecx,%eax
f010703c:	89 c1                	mov    %eax,%ecx
f010703e:	c1 e1 10             	shl    $0x10,%ecx
f0107041:	01 c8                	add    %ecx,%eax
f0107043:	01 c0                	add    %eax,%eax
f0107045:	01 d0                	add    %edx,%eax
}
f0107047:	5d                   	pop    %ebp
f0107048:	c3                   	ret    

f0107049 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107049:	55                   	push   %ebp
f010704a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010704c:	ff 75 08             	pushl  0x8(%ebp)
f010704f:	e8 bd ff ff ff       	call   f0107011 <to_frame_number>
f0107054:	83 c4 04             	add    $0x4,%esp
f0107057:	c1 e0 0c             	shl    $0xc,%eax
}
f010705a:	c9                   	leave  
f010705b:	c3                   	ret    

f010705c <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f010705c:	55                   	push   %ebp
f010705d:	89 e5                	mov    %esp,%ebp
f010705f:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107062:	8b 45 08             	mov    0x8(%ebp),%eax
f0107065:	a3 28 a1 86 f0       	mov    %eax,0xf086a128
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010706a:	8b 55 08             	mov    0x8(%ebp),%edx
f010706d:	89 d0                	mov    %edx,%eax
f010706f:	c1 e0 02             	shl    $0x2,%eax
f0107072:	01 d0                	add    %edx,%eax
f0107074:	c1 e0 02             	shl    $0x2,%eax
f0107077:	01 d0                	add    %edx,%eax
f0107079:	c1 e0 02             	shl    $0x2,%eax
f010707c:	83 ec 0c             	sub    $0xc,%esp
f010707f:	50                   	push   %eax
f0107080:	e8 e5 08 00 00       	call   f010796a <kmalloc>
f0107085:	83 c4 10             	add    $0x10,%esp
f0107088:	a3 ec a0 86 f0       	mov    %eax,0xf086a0ec
	if (shares == NULL)
f010708d:	a1 ec a0 86 f0       	mov    0xf086a0ec,%eax
f0107092:	85 c0                	test   %eax,%eax
f0107094:	75 14                	jne    f01070aa <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107096:	83 ec 04             	sub    $0x4,%esp
f0107099:	68 2c 64 13 f0       	push   $0xf013642c
f010709e:	6a 21                	push   $0x21
f01070a0:	68 70 64 13 f0       	push   $0xf0136470
f01070a5:	e8 5b 91 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01070b1:	eb 4b                	jmp    f01070fe <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f01070b3:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01070b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070bc:	89 d0                	mov    %edx,%eax
f01070be:	c1 e0 02             	shl    $0x2,%eax
f01070c1:	01 d0                	add    %edx,%eax
f01070c3:	c1 e0 02             	shl    $0x2,%eax
f01070c6:	01 d0                	add    %edx,%eax
f01070c8:	c1 e0 02             	shl    $0x2,%eax
f01070cb:	01 c8                	add    %ecx,%eax
f01070cd:	83 ec 04             	sub    $0x4,%esp
f01070d0:	6a 54                	push   $0x54
f01070d2:	6a 00                	push   $0x0
f01070d4:	50                   	push   %eax
f01070d5:	e8 e9 aa 02 00       	call   f0131bc3 <memset>
f01070da:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01070dd:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01070e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070e6:	89 d0                	mov    %edx,%eax
f01070e8:	c1 e0 02             	shl    $0x2,%eax
f01070eb:	01 d0                	add    %edx,%eax
f01070ed:	c1 e0 02             	shl    $0x2,%eax
f01070f0:	01 d0                	add    %edx,%eax
f01070f2:	c1 e0 02             	shl    $0x2,%eax
f01070f5:	01 c8                	add    %ecx,%eax
f01070f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070fb:	ff 45 f4             	incl   -0xc(%ebp)
f01070fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107101:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
f0107106:	39 c2                	cmp    %eax,%edx
f0107108:	72 a9                	jb     f01070b3 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010710a:	90                   	nop
f010710b:	c9                   	leave  
f010710c:	c3                   	ret    

f010710d <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f010710d:	55                   	push   %ebp
f010710e:	89 e5                	mov    %esp,%ebp
f0107110:	53                   	push   %ebx
f0107111:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f0107114:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010711b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107122:	eb 2c                	jmp    f0107150 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f0107124:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f010712a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010712d:	89 d0                	mov    %edx,%eax
f010712f:	c1 e0 02             	shl    $0x2,%eax
f0107132:	01 d0                	add    %edx,%eax
f0107134:	c1 e0 02             	shl    $0x2,%eax
f0107137:	01 d0                	add    %edx,%eax
f0107139:	c1 e0 02             	shl    $0x2,%eax
f010713c:	01 c8                	add    %ecx,%eax
f010713e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107141:	84 c0                	test   %al,%al
f0107143:	74 08                	je     f010714d <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f0107145:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107148:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010714b:	eb 0f                	jmp    f010715c <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f010714d:	ff 45 f0             	incl   -0x10(%ebp)
f0107150:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107153:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
f0107158:	39 c2                	cmp    %eax,%edx
f010715a:	72 c8                	jb     f0107124 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f010715c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107160:	75 0a                	jne    f010716c <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107162:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107167:	e9 94 00 00 00       	jmp    f0107200 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010716c:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107172:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107175:	89 d0                	mov    %edx,%eax
f0107177:	c1 e0 02             	shl    $0x2,%eax
f010717a:	01 d0                	add    %edx,%eax
f010717c:	c1 e0 02             	shl    $0x2,%eax
f010717f:	01 d0                	add    %edx,%eax
f0107181:	c1 e0 02             	shl    $0x2,%eax
f0107184:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107187:	8b 45 08             	mov    0x8(%ebp),%eax
f010718a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010718c:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107192:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107195:	89 d0                	mov    %edx,%eax
f0107197:	c1 e0 02             	shl    $0x2,%eax
f010719a:	01 d0                	add    %edx,%eax
f010719c:	c1 e0 02             	shl    $0x2,%eax
f010719f:	01 d0                	add    %edx,%eax
f01071a1:	c1 e0 02             	shl    $0x2,%eax
f01071a4:	01 c8                	add    %ecx,%eax
f01071a6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f01071aa:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01071b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071b3:	89 d0                	mov    %edx,%eax
f01071b5:	c1 e0 02             	shl    $0x2,%eax
f01071b8:	01 d0                	add    %edx,%eax
f01071ba:	c1 e0 02             	shl    $0x2,%eax
f01071bd:	01 d0                	add    %edx,%eax
f01071bf:	c1 e0 02             	shl    $0x2,%eax
f01071c2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f01071c5:	e8 97 01 00 00       	call   f0107361 <create_frames_storage>
f01071ca:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f01071cd:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	c1 e0 02             	shl    $0x2,%eax
f01071db:	01 d0                	add    %edx,%eax
f01071dd:	c1 e0 02             	shl    $0x2,%eax
f01071e0:	01 d0                	add    %edx,%eax
f01071e2:	c1 e0 02             	shl    $0x2,%eax
f01071e5:	01 c8                	add    %ecx,%eax
f01071e7:	8b 40 50             	mov    0x50(%eax),%eax
f01071ea:	83 ec 04             	sub    $0x4,%esp
f01071ed:	68 00 10 00 00       	push   $0x1000
f01071f2:	6a 00                	push   $0x0
f01071f4:	50                   	push   %eax
f01071f5:	e8 c9 a9 02 00       	call   f0131bc3 <memset>
f01071fa:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f01071fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107200:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107203:	c9                   	leave  
f0107204:	c3                   	ret    

f0107205 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107205:	55                   	push   %ebp
f0107206:	89 e5                	mov    %esp,%ebp
f0107208:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010720b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107212:	eb 7b                	jmp    f010728f <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107214:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f010721a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010721d:	89 d0                	mov    %edx,%eax
f010721f:	c1 e0 02             	shl    $0x2,%eax
f0107222:	01 d0                	add    %edx,%eax
f0107224:	c1 e0 02             	shl    $0x2,%eax
f0107227:	01 d0                	add    %edx,%eax
f0107229:	c1 e0 02             	shl    $0x2,%eax
f010722c:	01 c8                	add    %ecx,%eax
f010722e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107231:	84 c0                	test   %al,%al
f0107233:	75 56                	jne    f010728b <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107235:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f010723b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010723e:	89 d0                	mov    %edx,%eax
f0107240:	c1 e0 02             	shl    $0x2,%eax
f0107243:	01 d0                	add    %edx,%eax
f0107245:	c1 e0 02             	shl    $0x2,%eax
f0107248:	01 d0                	add    %edx,%eax
f010724a:	c1 e0 02             	shl    $0x2,%eax
f010724d:	01 c8                	add    %ecx,%eax
f010724f:	8b 00                	mov    (%eax),%eax
f0107251:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107254:	75 36                	jne    f010728c <get_share_object_ID+0x87>
f0107256:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f010725c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010725f:	89 d0                	mov    %edx,%eax
f0107261:	c1 e0 02             	shl    $0x2,%eax
f0107264:	01 d0                	add    %edx,%eax
f0107266:	c1 e0 02             	shl    $0x2,%eax
f0107269:	01 d0                	add    %edx,%eax
f010726b:	c1 e0 02             	shl    $0x2,%eax
f010726e:	01 c8                	add    %ecx,%eax
f0107270:	83 c0 04             	add    $0x4,%eax
f0107273:	83 ec 08             	sub    $0x8,%esp
f0107276:	50                   	push   %eax
f0107277:	ff 75 0c             	pushl  0xc(%ebp)
f010727a:	e8 62 a8 02 00       	call   f0131ae1 <strcmp>
f010727f:	83 c4 10             	add    $0x10,%esp
f0107282:	85 c0                	test   %eax,%eax
f0107284:	75 06                	jne    f010728c <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107286:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107289:	eb 19                	jmp    f01072a4 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010728b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010728c:	ff 45 f4             	incl   -0xc(%ebp)
f010728f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107292:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
f0107297:	39 c2                	cmp    %eax,%edx
f0107299:	0f 82 75 ff ff ff    	jb     f0107214 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010729f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01072ac:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
f01072b1:	39 45 08             	cmp    %eax,0x8(%ebp)
f01072b4:	72 0a                	jb     f01072c0 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f01072b6:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01072bb:	e9 9f 00 00 00       	jmp    f010735f <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f01072c0:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01072c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01072c9:	89 d0                	mov    %edx,%eax
f01072cb:	c1 e0 02             	shl    $0x2,%eax
f01072ce:	01 d0                	add    %edx,%eax
f01072d0:	c1 e0 02             	shl    $0x2,%eax
f01072d3:	01 d0                	add    %edx,%eax
f01072d5:	c1 e0 02             	shl    $0x2,%eax
f01072d8:	01 c8                	add    %ecx,%eax
f01072da:	8b 40 50             	mov    0x50(%eax),%eax
f01072dd:	83 ec 0c             	sub    $0xc,%esp
f01072e0:	50                   	push   %eax
f01072e1:	e8 52 01 00 00       	call   f0107438 <clear_frames_storage>
f01072e6:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f01072e9:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01072ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01072f2:	89 d0                	mov    %edx,%eax
f01072f4:	c1 e0 02             	shl    $0x2,%eax
f01072f7:	01 d0                	add    %edx,%eax
f01072f9:	c1 e0 02             	shl    $0x2,%eax
f01072fc:	01 d0                	add    %edx,%eax
f01072fe:	c1 e0 02             	shl    $0x2,%eax
f0107301:	01 c8                	add    %ecx,%eax
f0107303:	8b 40 50             	mov    0x50(%eax),%eax
f0107306:	83 ec 0c             	sub    $0xc,%esp
f0107309:	50                   	push   %eax
f010730a:	e8 a4 07 00 00       	call   f0107ab3 <kfree>
f010730f:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107312:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107318:	8b 55 08             	mov    0x8(%ebp),%edx
f010731b:	89 d0                	mov    %edx,%eax
f010731d:	c1 e0 02             	shl    $0x2,%eax
f0107320:	01 d0                	add    %edx,%eax
f0107322:	c1 e0 02             	shl    $0x2,%eax
f0107325:	01 d0                	add    %edx,%eax
f0107327:	c1 e0 02             	shl    $0x2,%eax
f010732a:	01 c8                	add    %ecx,%eax
f010732c:	83 ec 04             	sub    $0x4,%esp
f010732f:	6a 54                	push   $0x54
f0107331:	6a 00                	push   $0x0
f0107333:	50                   	push   %eax
f0107334:	e8 8a a8 02 00       	call   f0131bc3 <memset>
f0107339:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010733c:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107342:	8b 55 08             	mov    0x8(%ebp),%edx
f0107345:	89 d0                	mov    %edx,%eax
f0107347:	c1 e0 02             	shl    $0x2,%eax
f010734a:	01 d0                	add    %edx,%eax
f010734c:	c1 e0 02             	shl    $0x2,%eax
f010734f:	01 d0                	add    %edx,%eax
f0107351:	c1 e0 02             	shl    $0x2,%eax
f0107354:	01 c8                	add    %ecx,%eax
f0107356:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f010735a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010735f:	c9                   	leave  
f0107360:	c3                   	ret    

f0107361 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107361:	55                   	push   %ebp
f0107362:	89 e5                	mov    %esp,%ebp
f0107364:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107367:	83 ec 0c             	sub    $0xc,%esp
f010736a:	68 00 10 00 00       	push   $0x1000
f010736f:	e8 f6 05 00 00       	call   f010796a <kmalloc>
f0107374:	83 c4 10             	add    $0x10,%esp
f0107377:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010737a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010737e:	75 17                	jne    f0107397 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107380:	83 ec 04             	sub    $0x4,%esp
f0107383:	68 91 64 13 f0       	push   $0xf0136491
f0107388:	68 a5 00 00 00       	push   $0xa5
f010738d:	68 70 64 13 f0       	push   $0xf0136470
f0107392:	e8 6e 8e ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107397:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010739a:	c9                   	leave  
f010739b:	c3                   	ret    

f010739c <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010739c:	55                   	push   %ebp
f010739d:	89 e5                	mov    %esp,%ebp
f010739f:	53                   	push   %ebx
f01073a0:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01073a3:	8b 45 10             	mov    0x10(%ebp),%eax
f01073a6:	c1 e0 0c             	shl    $0xc,%eax
f01073a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01073ac:	83 ec 04             	sub    $0x4,%esp
f01073af:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01073b2:	50                   	push   %eax
f01073b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01073b6:	ff 75 08             	pushl  0x8(%ebp)
f01073b9:	e8 52 f6 ff ff       	call   f0106a10 <get_page_table>
f01073be:	83 c4 10             	add    $0x10,%esp
f01073c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f01073c4:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01073c8:	75 14                	jne    f01073de <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f01073ca:	83 ec 08             	sub    $0x8,%esp
f01073cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01073d0:	ff 75 08             	pushl  0x8(%ebp)
f01073d3:	e8 8e f7 ff ff       	call   f0106b66 <create_page_table>
f01073d8:	83 c4 10             	add    $0x10,%esp
f01073db:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f01073de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01073e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01073e4:	c1 ea 0c             	shr    $0xc,%edx
f01073e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01073ed:	c1 e2 02             	shl    $0x2,%edx
f01073f0:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01073f3:	83 ec 0c             	sub    $0xc,%esp
f01073f6:	ff 75 0c             	pushl  0xc(%ebp)
f01073f9:	e8 4b fc ff ff       	call   f0107049 <to_physical_address>
f01073fe:	83 c4 10             	add    $0x10,%esp
f0107401:	83 c8 01             	or     $0x1,%eax
f0107404:	89 03                	mov    %eax,(%ebx)
}
f0107406:	90                   	nop
f0107407:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010740a:	c9                   	leave  
f010740b:	c3                   	ret    

f010740c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010740c:	55                   	push   %ebp
f010740d:	89 e5                	mov    %esp,%ebp
f010740f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107412:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107415:	c1 e0 0c             	shl    $0xc,%eax
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010741b:	83 ec 04             	sub    $0x4,%esp
f010741e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107421:	50                   	push   %eax
f0107422:	ff 75 f4             	pushl  -0xc(%ebp)
f0107425:	ff 75 08             	pushl  0x8(%ebp)
f0107428:	e8 38 f9 ff ff       	call   f0106d65 <get_frame_info>
f010742d:	83 c4 10             	add    $0x10,%esp
f0107430:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107433:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107436:	c9                   	leave  
f0107437:	c3                   	ret    

f0107438 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107438:	55                   	push   %ebp
f0107439:	89 e5                	mov    %esp,%ebp
f010743b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010743e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107445:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010744c:	eb 5b                	jmp    f01074a9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010744e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107451:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107458:	8b 45 08             	mov    0x8(%ebp),%eax
f010745b:	01 d0                	add    %edx,%eax
f010745d:	8b 00                	mov    (%eax),%eax
f010745f:	85 c0                	test   %eax,%eax
f0107461:	74 43                	je     f01074a6 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107466:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010746d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107470:	01 d0                	add    %edx,%eax
f0107472:	8b 00                	mov    (%eax),%eax
f0107474:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107479:	83 ec 0c             	sub    $0xc,%esp
f010747c:	50                   	push   %eax
f010747d:	e8 29 07 00 00       	call   f0107bab <kheap_virtual_address>
f0107482:	83 c4 10             	add    $0x10,%esp
f0107485:	83 ec 0c             	sub    $0xc,%esp
f0107488:	50                   	push   %eax
f0107489:	e8 25 06 00 00       	call   f0107ab3 <kfree>
f010748e:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107491:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107494:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010749b:	8b 45 08             	mov    0x8(%ebp),%eax
f010749e:	01 d0                	add    %edx,%eax
f01074a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074a6:	ff 45 f4             	incl   -0xc(%ebp)
f01074a9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01074b0:	7e 9c                	jle    f010744e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f01074b2:	90                   	nop
f01074b3:	c9                   	leave  
f01074b4:	c3                   	ret    

f01074b5 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f01074b5:	55                   	push   %ebp
f01074b6:	89 e5                	mov    %esp,%ebp
f01074b8:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f01074bb:	83 ec 08             	sub    $0x8,%esp
f01074be:	ff 75 0c             	pushl  0xc(%ebp)
f01074c1:	ff 75 08             	pushl  0x8(%ebp)
f01074c4:	e8 3c fd ff ff       	call   f0107205 <get_share_object_ID>
f01074c9:	83 c4 10             	add    $0x10,%esp
f01074cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f01074cf:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f01074d3:	75 07                	jne    f01074dc <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f01074d5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01074da:	eb 1d                	jmp    f01074f9 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f01074dc:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01074e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01074e5:	89 d0                	mov    %edx,%eax
f01074e7:	c1 e0 02             	shl    $0x2,%eax
f01074ea:	01 d0                	add    %edx,%eax
f01074ec:	c1 e0 02             	shl    $0x2,%eax
f01074ef:	01 d0                	add    %edx,%eax
f01074f1:	c1 e0 02             	shl    $0x2,%eax
f01074f4:	01 c8                	add    %ecx,%eax
f01074f6:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f01074f9:	c9                   	leave  
f01074fa:	c3                   	ret    

f01074fb <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f01074fb:	55                   	push   %ebp
f01074fc:	89 e5                	mov    %esp,%ebp
f01074fe:	83 ec 48             	sub    $0x48,%esp
f0107501:	8b 45 14             	mov    0x14(%ebp),%eax
f0107504:	88 45 c4             	mov    %al,-0x3c(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	struct Env* myenv = curenv;//The calling environment
f0107507:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010750c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int index = 0;
f010750f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	size = ROUNDUP(size,PAGE_SIZE);
f0107516:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010751d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107523:	01 d0                	add    %edx,%eax
f0107525:	48                   	dec    %eax
f0107526:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107529:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010752c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107531:	f7 75 e8             	divl   -0x18(%ebp)
f0107534:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107537:	29 d0                	sub    %edx,%eax
f0107539:	89 45 10             	mov    %eax,0x10(%ebp)
	struct FrameInfo* ptr_frame_info = NULL;
f010753c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32* ptr_page_table = NULL;
f0107543:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	struct Share* shared_obj = NULL;
f010754a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int check = get_share_object_ID(ownerID,shareName);
f0107551:	83 ec 08             	sub    $0x8,%esp
f0107554:	ff 75 0c             	pushl  0xc(%ebp)
f0107557:	ff 75 08             	pushl  0x8(%ebp)
f010755a:	e8 a6 fc ff ff       	call   f0107205 <get_share_object_ID>
f010755f:	83 c4 10             	add    $0x10,%esp
f0107562:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(check == E_SHARED_MEM_NOT_EXISTS)
f0107565:	83 7d dc f0          	cmpl   $0xfffffff0,-0x24(%ebp)
f0107569:	0f 85 d0 00 00 00    	jne    f010763f <createSharedObject+0x144>
	{
		int ret = allocate_share_object(&shared_obj);
f010756f:	83 ec 0c             	sub    $0xc,%esp
f0107572:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0107575:	50                   	push   %eax
f0107576:	e8 92 fb ff ff       	call   f010710d <allocate_share_object>
f010757b:	83 c4 10             	add    $0x10,%esp
f010757e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(ret == E_NO_SHARE)
f0107581:	83 7d d8 f2          	cmpl   $0xfffffff2,-0x28(%ebp)
f0107585:	75 0a                	jne    f0107591 <createSharedObject+0x96>
		{
			return E_NO_SHARE;
f0107587:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f010758c:	e9 b3 00 00 00       	jmp    f0107644 <createSharedObject+0x149>
		}
		else
		{
			int ret2 = allocate_chunk((myenv->env_page_directory),(uint32)virtual_address,size,PERM_WRITEABLE|PERM_USER);
f0107591:	8b 55 18             	mov    0x18(%ebp),%edx
f0107594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107597:	8b 40 5c             	mov    0x5c(%eax),%eax
f010759a:	6a 06                	push   $0x6
f010759c:	ff 75 10             	pushl  0x10(%ebp)
f010759f:	52                   	push   %edx
f01075a0:	50                   	push   %eax
f01075a1:	e8 f2 17 00 00       	call   f0108d98 <allocate_chunk>
f01075a6:	83 c4 10             	add    $0x10,%esp
f01075a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			for(uint32 i=(uint32)virtual_address; i<(uint32)virtual_address+size; i+=PAGE_SIZE)
f01075ac:	8b 45 18             	mov    0x18(%ebp),%eax
f01075af:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01075b2:	eb 40                	jmp    f01075f4 <createSharedObject+0xf9>
			{
				ptr_frame_info= get_frame_info(myenv->env_page_directory,(uint32)virtual_address,&ptr_page_table);
f01075b4:	8b 55 18             	mov    0x18(%ebp),%edx
f01075b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01075ba:	8b 40 5c             	mov    0x5c(%eax),%eax
f01075bd:	83 ec 04             	sub    $0x4,%esp
f01075c0:	8d 4d d0             	lea    -0x30(%ebp),%ecx
f01075c3:	51                   	push   %ecx
f01075c4:	52                   	push   %edx
f01075c5:	50                   	push   %eax
f01075c6:	e8 9a f7 ff ff       	call   f0106d65 <get_frame_info>
f01075cb:	83 c4 10             	add    $0x10,%esp
f01075ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
				add_frame_to_storage(shared_obj->framesStorage,ptr_frame_info,index);
f01075d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01075d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01075d7:	8b 40 50             	mov    0x50(%eax),%eax
f01075da:	83 ec 04             	sub    $0x4,%esp
f01075dd:	52                   	push   %edx
f01075de:	ff 75 e0             	pushl  -0x20(%ebp)
f01075e1:	50                   	push   %eax
f01075e2:	e8 b5 fd ff ff       	call   f010739c <add_frame_to_storage>
f01075e7:	83 c4 10             	add    $0x10,%esp
				index++;
f01075ea:	ff 45 f4             	incl   -0xc(%ebp)
			return E_NO_SHARE;
		}
		else
		{
			int ret2 = allocate_chunk((myenv->env_page_directory),(uint32)virtual_address,size,PERM_WRITEABLE|PERM_USER);
			for(uint32 i=(uint32)virtual_address; i<(uint32)virtual_address+size; i+=PAGE_SIZE)
f01075ed:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01075f4:	8b 55 18             	mov    0x18(%ebp),%edx
f01075f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01075fa:	01 d0                	add    %edx,%eax
f01075fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01075ff:	77 b3                	ja     f01075b4 <createSharedObject+0xb9>
			{
				ptr_frame_info= get_frame_info(myenv->env_page_directory,(uint32)virtual_address,&ptr_page_table);
				add_frame_to_storage(shared_obj->framesStorage,ptr_frame_info,index);
				index++;
			}
			strcpy(shared_obj->name,shareName);
f0107601:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107604:	83 c0 04             	add    $0x4,%eax
f0107607:	83 ec 08             	sub    $0x8,%esp
f010760a:	ff 75 0c             	pushl  0xc(%ebp)
f010760d:	50                   	push   %eax
f010760e:	e8 11 a4 02 00       	call   f0131a24 <strcpy>
f0107613:	83 c4 10             	add    $0x10,%esp
			shared_obj->ownerID = ownerID;
f0107616:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107619:	8b 55 08             	mov    0x8(%ebp),%edx
f010761c:	89 10                	mov    %edx,(%eax)
			shared_obj->size = size;
f010761e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107621:	8b 55 10             	mov    0x10(%ebp),%edx
f0107624:	89 50 44             	mov    %edx,0x44(%eax)
			shared_obj->isWritable = isWritable;
f0107627:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010762a:	8a 55 c4             	mov    -0x3c(%ebp),%dl
f010762d:	88 50 4c             	mov    %dl,0x4c(%eax)
			shared_obj->references = 1;
f0107630:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107633:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
			return ret;//sharedObjId =>index in the "shares" array
f010763a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010763d:	eb 05                	jmp    f0107644 <createSharedObject+0x149>
		}

	}
	else
		return E_SHARED_MEM_EXISTS;
f010763f:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax

}
f0107644:	c9                   	leave  
f0107645:	c3                   	ret    

f0107646 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107646:	55                   	push   %ebp
f0107647:	89 e5                	mov    %esp,%ebp
f0107649:	53                   	push   %ebx
f010764a:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	struct Env* myenv = curenv; //The calling environment
f010764d:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0107652:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct FrameInfo* frame = NULL;
f0107655:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int index = get_share_object_ID(ownerID,shareName);
f010765c:	83 ec 08             	sub    $0x8,%esp
f010765f:	ff 75 0c             	pushl  0xc(%ebp)
f0107662:	ff 75 08             	pushl  0x8(%ebp)
f0107665:	e8 9b fb ff ff       	call   f0107205 <get_share_object_ID>
f010766a:	83 c4 10             	add    $0x10,%esp
f010766d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if(index == E_SHARED_MEM_NOT_EXISTS)
f0107670:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f0107674:	75 0a                	jne    f0107680 <getSharedObject+0x3a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107676:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010767b:	e9 f2 00 00 00       	jmp    f0107772 <getSharedObject+0x12c>
	int c = 0;
f0107680:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(int i=(uint32)virtual_address; i<(uint32)virtual_address+shares[index].size; i+=PAGE_SIZE)
f0107687:	8b 45 10             	mov    0x10(%ebp),%eax
f010768a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010768d:	e9 8d 00 00 00       	jmp    f010771f <getSharedObject+0xd9>
	{
		frame = get_frame_from_storage(shares[index].framesStorage,c);
f0107692:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107695:	8b 1d ec a0 86 f0    	mov    0xf086a0ec,%ebx
f010769b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010769e:	89 d0                	mov    %edx,%eax
f01076a0:	c1 e0 02             	shl    $0x2,%eax
f01076a3:	01 d0                	add    %edx,%eax
f01076a5:	c1 e0 02             	shl    $0x2,%eax
f01076a8:	01 d0                	add    %edx,%eax
f01076aa:	c1 e0 02             	shl    $0x2,%eax
f01076ad:	01 d8                	add    %ebx,%eax
f01076af:	8b 40 50             	mov    0x50(%eax),%eax
f01076b2:	83 ec 08             	sub    $0x8,%esp
f01076b5:	51                   	push   %ecx
f01076b6:	50                   	push   %eax
f01076b7:	e8 50 fd ff ff       	call   f010740c <get_frame_from_storage>
f01076bc:	83 c4 10             	add    $0x10,%esp
f01076bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
		c++;
f01076c2:	ff 45 f4             	incl   -0xc(%ebp)
		if(shares[index].isWritable == 1)
f01076c5:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f01076cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01076ce:	89 d0                	mov    %edx,%eax
f01076d0:	c1 e0 02             	shl    $0x2,%eax
f01076d3:	01 d0                	add    %edx,%eax
f01076d5:	c1 e0 02             	shl    $0x2,%eax
f01076d8:	01 d0                	add    %edx,%eax
f01076da:	c1 e0 02             	shl    $0x2,%eax
f01076dd:	01 c8                	add    %ecx,%eax
f01076df:	8a 40 4c             	mov    0x4c(%eax),%al
f01076e2:	3c 01                	cmp    $0x1,%al
f01076e4:	75 1a                	jne    f0107700 <getSharedObject+0xba>
		{
			map_frame((myenv->env_page_directory),frame,(uint32)virtual_address,PERM_WRITEABLE|PERM_USER);
f01076e6:	8b 55 10             	mov    0x10(%ebp),%edx
f01076e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076ec:	8b 40 5c             	mov    0x5c(%eax),%eax
f01076ef:	6a 06                	push   $0x6
f01076f1:	52                   	push   %edx
f01076f2:	ff 75 e8             	pushl  -0x18(%ebp)
f01076f5:	50                   	push   %eax
f01076f6:	e8 a5 f5 ff ff       	call   f0106ca0 <map_frame>
f01076fb:	83 c4 10             	add    $0x10,%esp
f01076fe:	eb 18                	jmp    f0107718 <getSharedObject+0xd2>
		}
		else
			map_frame((myenv->env_page_directory),frame,(uint32)virtual_address,PERM_USER);
f0107700:	8b 55 10             	mov    0x10(%ebp),%edx
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107709:	6a 04                	push   $0x4
f010770b:	52                   	push   %edx
f010770c:	ff 75 e8             	pushl  -0x18(%ebp)
f010770f:	50                   	push   %eax
f0107710:	e8 8b f5 ff ff       	call   f0106ca0 <map_frame>
f0107715:	83 c4 10             	add    $0x10,%esp
	struct FrameInfo* frame = NULL;
	int index = get_share_object_ID(ownerID,shareName);
	if(index == E_SHARED_MEM_NOT_EXISTS)
		return E_SHARED_MEM_NOT_EXISTS;
	int c = 0;
	for(int i=(uint32)virtual_address; i<(uint32)virtual_address+shares[index].size; i+=PAGE_SIZE)
f0107718:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010771f:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107725:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107728:	89 d0                	mov    %edx,%eax
f010772a:	c1 e0 02             	shl    $0x2,%eax
f010772d:	01 d0                	add    %edx,%eax
f010772f:	c1 e0 02             	shl    $0x2,%eax
f0107732:	01 d0                	add    %edx,%eax
f0107734:	c1 e0 02             	shl    $0x2,%eax
f0107737:	01 c8                	add    %ecx,%eax
f0107739:	8b 40 44             	mov    0x44(%eax),%eax
f010773c:	89 c2                	mov    %eax,%edx
f010773e:	8b 45 10             	mov    0x10(%ebp),%eax
f0107741:	01 c2                	add    %eax,%edx
f0107743:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107746:	39 c2                	cmp    %eax,%edx
f0107748:	0f 87 44 ff ff ff    	ja     f0107692 <getSharedObject+0x4c>
		}
		else
			map_frame((myenv->env_page_directory),frame,(uint32)virtual_address,PERM_USER);

	}
	shares[index].references++;
f010774e:	8b 0d ec a0 86 f0    	mov    0xf086a0ec,%ecx
f0107754:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107757:	89 d0                	mov    %edx,%eax
f0107759:	c1 e0 02             	shl    $0x2,%eax
f010775c:	01 d0                	add    %edx,%eax
f010775e:	c1 e0 02             	shl    $0x2,%eax
f0107761:	01 d0                	add    %edx,%eax
f0107763:	c1 e0 02             	shl    $0x2,%eax
f0107766:	01 c8                	add    %ecx,%eax
f0107768:	8b 50 48             	mov    0x48(%eax),%edx
f010776b:	42                   	inc    %edx
f010776c:	89 50 48             	mov    %edx,0x48(%eax)
	return index; //sharedObjId =>index in the "shares" array
f010776f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0107772:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107775:	c9                   	leave  
f0107776:	c3                   	ret    

f0107777 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107777:	55                   	push   %ebp
f0107778:	89 e5                	mov    %esp,%ebp
f010777a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f010777d:	83 ec 04             	sub    $0x4,%esp
f0107780:	68 b0 64 13 f0       	push   $0xf01364b0
f0107785:	68 5d 01 00 00       	push   $0x15d
f010778a:	68 70 64 13 f0       	push   $0xf0136470
f010778f:	e8 71 8a ff ff       	call   f0100205 <_panic>

f0107794 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107794:	55                   	push   %ebp
f0107795:	89 e5                	mov    %esp,%ebp
f0107797:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f010779c:	83 f8 01             	cmp    $0x1,%eax
f010779f:	75 04                	jne    f01077a5 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01077a1:	b0 01                	mov    $0x1,%al
f01077a3:	eb 02                	jmp    f01077a7 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01077a5:	b0 00                	mov    $0x0,%al
f01077a7:	5d                   	pop    %ebp
f01077a8:	c3                   	ret    

f01077a9 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01077a9:	55                   	push   %ebp
f01077aa:	89 e5                	mov    %esp,%ebp
f01077ac:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f01077b1:	83 f8 02             	cmp    $0x2,%eax
f01077b4:	75 04                	jne    f01077ba <isKHeapPlacementStrategyBESTFIT+0x11>
f01077b6:	b0 01                	mov    $0x1,%al
f01077b8:	eb 02                	jmp    f01077bc <isKHeapPlacementStrategyBESTFIT+0x13>
f01077ba:	b0 00                	mov    $0x0,%al
f01077bc:	5d                   	pop    %ebp
f01077bd:	c3                   	ret    

f01077be <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01077be:	55                   	push   %ebp
f01077bf:	89 e5                	mov    %esp,%ebp
f01077c1:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01077c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01077c7:	c1 e8 0c             	shr    $0xc,%eax
f01077ca:	89 c2                	mov    %eax,%edx
f01077cc:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f01077d1:	39 c2                	cmp    %eax,%edx
f01077d3:	72 14                	jb     f01077e9 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01077d5:	83 ec 04             	sub    $0x4,%esp
f01077d8:	68 e0 64 13 f0       	push   $0xf01364e0
f01077dd:	6a 55                	push   $0x55
f01077df:	68 05 65 13 f0       	push   $0xf0136505
f01077e4:	e8 1c 8a ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01077e9:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f01077ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01077f2:	c1 e8 0c             	shr    $0xc,%eax
f01077f5:	89 c1                	mov    %eax,%ecx
f01077f7:	89 c8                	mov    %ecx,%eax
f01077f9:	01 c0                	add    %eax,%eax
f01077fb:	01 c8                	add    %ecx,%eax
f01077fd:	c1 e0 03             	shl    $0x3,%eax
f0107800:	01 d0                	add    %edx,%eax
}
f0107802:	c9                   	leave  
f0107803:	c3                   	ret    

f0107804 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107804:	55                   	push   %ebp
f0107805:	89 e5                	mov    %esp,%ebp
f0107807:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	    LIST_INIT(&FreeMemBlocksList);
f010780a:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f0107811:	00 00 00 
f0107814:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f010781b:	00 00 00 
f010781e:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f0107825:	00 00 00 
	    LIST_INIT(&AllocMemBlocksList);
f0107828:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f010782f:	00 00 00 
f0107832:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f0107839:	00 00 00 
f010783c:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f0107843:	00 00 00 
	     MAX_MEM_BLOCK_CNT=NUM_OF_KHEAP_PAGES;
f0107846:	c7 05 04 a1 86 f0 ff 	movl   $0x9fff,0xf086a104
f010784d:	9f 00 00 
	     MemBlockNodes= (struct MemBlock*)KERNEL_HEAP_START;
f0107850:	c7 05 d8 a0 86 f0 00 	movl   $0xf6000000,0xf086a0d8
f0107857:	00 00 f6 
		 uint32 NodeSize= ROUNDUP(sizeof(*MemBlockNodes)*MAX_MEM_BLOCK_CNT,PAGE_SIZE);
f010785a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0107861:	a1 04 a1 86 f0       	mov    0xf086a104,%eax
f0107866:	c1 e0 04             	shl    $0x4,%eax
f0107869:	89 c2                	mov    %eax,%edx
f010786b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010786e:	01 d0                	add    %edx,%eax
f0107870:	48                   	dec    %eax
f0107871:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107874:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107877:	ba 00 00 00 00       	mov    $0x0,%edx
f010787c:	f7 75 f4             	divl   -0xc(%ebp)
f010787f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107882:	29 d0                	sub    %edx,%eax
f0107884:	89 45 ec             	mov    %eax,-0x14(%ebp)
	     uint32 ret =allocate_chunk(ptr_page_directory,KERNEL_HEAP_START,NodeSize, PERM_WRITEABLE);
f0107887:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f010788c:	6a 02                	push   $0x2
f010788e:	ff 75 ec             	pushl  -0x14(%ebp)
f0107891:	68 00 00 00 f6       	push   $0xf6000000
f0107896:	50                   	push   %eax
f0107897:	e8 fc 14 00 00       	call   f0108d98 <allocate_chunk>
f010789c:	83 c4 10             	add    $0x10,%esp
f010789f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01078a2:	a1 04 a1 86 f0       	mov    0xf086a104,%eax
f01078a7:	83 ec 0c             	sub    $0xc,%esp
f01078aa:	50                   	push   %eax
f01078ab:	e8 8f ac 02 00       	call   f013253f <initialize_MemBlocksList>
f01078b0:	83 c4 10             	add    $0x10,%esp
		//	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");
		struct MemBlock*element=LIST_FIRST(&AvailableMemBlocksList);
f01078b3:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f01078b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		LIST_REMOVE(&AvailableMemBlocksList,element);
f01078bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01078bf:	75 14                	jne    f01078d5 <initialize_dyn_block_system+0xd1>
f01078c1:	83 ec 04             	sub    $0x4,%esp
f01078c4:	68 1f 65 13 f0       	push   $0xf013651f
f01078c9:	6a 1a                	push   $0x1a
f01078cb:	68 3d 65 13 f0       	push   $0xf013653d
f01078d0:	e8 30 89 ff ff       	call   f0100205 <_panic>
f01078d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078d8:	8b 00                	mov    (%eax),%eax
f01078da:	85 c0                	test   %eax,%eax
f01078dc:	74 10                	je     f01078ee <initialize_dyn_block_system+0xea>
f01078de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078e1:	8b 00                	mov    (%eax),%eax
f01078e3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01078e6:	8b 52 04             	mov    0x4(%edx),%edx
f01078e9:	89 50 04             	mov    %edx,0x4(%eax)
f01078ec:	eb 0b                	jmp    f01078f9 <initialize_dyn_block_system+0xf5>
f01078ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078f1:	8b 40 04             	mov    0x4(%eax),%eax
f01078f4:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f01078f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01078fc:	8b 40 04             	mov    0x4(%eax),%eax
f01078ff:	85 c0                	test   %eax,%eax
f0107901:	74 0f                	je     f0107912 <initialize_dyn_block_system+0x10e>
f0107903:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107906:	8b 40 04             	mov    0x4(%eax),%eax
f0107909:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010790c:	8b 12                	mov    (%edx),%edx
f010790e:	89 10                	mov    %edx,(%eax)
f0107910:	eb 0a                	jmp    f010791c <initialize_dyn_block_system+0x118>
f0107912:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107915:	8b 00                	mov    (%eax),%eax
f0107917:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f010791c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010791f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107925:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107928:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010792f:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0107934:	48                   	dec    %eax
f0107935:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4

	//	uint32 ptr_page_directory=PDX(KERNEL_HEAP_START);

		element->size=(KERNEL_HEAP_MAX-KERNEL_HEAP_START)-NodeSize;
f010793a:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f010793f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0107942:	89 c2                	mov    %eax,%edx
f0107944:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107947:	89 50 0c             	mov    %edx,0xc(%eax)
		element->sva=KERNEL_HEAP_START+NodeSize;
f010794a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010794d:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107956:	89 50 08             	mov    %edx,0x8(%eax)
	//	LIST_INSERT_HEAD(&FreeMemBlocksList,element);
		insert_sorted_with_merge_freeList(element);
f0107959:	83 ec 0c             	sub    $0xc,%esp
f010795c:	ff 75 e4             	pushl  -0x1c(%ebp)
f010795f:	e8 18 b5 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0107964:	83 c4 10             	add    $0x10,%esp
	 * 	HINT: can use alloc_chunk(...) function
	 */
#endif
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}
f0107967:	90                   	nop
f0107968:	c9                   	leave  
f0107969:	c3                   	ret    

f010796a <kmalloc>:

void* kmalloc(unsigned int size)
{
f010796a:	55                   	push   %ebp
f010796b:	89 e5                	mov    %esp,%ebp
f010796d:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	uint32 Target_size= ROUNDUP(size,PAGE_SIZE);
f0107970:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0107977:	8b 55 08             	mov    0x8(%ebp),%edx
f010797a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010797d:	01 d0                	add    %edx,%eax
f010797f:	48                   	dec    %eax
f0107980:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107983:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107986:	ba 00 00 00 00       	mov    $0x0,%edx
f010798b:	f7 75 f4             	divl   -0xc(%ebp)
f010798e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107991:	29 d0                	sub    %edx,%eax
f0107993:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(isKHeapPlacementStrategyFIRSTFIT())
f0107996:	e8 f9 fd ff ff       	call   f0107794 <isKHeapPlacementStrategyFIRSTFIT>
f010799b:	84 c0                	test   %al,%al
f010799d:	74 6e                	je     f0107a0d <kmalloc+0xa3>
	{
		struct MemBlock* blk=NULL ;
f010799f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		blk=alloc_block_FF(Target_size);
f01079a6:	83 ec 0c             	sub    $0xc,%esp
f01079a9:	ff 75 ec             	pushl  -0x14(%ebp)
f01079ac:	e8 c3 ae 02 00       	call   f0132874 <alloc_block_FF>
f01079b1:	83 c4 10             	add    $0x10,%esp
f01079b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(blk!=NULL)
f01079b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01079bb:	74 46                	je     f0107a03 <kmalloc+0x99>
			/*
			 blk >> sva

			 */
			// uint32 hh = ROUNDDOWN(blk->sva,PAGE_SIZE);
			 int ret= allocate_chunk(ptr_page_directory,blk->sva
f01079bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079c0:	8b 50 08             	mov    0x8(%eax),%edx
f01079c3:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01079c8:	6a 02                	push   $0x2
f01079ca:	ff 75 ec             	pushl  -0x14(%ebp)
f01079cd:	52                   	push   %edx
f01079ce:	50                   	push   %eax
f01079cf:	e8 c4 13 00 00       	call   f0108d98 <allocate_chunk>
f01079d4:	83 c4 10             	add    $0x10,%esp
f01079d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					 ,Target_size, PERM_WRITEABLE);
			 if(ret==-1)
f01079da:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
f01079de:	75 0a                	jne    f01079ea <kmalloc+0x80>
				return NULL;
f01079e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01079e5:	e9 c7 00 00 00       	jmp    f0107ab1 <kmalloc+0x147>
			 else
			   {
				 insert_sorted_allocList(blk);
f01079ea:	83 ec 0c             	sub    $0xc,%esp
f01079ed:	ff 75 e8             	pushl  -0x18(%ebp)
f01079f0:	e8 7f ac 02 00       	call   f0132674 <insert_sorted_allocList>
f01079f5:	83 c4 10             	add    $0x10,%esp
				 return (void *)blk->sva;
f01079f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079fb:	8b 40 08             	mov    0x8(%eax),%eax
f01079fe:	e9 ae 00 00 00       	jmp    f0107ab1 <kmalloc+0x147>

		}
		else
			{
			//kpanic_into_prompt("Not found ya negm");
			return NULL;
f0107a03:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a08:	e9 a4 00 00 00       	jmp    f0107ab1 <kmalloc+0x147>
			}
	}
	else if(isKHeapPlacementStrategyBESTFIT())
f0107a0d:	e8 97 fd ff ff       	call   f01077a9 <isKHeapPlacementStrategyBESTFIT>
f0107a12:	84 c0                	test   %al,%al
f0107a14:	0f 84 92 00 00 00    	je     f0107aac <kmalloc+0x142>
	{
		//kpanic_into_prompt("8ir stratgey ya bro");
		struct MemBlock* blk=NULL ;
f0107a1a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		blk=alloc_block_BF(Target_size);
f0107a21:	83 ec 0c             	sub    $0xc,%esp
f0107a24:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a27:	e8 06 b0 02 00       	call   f0132a32 <alloc_block_BF>
f0107a2c:	83 c4 10             	add    $0x10,%esp
f0107a2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if(blk!=NULL)
f0107a32:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0107a36:	74 6d                	je     f0107aa5 <kmalloc+0x13b>
				{
					/*
					 blk >> sva

					 */
					 uint32 NodeSize= ROUNDUP(sizeof(*MemBlockNodes)*MAX_MEM_BLOCK_CNT,PAGE_SIZE);
f0107a38:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0107a3f:	a1 04 a1 86 f0       	mov    0xf086a104,%eax
f0107a44:	c1 e0 04             	shl    $0x4,%eax
f0107a47:	89 c2                	mov    %eax,%edx
f0107a49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a4c:	01 d0                	add    %edx,%eax
f0107a4e:	48                   	dec    %eax
f0107a4f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107a52:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107a55:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a5a:	f7 75 dc             	divl   -0x24(%ebp)
f0107a5d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107a60:	29 d0                	sub    %edx,%eax
f0107a62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
					// uint32 hh = ROUNDDOWN(blk->sva,PAGE_SIZE);
					 int ret= allocate_chunk(ptr_page_directory,blk->sva
f0107a65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a68:	8b 50 08             	mov    0x8(%eax),%edx
f0107a6b:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0107a70:	6a 02                	push   $0x2
f0107a72:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a75:	52                   	push   %edx
f0107a76:	50                   	push   %eax
f0107a77:	e8 1c 13 00 00       	call   f0108d98 <allocate_chunk>
f0107a7c:	83 c4 10             	add    $0x10,%esp
f0107a7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
							 ,Target_size, PERM_WRITEABLE);
					 if(ret==-1)
f0107a82:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%ebp)
f0107a86:	75 07                	jne    f0107a8f <kmalloc+0x125>
						return NULL;
f0107a88:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a8d:	eb 22                	jmp    f0107ab1 <kmalloc+0x147>
					 else
					   {
						 insert_sorted_allocList(blk);
f0107a8f:	83 ec 0c             	sub    $0xc,%esp
f0107a92:	ff 75 e0             	pushl  -0x20(%ebp)
f0107a95:	e8 da ab 02 00       	call   f0132674 <insert_sorted_allocList>
f0107a9a:	83 c4 10             	add    $0x10,%esp
						 return (void *)blk->sva;
f0107a9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107aa0:	8b 40 08             	mov    0x8(%eax),%eax
f0107aa3:	eb 0c                	jmp    f0107ab1 <kmalloc+0x147>
					   }
				}
				else
					{
					//kpanic_into_prompt("Not found ya negm");
					return NULL;
f0107aa5:	b8 00 00 00 00       	mov    $0x0,%eax
f0107aaa:	eb 05                	jmp    f0107ab1 <kmalloc+0x147>
					}
	}

	return NULL;
f0107aac:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0107ab1:	c9                   	leave  
f0107ab2:	c3                   	ret    

f0107ab3 <kfree>:

	//change this "return" according to your answer


void kfree(void* virtual_address)
{
f0107ab3:	55                   	push   %ebp
f0107ab4:	89 e5                	mov    %esp,%ebp
f0107ab6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	struct MemBlock* blk ;
	blk=find_block(&AllocMemBlocksList,(uint32 )virtual_address);
f0107ab9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107abc:	83 ec 08             	sub    $0x8,%esp
f0107abf:	50                   	push   %eax
f0107ac0:	68 c8 a0 86 f0       	push   $0xf086a0c8
f0107ac5:	e8 52 ab 02 00       	call   f013261c <find_block>
f0107aca:	83 c4 10             	add    $0x10,%esp
f0107acd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(blk==NULL)
f0107ad0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ad4:	0f 84 ce 00 00 00    	je     f0107ba8 <kfree+0xf5>
	{
		return ;
	}
	else
	{
		LIST_REMOVE(&AllocMemBlocksList,blk);
f0107ada:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ade:	75 17                	jne    f0107af7 <kfree+0x44>
f0107ae0:	83 ec 04             	sub    $0x4,%esp
f0107ae3:	68 1f 65 13 f0       	push   $0xf013651f
f0107ae8:	68 89 00 00 00       	push   $0x89
f0107aed:	68 3d 65 13 f0       	push   $0xf013653d
f0107af2:	e8 0e 87 ff ff       	call   f0100205 <_panic>
f0107af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107afa:	8b 00                	mov    (%eax),%eax
f0107afc:	85 c0                	test   %eax,%eax
f0107afe:	74 10                	je     f0107b10 <kfree+0x5d>
f0107b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b03:	8b 00                	mov    (%eax),%eax
f0107b05:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b08:	8b 52 04             	mov    0x4(%edx),%edx
f0107b0b:	89 50 04             	mov    %edx,0x4(%eax)
f0107b0e:	eb 0b                	jmp    f0107b1b <kfree+0x68>
f0107b10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b13:	8b 40 04             	mov    0x4(%eax),%eax
f0107b16:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f0107b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b1e:	8b 40 04             	mov    0x4(%eax),%eax
f0107b21:	85 c0                	test   %eax,%eax
f0107b23:	74 0f                	je     f0107b34 <kfree+0x81>
f0107b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b28:	8b 40 04             	mov    0x4(%eax),%eax
f0107b2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b2e:	8b 12                	mov    (%edx),%edx
f0107b30:	89 10                	mov    %edx,(%eax)
f0107b32:	eb 0a                	jmp    f0107b3e <kfree+0x8b>
f0107b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b37:	8b 00                	mov    (%eax),%eax
f0107b39:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f0107b3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b4a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b51:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0107b56:	48                   	dec    %eax
f0107b57:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
	//unmap_frame(ptr_page_directory,(uint32 )blk->sva);
		int i=blk->sva;
f0107b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5f:	8b 40 08             	mov    0x8(%eax),%eax
f0107b62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	uint32 Lazy_Nagib= blk->size/PAGE_SIZE;
	for(i;i<(blk->size)+(blk->sva);i+=PAGE_SIZE)
f0107b65:	eb 1c                	jmp    f0107b83 <kfree+0xd0>
	{
		unmap_frame(ptr_page_directory,i);
f0107b67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b6a:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0107b6f:	83 ec 08             	sub    $0x8,%esp
f0107b72:	52                   	push   %edx
f0107b73:	50                   	push   %eax
f0107b74:	e8 5c f2 ff ff       	call   f0106dd5 <unmap_frame>
f0107b79:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,blk);
	//unmap_frame(ptr_page_directory,(uint32 )blk->sva);
		int i=blk->sva;
	//	uint32 Lazy_Nagib= blk->size/PAGE_SIZE;
	for(i;i<(blk->size)+(blk->sva);i+=PAGE_SIZE)
f0107b7c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107b83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b86:	8b 50 0c             	mov    0xc(%eax),%edx
f0107b89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b8c:	8b 40 08             	mov    0x8(%eax),%eax
f0107b8f:	01 c2                	add    %eax,%edx
f0107b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b94:	39 c2                	cmp    %eax,%edx
f0107b96:	77 cf                	ja     f0107b67 <kfree+0xb4>
	{
		unmap_frame(ptr_page_directory,i);
	}
	insert_sorted_with_merge_freeList(blk);
f0107b98:	83 ec 0c             	sub    $0xc,%esp
f0107b9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0107b9e:	e8 d9 b2 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0107ba3:	83 c4 10             	add    $0x10,%esp
f0107ba6:	eb 01                	jmp    f0107ba9 <kfree+0xf6>
	// Write your code here, remove the panic and write your code
	struct MemBlock* blk ;
	blk=find_block(&AllocMemBlocksList,(uint32 )virtual_address);
	if(blk==NULL)
	{
		return ;
f0107ba8:	90                   	nop
	{
		unmap_frame(ptr_page_directory,i);
	}
	insert_sorted_with_merge_freeList(blk);
	}
}
f0107ba9:	c9                   	leave  
f0107baa:	c3                   	ret    

f0107bab <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107bab:	55                   	push   %ebp
f0107bac:	89 e5                	mov    %esp,%ebp
f0107bae:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	struct FrameInfo *ptr_frame=to_frame_info(physical_address);
f0107bb1:	83 ec 0c             	sub    $0xc,%esp
f0107bb4:	ff 75 08             	pushl  0x8(%ebp)
f0107bb7:	e8 02 fc ff ff       	call   f01077be <to_frame_info>
f0107bbc:	83 c4 10             	add    $0x10,%esp
f0107bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 return ptr_frame->va;
f0107bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bc5:	8b 40 0c             	mov    0xc(%eax),%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107bc8:	c9                   	leave  
f0107bc9:	c3                   	ret    

f0107bca <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107bca:	55                   	push   %ebp
f0107bcb:	89 e5                	mov    %esp,%ebp
f0107bcd:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code

		uint32 *ptr_page_table=NULL;
f0107bd0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		uint32 hh;
	    get_page_table(ptr_page_directory,virtual_address,&ptr_page_table);
f0107bd7:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0107bdc:	83 ec 04             	sub    $0x4,%esp
f0107bdf:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0107be2:	52                   	push   %edx
f0107be3:	ff 75 08             	pushl  0x8(%ebp)
f0107be6:	50                   	push   %eax
f0107be7:	e8 24 ee ff ff       	call   f0106a10 <get_page_table>
f0107bec:	83 c4 10             	add    $0x10,%esp
		hh=ptr_page_table[PTX(virtual_address)]>>12;
f0107bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bf2:	8b 55 08             	mov    0x8(%ebp),%edx
f0107bf5:	c1 ea 0c             	shr    $0xc,%edx
f0107bf8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107bfe:	c1 e2 02             	shl    $0x2,%edx
f0107c01:	01 d0                	add    %edx,%eax
f0107c03:	8b 00                	mov    (%eax),%eax
f0107c05:	c1 e8 0c             	shr    $0xc,%eax
f0107c08:	89 45 f4             	mov    %eax,-0xc(%ebp)

		return (hh*PAGE_SIZE)+(virtual_address&0x00000FFF);
f0107c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c0e:	c1 e0 0c             	shl    $0xc,%eax
f0107c11:	89 c2                	mov    %eax,%edx
f0107c13:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c16:	25 ff 0f 00 00       	and    $0xfff,%eax
f0107c1b:	01 d0                	add    %edx,%eax

		//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107c1d:	c9                   	leave  
f0107c1e:	c3                   	ret    

f0107c1f <kfreeall>:


void kfreeall()
{
f0107c1f:	55                   	push   %ebp
f0107c20:	89 e5                	mov    %esp,%ebp
f0107c22:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c25:	83 ec 04             	sub    $0x4,%esp
f0107c28:	68 4e 65 13 f0       	push   $0xf013654e
f0107c2d:	68 b4 00 00 00       	push   $0xb4
f0107c32:	68 3d 65 13 f0       	push   $0xf013653d
f0107c37:	e8 c9 85 ff ff       	call   f0100205 <_panic>

f0107c3c <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107c3c:	55                   	push   %ebp
f0107c3d:	89 e5                	mov    %esp,%ebp
f0107c3f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c42:	83 ec 04             	sub    $0x4,%esp
f0107c45:	68 4e 65 13 f0       	push   $0xf013654e
f0107c4a:	68 ba 00 00 00       	push   $0xba
f0107c4f:	68 3d 65 13 f0       	push   $0xf013653d
f0107c54:	e8 ac 85 ff ff       	call   f0100205 <_panic>

f0107c59 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107c59:	55                   	push   %ebp
f0107c5a:	89 e5                	mov    %esp,%ebp
f0107c5c:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c5f:	83 ec 04             	sub    $0x4,%esp
f0107c62:	68 4e 65 13 f0       	push   $0xf013654e
f0107c67:	68 bf 00 00 00       	push   $0xbf
f0107c6c:	68 3d 65 13 f0       	push   $0xf013653d
f0107c71:	e8 8f 85 ff ff       	call   f0100205 <_panic>

f0107c76 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107c76:	55                   	push   %ebp
f0107c77:	89 e5                	mov    %esp,%ebp
f0107c79:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107c7c:	83 ec 04             	sub    $0x4,%esp
f0107c7f:	68 60 65 13 f0       	push   $0xf0136560
f0107c84:	68 d6 00 00 00       	push   $0xd6
f0107c89:	68 3d 65 13 f0       	push   $0xf013653d
f0107c8e:	e8 72 85 ff ff       	call   f0100205 <_panic>

f0107c93 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107c93:	55                   	push   %ebp
f0107c94:	89 e5                	mov    %esp,%ebp
f0107c96:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_page_table =NULL;
f0107c99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		int ret= get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107ca0:	83 ec 04             	sub    $0x4,%esp
f0107ca3:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107ca6:	50                   	push   %eax
f0107ca7:	ff 75 0c             	pushl  0xc(%ebp)
f0107caa:	ff 75 08             	pushl  0x8(%ebp)
f0107cad:	e8 5e ed ff ff       	call   f0106a10 <get_page_table>
f0107cb2:	83 c4 10             	add    $0x10,%esp
f0107cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret==TABLE_NOT_EXIST)
f0107cb8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0107cbc:	75 14                	jne    f0107cd2 <pt_set_page_permissions+0x3f>
		{
			panic("Invalid va");
f0107cbe:	83 ec 04             	sub    $0x4,%esp
f0107cc1:	68 87 65 13 f0       	push   $0xf0136587
f0107cc6:	6a 10                	push   $0x10
f0107cc8:	68 92 65 13 f0       	push   $0xf0136592
f0107ccd:	e8 33 85 ff ff       	call   f0100205 <_panic>
		}
		else
		{

			ptr_page_table[PTX(virtual_address)]|= permissions_to_set;
f0107cd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cd5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107cd8:	c1 ea 0c             	shr    $0xc,%edx
f0107cdb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ce1:	c1 e2 02             	shl    $0x2,%edx
f0107ce4:	01 c2                	add    %eax,%edx
f0107ce6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ce9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107cec:	c1 e9 0c             	shr    $0xc,%ecx
f0107cef:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107cf5:	c1 e1 02             	shl    $0x2,%ecx
f0107cf8:	01 c8                	add    %ecx,%eax
f0107cfa:	8b 00                	mov    (%eax),%eax
f0107cfc:	0b 45 10             	or     0x10(%ebp),%eax
f0107cff:	89 02                	mov    %eax,(%edx)
			ptr_page_table[PTX(virtual_address)]&= ~permissions_to_clear;
f0107d01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d07:	c1 ea 0c             	shr    $0xc,%edx
f0107d0a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d10:	c1 e2 02             	shl    $0x2,%edx
f0107d13:	01 d0                	add    %edx,%eax
f0107d15:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107d18:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107d1b:	c1 e9 0c             	shr    $0xc,%ecx
f0107d1e:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107d24:	c1 e1 02             	shl    $0x2,%ecx
f0107d27:	01 ca                	add    %ecx,%edx
f0107d29:	8b 12                	mov    (%edx),%edx
f0107d2b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107d2e:	f7 d1                	not    %ecx
f0107d30:	21 ca                	and    %ecx,%edx
f0107d32:	89 10                	mov    %edx,(%eax)
			tlb_invalidate((void *)NULL,(void *)virtual_address);
f0107d34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d37:	83 ec 08             	sub    $0x8,%esp
f0107d3a:	50                   	push   %eax
f0107d3b:	6a 00                	push   $0x0
f0107d3d:	e8 2b e7 ff ff       	call   f010646d <tlb_invalidate>
f0107d42:	83 c4 10             	add    $0x10,%esp
		}
}
f0107d45:	90                   	nop
f0107d46:	c9                   	leave  
f0107d47:	c3                   	ret    

f0107d48 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107d48:	55                   	push   %ebp
f0107d49:	89 e5                	mov    %esp,%ebp
f0107d4b:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_page_table=NULL;
f0107d4e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		int ret=get_page_table(page_directory,virtual_address,& ptr_page_table);
f0107d55:	83 ec 04             	sub    $0x4,%esp
f0107d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0107d5b:	50                   	push   %eax
f0107d5c:	ff 75 0c             	pushl  0xc(%ebp)
f0107d5f:	ff 75 08             	pushl  0x8(%ebp)
f0107d62:	e8 a9 ec ff ff       	call   f0106a10 <get_page_table>
f0107d67:	83 c4 10             	add    $0x10,%esp
f0107d6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ptr_page_table !=NULL)
f0107d6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d70:	85 c0                	test   %eax,%eax
f0107d72:	74 2b                	je     f0107d9f <pt_get_page_permissions+0x57>
		{
			uint32 entry=ptr_page_table[PTX(virtual_address)];
f0107d74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d77:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d7a:	c1 ea 0c             	shr    $0xc,%edx
f0107d7d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d83:	c1 e2 02             	shl    $0x2,%edx
f0107d86:	01 d0                	add    %edx,%eax
f0107d88:	8b 00                	mov    (%eax),%eax
f0107d8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			uint32 permissions=entry<<20;
f0107d8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d90:	c1 e0 14             	shl    $0x14,%eax
f0107d93:	89 45 ec             	mov    %eax,-0x14(%ebp)
			permissions=permissions>>20;
f0107d96:	c1 6d ec 14          	shrl   $0x14,-0x14(%ebp)

			return permissions;
f0107d9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d9d:	eb 05                	jmp    f0107da4 <pt_get_page_permissions+0x5c>
		}
		else
			return -1;
f0107d9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107da4:	c9                   	leave  
f0107da5:	c3                   	ret    

f0107da6 <pt_clear_page_table_entry>:


inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107da6:	55                   	push   %ebp
f0107da7:	89 e5                	mov    %esp,%ebp
f0107da9:	83 ec 18             	sub    $0x18,%esp

	uint32 directory_entry = ptr_page_directory[PDX(virtual_address)];
f0107dac:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0107db1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107db4:	c1 ea 16             	shr    $0x16,%edx
f0107db7:	c1 e2 02             	shl    $0x2,%edx
f0107dba:	01 d0                	add    %edx,%eax
f0107dbc:	8b 00                	mov    (%eax),%eax
f0107dbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table = NULL;
f0107dc1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int ret = get_page_table(ptr_page_directory, virtual_address, &ptr_page_table);
f0107dc8:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0107dcd:	83 ec 04             	sub    $0x4,%esp
f0107dd0:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107dd3:	52                   	push   %edx
f0107dd4:	ff 75 0c             	pushl  0xc(%ebp)
f0107dd7:	50                   	push   %eax
f0107dd8:	e8 33 ec ff ff       	call   f0106a10 <get_page_table>
f0107ddd:	83 c4 10             	add    $0x10,%esp
f0107de0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret == TABLE_IN_MEMORY)
f0107de3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107de7:	75 2d                	jne    f0107e16 <pt_clear_page_table_entry+0x70>
	{
		ptr_page_table[PTX(virtual_address)] &=0;
f0107de9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107dec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107def:	c1 ea 0c             	shr    $0xc,%edx
f0107df2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df8:	c1 e2 02             	shl    $0x2,%edx
f0107dfb:	01 d0                	add    %edx,%eax
f0107dfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e06:	83 ec 08             	sub    $0x8,%esp
f0107e09:	50                   	push   %eax
f0107e0a:	6a 00                	push   $0x0
f0107e0c:	e8 5c e6 ff ff       	call   f010646d <tlb_invalidate>
f0107e11:	83 c4 10             	add    $0x10,%esp
	else
	{
		panic("Invalid va");
	}

}
f0107e14:	eb 14                	jmp    f0107e2a <pt_clear_page_table_entry+0x84>
		tlb_invalidate((void *)NULL, (void *)virtual_address);

	}
	else
	{
		panic("Invalid va");
f0107e16:	83 ec 04             	sub    $0x4,%esp
f0107e19:	68 87 65 13 f0       	push   $0xf0136587
f0107e1e:	6a 3a                	push   $0x3a
f0107e20:	68 92 65 13 f0       	push   $0xf0136592
f0107e25:	e8 db 83 ff ff       	call   f0100205 <_panic>
	}

}
f0107e2a:	c9                   	leave  
f0107e2b:	c3                   	ret    

f0107e2c <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107e2c:	55                   	push   %ebp
f0107e2d:	89 e5                	mov    %esp,%ebp
f0107e2f:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_page_table=NULL;
f0107e32:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    int ret=get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107e39:	83 ec 04             	sub    $0x4,%esp
f0107e3c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107e3f:	50                   	push   %eax
f0107e40:	ff 75 0c             	pushl  0xc(%ebp)
f0107e43:	ff 75 08             	pushl  0x8(%ebp)
f0107e46:	e8 c5 eb ff ff       	call   f0106a10 <get_page_table>
f0107e4b:	83 c4 10             	add    $0x10,%esp
f0107e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(ptr_page_table !=NULL)
f0107e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107e54:	85 c0                	test   %eax,%eax
f0107e56:	74 30                	je     f0107e88 <virtual_to_physical+0x5c>
    {
    	uint32 entry_page=ptr_page_table[PTX(virtual_address)];
f0107e58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107e5b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e5e:	c1 ea 0c             	shr    $0xc,%edx
f0107e61:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e67:	c1 e2 02             	shl    $0x2,%edx
f0107e6a:	01 d0                	add    %edx,%eax
f0107e6c:	8b 00                	mov    (%eax),%eax
f0107e6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    	int framenum=entry_page >> 12;
f0107e71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e74:	c1 e8 0c             	shr    $0xc,%eax
f0107e77:	89 45 ec             	mov    %eax,-0x14(%ebp)
    	uint32 physical_address=framenum*PAGE_SIZE;
f0107e7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e7d:	c1 e0 0c             	shl    $0xc,%eax
f0107e80:	89 45 e8             	mov    %eax,-0x18(%ebp)
    	return physical_address;
f0107e83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107e86:	eb 05                	jmp    f0107e8d <virtual_to_physical+0x61>


    }
    else
    	return -1;
f0107e88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107e8d:	c9                   	leave  
f0107e8e:	c3                   	ret    

f0107e8f <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107e8f:	55                   	push   %ebp
f0107e90:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107e92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e95:	c1 e8 16             	shr    $0x16,%eax
f0107e98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea2:	01 d0                	add    %edx,%eax
f0107ea4:	8b 00                	mov    (%eax),%eax
f0107ea6:	83 e0 20             	and    $0x20,%eax
f0107ea9:	85 c0                	test   %eax,%eax
f0107eab:	0f 95 c0             	setne  %al
f0107eae:	0f b6 c0             	movzbl %al,%eax
}
f0107eb1:	5d                   	pop    %ebp
f0107eb2:	c3                   	ret    

f0107eb3 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107eb3:	55                   	push   %ebp
f0107eb4:	89 e5                	mov    %esp,%ebp
f0107eb6:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ebc:	c1 e8 16             	shr    $0x16,%eax
f0107ebf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ec6:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec9:	01 d0                	add    %edx,%eax
f0107ecb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ece:	c1 ea 16             	shr    $0x16,%edx
f0107ed1:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107ed8:	8b 55 08             	mov    0x8(%ebp),%edx
f0107edb:	01 ca                	add    %ecx,%edx
f0107edd:	8b 12                	mov    (%edx),%edx
f0107edf:	83 e2 df             	and    $0xffffffdf,%edx
f0107ee2:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ee7:	83 ec 08             	sub    $0x8,%esp
f0107eea:	50                   	push   %eax
f0107eeb:	6a 00                	push   $0x0
f0107eed:	e8 7b e5 ff ff       	call   f010646d <tlb_invalidate>
f0107ef2:	83 c4 10             	add    $0x10,%esp
}
f0107ef5:	90                   	nop
f0107ef6:	c9                   	leave  
f0107ef7:	c3                   	ret    

f0107ef8 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107ef8:	55                   	push   %ebp
f0107ef9:	89 e5                	mov    %esp,%ebp
f0107efb:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107efe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f01:	c1 e8 16             	shr    $0x16,%eax
f0107f04:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f0e:	01 d0                	add    %edx,%eax
f0107f10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107f16:	0f 20 d8             	mov    %cr3,%eax
f0107f19:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107f1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107f1f:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107f22:	90                   	nop
f0107f23:	c9                   	leave  
f0107f24:	c3                   	ret    

f0107f25 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107f25:	55                   	push   %ebp
f0107f26:	89 e5                	mov    %esp,%ebp
f0107f28:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107f2b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107f32:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107f39:	eb 21                	jmp    f0107f5c <env_page_ws_get_size+0x37>
f0107f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f3e:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f41:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107f44:	89 d0                	mov    %edx,%eax
f0107f46:	01 c0                	add    %eax,%eax
f0107f48:	01 d0                	add    %edx,%eax
f0107f4a:	c1 e0 03             	shl    $0x3,%eax
f0107f4d:	01 c8                	add    %ecx,%eax
f0107f4f:	8a 40 04             	mov    0x4(%eax),%al
f0107f52:	84 c0                	test   %al,%al
f0107f54:	75 03                	jne    f0107f59 <env_page_ws_get_size+0x34>
f0107f56:	ff 45 f8             	incl   -0x8(%ebp)
f0107f59:	ff 45 fc             	incl   -0x4(%ebp)
f0107f5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f5f:	8b 50 74             	mov    0x74(%eax),%edx
f0107f62:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107f65:	39 c2                	cmp    %eax,%edx
f0107f67:	77 d2                	ja     f0107f3b <env_page_ws_get_size+0x16>
	return counter;
f0107f69:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107f6c:	c9                   	leave  
f0107f6d:	c3                   	ret    

f0107f6e <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107f6e:	55                   	push   %ebp
f0107f6f:	89 e5                	mov    %esp,%ebp
f0107f71:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107f74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107f7b:	eb 4c                	jmp    f0107fc9 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f80:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f86:	89 d0                	mov    %edx,%eax
f0107f88:	01 c0                	add    %eax,%eax
f0107f8a:	01 d0                	add    %edx,%eax
f0107f8c:	c1 e0 03             	shl    $0x3,%eax
f0107f8f:	01 c8                	add    %ecx,%eax
f0107f91:	8b 00                	mov    (%eax),%eax
f0107f93:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107f9e:	89 c2                	mov    %eax,%edx
f0107fa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fa3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107fa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107fa9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107fae:	39 c2                	cmp    %eax,%edx
f0107fb0:	75 14                	jne    f0107fc6 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb5:	83 ec 08             	sub    $0x8,%esp
f0107fb8:	50                   	push   %eax
f0107fb9:	ff 75 08             	pushl  0x8(%ebp)
f0107fbc:	e8 b9 00 00 00       	call   f010807a <env_page_ws_clear_entry>
f0107fc1:	83 c4 10             	add    $0x10,%esp
			break;
f0107fc4:	eb 10                	jmp    f0107fd6 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107fc6:	ff 45 f4             	incl   -0xc(%ebp)
f0107fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fcc:	8b 50 74             	mov    0x74(%eax),%edx
f0107fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fd2:	39 c2                	cmp    %eax,%edx
f0107fd4:	77 a7                	ja     f0107f7d <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107fd6:	90                   	nop
f0107fd7:	c9                   	leave  
f0107fd8:	c3                   	ret    

f0107fd9 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107fd9:	55                   	push   %ebp
f0107fda:	89 e5                	mov    %esp,%ebp
f0107fdc:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe2:	8b 40 74             	mov    0x74(%eax),%eax
f0107fe5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107fe8:	77 16                	ja     f0108000 <env_page_ws_set_entry+0x27>
f0107fea:	68 ac 65 13 f0       	push   $0xf01365ac
f0107fef:	68 e2 65 13 f0       	push   $0xf01365e2
f0107ff4:	6a 26                	push   $0x26
f0107ff6:	68 f8 65 13 f0       	push   $0xf01365f8
f0107ffb:	e8 05 82 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108000:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108007:	76 16                	jbe    f010801f <env_page_ws_set_entry+0x46>
f0108009:	68 18 66 13 f0       	push   $0xf0136618
f010800e:	68 e2 65 13 f0       	push   $0xf01365e2
f0108013:	6a 27                	push   $0x27
f0108015:	68 f8 65 13 f0       	push   $0xf01365f8
f010801a:	e8 e6 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010801f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108022:	8b 48 78             	mov    0x78(%eax),%ecx
f0108025:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108028:	89 d0                	mov    %edx,%eax
f010802a:	01 c0                	add    %eax,%eax
f010802c:	01 d0                	add    %edx,%eax
f010802e:	c1 e0 03             	shl    $0x3,%eax
f0108031:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0108034:	8b 45 10             	mov    0x10(%ebp),%eax
f0108037:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010803a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010803d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108042:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108044:	8b 45 08             	mov    0x8(%ebp),%eax
f0108047:	8b 48 78             	mov    0x78(%eax),%ecx
f010804a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010804d:	89 d0                	mov    %edx,%eax
f010804f:	01 c0                	add    %eax,%eax
f0108051:	01 d0                	add    %edx,%eax
f0108053:	c1 e0 03             	shl    $0x3,%eax
f0108056:	01 c8                	add    %ecx,%eax
f0108058:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010805c:	8b 45 08             	mov    0x8(%ebp),%eax
f010805f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108062:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108065:	89 d0                	mov    %edx,%eax
f0108067:	01 c0                	add    %eax,%eax
f0108069:	01 d0                	add    %edx,%eax
f010806b:	c1 e0 03             	shl    $0x3,%eax
f010806e:	01 c8                	add    %ecx,%eax
f0108070:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108077:	90                   	nop
}
f0108078:	c9                   	leave  
f0108079:	c3                   	ret    

f010807a <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010807a:	55                   	push   %ebp
f010807b:	89 e5                	mov    %esp,%ebp
f010807d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108080:	8b 45 08             	mov    0x8(%ebp),%eax
f0108083:	8b 40 74             	mov    0x74(%eax),%eax
f0108086:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108089:	77 16                	ja     f01080a1 <env_page_ws_clear_entry+0x27>
f010808b:	68 4c 66 13 f0       	push   $0xf013664c
f0108090:	68 e2 65 13 f0       	push   $0xf01365e2
f0108095:	6a 32                	push   $0x32
f0108097:	68 f8 65 13 f0       	push   $0xf01365f8
f010809c:	e8 64 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01080a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a4:	8b 48 78             	mov    0x78(%eax),%ecx
f01080a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080aa:	89 d0                	mov    %edx,%eax
f01080ac:	01 c0                	add    %eax,%eax
f01080ae:	01 d0                	add    %edx,%eax
f01080b0:	c1 e0 03             	shl    $0x3,%eax
f01080b3:	01 c8                	add    %ecx,%eax
f01080b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01080bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01080be:	8b 48 78             	mov    0x78(%eax),%ecx
f01080c1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c4:	89 d0                	mov    %edx,%eax
f01080c6:	01 c0                	add    %eax,%eax
f01080c8:	01 d0                	add    %edx,%eax
f01080ca:	c1 e0 03             	shl    $0x3,%eax
f01080cd:	01 c8                	add    %ecx,%eax
f01080cf:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01080d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d6:	8b 48 78             	mov    0x78(%eax),%ecx
f01080d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080dc:	89 d0                	mov    %edx,%eax
f01080de:	01 c0                	add    %eax,%eax
f01080e0:	01 d0                	add    %edx,%eax
f01080e2:	c1 e0 03             	shl    $0x3,%eax
f01080e5:	01 c8                	add    %ecx,%eax
f01080e7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01080ee:	90                   	nop
f01080ef:	c9                   	leave  
f01080f0:	c3                   	ret    

f01080f1 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01080f1:	55                   	push   %ebp
f01080f2:	89 e5                	mov    %esp,%ebp
f01080f4:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01080f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080fa:	8b 40 74             	mov    0x74(%eax),%eax
f01080fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108100:	77 16                	ja     f0108118 <env_page_ws_get_virtual_address+0x27>
f0108102:	68 4c 66 13 f0       	push   $0xf013664c
f0108107:	68 e2 65 13 f0       	push   $0xf01365e2
f010810c:	6a 3a                	push   $0x3a
f010810e:	68 f8 65 13 f0       	push   $0xf01365f8
f0108113:	e8 ed 80 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108118:	8b 45 08             	mov    0x8(%ebp),%eax
f010811b:	8b 48 78             	mov    0x78(%eax),%ecx
f010811e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108121:	89 d0                	mov    %edx,%eax
f0108123:	01 c0                	add    %eax,%eax
f0108125:	01 d0                	add    %edx,%eax
f0108127:	c1 e0 03             	shl    $0x3,%eax
f010812a:	01 c8                	add    %ecx,%eax
f010812c:	8b 00                	mov    (%eax),%eax
f010812e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108134:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108139:	c9                   	leave  
f010813a:	c3                   	ret    

f010813b <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010813b:	55                   	push   %ebp
f010813c:	89 e5                	mov    %esp,%ebp
f010813e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108141:	8b 45 08             	mov    0x8(%ebp),%eax
f0108144:	8b 40 74             	mov    0x74(%eax),%eax
f0108147:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010814a:	77 16                	ja     f0108162 <env_page_ws_get_time_stamp+0x27>
f010814c:	68 4c 66 13 f0       	push   $0xf013664c
f0108151:	68 e2 65 13 f0       	push   $0xf01365e2
f0108156:	6a 40                	push   $0x40
f0108158:	68 f8 65 13 f0       	push   $0xf01365f8
f010815d:	e8 a3 80 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108162:	8b 45 08             	mov    0x8(%ebp),%eax
f0108165:	8b 48 78             	mov    0x78(%eax),%ecx
f0108168:	8b 55 0c             	mov    0xc(%ebp),%edx
f010816b:	89 d0                	mov    %edx,%eax
f010816d:	01 c0                	add    %eax,%eax
f010816f:	01 d0                	add    %edx,%eax
f0108171:	c1 e0 03             	shl    $0x3,%eax
f0108174:	01 c8                	add    %ecx,%eax
f0108176:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108179:	c9                   	leave  
f010817a:	c3                   	ret    

f010817b <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010817b:	55                   	push   %ebp
f010817c:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010817e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108181:	8b 48 78             	mov    0x78(%eax),%ecx
f0108184:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108187:	89 d0                	mov    %edx,%eax
f0108189:	01 c0                	add    %eax,%eax
f010818b:	01 d0                	add    %edx,%eax
f010818d:	c1 e0 03             	shl    $0x3,%eax
f0108190:	01 c8                	add    %ecx,%eax
f0108192:	8a 40 04             	mov    0x4(%eax),%al
f0108195:	0f b6 c0             	movzbl %al,%eax
}
f0108198:	5d                   	pop    %ebp
f0108199:	c3                   	ret    

f010819a <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010819a:	55                   	push   %ebp
f010819b:	89 e5                	mov    %esp,%ebp
f010819d:	53                   	push   %ebx
f010819e:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01081a1:	83 ec 0c             	sub    $0xc,%esp
f01081a4:	6a 02                	push   $0x2
f01081a6:	e8 54 60 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f01081ab:	83 c4 10             	add    $0x10,%esp
f01081ae:	85 c0                	test   %eax,%eax
f01081b0:	0f 84 fe 00 00 00    	je     f01082b4 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01081b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01081bd:	83 ec 0c             	sub    $0xc,%esp
f01081c0:	68 84 66 13 f0       	push   $0xf0136684
f01081c5:	e8 44 8b ff ff       	call   f0100d0e <cprintf>
f01081ca:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01081cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01081d0:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01081d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01081d9:	eb 2c                	jmp    f0108207 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01081db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081de:	8b 10                	mov    (%eax),%edx
f01081e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081e3:	8d 48 01             	lea    0x1(%eax),%ecx
f01081e6:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01081e9:	83 ec 04             	sub    $0x4,%esp
f01081ec:	52                   	push   %edx
f01081ed:	50                   	push   %eax
f01081ee:	68 9e 66 13 f0       	push   $0xf013669e
f01081f3:	e8 16 8b ff ff       	call   f0100d0e <cprintf>
f01081f8:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01081fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01081fe:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108204:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108207:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010820b:	74 08                	je     f0108215 <env_page_ws_print+0x7b>
f010820d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108210:	8b 40 10             	mov    0x10(%eax),%eax
f0108213:	eb 05                	jmp    f010821a <env_page_ws_print+0x80>
f0108215:	b8 00 00 00 00       	mov    $0x0,%eax
f010821a:	8b 55 08             	mov    0x8(%ebp),%edx
f010821d:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108223:	8b 45 08             	mov    0x8(%ebp),%eax
f0108226:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010822c:	85 c0                	test   %eax,%eax
f010822e:	75 ab                	jne    f01081db <env_page_ws_print+0x41>
f0108230:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108234:	75 a5                	jne    f01081db <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108236:	83 ec 0c             	sub    $0xc,%esp
f0108239:	68 a6 66 13 f0       	push   $0xf01366a6
f010823e:	e8 cb 8a ff ff       	call   f0100d0e <cprintf>
f0108243:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108246:	8b 45 08             	mov    0x8(%ebp),%eax
f0108249:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010824f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108252:	eb 2c                	jmp    f0108280 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108254:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108257:	8b 10                	mov    (%eax),%edx
f0108259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010825c:	8d 48 01             	lea    0x1(%eax),%ecx
f010825f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108262:	83 ec 04             	sub    $0x4,%esp
f0108265:	52                   	push   %edx
f0108266:	50                   	push   %eax
f0108267:	68 9e 66 13 f0       	push   $0xf013669e
f010826c:	e8 9d 8a ff ff       	call   f0100d0e <cprintf>
f0108271:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108274:	8b 45 08             	mov    0x8(%ebp),%eax
f0108277:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010827d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108280:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108284:	74 08                	je     f010828e <env_page_ws_print+0xf4>
f0108286:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108289:	8b 40 10             	mov    0x10(%eax),%eax
f010828c:	eb 05                	jmp    f0108293 <env_page_ws_print+0xf9>
f010828e:	b8 00 00 00 00       	mov    $0x0,%eax
f0108293:	8b 55 08             	mov    0x8(%ebp),%edx
f0108296:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01082a5:	85 c0                	test   %eax,%eax
f01082a7:	75 ab                	jne    f0108254 <env_page_ws_print+0xba>
f01082a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082ad:	75 a5                	jne    f0108254 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01082af:	e9 95 01 00 00       	jmp    f0108449 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f01082b4:	83 ec 0c             	sub    $0xc,%esp
f01082b7:	68 c1 66 13 f0       	push   $0xf01366c1
f01082bc:	e8 4d 8a ff ff       	call   f0100d0e <cprintf>
f01082c1:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01082c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01082cb:	e9 6a 01 00 00       	jmp    f010843a <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01082d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01082d9:	89 d0                	mov    %edx,%eax
f01082db:	01 c0                	add    %eax,%eax
f01082dd:	01 d0                	add    %edx,%eax
f01082df:	c1 e0 03             	shl    $0x3,%eax
f01082e2:	01 c8                	add    %ecx,%eax
f01082e4:	8a 40 04             	mov    0x4(%eax),%al
f01082e7:	84 c0                	test   %al,%al
f01082e9:	74 43                	je     f010832e <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01082eb:	83 ec 0c             	sub    $0xc,%esp
f01082ee:	68 cb 66 13 f0       	push   $0xf01366cb
f01082f3:	e8 16 8a ff ff       	call   f0100d0e <cprintf>
f01082f8:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01082fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01082fe:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108304:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108307:	75 10                	jne    f0108319 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108309:	83 ec 0c             	sub    $0xc,%esp
f010830c:	68 da 66 13 f0       	push   $0xf01366da
f0108311:	e8 f8 89 ff ff       	call   f0100d0e <cprintf>
f0108316:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108319:	83 ec 0c             	sub    $0xc,%esp
f010831c:	68 e0 66 13 f0       	push   $0xf01366e0
f0108321:	e8 e8 89 ff ff       	call   f0100d0e <cprintf>
f0108326:	83 c4 10             	add    $0x10,%esp
				continue;
f0108329:	e9 09 01 00 00       	jmp    f0108437 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010832e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108331:	8b 48 78             	mov    0x78(%eax),%ecx
f0108334:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108337:	89 d0                	mov    %edx,%eax
f0108339:	01 c0                	add    %eax,%eax
f010833b:	01 d0                	add    %edx,%eax
f010833d:	c1 e0 03             	shl    $0x3,%eax
f0108340:	01 c8                	add    %ecx,%eax
f0108342:	8b 00                	mov    (%eax),%eax
f0108344:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108347:	8b 45 08             	mov    0x8(%ebp),%eax
f010834a:	8b 48 78             	mov    0x78(%eax),%ecx
f010834d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108350:	89 d0                	mov    %edx,%eax
f0108352:	01 c0                	add    %eax,%eax
f0108354:	01 d0                	add    %edx,%eax
f0108356:	c1 e0 03             	shl    $0x3,%eax
f0108359:	01 c8                	add    %ecx,%eax
f010835b:	8b 40 08             	mov    0x8(%eax),%eax
f010835e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108361:	8b 45 08             	mov    0x8(%ebp),%eax
f0108364:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108367:	83 ec 08             	sub    $0x8,%esp
f010836a:	ff 75 e8             	pushl  -0x18(%ebp)
f010836d:	50                   	push   %eax
f010836e:	e8 d5 f9 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0108373:	83 c4 10             	add    $0x10,%esp
f0108376:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010837c:	83 e0 40             	and    $0x40,%eax
f010837f:	85 c0                	test   %eax,%eax
f0108381:	0f 95 c0             	setne  %al
f0108384:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108387:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010838a:	83 e0 20             	and    $0x20,%eax
f010838d:	85 c0                	test   %eax,%eax
f010838f:	0f 95 c0             	setne  %al
f0108392:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108395:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108398:	25 00 02 00 00       	and    $0x200,%eax
f010839d:	85 c0                	test   %eax,%eax
f010839f:	0f 95 c0             	setne  %al
f01083a2:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f01083a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01083ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083ae:	89 d0                	mov    %edx,%eax
f01083b0:	01 c0                	add    %eax,%eax
f01083b2:	01 d0                	add    %edx,%eax
f01083b4:	c1 e0 03             	shl    $0x3,%eax
f01083b7:	01 c8                	add    %ecx,%eax
f01083b9:	8b 00                	mov    (%eax),%eax
f01083bb:	83 ec 04             	sub    $0x4,%esp
f01083be:	50                   	push   %eax
f01083bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01083c2:	68 e2 66 13 f0       	push   $0xf01366e2
f01083c7:	e8 42 89 ff ff       	call   f0100d0e <cprintf>
f01083cc:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01083cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d2:	8b 48 78             	mov    0x78(%eax),%ecx
f01083d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083d8:	89 d0                	mov    %edx,%eax
f01083da:	01 c0                	add    %eax,%eax
f01083dc:	01 d0                	add    %edx,%eax
f01083de:	c1 e0 03             	shl    $0x3,%eax
f01083e1:	01 c8                	add    %ecx,%eax
f01083e3:	8b 58 0c             	mov    0xc(%eax),%ebx
f01083e6:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01083ea:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01083ee:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01083f2:	83 ec 08             	sub    $0x8,%esp
f01083f5:	53                   	push   %ebx
f01083f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01083f9:	51                   	push   %ecx
f01083fa:	52                   	push   %edx
f01083fb:	50                   	push   %eax
f01083fc:	68 f4 66 13 f0       	push   $0xf01366f4
f0108401:	e8 08 89 ff ff       	call   f0100d0e <cprintf>
f0108406:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108409:	8b 45 08             	mov    0x8(%ebp),%eax
f010840c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108412:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108415:	75 10                	jne    f0108427 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108417:	83 ec 0c             	sub    $0xc,%esp
f010841a:	68 3b 67 13 f0       	push   $0xf013673b
f010841f:	e8 ea 88 ff ff       	call   f0100d0e <cprintf>
f0108424:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108427:	83 ec 0c             	sub    $0xc,%esp
f010842a:	68 e0 66 13 f0       	push   $0xf01366e0
f010842f:	e8 da 88 ff ff       	call   f0100d0e <cprintf>
f0108434:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108437:	ff 45 ec             	incl   -0x14(%ebp)
f010843a:	8b 45 08             	mov    0x8(%ebp),%eax
f010843d:	8b 40 74             	mov    0x74(%eax),%eax
f0108440:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108443:	0f 87 87 fe ff ff    	ja     f01082d0 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108449:	90                   	nop
f010844a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010844d:	c9                   	leave  
f010844e:	c3                   	ret    

f010844f <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f010844f:	55                   	push   %ebp
f0108450:	89 e5                	mov    %esp,%ebp
f0108452:	53                   	push   %ebx
f0108453:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108456:	83 ec 0c             	sub    $0xc,%esp
f0108459:	68 40 67 13 f0       	push   $0xf0136740
f010845e:	e8 ab 88 ff ff       	call   f0100d0e <cprintf>
f0108463:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108466:	83 ec 0c             	sub    $0xc,%esp
f0108469:	68 75 67 13 f0       	push   $0xf0136775
f010846e:	e8 9b 88 ff ff       	call   f0100d0e <cprintf>
f0108473:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108476:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010847d:	e9 10 01 00 00       	jmp    f0108592 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108482:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108485:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108488:	89 d0                	mov    %edx,%eax
f010848a:	01 c0                	add    %eax,%eax
f010848c:	01 d0                	add    %edx,%eax
f010848e:	c1 e0 03             	shl    $0x3,%eax
f0108491:	01 c8                	add    %ecx,%eax
f0108493:	83 e8 80             	sub    $0xffffff80,%eax
f0108496:	8a 00                	mov    (%eax),%al
f0108498:	84 c0                	test   %al,%al
f010849a:	74 43                	je     f01084df <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010849c:	83 ec 0c             	sub    $0xc,%esp
f010849f:	68 cb 66 13 f0       	push   $0xf01366cb
f01084a4:	e8 65 88 ff ff       	call   f0100d0e <cprintf>
f01084a9:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f01084ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01084af:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01084b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01084b8:	75 10                	jne    f01084ca <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01084ba:	83 ec 0c             	sub    $0xc,%esp
f01084bd:	68 da 66 13 f0       	push   $0xf01366da
f01084c2:	e8 47 88 ff ff       	call   f0100d0e <cprintf>
f01084c7:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01084ca:	83 ec 0c             	sub    $0xc,%esp
f01084cd:	68 e0 66 13 f0       	push   $0xf01366e0
f01084d2:	e8 37 88 ff ff       	call   f0100d0e <cprintf>
f01084d7:	83 c4 10             	add    $0x10,%esp
			continue;
f01084da:	e9 b0 00 00 00       	jmp    f010858f <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01084df:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e5:	89 d0                	mov    %edx,%eax
f01084e7:	01 c0                	add    %eax,%eax
f01084e9:	01 d0                	add    %edx,%eax
f01084eb:	c1 e0 03             	shl    $0x3,%eax
f01084ee:	01 c8                	add    %ecx,%eax
f01084f0:	83 c0 7c             	add    $0x7c,%eax
f01084f3:	8b 00                	mov    (%eax),%eax
f01084f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01084f8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084fe:	89 d0                	mov    %edx,%eax
f0108500:	01 c0                	add    %eax,%eax
f0108502:	01 d0                	add    %edx,%eax
f0108504:	c1 e0 03             	shl    $0x3,%eax
f0108507:	01 c8                	add    %ecx,%eax
f0108509:	83 c0 7c             	add    $0x7c,%eax
f010850c:	8b 00                	mov    (%eax),%eax
f010850e:	83 ec 04             	sub    $0x4,%esp
f0108511:	50                   	push   %eax
f0108512:	ff 75 f4             	pushl  -0xc(%ebp)
f0108515:	68 80 67 13 f0       	push   $0xf0136780
f010851a:	e8 ef 87 ff ff       	call   f0100d0e <cprintf>
f010851f:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108522:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108525:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108528:	89 d0                	mov    %edx,%eax
f010852a:	01 c0                	add    %eax,%eax
f010852c:	01 d0                	add    %edx,%eax
f010852e:	c1 e0 03             	shl    $0x3,%eax
f0108531:	01 c8                	add    %ecx,%eax
f0108533:	05 84 00 00 00       	add    $0x84,%eax
f0108538:	8b 18                	mov    (%eax),%ebx
f010853a:	8b 45 08             	mov    0x8(%ebp),%eax
f010853d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108540:	83 ec 08             	sub    $0x8,%esp
f0108543:	ff 75 f0             	pushl  -0x10(%ebp)
f0108546:	50                   	push   %eax
f0108547:	e8 43 f9 ff ff       	call   f0107e8f <pd_is_table_used>
f010854c:	83 c4 10             	add    $0x10,%esp
f010854f:	83 ec 04             	sub    $0x4,%esp
f0108552:	53                   	push   %ebx
f0108553:	50                   	push   %eax
f0108554:	68 98 67 13 f0       	push   $0xf0136798
f0108559:	e8 b0 87 ff ff       	call   f0100d0e <cprintf>
f010855e:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108561:	8b 45 08             	mov    0x8(%ebp),%eax
f0108564:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010856a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010856d:	75 10                	jne    f010857f <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f010856f:	83 ec 0c             	sub    $0xc,%esp
f0108572:	68 3b 67 13 f0       	push   $0xf013673b
f0108577:	e8 92 87 ff ff       	call   f0100d0e <cprintf>
f010857c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010857f:	83 ec 0c             	sub    $0xc,%esp
f0108582:	68 e0 66 13 f0       	push   $0xf01366e0
f0108587:	e8 82 87 ff ff       	call   f0100d0e <cprintf>
f010858c:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010858f:	ff 45 f4             	incl   -0xc(%ebp)
f0108592:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108596:	0f 86 e6 fe ff ff    	jbe    f0108482 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010859c:	90                   	nop
f010859d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01085a0:	c9                   	leave  
f01085a1:	c3                   	ret    

f01085a2 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f01085a2:	55                   	push   %ebp
f01085a3:	89 e5                	mov    %esp,%ebp
f01085a5:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01085a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01085af:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f01085b6:	eb 20                	jmp    f01085d8 <env_table_ws_get_size+0x36>
f01085b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01085be:	89 d0                	mov    %edx,%eax
f01085c0:	01 c0                	add    %eax,%eax
f01085c2:	01 d0                	add    %edx,%eax
f01085c4:	c1 e0 03             	shl    $0x3,%eax
f01085c7:	01 c8                	add    %ecx,%eax
f01085c9:	83 e8 80             	sub    $0xffffff80,%eax
f01085cc:	8a 00                	mov    (%eax),%al
f01085ce:	84 c0                	test   %al,%al
f01085d0:	75 03                	jne    f01085d5 <env_table_ws_get_size+0x33>
f01085d2:	ff 45 f8             	incl   -0x8(%ebp)
f01085d5:	ff 45 fc             	incl   -0x4(%ebp)
f01085d8:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01085dc:	7e da                	jle    f01085b8 <env_table_ws_get_size+0x16>
	return counter;
f01085de:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01085e1:	c9                   	leave  
f01085e2:	c3                   	ret    

f01085e3 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01085e3:	55                   	push   %ebp
f01085e4:	89 e5                	mov    %esp,%ebp
f01085e6:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01085e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01085f0:	eb 4c                	jmp    f010863e <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01085f2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085f8:	89 d0                	mov    %edx,%eax
f01085fa:	01 c0                	add    %eax,%eax
f01085fc:	01 d0                	add    %edx,%eax
f01085fe:	c1 e0 03             	shl    $0x3,%eax
f0108601:	01 c8                	add    %ecx,%eax
f0108603:	83 c0 7c             	add    $0x7c,%eax
f0108606:	8b 00                	mov    (%eax),%eax
f0108608:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010860b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010860e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108613:	89 c2                	mov    %eax,%edx
f0108615:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108618:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010861b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010861e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108623:	39 c2                	cmp    %eax,%edx
f0108625:	75 14                	jne    f010863b <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108627:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010862a:	83 ec 08             	sub    $0x8,%esp
f010862d:	50                   	push   %eax
f010862e:	ff 75 08             	pushl  0x8(%ebp)
f0108631:	e8 b8 00 00 00       	call   f01086ee <env_table_ws_clear_entry>
f0108636:	83 c4 10             	add    $0x10,%esp
			break;
f0108639:	eb 09                	jmp    f0108644 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010863b:	ff 45 f4             	incl   -0xc(%ebp)
f010863e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108642:	7e ae                	jle    f01085f2 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108644:	90                   	nop
f0108645:	c9                   	leave  
f0108646:	c3                   	ret    

f0108647 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108647:	55                   	push   %ebp
f0108648:	89 e5                	mov    %esp,%ebp
f010864a:	53                   	push   %ebx
f010864b:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010864e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108652:	76 19                	jbe    f010866d <env_table_ws_set_entry+0x26>
f0108654:	68 bc 67 13 f0       	push   $0xf01367bc
f0108659:	68 e2 65 13 f0       	push   $0xf01365e2
f010865e:	68 b6 00 00 00       	push   $0xb6
f0108663:	68 f8 65 13 f0       	push   $0xf01365f8
f0108668:	e8 98 7b ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010866d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108674:	76 19                	jbe    f010868f <env_table_ws_set_entry+0x48>
f0108676:	68 18 66 13 f0       	push   $0xf0136618
f010867b:	68 e2 65 13 f0       	push   $0xf01365e2
f0108680:	68 b7 00 00 00       	push   $0xb7
f0108685:	68 f8 65 13 f0       	push   $0xf01365f8
f010868a:	e8 76 7b ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010868f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108692:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108695:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108698:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010869d:	89 c1                	mov    %eax,%ecx
f010869f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01086a2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086a5:	89 d0                	mov    %edx,%eax
f01086a7:	01 c0                	add    %eax,%eax
f01086a9:	01 d0                	add    %edx,%eax
f01086ab:	c1 e0 03             	shl    $0x3,%eax
f01086ae:	01 d8                	add    %ebx,%eax
f01086b0:	83 c0 7c             	add    $0x7c,%eax
f01086b3:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f01086b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086bb:	89 d0                	mov    %edx,%eax
f01086bd:	01 c0                	add    %eax,%eax
f01086bf:	01 d0                	add    %edx,%eax
f01086c1:	c1 e0 03             	shl    $0x3,%eax
f01086c4:	01 c8                	add    %ecx,%eax
f01086c6:	83 e8 80             	sub    $0xffffff80,%eax
f01086c9:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01086cc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086cf:	8b 55 0c             	mov    0xc(%ebp),%edx
f01086d2:	89 d0                	mov    %edx,%eax
f01086d4:	01 c0                	add    %eax,%eax
f01086d6:	01 d0                	add    %edx,%eax
f01086d8:	c1 e0 03             	shl    $0x3,%eax
f01086db:	01 c8                	add    %ecx,%eax
f01086dd:	05 84 00 00 00       	add    $0x84,%eax
f01086e2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01086e8:	90                   	nop
}
f01086e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01086ec:	c9                   	leave  
f01086ed:	c3                   	ret    

f01086ee <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01086ee:	55                   	push   %ebp
f01086ef:	89 e5                	mov    %esp,%ebp
f01086f1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086f4:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086f8:	76 19                	jbe    f0108713 <env_table_ws_clear_entry+0x25>
f01086fa:	68 bc 67 13 f0       	push   $0xf01367bc
f01086ff:	68 e2 65 13 f0       	push   $0xf01365e2
f0108704:	68 c2 00 00 00       	push   $0xc2
f0108709:	68 f8 65 13 f0       	push   $0xf01365f8
f010870e:	e8 f2 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108713:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108716:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108719:	89 d0                	mov    %edx,%eax
f010871b:	01 c0                	add    %eax,%eax
f010871d:	01 d0                	add    %edx,%eax
f010871f:	c1 e0 03             	shl    $0x3,%eax
f0108722:	01 c8                	add    %ecx,%eax
f0108724:	83 c0 7c             	add    $0x7c,%eax
f0108727:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010872d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108730:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108733:	89 d0                	mov    %edx,%eax
f0108735:	01 c0                	add    %eax,%eax
f0108737:	01 d0                	add    %edx,%eax
f0108739:	c1 e0 03             	shl    $0x3,%eax
f010873c:	01 c8                	add    %ecx,%eax
f010873e:	83 e8 80             	sub    $0xffffff80,%eax
f0108741:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108744:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108747:	8b 55 0c             	mov    0xc(%ebp),%edx
f010874a:	89 d0                	mov    %edx,%eax
f010874c:	01 c0                	add    %eax,%eax
f010874e:	01 d0                	add    %edx,%eax
f0108750:	c1 e0 03             	shl    $0x3,%eax
f0108753:	01 c8                	add    %ecx,%eax
f0108755:	05 84 00 00 00       	add    $0x84,%eax
f010875a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108760:	90                   	nop
f0108761:	c9                   	leave  
f0108762:	c3                   	ret    

f0108763 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108763:	55                   	push   %ebp
f0108764:	89 e5                	mov    %esp,%ebp
f0108766:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108769:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010876d:	76 19                	jbe    f0108788 <env_table_ws_get_virtual_address+0x25>
f010876f:	68 bc 67 13 f0       	push   $0xf01367bc
f0108774:	68 e2 65 13 f0       	push   $0xf01365e2
f0108779:	68 ca 00 00 00       	push   $0xca
f010877e:	68 f8 65 13 f0       	push   $0xf01365f8
f0108783:	e8 7d 7a ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108788:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010878b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010878e:	89 d0                	mov    %edx,%eax
f0108790:	01 c0                	add    %eax,%eax
f0108792:	01 d0                	add    %edx,%eax
f0108794:	c1 e0 03             	shl    $0x3,%eax
f0108797:	01 c8                	add    %ecx,%eax
f0108799:	83 c0 7c             	add    $0x7c,%eax
f010879c:	8b 00                	mov    (%eax),%eax
f010879e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01087a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087a4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f01087a9:	c9                   	leave  
f01087aa:	c3                   	ret    

f01087ab <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01087ab:	55                   	push   %ebp
f01087ac:	89 e5                	mov    %esp,%ebp
f01087ae:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01087b1:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01087b5:	76 19                	jbe    f01087d0 <env_table_ws_get_time_stamp+0x25>
f01087b7:	68 bc 67 13 f0       	push   $0xf01367bc
f01087bc:	68 e2 65 13 f0       	push   $0xf01365e2
f01087c1:	68 d1 00 00 00       	push   $0xd1
f01087c6:	68 f8 65 13 f0       	push   $0xf01365f8
f01087cb:	e8 35 7a ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01087d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087d3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087d6:	89 d0                	mov    %edx,%eax
f01087d8:	01 c0                	add    %eax,%eax
f01087da:	01 d0                	add    %edx,%eax
f01087dc:	c1 e0 03             	shl    $0x3,%eax
f01087df:	01 c8                	add    %ecx,%eax
f01087e1:	05 84 00 00 00       	add    $0x84,%eax
f01087e6:	8b 00                	mov    (%eax),%eax
}
f01087e8:	c9                   	leave  
f01087e9:	c3                   	ret    

f01087ea <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01087ea:	55                   	push   %ebp
f01087eb:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01087ed:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087f3:	89 d0                	mov    %edx,%eax
f01087f5:	01 c0                	add    %eax,%eax
f01087f7:	01 d0                	add    %edx,%eax
f01087f9:	c1 e0 03             	shl    $0x3,%eax
f01087fc:	01 c8                	add    %ecx,%eax
f01087fe:	83 e8 80             	sub    $0xffffff80,%eax
f0108801:	8a 00                	mov    (%eax),%al
f0108803:	0f b6 c0             	movzbl %al,%eax
}
f0108806:	5d                   	pop    %ebp
f0108807:	c3                   	ret    

f0108808 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108808:	55                   	push   %ebp
f0108809:	89 e5                	mov    %esp,%ebp
f010880b:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010880e:	83 ec 04             	sub    $0x4,%esp
f0108811:	68 f0 67 13 f0       	push   $0xf01367f0
f0108816:	68 e5 00 00 00       	push   $0xe5
f010881b:	68 f8 65 13 f0       	push   $0xf01365f8
f0108820:	e8 e0 79 ff ff       	call   f0100205 <_panic>

f0108825 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108825:	55                   	push   %ebp
f0108826:	89 e5                	mov    %esp,%ebp
f0108828:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010882b:	83 ec 04             	sub    $0x4,%esp
f010882e:	68 1c 68 13 f0       	push   $0xf013681c
f0108833:	68 ec 00 00 00       	push   $0xec
f0108838:	68 f8 65 13 f0       	push   $0xf01365f8
f010883d:	e8 c3 79 ff ff       	call   f0100205 <_panic>

f0108842 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108842:	55                   	push   %ebp
f0108843:	89 e5                	mov    %esp,%ebp
f0108845:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108848:	83 ec 04             	sub    $0x4,%esp
f010884b:	68 4c 68 13 f0       	push   $0xf013684c
f0108850:	68 f3 00 00 00       	push   $0xf3
f0108855:	68 f8 65 13 f0       	push   $0xf01365f8
f010885a:	e8 a6 79 ff ff       	call   f0100205 <_panic>

f010885f <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f010885f:	55                   	push   %ebp
f0108860:	89 e5                	mov    %esp,%ebp
f0108862:	83 ec 58             	sub    $0x58,%esp

	ROUNDDOWN(dest_va,PAGE_SIZE);
f0108865:	8b 45 10             	mov    0x10(%ebp),%eax
f0108868:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ROUNDDOWN(source_va,PAGE_SIZE);
f010886b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010886e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(int i=0;i<num_of_pages;i++)
f0108871:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108878:	eb 42                	jmp    f01088bc <cut_paste_pages+0x5d>
	{

		uint32 final_dest_va=dest_va+i*PAGE_SIZE;
f010887a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010887d:	c1 e0 0c             	shl    $0xc,%eax
f0108880:	89 c2                	mov    %eax,%edx
f0108882:	8b 45 10             	mov    0x10(%ebp),%eax
f0108885:	01 d0                	add    %edx,%eax
f0108887:	89 45 e0             	mov    %eax,-0x20(%ebp)
		uint32 *ptr_page_table=NULL;
f010888a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,final_dest_va,&ptr_page_table);
f0108891:	83 ec 04             	sub    $0x4,%esp
f0108894:	8d 45 bc             	lea    -0x44(%ebp),%eax
f0108897:	50                   	push   %eax
f0108898:	ff 75 e0             	pushl  -0x20(%ebp)
f010889b:	ff 75 08             	pushl  0x8(%ebp)
f010889e:	e8 c2 e4 ff ff       	call   f0106d65 <get_frame_info>
f01088a3:	83 c4 10             	add    $0x10,%esp
f01088a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(ptr_frame_info!=NULL)
f01088a9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01088ad:	74 0a                	je     f01088b9 <cut_paste_pages+0x5a>
		{
			return -1;
f01088af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01088b4:	e9 54 01 00 00       	jmp    f0108a0d <cut_paste_pages+0x1ae>
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{

	ROUNDDOWN(dest_va,PAGE_SIZE);
	ROUNDDOWN(source_va,PAGE_SIZE);
	for(int i=0;i<num_of_pages;i++)
f01088b9:	ff 45 f4             	incl   -0xc(%ebp)
f01088bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01088bf:	3b 45 14             	cmp    0x14(%ebp),%eax
f01088c2:	72 b6                	jb     f010887a <cut_paste_pages+0x1b>
		{
			return -1;
		}

	}
	for(int i=0;i<num_of_pages;i++)
f01088c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01088cb:	eb 49                	jmp    f0108916 <cut_paste_pages+0xb7>
		{

		   uint32 final_dest_va=dest_va+i*PAGE_SIZE;
f01088cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01088d0:	c1 e0 0c             	shl    $0xc,%eax
f01088d3:	89 c2                	mov    %eax,%edx
f01088d5:	8b 45 10             	mov    0x10(%ebp),%eax
f01088d8:	01 d0                	add    %edx,%eax
f01088da:	89 45 d8             	mov    %eax,-0x28(%ebp)
			uint32 *ptr_page_table=NULL;
f01088dd:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
			int ret =get_page_table(page_directory,final_dest_va,&ptr_page_table);
f01088e4:	83 ec 04             	sub    $0x4,%esp
f01088e7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01088ea:	50                   	push   %eax
f01088eb:	ff 75 d8             	pushl  -0x28(%ebp)
f01088ee:	ff 75 08             	pushl  0x8(%ebp)
f01088f1:	e8 1a e1 ff ff       	call   f0106a10 <get_page_table>
f01088f6:	83 c4 10             	add    $0x10,%esp
f01088f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
				if(ret ==TABLE_NOT_EXIST)
f01088fc:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0108900:	75 11                	jne    f0108913 <cut_paste_pages+0xb4>
				{
					create_page_table(page_directory,final_dest_va);
f0108902:	83 ec 08             	sub    $0x8,%esp
f0108905:	ff 75 d8             	pushl  -0x28(%ebp)
f0108908:	ff 75 08             	pushl  0x8(%ebp)
f010890b:	e8 56 e2 ff ff       	call   f0106b66 <create_page_table>
f0108910:	83 c4 10             	add    $0x10,%esp
		{
			return -1;
		}

	}
	for(int i=0;i<num_of_pages;i++)
f0108913:	ff 45 f0             	incl   -0x10(%ebp)
f0108916:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108919:	3b 45 14             	cmp    0x14(%ebp),%eax
f010891c:	72 af                	jb     f01088cd <cut_paste_pages+0x6e>
					create_page_table(page_directory,final_dest_va);
				}

		}

	for(int i=0;i<num_of_pages;i++)
f010891e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108925:	e9 d2 00 00 00       	jmp    f01089fc <cut_paste_pages+0x19d>
	{
			uint32 final_dest_va=dest_va+i*PAGE_SIZE;
f010892a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010892d:	c1 e0 0c             	shl    $0xc,%eax
f0108930:	89 c2                	mov    %eax,%edx
f0108932:	8b 45 10             	mov    0x10(%ebp),%eax
f0108935:	01 d0                	add    %edx,%eax
f0108937:	89 45 d0             	mov    %eax,-0x30(%ebp)
			uint32 final_source_va=source_va+i*PAGE_SIZE;
f010893a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010893d:	c1 e0 0c             	shl    $0xc,%eax
f0108940:	89 c2                	mov    %eax,%edx
f0108942:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108945:	01 d0                	add    %edx,%eax
f0108947:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 perm_source=pt_get_page_permissions(page_directory,final_source_va);
f010894a:	83 ec 08             	sub    $0x8,%esp
f010894d:	ff 75 cc             	pushl  -0x34(%ebp)
f0108950:	ff 75 08             	pushl  0x8(%ebp)
f0108953:	e8 f0 f3 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0108958:	83 c4 10             	add    $0x10,%esp
f010895b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			uint32 perm_dest=pt_get_page_permissions(page_directory,final_dest_va);
f010895e:	83 ec 08             	sub    $0x8,%esp
f0108961:	ff 75 d0             	pushl  -0x30(%ebp)
f0108964:	ff 75 08             	pushl  0x8(%ebp)
f0108967:	e8 dc f3 ff ff       	call   f0107d48 <pt_get_page_permissions>
f010896c:	83 c4 10             	add    $0x10,%esp
f010896f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			uint32 *ptr_page_table1=NULL;
f0108972:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
			uint32 *ptr_page_table2=NULL;
f0108979:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
			int ret =get_page_table(page_directory,final_source_va,&ptr_page_table1);
f0108980:	83 ec 04             	sub    $0x4,%esp
f0108983:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0108986:	50                   	push   %eax
f0108987:	ff 75 cc             	pushl  -0x34(%ebp)
f010898a:	ff 75 08             	pushl  0x8(%ebp)
f010898d:	e8 7e e0 ff ff       	call   f0106a10 <get_page_table>
f0108992:	83 c4 10             	add    $0x10,%esp
f0108995:	89 45 c0             	mov    %eax,-0x40(%ebp)
			get_page_table(page_directory,final_dest_va,&ptr_page_table2);
f0108998:	83 ec 04             	sub    $0x4,%esp
f010899b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010899e:	50                   	push   %eax
f010899f:	ff 75 d0             	pushl  -0x30(%ebp)
f01089a2:	ff 75 08             	pushl  0x8(%ebp)
f01089a5:	e8 66 e0 ff ff       	call   f0106a10 <get_page_table>
f01089aa:	83 c4 10             	add    $0x10,%esp
			ptr_page_table2[PTX(final_dest_va)]=ptr_page_table1[PTX(final_source_va)];
f01089ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01089b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01089b3:	c1 ea 0c             	shr    $0xc,%edx
f01089b6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01089bc:	c1 e2 02             	shl    $0x2,%edx
f01089bf:	01 c2                	add    %eax,%edx
f01089c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01089c4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01089c7:	c1 e9 0c             	shr    $0xc,%ecx
f01089ca:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01089d0:	c1 e1 02             	shl    $0x2,%ecx
f01089d3:	01 c8                	add    %ecx,%eax
f01089d5:	8b 00                	mov    (%eax),%eax
f01089d7:	89 02                	mov    %eax,(%edx)
			perm_dest=perm_source;
f01089d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01089dc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_page_table1[PTX(final_source_va)]=0;
f01089df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01089e2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01089e5:	c1 ea 0c             	shr    $0xc,%edx
f01089e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01089ee:	c1 e2 02             	shl    $0x2,%edx
f01089f1:	01 d0                	add    %edx,%eax
f01089f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					create_page_table(page_directory,final_dest_va);
				}

		}

	for(int i=0;i<num_of_pages;i++)
f01089f9:	ff 45 ec             	incl   -0x14(%ebp)
f01089fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089ff:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108a02:	0f 82 22 ff ff ff    	jb     f010892a <cut_paste_pages+0xcb>
			ptr_page_table1[PTX(final_source_va)]=0;


	}

	return 0;
f0108a08:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a0d:	c9                   	leave  
f0108a0e:	c3                   	ret    

f0108a0f <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108a0f:	55                   	push   %ebp
f0108a10:	89 e5                	mov    %esp,%ebp
f0108a12:	83 ec 68             	sub    $0x68,%esp

    uint32 source_va1=source_va;
f0108a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108a18:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    uint32 dest_va1=dest_va;
f0108a1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
  	uint32 final_source_va=source_va+size;
f0108a21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a24:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a27:	01 d0                	add    %edx,%eax
f0108a29:	89 45 cc             	mov    %eax,-0x34(%ebp)
  	uint32 final_dest_va=dest_va+size;
f0108a2c:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a2f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a32:	01 d0                	add    %edx,%eax
f0108a34:	89 45 c8             	mov    %eax,-0x38(%ebp)


	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108a37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108a3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a3d:	eb 5b                	jmp    f0108a9a <copy_paste_chunk+0x8b>
	{


		uint32 *ptr_page_table=NULL;
f0108a3f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
		int perms=pt_get_page_permissions(page_directory,i);
f0108a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a49:	83 ec 08             	sub    $0x8,%esp
f0108a4c:	50                   	push   %eax
f0108a4d:	ff 75 08             	pushl  0x8(%ebp)
f0108a50:	e8 f3 f2 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0108a55:	83 c4 10             	add    $0x10,%esp
f0108a58:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,i,&ptr_page_table);
f0108a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	8d 55 a8             	lea    -0x58(%ebp),%edx
f0108a64:	52                   	push   %edx
f0108a65:	50                   	push   %eax
f0108a66:	ff 75 08             	pushl  0x8(%ebp)
f0108a69:	e8 f7 e2 ff ff       	call   f0106d65 <get_frame_info>
f0108a6e:	83 c4 10             	add    $0x10,%esp
f0108a71:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if(ptr_frame_info!=NULL)
f0108a74:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0108a78:	74 19                	je     f0108a93 <copy_paste_chunk+0x84>
		{
			uint32 op1=perms & PERM_WRITEABLE;
f0108a7a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108a7d:	83 e0 02             	and    $0x2,%eax
f0108a80:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if(op1 !=PERM_WRITEABLE)
f0108a83:	83 7d bc 02          	cmpl   $0x2,-0x44(%ebp)
f0108a87:	74 0a                	je     f0108a93 <copy_paste_chunk+0x84>
			{
				return -1;
f0108a89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108a8e:	e9 6e 01 00 00       	jmp    f0108c01 <copy_paste_chunk+0x1f2>
    uint32 dest_va1=dest_va;
  	uint32 final_source_va=source_va+size;
  	uint32 final_dest_va=dest_va+size;


	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108a93:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a9d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0108aa0:	72 9d                	jb     f0108a3f <copy_paste_chunk+0x30>

		}


	}
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108aa2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108aa8:	eb 3f                	jmp    f0108ae9 <copy_paste_chunk+0xda>
		{


			uint32 *ptr_page_table=NULL;
f0108aaa:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
			int ret =get_page_table(page_directory,i,&ptr_page_table);
f0108ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ab4:	83 ec 04             	sub    $0x4,%esp
f0108ab7:	8d 55 a4             	lea    -0x5c(%ebp),%edx
f0108aba:	52                   	push   %edx
f0108abb:	50                   	push   %eax
f0108abc:	ff 75 08             	pushl  0x8(%ebp)
f0108abf:	e8 4c df ff ff       	call   f0106a10 <get_page_table>
f0108ac4:	83 c4 10             	add    $0x10,%esp
f0108ac7:	89 45 b8             	mov    %eax,-0x48(%ebp)
				if(ret ==TABLE_NOT_EXIST)
f0108aca:	83 7d b8 01          	cmpl   $0x1,-0x48(%ebp)
f0108ace:	75 12                	jne    f0108ae2 <copy_paste_chunk+0xd3>
				{
					create_page_table(page_directory,i);
f0108ad0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ad3:	83 ec 08             	sub    $0x8,%esp
f0108ad6:	50                   	push   %eax
f0108ad7:	ff 75 08             	pushl  0x8(%ebp)
f0108ada:	e8 87 e0 ff ff       	call   f0106b66 <create_page_table>
f0108adf:	83 c4 10             	add    $0x10,%esp

		}


	}
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108ae2:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108ae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108aec:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0108aef:	72 b9                	jb     f0108aaa <copy_paste_chunk+0x9b>
				{
					create_page_table(page_directory,i);
				}

		}
	uint32 source1=source_va1;
f0108af1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108af4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108af7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108afa:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108afd:	e9 bf 00 00 00       	jmp    f0108bc1 <copy_paste_chunk+0x1b2>
	{
		       int perms=pt_get_page_permissions(page_directory,i);
f0108b02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b05:	83 ec 08             	sub    $0x8,%esp
f0108b08:	50                   	push   %eax
f0108b09:	ff 75 08             	pushl  0x8(%ebp)
f0108b0c:	e8 37 f2 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0108b11:	83 c4 10             	add    $0x10,%esp
f0108b14:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				int perms_source=pt_get_page_permissions(page_directory,source1);
f0108b17:	83 ec 08             	sub    $0x8,%esp
f0108b1a:	ff 75 ec             	pushl  -0x14(%ebp)
f0108b1d:	ff 75 08             	pushl  0x8(%ebp)
f0108b20:	e8 23 f2 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0108b25:	83 c4 10             	add    $0x10,%esp
f0108b28:	89 45 b4             	mov    %eax,-0x4c(%ebp)
				uint32 *ptr_page_table1=NULL;
f0108b2b:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
				int ret1 =get_page_table(page_directory,i,&ptr_page_table1);
f0108b32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b35:	83 ec 04             	sub    $0x4,%esp
f0108b38:	8d 55 a0             	lea    -0x60(%ebp),%edx
f0108b3b:	52                   	push   %edx
f0108b3c:	50                   	push   %eax
f0108b3d:	ff 75 08             	pushl  0x8(%ebp)
f0108b40:	e8 cb de ff ff       	call   f0106a10 <get_page_table>
f0108b45:	83 c4 10             	add    $0x10,%esp
f0108b48:	89 45 b0             	mov    %eax,-0x50(%ebp)
				struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,i,&ptr_page_table1);
f0108b4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b4e:	83 ec 04             	sub    $0x4,%esp
f0108b51:	8d 55 a0             	lea    -0x60(%ebp),%edx
f0108b54:	52                   	push   %edx
f0108b55:	50                   	push   %eax
f0108b56:	ff 75 08             	pushl  0x8(%ebp)
f0108b59:	e8 07 e2 ff ff       	call   f0106d65 <get_frame_info>
f0108b5e:	83 c4 10             	add    $0x10,%esp
f0108b61:	89 45 9c             	mov    %eax,-0x64(%ebp)
				if(ptr_frame_info==NULL)
f0108b64:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108b67:	85 c0                	test   %eax,%eax
f0108b69:	75 48                	jne    f0108bb3 <copy_paste_chunk+0x1a4>
				{
						   allocate_frame(&ptr_frame_info);
f0108b6b:	83 ec 0c             	sub    $0xc,%esp
f0108b6e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0108b71:	50                   	push   %eax
f0108b72:	e8 da dc ff ff       	call   f0106851 <allocate_frame>
f0108b77:	83 c4 10             	add    $0x10,%esp
						 uint32 op2=perms_source & PERM_USER;
f0108b7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108b7d:	83 e0 04             	and    $0x4,%eax
f0108b80:	89 45 ac             	mov    %eax,-0x54(%ebp)

						 if(op2==PERM_USER)
f0108b83:	83 7d ac 04          	cmpl   $0x4,-0x54(%ebp)
f0108b87:	75 06                	jne    f0108b8f <copy_paste_chunk+0x180>
						 {
							 perms=perms | PERM_USER;
f0108b89:	83 4d e4 04          	orl    $0x4,-0x1c(%ebp)
f0108b8d:	eb 0a                	jmp    f0108b99 <copy_paste_chunk+0x18a>
						 }

						 else if(op2 != PERM_USER)
f0108b8f:	83 7d ac 04          	cmpl   $0x4,-0x54(%ebp)
f0108b93:	74 04                	je     f0108b99 <copy_paste_chunk+0x18a>

						 {
							 perms=perms & (~PERM_USER);
f0108b95:	83 65 e4 fb          	andl   $0xfffffffb,-0x1c(%ebp)
						 }

							perms=perms |PERM_WRITEABLE;
f0108b99:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)

							map_frame(page_directory,ptr_frame_info,i,perms);
f0108b9d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108ba0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108ba3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108ba6:	52                   	push   %edx
f0108ba7:	50                   	push   %eax
f0108ba8:	ff 75 08             	pushl  0x8(%ebp)
f0108bab:	e8 f0 e0 ff ff       	call   f0106ca0 <map_frame>
f0108bb0:	83 c4 10             	add    $0x10,%esp

				}

				source1+=PAGE_SIZE;
f0108bb3:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
				}

		}
	uint32 source1=source_va1;

	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108bba:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108bc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108bc4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0108bc7:	0f 82 35 ff ff ff    	jb     f0108b02 <copy_paste_chunk+0xf3>
				}

				source1+=PAGE_SIZE;

	}
	uint8 * ptr_source=(uint8 *)source_va1;
f0108bcd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108bd0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint8 * ptr_dest=(uint8 *)dest_va1;
f0108bd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(int i=dest_va1;i<final_dest_va;i++)
f0108bd9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bdc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108bdf:	eb 13                	jmp    f0108bf4 <copy_paste_chunk+0x1e5>
	{
		*ptr_dest=*ptr_source;
f0108be1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108be4:	8a 10                	mov    (%eax),%dl
f0108be6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108be9:	88 10                	mov    %dl,(%eax)
		ptr_dest++;
f0108beb:	ff 45 dc             	incl   -0x24(%ebp)
		ptr_source++;
f0108bee:	ff 45 e0             	incl   -0x20(%ebp)
				source1+=PAGE_SIZE;

	}
	uint8 * ptr_source=(uint8 *)source_va1;
	uint8 * ptr_dest=(uint8 *)dest_va1;
	for(int i=dest_va1;i<final_dest_va;i++)
f0108bf1:	ff 45 d8             	incl   -0x28(%ebp)
f0108bf4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108bf7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0108bfa:	72 e5                	jb     f0108be1 <copy_paste_chunk+0x1d2>
		ptr_dest++;
		ptr_source++;
	}


     return 0;
f0108bfc:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0108c01:	c9                   	leave  
f0108c02:	c3                   	ret    

f0108c03 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108c03:	55                   	push   %ebp
f0108c04:	89 e5                	mov    %esp,%ebp
f0108c06:	83 ec 68             	sub    $0x68,%esp
	 int num_of_pages=size/PAGE_SIZE;
f0108c09:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c0c:	c1 e8 0c             	shr    $0xc,%eax
f0108c0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	 uint32 source_va1=ROUNDDOWN(source_va,PAGE_SIZE);
f0108c12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c15:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108c18:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c20:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 uint32 dest_va1=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108c23:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c26:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108c29:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c31:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	 uint32 final_source_va=ROUNDUP(source_va+size,PAGE_SIZE);
f0108c34:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0108c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c3e:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c41:	01 c2                	add    %eax,%edx
f0108c43:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c46:	01 d0                	add    %edx,%eax
f0108c48:	48                   	dec    %eax
f0108c49:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108c4c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c54:	f7 75 d0             	divl   -0x30(%ebp)
f0108c57:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c5a:	29 d0                	sub    %edx,%eax
f0108c5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	 uint32 final_dest_va=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108c5f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0108c66:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c69:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c6c:	01 c2                	add    %eax,%edx
f0108c6e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108c71:	01 d0                	add    %edx,%eax
f0108c73:	48                   	dec    %eax
f0108c74:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0108c77:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108c7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c7f:	f7 75 c4             	divl   -0x3c(%ebp)
f0108c82:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108c85:	29 d0                	sub    %edx,%eax
f0108c87:	89 45 bc             	mov    %eax,-0x44(%ebp)


	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108c8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108c8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108c90:	eb 37                	jmp    f0108cc9 <share_chunk+0xc6>
	{


		uint32 *ptr_page_table=NULL;
f0108c92:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
		struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,i,&ptr_page_table);
f0108c99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c9c:	83 ec 04             	sub    $0x4,%esp
f0108c9f:	8d 55 a8             	lea    -0x58(%ebp),%edx
f0108ca2:	52                   	push   %edx
f0108ca3:	50                   	push   %eax
f0108ca4:	ff 75 08             	pushl  0x8(%ebp)
f0108ca7:	e8 b9 e0 ff ff       	call   f0106d65 <get_frame_info>
f0108cac:	83 c4 10             	add    $0x10,%esp
f0108caf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if(ptr_frame_info!=NULL)
f0108cb2:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0108cb6:	74 0a                	je     f0108cc2 <share_chunk+0xbf>
		{
			return -1;
f0108cb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108cbd:	e9 d4 00 00 00       	jmp    f0108d96 <share_chunk+0x193>
	 uint32 dest_va1=ROUNDDOWN(dest_va,PAGE_SIZE);
	 uint32 final_source_va=ROUNDUP(source_va+size,PAGE_SIZE);
	 uint32 final_dest_va=ROUNDUP(dest_va+size,PAGE_SIZE);


	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108cc2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ccc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0108ccf:	72 c1                	jb     f0108c92 <share_chunk+0x8f>
		{
			return -1;
		}

	}
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108cd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108cd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108cd7:	eb 3f                	jmp    f0108d18 <share_chunk+0x115>
		{


			uint32 *ptr_page_table=NULL;
f0108cd9:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
			int ret =get_page_table(page_directory,i,&ptr_page_table);
f0108ce0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ce3:	83 ec 04             	sub    $0x4,%esp
f0108ce6:	8d 55 a4             	lea    -0x5c(%ebp),%edx
f0108ce9:	52                   	push   %edx
f0108cea:	50                   	push   %eax
f0108ceb:	ff 75 08             	pushl  0x8(%ebp)
f0108cee:	e8 1d dd ff ff       	call   f0106a10 <get_page_table>
f0108cf3:	83 c4 10             	add    $0x10,%esp
f0108cf6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
				if(ret ==TABLE_NOT_EXIST)
f0108cf9:	83 7d b4 01          	cmpl   $0x1,-0x4c(%ebp)
f0108cfd:	75 12                	jne    f0108d11 <share_chunk+0x10e>
				{
					create_page_table(page_directory,i);
f0108cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d02:	83 ec 08             	sub    $0x8,%esp
f0108d05:	50                   	push   %eax
f0108d06:	ff 75 08             	pushl  0x8(%ebp)
f0108d09:	e8 58 de ff ff       	call   f0106b66 <create_page_table>
f0108d0e:	83 c4 10             	add    $0x10,%esp
		{
			return -1;
		}

	}
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108d11:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d1b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0108d1e:	72 b9                	jb     f0108cd9 <share_chunk+0xd6>
				{
					create_page_table(page_directory,i);
				}

		}
	uint32 source=source_va1;
f0108d20:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108d23:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108d26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d29:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108d2c:	eb 5b                	jmp    f0108d89 <share_chunk+0x186>
	{
		uint32 *ptr_page_table1=NULL;
f0108d2e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		int ret1 =get_page_table(page_directory,final_source_va,&ptr_page_table1);
f0108d35:	83 ec 04             	sub    $0x4,%esp
f0108d38:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0108d3b:	50                   	push   %eax
f0108d3c:	ff 75 c8             	pushl  -0x38(%ebp)
f0108d3f:	ff 75 08             	pushl  0x8(%ebp)
f0108d42:	e8 c9 dc ff ff       	call   f0106a10 <get_page_table>
f0108d47:	83 c4 10             	add    $0x10,%esp
f0108d4a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,source,&ptr_page_table1);
f0108d4d:	83 ec 04             	sub    $0x4,%esp
f0108d50:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0108d53:	50                   	push   %eax
f0108d54:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d57:	ff 75 08             	pushl  0x8(%ebp)
f0108d5a:	e8 06 e0 ff ff       	call   f0106d65 <get_frame_info>
f0108d5f:	83 c4 10             	add    $0x10,%esp
f0108d62:	89 45 ac             	mov    %eax,-0x54(%ebp)
		map_frame(page_directory,ptr_frame_info,i,perms);
f0108d65:	8b 55 18             	mov    0x18(%ebp),%edx
f0108d68:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d6b:	52                   	push   %edx
f0108d6c:	50                   	push   %eax
f0108d6d:	ff 75 ac             	pushl  -0x54(%ebp)
f0108d70:	ff 75 08             	pushl  0x8(%ebp)
f0108d73:	e8 28 df ff ff       	call   f0106ca0 <map_frame>
f0108d78:	83 c4 10             	add    $0x10,%esp
		source+=PAGE_SIZE;
f0108d7b:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
					create_page_table(page_directory,i);
				}

		}
	uint32 source=source_va1;
	for(int i=dest_va1;i<final_dest_va;i+=PAGE_SIZE)
f0108d82:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108d89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d8c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0108d8f:	72 9d                	jb     f0108d2e <share_chunk+0x12b>
		map_frame(page_directory,ptr_frame_info,i,perms);
		source+=PAGE_SIZE;

	}

	return 0;
f0108d91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108d96:	c9                   	leave  
f0108d97:	c3                   	ret    

f0108d98 <allocate_chunk>:

//===============================
// 4) ALLOCATE CHUNK IN RAM:
//===============================
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108d98:	55                   	push   %ebp
f0108d99:	89 e5                	mov    %esp,%ebp
f0108d9b:	83 ec 48             	sub    $0x48,%esp
	uint32 va1=ROUNDDOWN(va,PAGE_SIZE);
f0108d9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108da1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108da4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108da7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108dac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 final_va=ROUNDUP(va+size,PAGE_SIZE);
f0108daf:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108db6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108db9:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dbc:	01 c2                	add    %eax,%edx
f0108dbe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108dc1:	01 d0                	add    %edx,%eax
f0108dc3:	48                   	dec    %eax
f0108dc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108dc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108dca:	ba 00 00 00 00       	mov    $0x0,%edx
f0108dcf:	f7 75 e0             	divl   -0x20(%ebp)
f0108dd2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108dd5:	29 d0                	sub    %edx,%eax
f0108dd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108dda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108ddd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108de0:	eb 37                	jmp    f0108e19 <allocate_chunk+0x81>
	{
		       uint32 *ptr_page_table=NULL;
f0108de2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
				struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,i,&ptr_page_table);
f0108de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108dec:	83 ec 04             	sub    $0x4,%esp
f0108def:	8d 55 c8             	lea    -0x38(%ebp),%edx
f0108df2:	52                   	push   %edx
f0108df3:	50                   	push   %eax
f0108df4:	ff 75 08             	pushl  0x8(%ebp)
f0108df7:	e8 69 df ff ff       	call   f0106d65 <get_frame_info>
f0108dfc:	83 c4 10             	add    $0x10,%esp
f0108dff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
				if(ptr_frame_info!=NULL)
f0108e02:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0108e06:	74 0a                	je     f0108e12 <allocate_chunk+0x7a>
				{
					return -1;
f0108e08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108e0d:	e9 e8 00 00 00       	jmp    f0108efa <allocate_chunk+0x162>
//===============================
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
	uint32 va1=ROUNDDOWN(va,PAGE_SIZE);
	uint32 final_va=ROUNDUP(va+size,PAGE_SIZE);
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108e12:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e1c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108e1f:	72 c1                	jb     f0108de2 <allocate_chunk+0x4a>
				{
					return -1;
				}

	}
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108e21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e24:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108e27:	eb 3f                	jmp    f0108e68 <allocate_chunk+0xd0>
	{
		 uint32 *ptr_page_table=NULL;
f0108e29:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		 int ret =get_page_table(page_directory,i,&ptr_page_table);
f0108e30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e33:	83 ec 04             	sub    $0x4,%esp
f0108e36:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f0108e39:	52                   	push   %edx
f0108e3a:	50                   	push   %eax
f0108e3b:	ff 75 08             	pushl  0x8(%ebp)
f0108e3e:	e8 cd db ff ff       	call   f0106a10 <get_page_table>
f0108e43:	83 c4 10             	add    $0x10,%esp
f0108e46:	89 45 d0             	mov    %eax,-0x30(%ebp)
			if(ret ==TABLE_NOT_EXIST)
f0108e49:	83 7d d0 01          	cmpl   $0x1,-0x30(%ebp)
f0108e4d:	75 12                	jne    f0108e61 <allocate_chunk+0xc9>
			{
				create_page_table(page_directory,i);
f0108e4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e52:	83 ec 08             	sub    $0x8,%esp
f0108e55:	50                   	push   %eax
f0108e56:	ff 75 08             	pushl  0x8(%ebp)
f0108e59:	e8 08 dd ff ff       	call   f0106b66 <create_page_table>
f0108e5e:	83 c4 10             	add    $0x10,%esp
				{
					return -1;
				}

	}
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108e61:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e6b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108e6e:	72 b9                	jb     f0108e29 <allocate_chunk+0x91>
			{
				create_page_table(page_directory,i);
			}

	}
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108e70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e73:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108e76:	eb 75                	jmp    f0108eed <allocate_chunk+0x155>
	{
		uint32 *ptr_page_table=NULL;
f0108e78:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		get_page_table(page_directory,i,&ptr_page_table);
f0108e7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e82:	83 ec 04             	sub    $0x4,%esp
f0108e85:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0108e88:	52                   	push   %edx
f0108e89:	50                   	push   %eax
f0108e8a:	ff 75 08             	pushl  0x8(%ebp)
f0108e8d:	e8 7e db ff ff       	call   f0106a10 <get_page_table>
f0108e92:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *ptr_frame_info=get_frame_info(page_directory,i,&ptr_page_table);
f0108e95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e98:	83 ec 04             	sub    $0x4,%esp
f0108e9b:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0108e9e:	52                   	push   %edx
f0108e9f:	50                   	push   %eax
f0108ea0:	ff 75 08             	pushl  0x8(%ebp)
f0108ea3:	e8 bd de ff ff       	call   f0106d65 <get_frame_info>
f0108ea8:	83 c4 10             	add    $0x10,%esp
f0108eab:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int ret =allocate_frame(&ptr_frame_info);
f0108eae:	83 ec 0c             	sub    $0xc,%esp
f0108eb1:	8d 45 bc             	lea    -0x44(%ebp),%eax
f0108eb4:	50                   	push   %eax
f0108eb5:	e8 97 d9 ff ff       	call   f0106851 <allocate_frame>
f0108eba:	83 c4 10             	add    $0x10,%esp
f0108ebd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if(ret==0)
f0108ec0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f0108ec4:	75 17                	jne    f0108edd <allocate_chunk+0x145>
		 map_frame(page_directory,ptr_frame_info,i,perms);
f0108ec6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108ec9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ecc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108ecf:	51                   	push   %ecx
f0108ed0:	52                   	push   %edx
f0108ed1:	50                   	push   %eax
f0108ed2:	ff 75 08             	pushl  0x8(%ebp)
f0108ed5:	e8 c6 dd ff ff       	call   f0106ca0 <map_frame>
f0108eda:	83 c4 10             	add    $0x10,%esp
		ptr_frame_info->va=i;
f0108edd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108ee0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ee3:	89 50 0c             	mov    %edx,0xc(%eax)
			{
				create_page_table(page_directory,i);
			}

	}
	for(int i=va1;i<final_va;i+=PAGE_SIZE)
f0108ee6:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108eed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108ef0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108ef3:	72 83                	jb     f0108e78 <allocate_chunk+0xe0>
		 map_frame(page_directory,ptr_frame_info,i,perms);
		ptr_frame_info->va=i;

	}

 return 0;
f0108ef5:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0108efa:	c9                   	leave  
f0108efb:	c3                   	ret    

f0108efc <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108efc:	55                   	push   %ebp
f0108efd:	89 e5                	mov    %esp,%ebp
f0108eff:	83 ec 48             	sub    $0x48,%esp
	uint32 rsva = ROUNDDOWN(sva, PAGE_SIZE);
f0108f02:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f05:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108f08:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f10:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 reva = ROUNDUP(eva, PAGE_SIZE);
f0108f13:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0108f1a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f1d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f20:	01 d0                	add    %edx,%eax
f0108f22:	48                   	dec    %eax
f0108f23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108f26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f29:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f2e:	f7 75 d8             	divl   -0x28(%ebp)
f0108f31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f34:	29 d0                	sub    %edx,%eax
f0108f36:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 npages = 0, ntables = 0;
f0108f39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108f40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 *ptr_page_table1 = NULL;
f0108f47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	bool check = 0;
f0108f4e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	for(uint32 i = rsva;i < reva ;i += PAGE_SIZE)
f0108f55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f5b:	eb 75                	jmp    f0108fd2 <calculate_allocated_space+0xd6>
	{
		uint32 *ptr_page_table2=NULL;
f0108f5d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		int ret = get_page_table(page_directory, i, &ptr_page_table2);
f0108f64:	83 ec 04             	sub    $0x4,%esp
f0108f67:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108f6a:	50                   	push   %eax
f0108f6b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f6e:	ff 75 08             	pushl  0x8(%ebp)
f0108f71:	e8 9a da ff ff       	call   f0106a10 <get_page_table>
f0108f76:	83 c4 10             	add    $0x10,%esp
f0108f79:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if(ret == TABLE_IN_MEMORY)
f0108f7c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f0108f80:	75 49                	jne    f0108fcb <calculate_allocated_space+0xcf>
		{

			check = 1; //to make sure table in mem
f0108f82:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			uint32 entry = ptr_page_table2[PTX(i)];
f0108f89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108f8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108f8f:	c1 ea 0c             	shr    $0xc,%edx
f0108f92:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108f98:	c1 e2 02             	shl    $0x2,%edx
f0108f9b:	01 d0                	add    %edx,%eax
f0108f9d:	8b 00                	mov    (%eax),%eax
f0108f9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
			if((entry & PERM_PRESENT) != 0)
f0108fa2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108fa5:	83 e0 01             	and    $0x1,%eax
f0108fa8:	85 c0                	test   %eax,%eax
f0108faa:	74 1f                	je     f0108fcb <calculate_allocated_space+0xcf>
			{
				npages += 1;
f0108fac:	ff 45 f4             	incl   -0xc(%ebp)
				if(ptr_page_table1 == NULL)
f0108faf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0108fb3:	75 0b                	jne    f0108fc0 <calculate_allocated_space+0xc4>
				{
					ptr_page_table1 = ptr_page_table2;
f0108fb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108fb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
					ntables += 1;
f0108fbb:	ff 45 f0             	incl   -0x10(%ebp)
f0108fbe:	eb 0b                	jmp    f0108fcb <calculate_allocated_space+0xcf>
				}

				else
					if(!(ptr_page_table2 == ptr_page_table1))
f0108fc0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108fc3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108fc6:	74 03                	je     f0108fcb <calculate_allocated_space+0xcf>
						ntables += 1;
f0108fc8:	ff 45 f0             	incl   -0x10(%ebp)
	uint32 rsva = ROUNDDOWN(sva, PAGE_SIZE);
	uint32 reva = ROUNDUP(eva, PAGE_SIZE);
	uint32 npages = 0, ntables = 0;
	uint32 *ptr_page_table1 = NULL;
	bool check = 0;
	for(uint32 i = rsva;i < reva ;i += PAGE_SIZE)
f0108fcb:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f0108fd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108fd5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0108fd8:	72 83                	jb     f0108f5d <calculate_allocated_space+0x61>
						ntables += 1;
			}
		}
	}

	if(check == 1 && ntables == 0)
f0108fda:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0108fde:	75 09                	jne    f0108fe9 <calculate_allocated_space+0xed>
f0108fe0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108fe4:	75 03                	jne    f0108fe9 <calculate_allocated_space+0xed>
		ntables += 1;
f0108fe6:	ff 45 f0             	incl   -0x10(%ebp)

	*num_pages = npages;//return p# to function
f0108fe9:	8b 45 18             	mov    0x18(%ebp),%eax
f0108fec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108fef:	89 10                	mov    %edx,(%eax)
	*num_tables = ntables;//return pt# to function
f0108ff1:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ff4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108ff7:	89 10                	mov    %edx,(%eax)
}
f0108ff9:	90                   	nop
f0108ffa:	c9                   	leave  
f0108ffb:	c3                   	ret    

f0108ffc <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108ffc:	55                   	push   %ebp
f0108ffd:	89 e5                	mov    %esp,%ebp
f0108fff:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
		// Write your code here, remove the panic and write your code
	uint32 final_va =ROUNDUP(sva+size, PAGE_SIZE);
f0109002:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0109009:	8b 55 0c             	mov    0xc(%ebp),%edx
f010900c:	8b 45 10             	mov    0x10(%ebp),%eax
f010900f:	01 c2                	add    %eax,%edx
f0109011:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109014:	01 d0                	add    %edx,%eax
f0109016:	48                   	dec    %eax
f0109017:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010901a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010901d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109022:	f7 75 e8             	divl   -0x18(%ebp)
f0109025:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109028:	29 d0                	sub    %edx,%eax
f010902a:	89 45 e0             	mov    %eax,-0x20(%ebp)
		uint32 table_size = PAGE_SIZE*1024;
f010902d:	c7 45 dc 00 00 40 00 	movl   $0x400000,-0x24(%ebp)
		uint32 a_final_va = ROUNDUP(sva+size, table_size);
f0109034:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109037:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010903a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010903d:	8b 45 10             	mov    0x10(%ebp),%eax
f0109040:	01 c2                	add    %eax,%edx
f0109042:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109045:	01 d0                	add    %edx,%eax
f0109047:	48                   	dec    %eax
f0109048:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010904b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010904e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109053:	f7 75 d8             	divl   -0x28(%ebp)
f0109056:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109059:	29 d0                	sub    %edx,%eax
f010905b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 a_sva = ROUNDDOWN(sva, table_size);
f010905e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109061:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109064:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109067:	ba 00 00 00 00       	mov    $0x0,%edx
f010906c:	f7 75 dc             	divl   -0x24(%ebp)
f010906f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109072:	29 d0                	sub    %edx,%eax
f0109074:	89 45 c8             	mov    %eax,-0x38(%ebp)
		sva = ROUNDDOWN(sva, PAGE_SIZE);
f0109077:	8b 45 0c             	mov    0xc(%ebp),%eax
f010907a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010907d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109080:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109085:	89 45 0c             	mov    %eax,0xc(%ebp)
		int frames = 0;
f0109088:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)


		for(int i= a_sva; i<a_final_va; i+=table_size)
f010908f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109092:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109095:	eb 34                	jmp    f01090cb <calculate_required_frames+0xcf>
		{
			uint32 *ptr_page_table =NULL;
f0109097:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
			int ret = get_page_table(page_directory,i, &ptr_page_table);
f010909e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090a1:	83 ec 04             	sub    $0x4,%esp
f01090a4:	8d 55 b4             	lea    -0x4c(%ebp),%edx
f01090a7:	52                   	push   %edx
f01090a8:	50                   	push   %eax
f01090a9:	ff 75 08             	pushl  0x8(%ebp)
f01090ac:	e8 5f d9 ff ff       	call   f0106a10 <get_page_table>
f01090b1:	83 c4 10             	add    $0x10,%esp
f01090b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if(ret == TABLE_NOT_EXIST)
f01090b7:	83 7d c0 01          	cmpl   $0x1,-0x40(%ebp)
f01090bb:	75 03                	jne    f01090c0 <calculate_required_frames+0xc4>
			{
				//create_page_table(ptr_page_directory,i);
				frames+=1;
f01090bd:	ff 45 f4             	incl   -0xc(%ebp)
		uint32 a_sva = ROUNDDOWN(sva, table_size);
		sva = ROUNDDOWN(sva, PAGE_SIZE);
		int frames = 0;


		for(int i= a_sva; i<a_final_va; i+=table_size)
f01090c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01090c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01090c6:	01 d0                	add    %edx,%eax
f01090c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090ce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01090d1:	72 c4                	jb     f0109097 <calculate_required_frames+0x9b>
				//create_page_table(ptr_page_directory,i);
				frames+=1;
			}
		}

		for(int i= sva; i<final_va; i+=PAGE_SIZE)
f01090d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01090d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01090d9:	eb 54                	jmp    f010912f <calculate_required_frames+0x133>
		{
			uint32 *ptr_page_table =NULL;
f01090db:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
			int ret = get_page_table(page_directory,i, &ptr_page_table);
f01090e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01090e5:	83 ec 04             	sub    $0x4,%esp
f01090e8:	8d 55 b0             	lea    -0x50(%ebp),%edx
f01090eb:	52                   	push   %edx
f01090ec:	50                   	push   %eax
f01090ed:	ff 75 08             	pushl  0x8(%ebp)
f01090f0:	e8 1b d9 ff ff       	call   f0106a10 <get_page_table>
f01090f5:	83 c4 10             	add    $0x10,%esp
f01090f8:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if(ret == TABLE_NOT_EXIST)
f01090fb:	83 7d bc 01          	cmpl   $0x1,-0x44(%ebp)
f01090ff:	75 05                	jne    f0109106 <calculate_required_frames+0x10a>
			{
				frames+=1;
f0109101:	ff 45 f4             	incl   -0xc(%ebp)
f0109104:	eb 22                	jmp    f0109128 <calculate_required_frames+0x12c>
			}
			else{
				struct FrameInfo *ptr_frame_info = get_frame_info(page_directory,i,&ptr_page_table);
f0109106:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109109:	83 ec 04             	sub    $0x4,%esp
f010910c:	8d 55 b0             	lea    -0x50(%ebp),%edx
f010910f:	52                   	push   %edx
f0109110:	50                   	push   %eax
f0109111:	ff 75 08             	pushl  0x8(%ebp)
f0109114:	e8 4c dc ff ff       	call   f0106d65 <get_frame_info>
f0109119:	83 c4 10             	add    $0x10,%esp
f010911c:	89 45 b8             	mov    %eax,-0x48(%ebp)
				if(ptr_frame_info == NULL)
f010911f:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0109123:	75 03                	jne    f0109128 <calculate_required_frames+0x12c>
				{
					frames+=1;
f0109125:	ff 45 f4             	incl   -0xc(%ebp)
				//create_page_table(ptr_page_directory,i);
				frames+=1;
			}
		}

		for(int i= sva; i<final_va; i+=PAGE_SIZE)
f0109128:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010912f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109132:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0109135:	72 a4                	jb     f01090db <calculate_required_frames+0xdf>
			}
		}

		//frames = num_of_pages + frames;

		return frames;
f0109137:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010913a:	c9                   	leave  
f010913b:	c3                   	ret    

f010913c <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010913c:	55                   	push   %ebp
f010913d:	89 e5                	mov    %esp,%ebp
f010913f:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0109142:	83 ec 04             	sub    $0x4,%esp
f0109145:	68 78 68 13 f0       	push   $0xf0136878
f010914a:	68 78 01 00 00       	push   $0x178
f010914f:	68 a8 68 13 f0       	push   $0xf01368a8
f0109154:	e8 ac 70 ff ff       	call   f0100205 <_panic>

f0109159 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109159:	55                   	push   %ebp
f010915a:	89 e5                	mov    %esp,%ebp
f010915c:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	uint32 s=size/PAGE_SIZE;
f010915f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109162:	c1 e8 0c             	shr    $0xc,%eax
f0109165:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 vir=virtual_address;
f0109168:	8b 45 0c             	mov    0xc(%ebp),%eax
f010916b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(int i=0; i<s;i++)
f010916e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109175:	eb 1b                	jmp    f0109192 <free_user_mem+0x39>
	{
		//1. Free ALL pages of the given range from the Page File
		pf_remove_env_page(e,vir);
f0109177:	83 ec 08             	sub    $0x8,%esp
f010917a:	ff 75 f4             	pushl  -0xc(%ebp)
f010917d:	ff 75 08             	pushl  0x8(%ebp)
f0109180:	e8 d1 a8 ff ff       	call   f0103a56 <pf_remove_env_page>
f0109185:	83 c4 10             	add    $0x10,%esp
		vir =vir+PAGE_SIZE;
f0109188:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
{
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	uint32 s=size/PAGE_SIZE;
	uint32 vir=virtual_address;
	for(int i=0; i<s;i++)
f010918f:	ff 45 f0             	incl   -0x10(%ebp)
f0109192:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109195:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0109198:	72 dd                	jb     f0109177 <free_user_mem+0x1e>
		pf_remove_env_page(e,vir);
		vir =vir+PAGE_SIZE;
	}

	uint32* ptr_page_table;
	vir=virtual_address;
f010919a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010919d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(int i=0; i<e->page_WS_max_size; i++)
f01091a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01091a7:	eb 7a                	jmp    f0109223 <free_user_mem+0xca>
	{
		//2. Free ONLY pages that are resident in the working set from the memory
		uint32 ws_va=env_page_ws_get_virtual_address(e,i);
f01091a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01091ac:	83 ec 08             	sub    $0x8,%esp
f01091af:	50                   	push   %eax
f01091b0:	ff 75 08             	pushl  0x8(%ebp)
f01091b3:	e8 39 ef ff ff       	call   f01080f1 <env_page_ws_get_virtual_address>
f01091b8:	83 c4 10             	add    $0x10,%esp
f01091bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 newsize=ROUNDUP(size+vir,PAGE_SIZE);
f01091be:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01091c5:	8b 55 10             	mov    0x10(%ebp),%edx
f01091c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01091cb:	01 c2                	add    %eax,%edx
f01091cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01091d0:	01 d0                	add    %edx,%eax
f01091d2:	48                   	dec    %eax
f01091d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01091d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01091d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01091de:	f7 75 d4             	divl   -0x2c(%ebp)
f01091e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01091e4:	29 d0                	sub    %edx,%eax
f01091e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if((ws_va>=vir) && (ws_va<newsize))
f01091e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01091ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01091ef:	72 2f                	jb     f0109220 <free_user_mem+0xc7>
f01091f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01091f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01091f7:	73 27                	jae    f0109220 <free_user_mem+0xc7>
		{
			unmap_frame(e->env_page_directory,ws_va);
f01091f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01091fc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01091ff:	83 ec 08             	sub    $0x8,%esp
f0109202:	ff 75 d8             	pushl  -0x28(%ebp)
f0109205:	50                   	push   %eax
f0109206:	e8 ca db ff ff       	call   f0106dd5 <unmap_frame>
f010920b:	83 c4 10             	add    $0x10,%esp
			env_page_ws_clear_entry(e,i);
f010920e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109211:	83 ec 08             	sub    $0x8,%esp
f0109214:	50                   	push   %eax
f0109215:	ff 75 08             	pushl  0x8(%ebp)
f0109218:	e8 5d ee ff ff       	call   f010807a <env_page_ws_clear_entry>
f010921d:	83 c4 10             	add    $0x10,%esp
		vir =vir+PAGE_SIZE;
	}

	uint32* ptr_page_table;
	vir=virtual_address;
	for(int i=0; i<e->page_WS_max_size; i++)
f0109220:	ff 45 ec             	incl   -0x14(%ebp)
f0109223:	8b 45 08             	mov    0x8(%ebp),%eax
f0109226:	8b 50 74             	mov    0x74(%eax),%edx
f0109229:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010922c:	39 c2                	cmp    %eax,%edx
f010922e:	0f 87 75 ff ff ff    	ja     f01091a9 <free_user_mem+0x50>
			env_page_ws_clear_entry(e,i);

		}
	}

	vir= virtual_address;
f0109234:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109237:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(int i=0; i<s; i++)
f010923a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0109241:	e9 91 00 00 00       	jmp    f01092d7 <free_user_mem+0x17e>
	{
		//3. Removes ONLY the empty page tables
		int check=1;
f0109246:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
		ptr_page_table=NULL;
f010924d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(e->env_page_directory,vir,&ptr_page_table);
f0109254:	8b 45 08             	mov    0x8(%ebp),%eax
f0109257:	8b 40 5c             	mov    0x5c(%eax),%eax
f010925a:	83 ec 04             	sub    $0x4,%esp
f010925d:	8d 55 c8             	lea    -0x38(%ebp),%edx
f0109260:	52                   	push   %edx
f0109261:	ff 75 f4             	pushl  -0xc(%ebp)
f0109264:	50                   	push   %eax
f0109265:	e8 a6 d7 ff ff       	call   f0106a10 <get_page_table>
f010926a:	83 c4 10             	add    $0x10,%esp
		if(ptr_page_table !=NULL)
f010926d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109270:	85 c0                	test   %eax,%eax
f0109272:	74 59                	je     f01092cd <free_user_mem+0x174>
		{
			for(int j=0; j<1024; j++)
f0109274:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010927b:	eb 1d                	jmp    f010929a <free_user_mem+0x141>
			{
				if(ptr_page_table[j]!=0)
f010927d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109280:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0109283:	c1 e2 02             	shl    $0x2,%edx
f0109286:	01 d0                	add    %edx,%eax
f0109288:	8b 00                	mov    (%eax),%eax
f010928a:	85 c0                	test   %eax,%eax
f010928c:	74 09                	je     f0109297 <free_user_mem+0x13e>
				{
					check=0;
f010928e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
					break;
f0109295:	eb 0c                	jmp    f01092a3 <free_user_mem+0x14a>
		int check=1;
		ptr_page_table=NULL;
		get_page_table(e->env_page_directory,vir,&ptr_page_table);
		if(ptr_page_table !=NULL)
		{
			for(int j=0; j<1024; j++)
f0109297:	ff 45 e0             	incl   -0x20(%ebp)
f010929a:	81 7d e0 ff 03 00 00 	cmpl   $0x3ff,-0x20(%ebp)
f01092a1:	7e da                	jle    f010927d <free_user_mem+0x124>
				{
					check=0;
					break;
				}
			}
			if(check==1)
f01092a3:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
f01092a7:	75 24                	jne    f01092cd <free_user_mem+0x174>
			{
				kfree((void*)ptr_page_table);
f01092a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01092ac:	83 ec 0c             	sub    $0xc,%esp
f01092af:	50                   	push   %eax
f01092b0:	e8 fe e7 ff ff       	call   f0107ab3 <kfree>
f01092b5:	83 c4 10             	add    $0x10,%esp
				pd_clear_page_dir_entry(e->env_page_directory,(uint32)vir);
f01092b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01092bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01092be:	83 ec 08             	sub    $0x8,%esp
f01092c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01092c4:	50                   	push   %eax
f01092c5:	e8 2e ec ff ff       	call   f0107ef8 <pd_clear_page_dir_entry>
f01092ca:	83 c4 10             	add    $0x10,%esp
			}
		}
		vir=vir+PAGE_SIZE;
f01092cd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)

		}
	}

	vir= virtual_address;
	for(int i=0; i<s; i++)
f01092d4:	ff 45 e8             	incl   -0x18(%ebp)
f01092d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01092da:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01092dd:	0f 82 63 ff ff ff    	jb     f0109246 <free_user_mem+0xed>
				pd_clear_page_dir_entry(e->env_page_directory,(uint32)vir);
			}
		}
		vir=vir+PAGE_SIZE;
	}
}
f01092e3:	90                   	nop
f01092e4:	c9                   	leave  
f01092e5:	c3                   	ret    

f01092e6 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01092e6:	55                   	push   %ebp
f01092e7:	89 e5                	mov    %esp,%ebp
f01092e9:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01092ec:	83 ec 04             	sub    $0x4,%esp
f01092ef:	68 c4 68 13 f0       	push   $0xf01368c4
f01092f4:	68 bb 01 00 00       	push   $0x1bb
f01092f9:	68 a8 68 13 f0       	push   $0xf01368a8
f01092fe:	e8 02 6f ff ff       	call   f0100205 <_panic>

f0109303 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109303:	55                   	push   %ebp
f0109304:	89 e5                	mov    %esp,%ebp
f0109306:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109309:	83 ec 04             	sub    $0x4,%esp
f010930c:	68 04 69 13 f0       	push   $0xf0136904
f0109311:	68 cb 01 00 00       	push   $0x1cb
f0109316:	68 a8 68 13 f0       	push   $0xf01368a8
f010931b:	e8 e5 6e ff ff       	call   f0100205 <_panic>

f0109320 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109320:	55                   	push   %ebp
f0109321:	89 e5                	mov    %esp,%ebp
f0109323:	57                   	push   %edi
f0109324:	56                   	push   %esi
f0109325:	53                   	push   %ebx
f0109326:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010932c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109333:	83 ec 0c             	sub    $0xc,%esp
f0109336:	ff 75 08             	pushl  0x8(%ebp)
f0109339:	e8 0b 22 00 00       	call   f010b549 <get_user_program_info>
f010933e:	83 c4 10             	add    $0x10,%esp
f0109341:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109344:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109348:	75 0a                	jne    f0109354 <env_create+0x34>
f010934a:	b8 00 00 00 00       	mov    $0x0,%eax
f010934f:	e9 cd 0b 00 00       	jmp    f0109f21 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109354:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109357:	8b 40 08             	mov    0x8(%eax),%eax
f010935a:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010935d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0109364:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109367:	83 ec 0c             	sub    $0xc,%esp
f010936a:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0109370:	50                   	push   %eax
f0109371:	e8 d3 0e 00 00       	call   f010a249 <allocate_environment>
f0109376:	83 c4 10             	add    $0x10,%esp
f0109379:	85 c0                	test   %eax,%eax
f010937b:	79 0a                	jns    f0109387 <env_create+0x67>
	{
		return 0;
f010937d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109382:	e9 9a 0b 00 00       	jmp    f0109f21 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109387:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010938a:	8b 00                	mov    (%eax),%eax
f010938c:	83 ec 0c             	sub    $0xc,%esp
f010938f:	50                   	push   %eax
f0109390:	e8 40 86 02 00       	call   f01319d5 <strlen>
f0109395:	83 c4 10             	add    $0x10,%esp
f0109398:	83 f8 3f             	cmp    $0x3f,%eax
f010939b:	7f 20                	jg     f01093bd <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f010939d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01093a0:	8b 00                	mov    (%eax),%eax
f01093a2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093a8:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01093ae:	83 ec 08             	sub    $0x8,%esp
f01093b1:	50                   	push   %eax
f01093b2:	52                   	push   %edx
f01093b3:	e8 6c 86 02 00       	call   f0131a24 <strcpy>
f01093b8:	83 c4 10             	add    $0x10,%esp
f01093bb:	eb 20                	jmp    f01093dd <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01093bd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01093c0:	8b 00                	mov    (%eax),%eax
f01093c2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093c8:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01093ce:	83 ec 04             	sub    $0x4,%esp
f01093d1:	6a 3f                	push   $0x3f
f01093d3:	50                   	push   %eax
f01093d4:	52                   	push   %edx
f01093d5:	e8 78 86 02 00       	call   f0131a52 <strncpy>
f01093da:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f01093dd:	e8 6d 0f 00 00       	call   f010a34f <create_user_directory>
f01093e2:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f01093e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01093e8:	83 ec 0c             	sub    $0xc,%esp
f01093eb:	50                   	push   %eax
f01093ec:	e8 d9 e7 ff ff       	call   f0107bca <kheap_physical_address>
f01093f1:	83 c4 10             	add    $0x10,%esp
f01093f4:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01093f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109400:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109403:	83 ec 0c             	sub    $0xc,%esp
f0109406:	6a 02                	push   $0x2
f0109408:	e8 f2 4d 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010940d:	83 c4 10             	add    $0x10,%esp
f0109410:	85 c0                	test   %eax,%eax
f0109412:	74 21                	je     f0109435 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0109414:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010941a:	8b 55 10             	mov    0x10(%ebp),%edx
f010941d:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109423:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109429:	8b 55 0c             	mov    0xc(%ebp),%edx
f010942c:	2b 55 10             	sub    0x10(%ebp),%edx
f010942f:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109435:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109439:	75 12                	jne    f010944d <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f010943b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109441:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109448:	00 00 00 
f010944b:	eb 0f                	jmp    f010945c <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010944d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109453:	8b 55 14             	mov    0x14(%ebp),%edx
f0109456:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f010945c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109462:	83 ec 04             	sub    $0x4,%esp
f0109465:	ff 75 ac             	pushl  -0x54(%ebp)
f0109468:	ff 75 b0             	pushl  -0x50(%ebp)
f010946b:	50                   	push   %eax
f010946c:	e8 fa 15 00 00       	call   f010aa6b <initialize_environment>
f0109471:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109474:	0f 20 d8             	mov    %cr3,%eax
f0109477:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f010947a:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f010947d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0109480:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109486:	8b 40 60             	mov    0x60(%eax),%eax
f0109489:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010948f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0109495:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109498:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f010949f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01094a6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ac:	8b 40 74             	mov    0x74(%eax),%eax
f01094af:	48                   	dec    %eax
f01094b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01094b3:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f01094ba:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01094bd:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f01094c3:	83 ec 08             	sub    $0x8,%esp
f01094c6:	ff 75 b8             	pushl  -0x48(%ebp)
f01094c9:	50                   	push   %eax
f01094ca:	e8 af 1d 00 00       	call   f010b27e <PROGRAM_SEGMENT_FIRST>
f01094cf:	83 c4 0c             	add    $0xc,%esp
f01094d2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01094d8:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f01094de:	b9 05 00 00 00       	mov    $0x5,%ecx
f01094e3:	89 c7                	mov    %eax,%edi
f01094e5:	89 d6                	mov    %edx,%esi
f01094e7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01094e9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01094ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01094f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01094f5:	8b 40 10             	mov    0x10(%eax),%eax
f01094f8:	83 f8 ff             	cmp    $0xffffffff,%eax
f01094fb:	75 07                	jne    f0109504 <env_create+0x1e4>
f01094fd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109504:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109507:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010950a:	e9 15 03 00 00       	jmp    f0109824 <env_create+0x504>
	{
		segment_counter++;
f010950f:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109512:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109519:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010951c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109522:	83 ec 0c             	sub    $0xc,%esp
f0109525:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010952b:	52                   	push   %edx
f010952c:	ff 75 dc             	pushl  -0x24(%ebp)
f010952f:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109535:	52                   	push   %edx
f0109536:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109539:	50                   	push   %eax
f010953a:	e8 4b 0e 00 00       	call   f010a38a <program_segment_alloc_map_copy_workingset>
f010953f:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109542:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109548:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010954b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010954e:	8b 00                	mov    (%eax),%eax
f0109550:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109553:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109556:	8b 40 0c             	mov    0xc(%eax),%eax
f0109559:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010955c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010955f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0109562:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109565:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010956a:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f010956d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0109574:	8b 55 98             	mov    -0x68(%ebp),%edx
f0109577:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010957a:	01 d0                	add    %edx,%eax
f010957c:	48                   	dec    %eax
f010957d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0109580:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109583:	ba 00 00 00 00       	mov    $0x0,%edx
f0109588:	f7 75 8c             	divl   -0x74(%ebp)
f010958b:	8b 45 88             	mov    -0x78(%ebp),%eax
f010958e:	29 d0                	sub    %edx,%eax
f0109590:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0109593:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109596:	2b 45 90             	sub    -0x70(%ebp),%eax
f0109599:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f010959c:	a1 84 a1 86 f0       	mov    0xf086a184,%eax
f01095a1:	83 ec 04             	sub    $0x4,%esp
f01095a4:	68 00 10 00 00       	push   $0x1000
f01095a9:	6a 00                	push   $0x0
f01095ab:	50                   	push   %eax
f01095ac:	e8 12 86 02 00       	call   f0131bc3 <memset>
f01095b1:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01095b4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01095b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01095ba:	8b 15 84 a1 86 f0    	mov    0xf086a184,%edx
f01095c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01095c3:	01 d0                	add    %edx,%eax
f01095c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01095c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01095cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01095ce:	eb 13                	jmp    f01095e3 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f01095d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01095d3:	8a 10                	mov    (%eax),%dl
f01095d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01095d8:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01095da:	ff 45 cc             	incl   -0x34(%ebp)
f01095dd:	ff 45 d4             	incl   -0x2c(%ebp)
f01095e0:	ff 45 d0             	incl   -0x30(%ebp)
f01095e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01095e6:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01095e9:	72 e5                	jb     f01095d0 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01095eb:	8b 15 84 a1 86 f0    	mov    0xf086a184,%edx
f01095f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095f7:	83 ec 04             	sub    $0x4,%esp
f01095fa:	52                   	push   %edx
f01095fb:	ff 75 90             	pushl  -0x70(%ebp)
f01095fe:	50                   	push   %eax
f01095ff:	e8 70 a0 ff ff       	call   f0103674 <pf_add_env_page>
f0109604:	83 c4 10             	add    $0x10,%esp
f0109607:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010960a:	75 17                	jne    f0109623 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010960c:	83 ec 04             	sub    $0x4,%esp
f010960f:	68 30 69 13 f0       	push   $0xf0136930
f0109614:	68 e1 00 00 00       	push   $0xe1
f0109619:	68 75 69 13 f0       	push   $0xf0136975
f010961e:	e8 e2 6b ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109626:	8b 50 04             	mov    0x4(%eax),%edx
f0109629:	8b 45 98             	mov    -0x68(%ebp),%eax
f010962c:	01 d0                	add    %edx,%eax
f010962e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109634:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010963a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010963f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109645:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109648:	8b 50 04             	mov    0x4(%eax),%edx
f010964b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010964e:	01 d0                	add    %edx,%eax
f0109650:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109656:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109659:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010965c:	eb 43                	jmp    f01096a1 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010965e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109661:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109667:	83 ec 04             	sub    $0x4,%esp
f010966a:	ff 75 d4             	pushl  -0x2c(%ebp)
f010966d:	52                   	push   %edx
f010966e:	50                   	push   %eax
f010966f:	e8 00 a0 ff ff       	call   f0103674 <pf_add_env_page>
f0109674:	83 c4 10             	add    $0x10,%esp
f0109677:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010967a:	75 17                	jne    f0109693 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010967c:	83 ec 04             	sub    $0x4,%esp
f010967f:	68 30 69 13 f0       	push   $0xf0136930
f0109684:	68 ee 00 00 00       	push   $0xee
f0109689:	68 75 69 13 f0       	push   $0xf0136975
f010968e:	e8 72 6b ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109693:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010969a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01096a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096a4:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01096aa:	72 b2                	jb     f010965e <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01096ac:	a1 84 a1 86 f0       	mov    0xf086a184,%eax
f01096b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01096b4:	83 ec 04             	sub    $0x4,%esp
f01096b7:	68 00 10 00 00       	push   $0x1000
f01096bc:	6a 00                	push   $0x0
f01096be:	ff 75 d0             	pushl  -0x30(%ebp)
f01096c1:	e8 fd 84 02 00       	call   f0131bc3 <memset>
f01096c6:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01096c9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01096cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01096d2:	eb 13                	jmp    f01096e7 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f01096d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01096d7:	8a 10                	mov    (%eax),%dl
f01096d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01096dc:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01096de:	ff 45 cc             	incl   -0x34(%ebp)
f01096e1:	ff 45 d4             	incl   -0x2c(%ebp)
f01096e4:	ff 45 d0             	incl   -0x30(%ebp)
f01096e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096ea:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f01096f0:	72 e2                	jb     f01096d4 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01096f2:	8b 15 84 a1 86 f0    	mov    0xf086a184,%edx
f01096f8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096fe:	83 ec 04             	sub    $0x4,%esp
f0109701:	52                   	push   %edx
f0109702:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109708:	50                   	push   %eax
f0109709:	e8 66 9f ff ff       	call   f0103674 <pf_add_env_page>
f010970e:	83 c4 10             	add    $0x10,%esp
f0109711:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109714:	75 17                	jne    f010972d <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109716:	83 ec 04             	sub    $0x4,%esp
f0109719:	68 30 69 13 f0       	push   $0xf0136930
f010971e:	68 fd 00 00 00       	push   $0xfd
f0109723:	68 75 69 13 f0       	push   $0xf0136975
f0109728:	e8 d8 6a ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010972d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109734:	10 00 00 
f0109737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010973a:	8b 50 04             	mov    0x4(%eax),%edx
f010973d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109740:	01 c2                	add    %eax,%edx
f0109742:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109748:	01 d0                	add    %edx,%eax
f010974a:	48                   	dec    %eax
f010974b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109751:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109757:	ba 00 00 00 00       	mov    $0x0,%edx
f010975c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0109762:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109768:	29 d0                	sub    %edx,%eax
f010976a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010976d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109770:	8b 50 08             	mov    0x8(%eax),%edx
f0109773:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109776:	01 d0                	add    %edx,%eax
f0109778:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010977b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109781:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109788:	eb 41                	jmp    f01097cb <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010978a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109790:	83 ec 04             	sub    $0x4,%esp
f0109793:	6a 01                	push   $0x1
f0109795:	ff 75 c8             	pushl  -0x38(%ebp)
f0109798:	50                   	push   %eax
f0109799:	e8 a5 9d ff ff       	call   f0103543 <pf_add_empty_env_page>
f010979e:	83 c4 10             	add    $0x10,%esp
f01097a1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01097a4:	75 17                	jne    f01097bd <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01097a6:	83 ec 04             	sub    $0x4,%esp
f01097a9:	68 30 69 13 f0       	push   $0xf0136930
f01097ae:	68 0a 01 00 00       	push   $0x10a
f01097b3:	68 75 69 13 f0       	push   $0xf0136975
f01097b8:	e8 48 6a ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01097bd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01097c4:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01097cb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01097d2:	10 00 00 
f01097d5:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f01097db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01097e1:	01 d0                	add    %edx,%eax
f01097e3:	48                   	dec    %eax
f01097e4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01097ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01097f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01097f5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01097fb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109801:	29 d0                	sub    %edx,%eax
f0109803:	89 c2                	mov    %eax,%edx
f0109805:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109808:	39 c2                	cmp    %eax,%edx
f010980a:	0f 87 7a ff ff ff    	ja     f010978a <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109810:	83 ec 08             	sub    $0x8,%esp
f0109813:	ff 75 b8             	pushl  -0x48(%ebp)
f0109816:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109819:	e8 55 19 00 00       	call   f010b173 <PROGRAM_SEGMENT_NEXT>
f010981e:	83 c4 10             	add    $0x10,%esp
f0109821:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109824:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109828:	0f 85 e1 fc ff ff    	jne    f010950f <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010982e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109835:	e9 9d 00 00 00       	jmp    f01098d7 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010983a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109840:	8b 48 78             	mov    0x78(%eax),%ecx
f0109843:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109846:	89 d0                	mov    %edx,%eax
f0109848:	01 c0                	add    %eax,%eax
f010984a:	01 d0                	add    %edx,%eax
f010984c:	c1 e0 03             	shl    $0x3,%eax
f010984f:	01 c8                	add    %ecx,%eax
f0109851:	8a 40 04             	mov    0x4(%eax),%al
f0109854:	84 c0                	test   %al,%al
f0109856:	75 7c                	jne    f01098d4 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109858:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010985e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109861:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109864:	89 d0                	mov    %edx,%eax
f0109866:	01 c0                	add    %eax,%eax
f0109868:	01 d0                	add    %edx,%eax
f010986a:	c1 e0 03             	shl    $0x3,%eax
f010986d:	01 c8                	add    %ecx,%eax
f010986f:	8b 00                	mov    (%eax),%eax
f0109871:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109877:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010987d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109880:	83 ec 04             	sub    $0x4,%esp
f0109883:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f0109889:	52                   	push   %edx
f010988a:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f0109890:	50                   	push   %eax
f0109891:	e8 7a d1 ff ff       	call   f0106a10 <get_page_table>
f0109896:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109899:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010989f:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01098a5:	c1 ea 0c             	shr    $0xc,%edx
f01098a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01098ae:	c1 e2 02             	shl    $0x2,%edx
f01098b1:	01 d0                	add    %edx,%eax
f01098b3:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01098b9:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01098bf:	c1 e9 0c             	shr    $0xc,%ecx
f01098c2:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01098c8:	c1 e1 02             	shl    $0x2,%ecx
f01098cb:	01 ca                	add    %ecx,%edx
f01098cd:	8b 12                	mov    (%edx),%edx
f01098cf:	83 e2 bf             	and    $0xffffffbf,%edx
f01098d2:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01098d4:	ff 45 c4             	incl   -0x3c(%ebp)
f01098d7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098dd:	8b 50 74             	mov    0x74(%eax),%edx
f01098e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01098e3:	39 c2                	cmp    %eax,%edx
f01098e5:	0f 87 4f ff ff ff    	ja     f010983a <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01098eb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01098ee:	8b 50 08             	mov    0x8(%eax),%edx
f01098f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098f7:	83 ec 08             	sub    $0x8,%esp
f01098fa:	52                   	push   %edx
f01098fb:	50                   	push   %eax
f01098fc:	e8 bc 16 00 00       	call   f010afbd <set_environment_entry_point>
f0109901:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109904:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010990a:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109911:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109914:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010991b:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010991e:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109925:	e9 53 05 00 00       	jmp    f0109e7d <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010992a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109931:	00 00 00 
		allocate_frame(&pp);
f0109934:	83 ec 0c             	sub    $0xc,%esp
f0109937:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010993d:	50                   	push   %eax
f010993e:	e8 0e cf ff ff       	call   f0106851 <allocate_frame>
f0109943:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109946:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010994c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109952:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109955:	6a 06                	push   $0x6
f0109957:	ff 75 c0             	pushl  -0x40(%ebp)
f010995a:	52                   	push   %edx
f010995b:	50                   	push   %eax
f010995c:	e8 fb d4 ff ff       	call   f0106e5c <loadtime_map_frame>
f0109961:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109964:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109967:	83 ec 04             	sub    $0x4,%esp
f010996a:	68 00 10 00 00       	push   $0x1000
f010996f:	6a 00                	push   $0x0
f0109971:	50                   	push   %eax
f0109972:	e8 4c 82 02 00       	call   f0131bc3 <memset>
f0109977:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010997a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109980:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109986:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010998c:	83 ec 04             	sub    $0x4,%esp
f010998f:	ff 75 c0             	pushl  -0x40(%ebp)
f0109992:	52                   	push   %edx
f0109993:	50                   	push   %eax
f0109994:	e8 40 e6 ff ff       	call   f0107fd9 <env_page_ws_set_entry>
f0109999:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010999c:	83 ec 0c             	sub    $0xc,%esp
f010999f:	6a 02                	push   $0x2
f01099a1:	e8 59 48 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f01099a6:	83 c4 10             	add    $0x10,%esp
f01099a9:	85 c0                	test   %eax,%eax
f01099ab:	0f 84 6b 04 00 00    	je     f0109e1c <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01099b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099b7:	8b 48 78             	mov    0x78(%eax),%ecx
f01099ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099c0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099c6:	89 d0                	mov    %edx,%eax
f01099c8:	01 c0                	add    %eax,%eax
f01099ca:	01 d0                	add    %edx,%eax
f01099cc:	c1 e0 03             	shl    $0x3,%eax
f01099cf:	01 c8                	add    %ecx,%eax
f01099d1:	85 c0                	test   %eax,%eax
f01099d3:	75 17                	jne    f01099ec <env_create+0x6cc>
f01099d5:	83 ec 04             	sub    $0x4,%esp
f01099d8:	68 92 69 13 f0       	push   $0xf0136992
f01099dd:	68 41 01 00 00       	push   $0x141
f01099e2:	68 75 69 13 f0       	push   $0xf0136975
f01099e7:	e8 19 68 ff ff       	call   f0100205 <_panic>
f01099ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01099f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a01:	89 d0                	mov    %edx,%eax
f0109a03:	01 c0                	add    %eax,%eax
f0109a05:	01 d0                	add    %edx,%eax
f0109a07:	c1 e0 03             	shl    $0x3,%eax
f0109a0a:	01 c8                	add    %ecx,%eax
f0109a0c:	8b 40 10             	mov    0x10(%eax),%eax
f0109a0f:	85 c0                	test   %eax,%eax
f0109a11:	74 4b                	je     f0109a5e <env_create+0x73e>
f0109a13:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a19:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a22:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a28:	89 d0                	mov    %edx,%eax
f0109a2a:	01 c0                	add    %eax,%eax
f0109a2c:	01 d0                	add    %edx,%eax
f0109a2e:	c1 e0 03             	shl    $0x3,%eax
f0109a31:	01 c8                	add    %ecx,%eax
f0109a33:	8b 50 10             	mov    0x10(%eax),%edx
f0109a36:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a3c:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a3f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a45:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a4b:	89 c8                	mov    %ecx,%eax
f0109a4d:	01 c0                	add    %eax,%eax
f0109a4f:	01 c8                	add    %ecx,%eax
f0109a51:	c1 e0 03             	shl    $0x3,%eax
f0109a54:	01 d8                	add    %ebx,%eax
f0109a56:	8b 40 14             	mov    0x14(%eax),%eax
f0109a59:	89 42 14             	mov    %eax,0x14(%edx)
f0109a5c:	eb 2f                	jmp    f0109a8d <env_create+0x76d>
f0109a5e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a6a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a73:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a79:	89 c8                	mov    %ecx,%eax
f0109a7b:	01 c0                	add    %eax,%eax
f0109a7d:	01 c8                	add    %ecx,%eax
f0109a7f:	c1 e0 03             	shl    $0x3,%eax
f0109a82:	01 d8                	add    %ebx,%eax
f0109a84:	8b 40 14             	mov    0x14(%eax),%eax
f0109a87:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109a8d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a93:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a96:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a9c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109aa2:	89 d0                	mov    %edx,%eax
f0109aa4:	01 c0                	add    %eax,%eax
f0109aa6:	01 d0                	add    %edx,%eax
f0109aa8:	c1 e0 03             	shl    $0x3,%eax
f0109aab:	01 c8                	add    %ecx,%eax
f0109aad:	8b 40 14             	mov    0x14(%eax),%eax
f0109ab0:	85 c0                	test   %eax,%eax
f0109ab2:	74 4b                	je     f0109aff <env_create+0x7df>
f0109ab4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aba:	8b 48 78             	mov    0x78(%eax),%ecx
f0109abd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ac3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ac9:	89 d0                	mov    %edx,%eax
f0109acb:	01 c0                	add    %eax,%eax
f0109acd:	01 d0                	add    %edx,%eax
f0109acf:	c1 e0 03             	shl    $0x3,%eax
f0109ad2:	01 c8                	add    %ecx,%eax
f0109ad4:	8b 50 14             	mov    0x14(%eax),%edx
f0109ad7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109add:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ae0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ae6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109aec:	89 c8                	mov    %ecx,%eax
f0109aee:	01 c0                	add    %eax,%eax
f0109af0:	01 c8                	add    %ecx,%eax
f0109af2:	c1 e0 03             	shl    $0x3,%eax
f0109af5:	01 d8                	add    %ebx,%eax
f0109af7:	8b 40 10             	mov    0x10(%eax),%eax
f0109afa:	89 42 10             	mov    %eax,0x10(%edx)
f0109afd:	eb 2f                	jmp    f0109b2e <env_create+0x80e>
f0109aff:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b05:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b0b:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b0e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b14:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b1a:	89 c8                	mov    %ecx,%eax
f0109b1c:	01 c0                	add    %eax,%eax
f0109b1e:	01 c8                	add    %ecx,%eax
f0109b20:	c1 e0 03             	shl    $0x3,%eax
f0109b23:	01 d8                	add    %ebx,%eax
f0109b25:	8b 40 10             	mov    0x10(%eax),%eax
f0109b28:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109b2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b34:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b3d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b43:	89 d0                	mov    %edx,%eax
f0109b45:	01 c0                	add    %eax,%eax
f0109b47:	01 d0                	add    %edx,%eax
f0109b49:	c1 e0 03             	shl    $0x3,%eax
f0109b4c:	01 c8                	add    %ecx,%eax
f0109b4e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109b55:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b5b:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b64:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b6a:	89 d0                	mov    %edx,%eax
f0109b6c:	01 c0                	add    %eax,%eax
f0109b6e:	01 d0                	add    %edx,%eax
f0109b70:	c1 e0 03             	shl    $0x3,%eax
f0109b73:	01 c8                	add    %ecx,%eax
f0109b75:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b7c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b82:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109b88:	4a                   	dec    %edx
f0109b89:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109b8f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b95:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109b9b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ba1:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109ba7:	39 c2                	cmp    %eax,%edx
f0109ba9:	0f 83 39 01 00 00    	jae    f0109ce8 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109baf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb5:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bb8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bbe:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bc4:	89 d0                	mov    %edx,%eax
f0109bc6:	01 c0                	add    %eax,%eax
f0109bc8:	01 d0                	add    %edx,%eax
f0109bca:	c1 e0 03             	shl    $0x3,%eax
f0109bcd:	01 c8                	add    %ecx,%eax
f0109bcf:	85 c0                	test   %eax,%eax
f0109bd1:	75 17                	jne    f0109bea <env_create+0x8ca>
f0109bd3:	83 ec 04             	sub    $0x4,%esp
f0109bd6:	68 b0 69 13 f0       	push   $0xf01369b0
f0109bdb:	68 46 01 00 00       	push   $0x146
f0109be0:	68 75 69 13 f0       	push   $0xf0136975
f0109be5:	e8 1b 66 ff ff       	call   f0100205 <_panic>
f0109bea:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf0:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bf3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bff:	89 d0                	mov    %edx,%eax
f0109c01:	01 c0                	add    %eax,%eax
f0109c03:	01 d0                	add    %edx,%eax
f0109c05:	c1 e0 03             	shl    $0x3,%eax
f0109c08:	01 c8                	add    %ecx,%eax
f0109c0a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c10:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109c16:	89 50 10             	mov    %edx,0x10(%eax)
f0109c19:	8b 40 10             	mov    0x10(%eax),%eax
f0109c1c:	85 c0                	test   %eax,%eax
f0109c1e:	74 31                	je     f0109c51 <env_create+0x931>
f0109c20:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c26:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109c2c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c32:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c3b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c41:	89 c8                	mov    %ecx,%eax
f0109c43:	01 c0                	add    %eax,%eax
f0109c45:	01 c8                	add    %ecx,%eax
f0109c47:	c1 e0 03             	shl    $0x3,%eax
f0109c4a:	01 d8                	add    %ebx,%eax
f0109c4c:	89 42 14             	mov    %eax,0x14(%edx)
f0109c4f:	eb 2c                	jmp    f0109c7d <env_create+0x95d>
f0109c51:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c5d:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c66:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c6c:	89 c8                	mov    %ecx,%eax
f0109c6e:	01 c0                	add    %eax,%eax
f0109c70:	01 c8                	add    %ecx,%eax
f0109c72:	c1 e0 03             	shl    $0x3,%eax
f0109c75:	01 d8                	add    %ebx,%eax
f0109c77:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109c7d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c83:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c89:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c92:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c98:	89 c8                	mov    %ecx,%eax
f0109c9a:	01 c0                	add    %eax,%eax
f0109c9c:	01 c8                	add    %ecx,%eax
f0109c9e:	c1 e0 03             	shl    $0x3,%eax
f0109ca1:	01 d8                	add    %ebx,%eax
f0109ca3:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109ca9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109caf:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cb2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cb8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cbe:	89 d0                	mov    %edx,%eax
f0109cc0:	01 c0                	add    %eax,%eax
f0109cc2:	01 d0                	add    %edx,%eax
f0109cc4:	c1 e0 03             	shl    $0x3,%eax
f0109cc7:	01 c8                	add    %ecx,%eax
f0109cc9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109cd0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cd6:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109cdc:	42                   	inc    %edx
f0109cdd:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109ce3:	e9 34 01 00 00       	jmp    f0109e1c <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ce8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cee:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cfd:	89 d0                	mov    %edx,%eax
f0109cff:	01 c0                	add    %eax,%eax
f0109d01:	01 d0                	add    %edx,%eax
f0109d03:	c1 e0 03             	shl    $0x3,%eax
f0109d06:	01 c8                	add    %ecx,%eax
f0109d08:	85 c0                	test   %eax,%eax
f0109d0a:	75 17                	jne    f0109d23 <env_create+0xa03>
f0109d0c:	83 ec 04             	sub    $0x4,%esp
f0109d0f:	68 b0 69 13 f0       	push   $0xf01369b0
f0109d14:	68 4a 01 00 00       	push   $0x14a
f0109d19:	68 75 69 13 f0       	push   $0xf0136975
f0109d1e:	e8 e2 64 ff ff       	call   f0100205 <_panic>
f0109d23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d29:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d2c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d32:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d38:	89 d0                	mov    %edx,%eax
f0109d3a:	01 c0                	add    %eax,%eax
f0109d3c:	01 d0                	add    %edx,%eax
f0109d3e:	c1 e0 03             	shl    $0x3,%eax
f0109d41:	01 c8                	add    %ecx,%eax
f0109d43:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d49:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109d4f:	89 50 10             	mov    %edx,0x10(%eax)
f0109d52:	8b 40 10             	mov    0x10(%eax),%eax
f0109d55:	85 c0                	test   %eax,%eax
f0109d57:	74 31                	je     f0109d8a <env_create+0xa6a>
f0109d59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d5f:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109d65:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d6b:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d6e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d74:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d7a:	89 c8                	mov    %ecx,%eax
f0109d7c:	01 c0                	add    %eax,%eax
f0109d7e:	01 c8                	add    %ecx,%eax
f0109d80:	c1 e0 03             	shl    $0x3,%eax
f0109d83:	01 d8                	add    %ebx,%eax
f0109d85:	89 42 14             	mov    %eax,0x14(%edx)
f0109d88:	eb 2c                	jmp    f0109db6 <env_create+0xa96>
f0109d8a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d96:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d99:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d9f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109da5:	89 c8                	mov    %ecx,%eax
f0109da7:	01 c0                	add    %eax,%eax
f0109da9:	01 c8                	add    %ecx,%eax
f0109dab:	c1 e0 03             	shl    $0x3,%eax
f0109dae:	01 d8                	add    %ebx,%eax
f0109db0:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109db6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109dbc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dc2:	8b 58 78             	mov    0x78(%eax),%ebx
f0109dc5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dcb:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109dd1:	89 c8                	mov    %ecx,%eax
f0109dd3:	01 c0                	add    %eax,%eax
f0109dd5:	01 c8                	add    %ecx,%eax
f0109dd7:	c1 e0 03             	shl    $0x3,%eax
f0109dda:	01 d8                	add    %ebx,%eax
f0109ddc:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109de2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109de8:	8b 48 78             	mov    0x78(%eax),%ecx
f0109deb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109df1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109df7:	89 d0                	mov    %edx,%eax
f0109df9:	01 c0                	add    %eax,%eax
f0109dfb:	01 d0                	add    %edx,%eax
f0109dfd:	c1 e0 03             	shl    $0x3,%eax
f0109e00:	01 c8                	add    %ecx,%eax
f0109e02:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109e09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e0f:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109e15:	42                   	inc    %edx
f0109e16:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109e1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e22:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e28:	42                   	inc    %edx
f0109e29:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109e2f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109e35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e3b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109e41:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109e47:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109e4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e4f:	f7 f3                	div    %ebx
f0109e51:	89 d0                	mov    %edx,%eax
f0109e53:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109e59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e5f:	83 ec 04             	sub    $0x4,%esp
f0109e62:	6a 01                	push   $0x1
f0109e64:	ff 75 c0             	pushl  -0x40(%ebp)
f0109e67:	50                   	push   %eax
f0109e68:	e8 d6 96 ff ff       	call   f0103543 <pf_add_empty_env_page>
f0109e6d:	83 c4 10             	add    $0x10,%esp
f0109e70:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109e76:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109e7d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109e80:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109e86:	0f 83 9e fa ff ff    	jae    f010992a <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109e8c:	83 ec 0c             	sub    $0xc,%esp
f0109e8f:	6a 02                	push   $0x2
f0109e91:	e8 69 43 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0109e96:	83 c4 10             	add    $0x10,%esp
f0109e99:	85 c0                	test   %eax,%eax
f0109e9b:	74 72                	je     f0109f0f <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109e9d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109ea4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eaa:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109eb0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109eb3:	eb 2b                	jmp    f0109ee0 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109eb5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109eb8:	8b 10                	mov    (%eax),%edx
f0109eba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ec0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ec3:	6a 01                	push   $0x1
f0109ec5:	6a 00                	push   $0x0
f0109ec7:	52                   	push   %edx
f0109ec8:	50                   	push   %eax
f0109ec9:	e8 c5 dd ff ff       	call   f0107c93 <pt_set_page_permissions>
f0109ece:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109ed1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ed7:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109edd:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109ee0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ee6:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109eea:	74 08                	je     f0109ef4 <env_create+0xbd4>
f0109eec:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109eef:	8b 52 10             	mov    0x10(%edx),%edx
f0109ef2:	eb 05                	jmp    f0109ef9 <env_create+0xbd9>
f0109ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0109ef9:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109eff:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109f05:	85 c0                	test   %eax,%eax
f0109f07:	75 ac                	jne    f0109eb5 <env_create+0xb95>
f0109f09:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109f0d:	75 a6                	jne    f0109eb5 <env_create+0xb95>
f0109f0f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109f12:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109f15:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109f18:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109f1b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109f21:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109f24:	5b                   	pop    %ebx
f0109f25:	5e                   	pop    %esi
f0109f26:	5f                   	pop    %edi
f0109f27:	5d                   	pop    %ebp
f0109f28:	c3                   	ret    

f0109f29 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109f29:	55                   	push   %ebp
f0109f2a:	89 e5                	mov    %esp,%ebp
f0109f2c:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109f2f:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109f34:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f37:	74 25                	je     f0109f5e <env_run+0x35>
	{
		curenv = e ;
f0109f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3c:	a3 f4 97 86 f0       	mov    %eax,0xf08697f4
		curenv->env_runs++ ;
f0109f41:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109f46:	8b 50 58             	mov    0x58(%eax),%edx
f0109f49:	42                   	inc    %edx
f0109f4a:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109f4d:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109f52:	8b 40 60             	mov    0x60(%eax),%eax
f0109f55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f5b:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109f5e:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109f63:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109f6a:	e8 af a1 ff ff       	call   f010411e <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109f6f:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109f74:	83 ec 0c             	sub    $0xc,%esp
f0109f77:	50                   	push   %eax
f0109f78:	e8 0f 01 00 00       	call   f010a08c <env_pop_tf>

f0109f7d <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109f7d:	55                   	push   %ebp
f0109f7e:	89 e5                	mov    %esp,%ebp
f0109f80:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109f83:	83 ec 0c             	sub    $0xc,%esp
f0109f86:	ff 75 08             	pushl  0x8(%ebp)
f0109f89:	e8 3e 11 00 00       	call   f010b0cc <unshare_pws_at_user_space>
f0109f8e:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109f91:	83 ec 04             	sub    $0x4,%esp
f0109f94:	68 d4 69 13 f0       	push   $0xf01369d4
f0109f99:	68 9d 01 00 00       	push   $0x19d
f0109f9e:	68 75 69 13 f0       	push   $0xf0136975
f0109fa3:	e8 5d 62 ff ff       	call   f0100205 <_panic>

f0109fa8 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109fa8:	55                   	push   %ebp
f0109fa9:	89 e5                	mov    %esp,%ebp
f0109fab:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109fae:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0109fb3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109fb6:	83 ec 0c             	sub    $0xc,%esp
f0109fb9:	50                   	push   %eax
f0109fba:	e8 42 b2 ff ff       	call   f0105201 <sched_exit_env>
f0109fbf:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109fc2:	e8 be a6 ff ff       	call   f0104685 <fos_scheduler>

f0109fc7 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109fc7:	55                   	push   %ebp
f0109fc8:	89 e5                	mov    %esp,%ebp
f0109fca:	53                   	push   %ebx
f0109fcb:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109fce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109fd2:	75 15                	jne    f0109fe9 <envid2env+0x22>
		*env_store = curenv;
f0109fd4:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f0109fda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fdd:	89 10                	mov    %edx,(%eax)
		return 0;
f0109fdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0109fe4:	e9 9e 00 00 00       	jmp    f010a087 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109fe9:	8b 1d f0 97 86 f0    	mov    0xf08697f0,%ebx
f0109fef:	83 ec 0c             	sub    $0xc,%esp
f0109ff2:	68 b1 02 00 00       	push   $0x2b1
f0109ff7:	e8 4b 67 02 00       	call   f0130747 <nearest_pow2_ceil>
f0109ffc:	83 c4 10             	add    $0x10,%esp
f0109fff:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a002:	8b 45 08             	mov    0x8(%ebp),%eax
f010a005:	21 c2                	and    %eax,%edx
f010a007:	89 d0                	mov    %edx,%eax
f010a009:	c1 e0 03             	shl    $0x3,%eax
f010a00c:	01 d0                	add    %edx,%eax
f010a00e:	01 c0                	add    %eax,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a019:	01 d0                	add    %edx,%eax
f010a01b:	c1 e0 04             	shl    $0x4,%eax
f010a01e:	01 d8                	add    %ebx,%eax
f010a020:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a026:	8b 40 54             	mov    0x54(%eax),%eax
f010a029:	85 c0                	test   %eax,%eax
f010a02b:	74 0b                	je     f010a038 <envid2env+0x71>
f010a02d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a030:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a033:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a036:	74 10                	je     f010a048 <envid2env+0x81>
		*env_store = 0;
f010a038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a03b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a041:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a046:	eb 3f                	jmp    f010a087 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a048:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a04c:	74 2c                	je     f010a07a <envid2env+0xb3>
f010a04e:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010a053:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a056:	74 22                	je     f010a07a <envid2env+0xb3>
f010a058:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a05b:	8b 50 50             	mov    0x50(%eax),%edx
f010a05e:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010a063:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a066:	39 c2                	cmp    %eax,%edx
f010a068:	74 10                	je     f010a07a <envid2env+0xb3>
		*env_store = 0;
f010a06a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a06d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a073:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a078:	eb 0d                	jmp    f010a087 <envid2env+0xc0>
	}

	*env_store = e;
f010a07a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a07d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a080:	89 10                	mov    %edx,(%eax)
	return 0;
f010a082:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a087:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a08a:	c9                   	leave  
f010a08b:	c3                   	ret    

f010a08c <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a08c:	55                   	push   %ebp
f010a08d:	89 e5                	mov    %esp,%ebp
f010a08f:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a092:	8b 65 08             	mov    0x8(%ebp),%esp
f010a095:	61                   	popa   
f010a096:	07                   	pop    %es
f010a097:	1f                   	pop    %ds
f010a098:	83 c4 08             	add    $0x8,%esp
f010a09b:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a09c:	83 ec 04             	sub    $0x4,%esp
f010a09f:	68 fb 69 13 f0       	push   $0xf01369fb
f010a0a4:	68 fd 01 00 00       	push   $0x1fd
f010a0a9:	68 75 69 13 f0       	push   $0xf0136975
f010a0ae:	e8 52 61 ff ff       	call   f0100205 <_panic>

f010a0b3 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a0b3:	55                   	push   %ebp
f010a0b4:	89 e5                	mov    %esp,%ebp
f010a0b6:	53                   	push   %ebx
f010a0b7:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a0ba:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a0c1:	e9 73 01 00 00       	jmp    f010a239 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a0c6:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0cf:	89 d0                	mov    %edx,%eax
f010a0d1:	c1 e0 03             	shl    $0x3,%eax
f010a0d4:	01 d0                	add    %edx,%eax
f010a0d6:	01 c0                	add    %eax,%eax
f010a0d8:	01 d0                	add    %edx,%eax
f010a0da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a0e1:	01 d0                	add    %edx,%eax
f010a0e3:	c1 e0 04             	shl    $0x4,%eax
f010a0e6:	01 c8                	add    %ecx,%eax
f010a0e8:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a0ef:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0f8:	89 d0                	mov    %edx,%eax
f010a0fa:	c1 e0 03             	shl    $0x3,%eax
f010a0fd:	01 d0                	add    %edx,%eax
f010a0ff:	01 c0                	add    %eax,%eax
f010a101:	01 d0                	add    %edx,%eax
f010a103:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a10a:	01 d0                	add    %edx,%eax
f010a10c:	c1 e0 04             	shl    $0x4,%eax
f010a10f:	01 c8                	add    %ecx,%eax
f010a111:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a118:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a11e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a121:	89 d0                	mov    %edx,%eax
f010a123:	c1 e0 03             	shl    $0x3,%eax
f010a126:	01 d0                	add    %edx,%eax
f010a128:	01 c0                	add    %eax,%eax
f010a12a:	01 d0                	add    %edx,%eax
f010a12c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a133:	01 d0                	add    %edx,%eax
f010a135:	c1 e0 04             	shl    $0x4,%eax
f010a138:	01 c8                	add    %ecx,%eax
f010a13a:	85 c0                	test   %eax,%eax
f010a13c:	75 17                	jne    f010a155 <env_init+0xa2>
f010a13e:	83 ec 04             	sub    $0x4,%esp
f010a141:	68 b0 69 13 f0       	push   $0xf01369b0
f010a146:	68 19 02 00 00       	push   $0x219
f010a14b:	68 75 69 13 f0       	push   $0xf0136975
f010a150:	e8 b0 60 ff ff       	call   f0100205 <_panic>
f010a155:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a15b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a15e:	89 d0                	mov    %edx,%eax
f010a160:	c1 e0 03             	shl    $0x3,%eax
f010a163:	01 d0                	add    %edx,%eax
f010a165:	01 c0                	add    %eax,%eax
f010a167:	01 d0                	add    %edx,%eax
f010a169:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a170:	01 d0                	add    %edx,%eax
f010a172:	c1 e0 04             	shl    $0x4,%eax
f010a175:	01 c8                	add    %ecx,%eax
f010a177:	8b 15 f8 97 86 f0    	mov    0xf08697f8,%edx
f010a17d:	89 50 44             	mov    %edx,0x44(%eax)
f010a180:	8b 40 44             	mov    0x44(%eax),%eax
f010a183:	85 c0                	test   %eax,%eax
f010a185:	74 2d                	je     f010a1b4 <env_init+0x101>
f010a187:	8b 0d f8 97 86 f0    	mov    0xf08697f8,%ecx
f010a18d:	8b 1d f0 97 86 f0    	mov    0xf08697f0,%ebx
f010a193:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a196:	89 d0                	mov    %edx,%eax
f010a198:	c1 e0 03             	shl    $0x3,%eax
f010a19b:	01 d0                	add    %edx,%eax
f010a19d:	01 c0                	add    %eax,%eax
f010a19f:	01 d0                	add    %edx,%eax
f010a1a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1a8:	01 d0                	add    %edx,%eax
f010a1aa:	c1 e0 04             	shl    $0x4,%eax
f010a1ad:	01 d8                	add    %ebx,%eax
f010a1af:	89 41 48             	mov    %eax,0x48(%ecx)
f010a1b2:	eb 27                	jmp    f010a1db <env_init+0x128>
f010a1b4:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a1ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1bd:	89 d0                	mov    %edx,%eax
f010a1bf:	c1 e0 03             	shl    $0x3,%eax
f010a1c2:	01 d0                	add    %edx,%eax
f010a1c4:	01 c0                	add    %eax,%eax
f010a1c6:	01 d0                	add    %edx,%eax
f010a1c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1cf:	01 d0                	add    %edx,%eax
f010a1d1:	c1 e0 04             	shl    $0x4,%eax
f010a1d4:	01 c8                	add    %ecx,%eax
f010a1d6:	a3 fc 97 86 f0       	mov    %eax,0xf08697fc
f010a1db:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a1e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1e4:	89 d0                	mov    %edx,%eax
f010a1e6:	c1 e0 03             	shl    $0x3,%eax
f010a1e9:	01 d0                	add    %edx,%eax
f010a1eb:	01 c0                	add    %eax,%eax
f010a1ed:	01 d0                	add    %edx,%eax
f010a1ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1f6:	01 d0                	add    %edx,%eax
f010a1f8:	c1 e0 04             	shl    $0x4,%eax
f010a1fb:	01 c8                	add    %ecx,%eax
f010a1fd:	a3 f8 97 86 f0       	mov    %eax,0xf08697f8
f010a202:	8b 0d f0 97 86 f0    	mov    0xf08697f0,%ecx
f010a208:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a20b:	89 d0                	mov    %edx,%eax
f010a20d:	c1 e0 03             	shl    $0x3,%eax
f010a210:	01 d0                	add    %edx,%eax
f010a212:	01 c0                	add    %eax,%eax
f010a214:	01 d0                	add    %edx,%eax
f010a216:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a21d:	01 d0                	add    %edx,%eax
f010a21f:	c1 e0 04             	shl    $0x4,%eax
f010a222:	01 c8                	add    %ecx,%eax
f010a224:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a22b:	a1 04 98 86 f0       	mov    0xf0869804,%eax
f010a230:	40                   	inc    %eax
f010a231:	a3 04 98 86 f0       	mov    %eax,0xf0869804
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a236:	ff 4d f4             	decl   -0xc(%ebp)
f010a239:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a23d:	0f 89 83 fe ff ff    	jns    f010a0c6 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a243:	90                   	nop
f010a244:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a247:	c9                   	leave  
f010a248:	c3                   	ret    

f010a249 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a249:	55                   	push   %ebp
f010a24a:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a24c:	8b 15 f8 97 86 f0    	mov    0xf08697f8,%edx
f010a252:	8b 45 08             	mov    0x8(%ebp),%eax
f010a255:	89 10                	mov    %edx,(%eax)
f010a257:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25a:	8b 00                	mov    (%eax),%eax
f010a25c:	85 c0                	test   %eax,%eax
f010a25e:	75 07                	jne    f010a267 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a260:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a265:	eb 11                	jmp    f010a278 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a267:	8b 45 08             	mov    0x8(%ebp),%eax
f010a26a:	8b 00                	mov    (%eax),%eax
f010a26c:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a273:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a278:	5d                   	pop    %ebp
f010a279:	c3                   	ret    

f010a27a <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a27a:	55                   	push   %ebp
f010a27b:	89 e5                	mov    %esp,%ebp
f010a27d:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a280:	83 ec 04             	sub    $0x4,%esp
f010a283:	68 f0 05 00 00       	push   $0x5f0
f010a288:	6a 00                	push   $0x0
f010a28a:	ff 75 08             	pushl  0x8(%ebp)
f010a28d:	e8 31 79 02 00       	call   f0131bc3 <memset>
f010a292:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a295:	8b 45 08             	mov    0x8(%ebp),%eax
f010a298:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a29f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a2a3:	75 17                	jne    f010a2bc <free_environment+0x42>
f010a2a5:	83 ec 04             	sub    $0x4,%esp
f010a2a8:	68 b0 69 13 f0       	push   $0xf01369b0
f010a2ad:	68 36 02 00 00       	push   $0x236
f010a2b2:	68 75 69 13 f0       	push   $0xf0136975
f010a2b7:	e8 49 5f ff ff       	call   f0100205 <_panic>
f010a2bc:	8b 15 f8 97 86 f0    	mov    0xf08697f8,%edx
f010a2c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c5:	89 50 44             	mov    %edx,0x44(%eax)
f010a2c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2cb:	8b 40 44             	mov    0x44(%eax),%eax
f010a2ce:	85 c0                	test   %eax,%eax
f010a2d0:	74 0d                	je     f010a2df <free_environment+0x65>
f010a2d2:	a1 f8 97 86 f0       	mov    0xf08697f8,%eax
f010a2d7:	8b 55 08             	mov    0x8(%ebp),%edx
f010a2da:	89 50 48             	mov    %edx,0x48(%eax)
f010a2dd:	eb 08                	jmp    f010a2e7 <free_environment+0x6d>
f010a2df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e2:	a3 fc 97 86 f0       	mov    %eax,0xf08697fc
f010a2e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ea:	a3 f8 97 86 f0       	mov    %eax,0xf08697f8
f010a2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a2f9:	a1 04 98 86 f0       	mov    0xf0869804,%eax
f010a2fe:	40                   	inc    %eax
f010a2ff:	a3 04 98 86 f0       	mov    %eax,0xf0869804
}
f010a304:	90                   	nop
f010a305:	c9                   	leave  
f010a306:	c3                   	ret    

f010a307 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a307:	55                   	push   %ebp
f010a308:	89 e5                	mov    %esp,%ebp
f010a30a:	83 ec 18             	sub    $0x18,%esp
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a30d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a310:	89 d0                	mov    %edx,%eax
f010a312:	01 c0                	add    %eax,%eax
f010a314:	01 d0                	add    %edx,%eax
f010a316:	c1 e0 03             	shl    $0x3,%eax
f010a319:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a31c:	83 ec 0c             	sub    $0xc,%esp
f010a31f:	ff 75 f4             	pushl  -0xc(%ebp)
f010a322:	e8 43 d6 ff ff       	call   f010796a <kmalloc>
f010a327:	83 c4 10             	add    $0x10,%esp
f010a32a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a32d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a331:	75 17                	jne    f010a34a <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a333:	83 ec 04             	sub    $0x4,%esp
f010a336:	68 07 6a 13 f0       	push   $0xf0136a07
f010a33b:	68 41 02 00 00       	push   $0x241
f010a340:	68 75 69 13 f0       	push   $0xf0136975
f010a345:	e8 bb 5e ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a34a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010a34d:	c9                   	leave  
f010a34e:	c3                   	ret    

f010a34f <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a34f:	55                   	push   %ebp
f010a350:	89 e5                	mov    %esp,%ebp
f010a352:	83 ec 18             	sub    $0x18,%esp
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a355:	83 ec 0c             	sub    $0xc,%esp
f010a358:	68 00 10 00 00       	push   $0x1000
f010a35d:	e8 08 d6 ff ff       	call   f010796a <kmalloc>
f010a362:	83 c4 10             	add    $0x10,%esp
f010a365:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a368:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a36c:	75 17                	jne    f010a385 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a36e:	83 ec 04             	sub    $0x4,%esp
f010a371:	68 07 6a 13 f0       	push   $0xf0136a07
f010a376:	68 4c 02 00 00       	push   $0x24c
f010a37b:	68 75 69 13 f0       	push   $0xf0136975
f010a380:	e8 80 5e ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a385:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a388:	c9                   	leave  
f010a389:	c3                   	ret    

f010a38a <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a38a:	55                   	push   %ebp
f010a38b:	89 e5                	mov    %esp,%ebp
f010a38d:	53                   	push   %ebx
f010a38e:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a391:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a394:	8b 40 0c             	mov    0xc(%eax),%eax
f010a397:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a39a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a39d:	8b 40 08             	mov    0x8(%eax),%eax
f010a3a0:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a3a3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a3aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a3ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a3b0:	01 c2                	add    %eax,%edx
f010a3b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a3b5:	01 d0                	add    %edx,%eax
f010a3b7:	48                   	dec    %eax
f010a3b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a3bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3be:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3c3:	f7 75 dc             	divl   -0x24(%ebp)
f010a3c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3c9:	29 d0                	sub    %edx,%eax
f010a3cb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a3ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a3d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a3d7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a3dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a3df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a3e6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a3ed:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a3f6:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a3fd:	0f 85 c8 05 00 00    	jne    f010a9cb <program_segment_alloc_map_copy_workingset+0x641>
f010a403:	8b 45 08             	mov    0x8(%ebp),%eax
f010a406:	05 5c 05 00 00       	add    $0x55c,%eax
f010a40b:	83 ec 08             	sub    $0x8,%esp
f010a40e:	68 24 6a 13 f0       	push   $0xf0136a24
f010a413:	50                   	push   %eax
f010a414:	e8 c8 76 02 00       	call   f0131ae1 <strcmp>
f010a419:	83 c4 10             	add    $0x10,%esp
f010a41c:	85 c0                	test   %eax,%eax
f010a41e:	0f 84 a7 05 00 00    	je     f010a9cb <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a424:	8b 45 14             	mov    0x14(%ebp),%eax
f010a427:	83 f8 06             	cmp    $0x6,%eax
f010a42a:	76 05                	jbe    f010a431 <program_segment_alloc_map_copy_workingset+0xa7>
f010a42c:	b8 06 00 00 00       	mov    $0x6,%eax
f010a431:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a434:	e9 92 05 00 00       	jmp    f010a9cb <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a439:	83 ec 0c             	sub    $0xc,%esp
f010a43c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a43f:	50                   	push   %eax
f010a440:	e8 0c c4 ff ff       	call   f0106851 <allocate_frame>
f010a445:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a448:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a44b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a44e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a451:	6a 06                	push   $0x6
f010a453:	ff 75 f4             	pushl  -0xc(%ebp)
f010a456:	52                   	push   %edx
f010a457:	50                   	push   %eax
f010a458:	e8 ff c9 ff ff       	call   f0106e5c <loadtime_map_frame>
f010a45d:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a460:	8b 45 08             	mov    0x8(%ebp),%eax
f010a463:	8b 48 78             	mov    0x78(%eax),%ecx
f010a466:	8b 45 08             	mov    0x8(%ebp),%eax
f010a469:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a46f:	89 d0                	mov    %edx,%eax
f010a471:	01 c0                	add    %eax,%eax
f010a473:	01 d0                	add    %edx,%eax
f010a475:	c1 e0 03             	shl    $0x3,%eax
f010a478:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a47b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a47e:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a480:	8b 45 08             	mov    0x8(%ebp),%eax
f010a483:	8b 48 78             	mov    0x78(%eax),%ecx
f010a486:	8b 45 08             	mov    0x8(%ebp),%eax
f010a489:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a48f:	89 d0                	mov    %edx,%eax
f010a491:	01 c0                	add    %eax,%eax
f010a493:	01 d0                	add    %edx,%eax
f010a495:	c1 e0 03             	shl    $0x3,%eax
f010a498:	01 c8                	add    %ecx,%eax
f010a49a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a49e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4ad:	89 d0                	mov    %edx,%eax
f010a4af:	01 c0                	add    %eax,%eax
f010a4b1:	01 d0                	add    %edx,%eax
f010a4b3:	c1 e0 03             	shl    $0x3,%eax
f010a4b6:	01 c8                	add    %ecx,%eax
f010a4b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a4bf:	83 ec 0c             	sub    $0xc,%esp
f010a4c2:	6a 02                	push   $0x2
f010a4c4:	e8 36 3d 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010a4c9:	83 c4 10             	add    $0x10,%esp
f010a4cc:	85 c0                	test   %eax,%eax
f010a4ce:	0f 84 c8 03 00 00    	je     f010a89c <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a4d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4e3:	89 d0                	mov    %edx,%eax
f010a4e5:	01 c0                	add    %eax,%eax
f010a4e7:	01 d0                	add    %edx,%eax
f010a4e9:	c1 e0 03             	shl    $0x3,%eax
f010a4ec:	01 c8                	add    %ecx,%eax
f010a4ee:	85 c0                	test   %eax,%eax
f010a4f0:	75 17                	jne    f010a509 <program_segment_alloc_map_copy_workingset+0x17f>
f010a4f2:	83 ec 04             	sub    $0x4,%esp
f010a4f5:	68 92 69 13 f0       	push   $0xf0136992
f010a4fa:	68 7d 02 00 00       	push   $0x27d
f010a4ff:	68 75 69 13 f0       	push   $0xf0136975
f010a504:	e8 fc 5c ff ff       	call   f0100205 <_panic>
f010a509:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a50f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a512:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a518:	89 d0                	mov    %edx,%eax
f010a51a:	01 c0                	add    %eax,%eax
f010a51c:	01 d0                	add    %edx,%eax
f010a51e:	c1 e0 03             	shl    $0x3,%eax
f010a521:	01 c8                	add    %ecx,%eax
f010a523:	8b 40 10             	mov    0x10(%eax),%eax
f010a526:	85 c0                	test   %eax,%eax
f010a528:	74 3f                	je     f010a569 <program_segment_alloc_map_copy_workingset+0x1df>
f010a52a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a530:	8b 45 08             	mov    0x8(%ebp),%eax
f010a533:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a539:	89 d0                	mov    %edx,%eax
f010a53b:	01 c0                	add    %eax,%eax
f010a53d:	01 d0                	add    %edx,%eax
f010a53f:	c1 e0 03             	shl    $0x3,%eax
f010a542:	01 c8                	add    %ecx,%eax
f010a544:	8b 50 10             	mov    0x10(%eax),%edx
f010a547:	8b 45 08             	mov    0x8(%ebp),%eax
f010a54a:	8b 58 78             	mov    0x78(%eax),%ebx
f010a54d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a550:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a556:	89 c8                	mov    %ecx,%eax
f010a558:	01 c0                	add    %eax,%eax
f010a55a:	01 c8                	add    %ecx,%eax
f010a55c:	c1 e0 03             	shl    $0x3,%eax
f010a55f:	01 d8                	add    %ebx,%eax
f010a561:	8b 40 14             	mov    0x14(%eax),%eax
f010a564:	89 42 14             	mov    %eax,0x14(%edx)
f010a567:	eb 26                	jmp    f010a58f <program_segment_alloc_map_copy_workingset+0x205>
f010a569:	8b 45 08             	mov    0x8(%ebp),%eax
f010a56c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a56f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a572:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a578:	89 d0                	mov    %edx,%eax
f010a57a:	01 c0                	add    %eax,%eax
f010a57c:	01 d0                	add    %edx,%eax
f010a57e:	c1 e0 03             	shl    $0x3,%eax
f010a581:	01 c8                	add    %ecx,%eax
f010a583:	8b 50 14             	mov    0x14(%eax),%edx
f010a586:	8b 45 08             	mov    0x8(%ebp),%eax
f010a589:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a58f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a592:	8b 48 78             	mov    0x78(%eax),%ecx
f010a595:	8b 45 08             	mov    0x8(%ebp),%eax
f010a598:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a59e:	89 d0                	mov    %edx,%eax
f010a5a0:	01 c0                	add    %eax,%eax
f010a5a2:	01 d0                	add    %edx,%eax
f010a5a4:	c1 e0 03             	shl    $0x3,%eax
f010a5a7:	01 c8                	add    %ecx,%eax
f010a5a9:	8b 40 14             	mov    0x14(%eax),%eax
f010a5ac:	85 c0                	test   %eax,%eax
f010a5ae:	74 3f                	je     f010a5ef <program_segment_alloc_map_copy_workingset+0x265>
f010a5b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5bf:	89 d0                	mov    %edx,%eax
f010a5c1:	01 c0                	add    %eax,%eax
f010a5c3:	01 d0                	add    %edx,%eax
f010a5c5:	c1 e0 03             	shl    $0x3,%eax
f010a5c8:	01 c8                	add    %ecx,%eax
f010a5ca:	8b 50 14             	mov    0x14(%eax),%edx
f010a5cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d0:	8b 58 78             	mov    0x78(%eax),%ebx
f010a5d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a5dc:	89 c8                	mov    %ecx,%eax
f010a5de:	01 c0                	add    %eax,%eax
f010a5e0:	01 c8                	add    %ecx,%eax
f010a5e2:	c1 e0 03             	shl    $0x3,%eax
f010a5e5:	01 d8                	add    %ebx,%eax
f010a5e7:	8b 40 10             	mov    0x10(%eax),%eax
f010a5ea:	89 42 10             	mov    %eax,0x10(%edx)
f010a5ed:	eb 26                	jmp    f010a615 <program_segment_alloc_map_copy_workingset+0x28b>
f010a5ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5fe:	89 d0                	mov    %edx,%eax
f010a600:	01 c0                	add    %eax,%eax
f010a602:	01 d0                	add    %edx,%eax
f010a604:	c1 e0 03             	shl    $0x3,%eax
f010a607:	01 c8                	add    %ecx,%eax
f010a609:	8b 50 10             	mov    0x10(%eax),%edx
f010a60c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a615:	8b 45 08             	mov    0x8(%ebp),%eax
f010a618:	8b 48 78             	mov    0x78(%eax),%ecx
f010a61b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a624:	89 d0                	mov    %edx,%eax
f010a626:	01 c0                	add    %eax,%eax
f010a628:	01 d0                	add    %edx,%eax
f010a62a:	c1 e0 03             	shl    $0x3,%eax
f010a62d:	01 c8                	add    %ecx,%eax
f010a62f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a636:	8b 45 08             	mov    0x8(%ebp),%eax
f010a639:	8b 48 78             	mov    0x78(%eax),%ecx
f010a63c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a645:	89 d0                	mov    %edx,%eax
f010a647:	01 c0                	add    %eax,%eax
f010a649:	01 d0                	add    %edx,%eax
f010a64b:	c1 e0 03             	shl    $0x3,%eax
f010a64e:	01 c8                	add    %ecx,%eax
f010a650:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a657:	8b 45 08             	mov    0x8(%ebp),%eax
f010a65a:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a660:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a663:	8b 45 08             	mov    0x8(%ebp),%eax
f010a666:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a66c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66f:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a675:	8b 45 08             	mov    0x8(%ebp),%eax
f010a678:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a67e:	48                   	dec    %eax
f010a67f:	39 c2                	cmp    %eax,%edx
f010a681:	0f 83 0d 01 00 00    	jae    f010a794 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a687:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a68d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a690:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a696:	89 d0                	mov    %edx,%eax
f010a698:	01 c0                	add    %eax,%eax
f010a69a:	01 d0                	add    %edx,%eax
f010a69c:	c1 e0 03             	shl    $0x3,%eax
f010a69f:	01 c8                	add    %ecx,%eax
f010a6a1:	85 c0                	test   %eax,%eax
f010a6a3:	75 17                	jne    f010a6bc <program_segment_alloc_map_copy_workingset+0x332>
f010a6a5:	83 ec 04             	sub    $0x4,%esp
f010a6a8:	68 b0 69 13 f0       	push   $0xf01369b0
f010a6ad:	68 81 02 00 00       	push   $0x281
f010a6b2:	68 75 69 13 f0       	push   $0xf0136975
f010a6b7:	e8 49 5b ff ff       	call   f0100205 <_panic>
f010a6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6bf:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6cb:	89 d0                	mov    %edx,%eax
f010a6cd:	01 c0                	add    %eax,%eax
f010a6cf:	01 d0                	add    %edx,%eax
f010a6d1:	c1 e0 03             	shl    $0x3,%eax
f010a6d4:	01 c8                	add    %ecx,%eax
f010a6d6:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6d9:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a6df:	89 50 10             	mov    %edx,0x10(%eax)
f010a6e2:	8b 40 10             	mov    0x10(%eax),%eax
f010a6e5:	85 c0                	test   %eax,%eax
f010a6e7:	74 28                	je     f010a711 <program_segment_alloc_map_copy_workingset+0x387>
f010a6e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ec:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f5:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fb:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a701:	89 c8                	mov    %ecx,%eax
f010a703:	01 c0                	add    %eax,%eax
f010a705:	01 c8                	add    %ecx,%eax
f010a707:	c1 e0 03             	shl    $0x3,%eax
f010a70a:	01 d8                	add    %ebx,%eax
f010a70c:	89 42 14             	mov    %eax,0x14(%edx)
f010a70f:	eb 24                	jmp    f010a735 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a711:	8b 45 08             	mov    0x8(%ebp),%eax
f010a714:	8b 48 78             	mov    0x78(%eax),%ecx
f010a717:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a720:	89 d0                	mov    %edx,%eax
f010a722:	01 c0                	add    %eax,%eax
f010a724:	01 d0                	add    %edx,%eax
f010a726:	c1 e0 03             	shl    $0x3,%eax
f010a729:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72f:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a735:	8b 45 08             	mov    0x8(%ebp),%eax
f010a738:	8b 48 78             	mov    0x78(%eax),%ecx
f010a73b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a744:	89 d0                	mov    %edx,%eax
f010a746:	01 c0                	add    %eax,%eax
f010a748:	01 d0                	add    %edx,%eax
f010a74a:	c1 e0 03             	shl    $0x3,%eax
f010a74d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a750:	8b 45 08             	mov    0x8(%ebp),%eax
f010a753:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a759:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a75f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a762:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a768:	89 d0                	mov    %edx,%eax
f010a76a:	01 c0                	add    %eax,%eax
f010a76c:	01 d0                	add    %edx,%eax
f010a76e:	c1 e0 03             	shl    $0x3,%eax
f010a771:	01 c8                	add    %ecx,%eax
f010a773:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a77a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77d:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a783:	8d 50 01             	lea    0x1(%eax),%edx
f010a786:	8b 45 08             	mov    0x8(%ebp),%eax
f010a789:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a78f:	e9 08 01 00 00       	jmp    f010a89c <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a794:	8b 45 08             	mov    0x8(%ebp),%eax
f010a797:	8b 48 78             	mov    0x78(%eax),%ecx
f010a79a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7a3:	89 d0                	mov    %edx,%eax
f010a7a5:	01 c0                	add    %eax,%eax
f010a7a7:	01 d0                	add    %edx,%eax
f010a7a9:	c1 e0 03             	shl    $0x3,%eax
f010a7ac:	01 c8                	add    %ecx,%eax
f010a7ae:	85 c0                	test   %eax,%eax
f010a7b0:	75 17                	jne    f010a7c9 <program_segment_alloc_map_copy_workingset+0x43f>
f010a7b2:	83 ec 04             	sub    $0x4,%esp
f010a7b5:	68 b0 69 13 f0       	push   $0xf01369b0
f010a7ba:	68 86 02 00 00       	push   $0x286
f010a7bf:	68 75 69 13 f0       	push   $0xf0136975
f010a7c4:	e8 3c 5a ff ff       	call   f0100205 <_panic>
f010a7c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cc:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7d8:	89 d0                	mov    %edx,%eax
f010a7da:	01 c0                	add    %eax,%eax
f010a7dc:	01 d0                	add    %edx,%eax
f010a7de:	c1 e0 03             	shl    $0x3,%eax
f010a7e1:	01 c8                	add    %ecx,%eax
f010a7e3:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7e6:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a7ec:	89 50 10             	mov    %edx,0x10(%eax)
f010a7ef:	8b 40 10             	mov    0x10(%eax),%eax
f010a7f2:	85 c0                	test   %eax,%eax
f010a7f4:	74 28                	je     f010a81e <program_segment_alloc_map_copy_workingset+0x494>
f010a7f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f9:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a7ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a802:	8b 58 78             	mov    0x78(%eax),%ebx
f010a805:	8b 45 08             	mov    0x8(%ebp),%eax
f010a808:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a80e:	89 c8                	mov    %ecx,%eax
f010a810:	01 c0                	add    %eax,%eax
f010a812:	01 c8                	add    %ecx,%eax
f010a814:	c1 e0 03             	shl    $0x3,%eax
f010a817:	01 d8                	add    %ebx,%eax
f010a819:	89 42 14             	mov    %eax,0x14(%edx)
f010a81c:	eb 24                	jmp    f010a842 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a821:	8b 48 78             	mov    0x78(%eax),%ecx
f010a824:	8b 45 08             	mov    0x8(%ebp),%eax
f010a827:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a82d:	89 d0                	mov    %edx,%eax
f010a82f:	01 c0                	add    %eax,%eax
f010a831:	01 d0                	add    %edx,%eax
f010a833:	c1 e0 03             	shl    $0x3,%eax
f010a836:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a839:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83c:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a842:	8b 45 08             	mov    0x8(%ebp),%eax
f010a845:	8b 48 78             	mov    0x78(%eax),%ecx
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a851:	89 d0                	mov    %edx,%eax
f010a853:	01 c0                	add    %eax,%eax
f010a855:	01 d0                	add    %edx,%eax
f010a857:	c1 e0 03             	shl    $0x3,%eax
f010a85a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a85d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a860:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a866:	8b 45 08             	mov    0x8(%ebp),%eax
f010a869:	8b 48 78             	mov    0x78(%eax),%ecx
f010a86c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a875:	89 d0                	mov    %edx,%eax
f010a877:	01 c0                	add    %eax,%eax
f010a879:	01 d0                	add    %edx,%eax
f010a87b:	c1 e0 03             	shl    $0x3,%eax
f010a87e:	01 c8                	add    %ecx,%eax
f010a880:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a887:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88a:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a890:	8d 50 01             	lea    0x1(%eax),%edx
f010a893:	8b 45 08             	mov    0x8(%ebp),%eax
f010a896:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a8a5:	8d 50 01             	lea    0x1(%eax),%edx
f010a8a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ab:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a8b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b4:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a8ba:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8bd:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a8c0:	ba 00 00 00 00       	mov    $0x0,%edx
f010a8c5:	f7 f1                	div    %ecx
f010a8c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ca:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a8d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8d3:	c1 e8 16             	shr    $0x16,%eax
f010a8d6:	89 c2                	mov    %eax,%edx
f010a8d8:	8b 45 18             	mov    0x18(%ebp),%eax
f010a8db:	8b 00                	mov    (%eax),%eax
f010a8dd:	39 c2                	cmp    %eax,%edx
f010a8df:	0f 84 cf 00 00 00    	je     f010a9b4 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e8:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a8f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a8f7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a8fc:	89 c1                	mov    %eax,%ecx
f010a8fe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a901:	89 d0                	mov    %edx,%eax
f010a903:	01 c0                	add    %eax,%eax
f010a905:	01 d0                	add    %edx,%eax
f010a907:	c1 e0 03             	shl    $0x3,%eax
f010a90a:	01 d8                	add    %ebx,%eax
f010a90c:	83 c0 7c             	add    $0x7c,%eax
f010a90f:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a911:	8b 45 08             	mov    0x8(%ebp),%eax
f010a914:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a91a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a91d:	89 d0                	mov    %edx,%eax
f010a91f:	01 c0                	add    %eax,%eax
f010a921:	01 d0                	add    %edx,%eax
f010a923:	c1 e0 03             	shl    $0x3,%eax
f010a926:	01 c8                	add    %ecx,%eax
f010a928:	83 e8 80             	sub    $0xffffff80,%eax
f010a92b:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a931:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a937:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a93a:	89 d0                	mov    %edx,%eax
f010a93c:	01 c0                	add    %eax,%eax
f010a93e:	01 d0                	add    %edx,%eax
f010a940:	c1 e0 03             	shl    $0x3,%eax
f010a943:	01 c8                	add    %ecx,%eax
f010a945:	05 84 00 00 00       	add    $0x84,%eax
f010a94a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a950:	8b 45 08             	mov    0x8(%ebp),%eax
f010a953:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a959:	8d 50 01             	lea    0x1(%eax),%edx
f010a95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95f:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a965:	8b 45 08             	mov    0x8(%ebp),%eax
f010a968:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a96e:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a973:	ba 00 00 00 00       	mov    $0x0,%edx
f010a978:	f7 f1                	div    %ecx
f010a97a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97d:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a983:	8b 45 08             	mov    0x8(%ebp),%eax
f010a986:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a98c:	85 c0                	test   %eax,%eax
f010a98e:	75 17                	jne    f010a9a7 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 28 6a 13 f0       	push   $0xf0136a28
f010a998:	68 96 02 00 00       	push   $0x296
f010a99d:	68 75 69 13 f0       	push   $0xf0136975
f010a9a2:	e8 5e 58 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a9a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9aa:	c1 e8 16             	shr    $0x16,%eax
f010a9ad:	89 c2                	mov    %eax,%edx
f010a9af:	8b 45 18             	mov    0x18(%ebp),%eax
f010a9b2:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a9b4:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9b7:	8b 00                	mov    (%eax),%eax
f010a9b9:	8d 50 01             	lea    0x1(%eax),%edx
f010a9bc:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9bf:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a9c1:	ff 45 f0             	incl   -0x10(%ebp)
f010a9c4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a9cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9ce:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a9d1:	73 0c                	jae    f010a9df <program_segment_alloc_map_copy_workingset+0x655>
f010a9d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9d6:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a9d9:	0f 82 5a fa ff ff    	jb     f010a439 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a9df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9e2:	8b 00                	mov    (%eax),%eax
f010a9e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a9e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9ea:	8b 40 0c             	mov    0xc(%eax),%eax
f010a9ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a9f0:	eb 10                	jmp    f010aa02 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a9f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a9f5:	8a 10                	mov    (%eax),%dl
f010a9f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9fa:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a9fc:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a9ff:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010aa02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa05:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010aa08:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010aa0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010aa10:	89 c2                	mov    %eax,%edx
f010aa12:	8b 45 10             	mov    0x10(%ebp),%eax
f010aa15:	8b 00                	mov    (%eax),%eax
f010aa17:	c1 e0 0c             	shl    $0xc,%eax
f010aa1a:	01 c2                	add    %eax,%edx
f010aa1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa1f:	39 c2                	cmp    %eax,%edx
f010aa21:	76 1d                	jbe    f010aa40 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010aa23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa26:	8b 50 04             	mov    0x4(%eax),%edx
f010aa29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa2c:	01 c2                	add    %eax,%edx
f010aa2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010aa31:	39 c2                	cmp    %eax,%edx
f010aa33:	77 bd                	ja     f010a9f2 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010aa35:	eb 09                	jmp    f010aa40 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010aa37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa3a:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010aa3d:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010aa40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa43:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010aa46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010aa49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010aa4e:	89 c2                	mov    %eax,%edx
f010aa50:	8b 45 10             	mov    0x10(%ebp),%eax
f010aa53:	8b 00                	mov    (%eax),%eax
f010aa55:	c1 e0 0c             	shl    $0xc,%eax
f010aa58:	01 c2                	add    %eax,%edx
f010aa5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa5d:	39 c2                	cmp    %eax,%edx
f010aa5f:	77 d6                	ja     f010aa37 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010aa61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010aa66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aa69:	c9                   	leave  
f010aa6a:	c3                   	ret    

f010aa6b <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010aa6b:	55                   	push   %ebp
f010aa6c:	89 e5                	mov    %esp,%ebp
f010aa6e:	53                   	push   %ebx
f010aa6f:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010aa72:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa75:	8b 55 0c             	mov    0xc(%ebp),%edx
f010aa78:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010aa7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7e:	8b 55 10             	mov    0x10(%ebp),%edx
f010aa81:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010aa84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa8b:	eb 17                	jmp    f010aaa4 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010aa8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa90:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa96:	c1 e2 02             	shl    $0x2,%edx
f010aa99:	01 d0                	add    %edx,%eax
f010aa9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010aaa1:	ff 45 f4             	incl   -0xc(%ebp)
f010aaa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa7:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010aaac:	76 df                	jbe    f010aa8d <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aaae:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010aab5:	eb 22                	jmp    f010aad9 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010aab7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaba:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aabd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aac0:	c1 e2 02             	shl    $0x2,%edx
f010aac3:	01 c2                	add    %eax,%edx
f010aac5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f010aaca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010aacd:	c1 e1 02             	shl    $0x2,%ecx
f010aad0:	01 c8                	add    %ecx,%eax
f010aad2:	8b 00                	mov    (%eax),%eax
f010aad4:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aad6:	ff 45 f4             	incl   -0xc(%ebp)
f010aad9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010aae0:	7e d5                	jle    f010aab7 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010aae2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae5:	8b 40 74             	mov    0x74(%eax),%eax
f010aae8:	83 ec 08             	sub    $0x8,%esp
f010aaeb:	50                   	push   %eax
f010aaec:	ff 75 08             	pushl  0x8(%ebp)
f010aaef:	e8 13 f8 ff ff       	call   f010a307 <create_user_page_WS>
f010aaf4:	83 c4 10             	add    $0x10,%esp
f010aaf7:	89 c2                	mov    %eax,%edx
f010aaf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafc:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010aaff:	83 ec 0c             	sub    $0xc,%esp
f010ab02:	ff 75 08             	pushl  0x8(%ebp)
f010ab05:	e8 f3 04 00 00       	call   f010affd <share_pws_at_user_space>
f010ab0a:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010ab0d:	83 ec 0c             	sub    $0xc,%esp
f010ab10:	6a 02                	push   $0x2
f010ab12:	e8 e8 36 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010ab17:	83 c4 10             	add    $0x10,%esp
f010ab1a:	85 c0                	test   %eax,%eax
f010ab1c:	0f 84 04 01 00 00    	je     f010ac26 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ab22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ab29:	e9 e7 00 00 00       	jmp    f010ac15 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010ab2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab31:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab34:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab37:	89 d0                	mov    %edx,%eax
f010ab39:	01 c0                	add    %eax,%eax
f010ab3b:	01 d0                	add    %edx,%eax
f010ab3d:	c1 e0 03             	shl    $0x3,%eax
f010ab40:	01 c8                	add    %ecx,%eax
f010ab42:	85 c0                	test   %eax,%eax
f010ab44:	75 17                	jne    f010ab5d <initialize_environment+0xf2>
f010ab46:	83 ec 04             	sub    $0x4,%esp
f010ab49:	68 b0 69 13 f0       	push   $0xf01369b0
f010ab4e:	68 f4 02 00 00       	push   $0x2f4
f010ab53:	68 75 69 13 f0       	push   $0xf0136975
f010ab58:	e8 a8 56 ff ff       	call   f0100205 <_panic>
f010ab5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab60:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab63:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab66:	89 d0                	mov    %edx,%eax
f010ab68:	01 c0                	add    %eax,%eax
f010ab6a:	01 d0                	add    %edx,%eax
f010ab6c:	c1 e0 03             	shl    $0x3,%eax
f010ab6f:	01 c8                	add    %ecx,%eax
f010ab71:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab74:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010ab7a:	89 50 10             	mov    %edx,0x10(%eax)
f010ab7d:	8b 40 10             	mov    0x10(%eax),%eax
f010ab80:	85 c0                	test   %eax,%eax
f010ab82:	74 22                	je     f010aba6 <initialize_environment+0x13b>
f010ab84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab87:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010ab8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab90:	8b 58 78             	mov    0x78(%eax),%ebx
f010ab93:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010ab96:	89 c8                	mov    %ecx,%eax
f010ab98:	01 c0                	add    %eax,%eax
f010ab9a:	01 c8                	add    %ecx,%eax
f010ab9c:	c1 e0 03             	shl    $0x3,%eax
f010ab9f:	01 d8                	add    %ebx,%eax
f010aba1:	89 42 14             	mov    %eax,0x14(%edx)
f010aba4:	eb 1e                	jmp    f010abc4 <initialize_environment+0x159>
f010aba6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba9:	8b 48 78             	mov    0x78(%eax),%ecx
f010abac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abaf:	89 d0                	mov    %edx,%eax
f010abb1:	01 c0                	add    %eax,%eax
f010abb3:	01 d0                	add    %edx,%eax
f010abb5:	c1 e0 03             	shl    $0x3,%eax
f010abb8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010abbb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbe:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010abc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abc7:	8b 48 78             	mov    0x78(%eax),%ecx
f010abca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abcd:	89 d0                	mov    %edx,%eax
f010abcf:	01 c0                	add    %eax,%eax
f010abd1:	01 d0                	add    %edx,%eax
f010abd3:	c1 e0 03             	shl    $0x3,%eax
f010abd6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010abd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdc:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010abe2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe5:	8b 48 78             	mov    0x78(%eax),%ecx
f010abe8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abeb:	89 d0                	mov    %edx,%eax
f010abed:	01 c0                	add    %eax,%eax
f010abef:	01 d0                	add    %edx,%eax
f010abf1:	c1 e0 03             	shl    $0x3,%eax
f010abf4:	01 c8                	add    %ecx,%eax
f010abf6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010abfd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac00:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ac06:	8d 50 01             	lea    0x1(%eax),%edx
f010ac09:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0c:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ac12:	ff 45 f0             	incl   -0x10(%ebp)
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac1e:	39 c2                	cmp    %eax,%edx
f010ac20:	0f 87 08 ff ff ff    	ja     f010ab2e <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ac26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ac2d:	eb 50                	jmp    f010ac7f <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ac2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac32:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac38:	89 d0                	mov    %edx,%eax
f010ac3a:	01 c0                	add    %eax,%eax
f010ac3c:	01 d0                	add    %edx,%eax
f010ac3e:	c1 e0 03             	shl    $0x3,%eax
f010ac41:	01 c8                	add    %ecx,%eax
f010ac43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ac49:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4c:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac52:	89 d0                	mov    %edx,%eax
f010ac54:	01 c0                	add    %eax,%eax
f010ac56:	01 d0                	add    %edx,%eax
f010ac58:	c1 e0 03             	shl    $0x3,%eax
f010ac5b:	01 c8                	add    %ecx,%eax
f010ac5d:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010ac61:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac64:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac6a:	89 d0                	mov    %edx,%eax
f010ac6c:	01 c0                	add    %eax,%eax
f010ac6e:	01 d0                	add    %edx,%eax
f010ac70:	c1 e0 03             	shl    $0x3,%eax
f010ac73:	01 c8                	add    %ecx,%eax
f010ac75:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ac7c:	ff 45 f4             	incl   -0xc(%ebp)
f010ac7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac82:	8b 50 74             	mov    0x74(%eax),%edx
f010ac85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac88:	39 c2                	cmp    %eax,%edx
f010ac8a:	77 a3                	ja     f010ac2f <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8f:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010ac96:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ac99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aca0:	eb 50                	jmp    f010acf2 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010aca2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aca5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aca8:	89 d0                	mov    %edx,%eax
f010acaa:	01 c0                	add    %eax,%eax
f010acac:	01 d0                	add    %edx,%eax
f010acae:	c1 e0 03             	shl    $0x3,%eax
f010acb1:	01 c8                	add    %ecx,%eax
f010acb3:	83 c0 7c             	add    $0x7c,%eax
f010acb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010acbc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010acbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010acc2:	89 d0                	mov    %edx,%eax
f010acc4:	01 c0                	add    %eax,%eax
f010acc6:	01 d0                	add    %edx,%eax
f010acc8:	c1 e0 03             	shl    $0x3,%eax
f010accb:	01 c8                	add    %ecx,%eax
f010accd:	83 e8 80             	sub    $0xffffff80,%eax
f010acd0:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010acd3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010acd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010acd9:	89 d0                	mov    %edx,%eax
f010acdb:	01 c0                	add    %eax,%eax
f010acdd:	01 d0                	add    %edx,%eax
f010acdf:	c1 e0 03             	shl    $0x3,%eax
f010ace2:	01 c8                	add    %ecx,%eax
f010ace4:	05 84 00 00 00       	add    $0x84,%eax
f010ace9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010acef:	ff 45 f4             	incl   -0xc(%ebp)
f010acf2:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010acf6:	7e aa                	jle    f010aca2 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010acf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfb:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ad02:	00 00 00 

	e->pageFaultsCounter=0;
f010ad05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad08:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ad0f:	00 00 00 
	e->tableFaultsCounter=0;
f010ad12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad15:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ad1c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ad1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad22:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ad29:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ad2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2f:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ad36:	00 00 00 

	e->nModifiedPages=0;
f010ad39:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3c:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ad43:	00 00 00 
	e->nNotModifiedPages=0;
f010ad46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad49:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ad50:	00 00 00 
	e->nClocks = 0;
f010ad53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad56:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010ad5d:	00 00 00 

	//2020
	e->nPageIn = 0;
f010ad60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad63:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010ad6a:	00 00 00 
	e->nPageOut = 0;
f010ad6d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad70:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010ad77:	00 00 00 
	e->nNewPageAdded = 0;
f010ad7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7d:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010ad84:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010ad87:	83 ec 0c             	sub    $0xc,%esp
f010ad8a:	ff 75 08             	pushl  0x8(%ebp)
f010ad8d:	e8 09 00 00 00       	call   f010ad9b <complete_environment_initialization>
f010ad92:	83 c4 10             	add    $0x10,%esp
}
f010ad95:	90                   	nop
f010ad96:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ad99:	c9                   	leave  
f010ad9a:	c3                   	ret    

f010ad9b <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010ad9b:	55                   	push   %ebp
f010ad9c:	89 e5                	mov    %esp,%ebp
f010ad9e:	53                   	push   %ebx
f010ad9f:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010ada2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ada8:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010adae:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb1:	8b 40 60             	mov    0x60(%eax),%eax
f010adb4:	83 c8 03             	or     $0x3,%eax
f010adb7:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010adb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010adbf:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010adc5:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc8:	8b 40 60             	mov    0x60(%eax),%eax
f010adcb:	83 c8 05             	or     $0x5,%eax
f010adce:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010add0:	8b 45 08             	mov    0x8(%ebp),%eax
f010add3:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010adda:	8b 45 08             	mov    0x8(%ebp),%eax
f010addd:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ade4:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade7:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010adee:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf1:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010adf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adfb:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010adfe:	83 ec 0c             	sub    $0xc,%esp
f010ae01:	68 b1 02 00 00       	push   $0x2b1
f010ae06:	e8 71 59 02 00       	call   f013077c <log2_ceil>
f010ae0b:	83 c4 10             	add    $0x10,%esp
f010ae0e:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae13:	88 c1                	mov    %al,%cl
f010ae15:	d3 e2                	shl    %cl,%edx
f010ae17:	89 d0                	mov    %edx,%eax
f010ae19:	01 d8                	add    %ebx,%eax
f010ae1b:	89 c3                	mov    %eax,%ebx
f010ae1d:	83 ec 0c             	sub    $0xc,%esp
f010ae20:	68 b1 02 00 00       	push   $0x2b1
f010ae25:	e8 1d 59 02 00       	call   f0130747 <nearest_pow2_ceil>
f010ae2a:	83 c4 10             	add    $0x10,%esp
f010ae2d:	f7 d8                	neg    %eax
f010ae2f:	21 d8                	and    %ebx,%eax
f010ae31:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ae34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae38:	7f 1e                	jg     f010ae58 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ae3a:	83 ec 0c             	sub    $0xc,%esp
f010ae3d:	68 b1 02 00 00       	push   $0x2b1
f010ae42:	e8 35 59 02 00       	call   f013077c <log2_ceil>
f010ae47:	83 c4 10             	add    $0x10,%esp
f010ae4a:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae4f:	88 c1                	mov    %al,%cl
f010ae51:	d3 e2                	shl    %cl,%edx
f010ae53:	89 d0                	mov    %edx,%eax
f010ae55:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010ae58:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5b:	8b 15 f0 97 86 f0    	mov    0xf08697f0,%edx
f010ae61:	29 d0                	sub    %edx,%eax
f010ae63:	c1 f8 04             	sar    $0x4,%eax
f010ae66:	89 c2                	mov    %eax,%edx
f010ae68:	89 d0                	mov    %edx,%eax
f010ae6a:	c1 e0 03             	shl    $0x3,%eax
f010ae6d:	01 d0                	add    %edx,%eax
f010ae6f:	01 c0                	add    %eax,%eax
f010ae71:	01 d0                	add    %edx,%eax
f010ae73:	c1 e0 03             	shl    $0x3,%eax
f010ae76:	01 d0                	add    %edx,%eax
f010ae78:	89 c1                	mov    %eax,%ecx
f010ae7a:	c1 e1 08             	shl    $0x8,%ecx
f010ae7d:	01 c8                	add    %ecx,%eax
f010ae7f:	01 c0                	add    %eax,%eax
f010ae81:	01 d0                	add    %edx,%eax
f010ae83:	01 c0                	add    %eax,%eax
f010ae85:	01 d0                	add    %edx,%eax
f010ae87:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ae8e:	01 d0                	add    %edx,%eax
f010ae90:	89 c2                	mov    %eax,%edx
f010ae92:	c1 e2 09             	shl    $0x9,%edx
f010ae95:	29 c2                	sub    %eax,%edx
f010ae97:	89 d0                	mov    %edx,%eax
f010ae99:	f7 d8                	neg    %eax
f010ae9b:	0b 45 f4             	or     -0xc(%ebp),%eax
f010ae9e:	89 c2                	mov    %eax,%edx
f010aea0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea3:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aea6:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010aeab:	85 c0                	test   %eax,%eax
f010aead:	75 0c                	jne    f010aebb <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010aeaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb2:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aeb9:	eb 0e                	jmp    f010aec9 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aebb:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010aec0:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aec3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec6:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aec9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aecc:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aed3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed6:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aedd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee0:	83 ec 04             	sub    $0x4,%esp
f010aee3:	6a 44                	push   $0x44
f010aee5:	6a 00                	push   $0x0
f010aee7:	50                   	push   %eax
f010aee8:	e8 d6 6c 02 00       	call   f0131bc3 <memset>
f010aeed:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aef0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef3:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aef9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefc:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010af02:	8b 45 08             	mov    0x8(%ebp),%eax
f010af05:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010af0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af0e:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010af15:	8b 45 08             	mov    0x8(%ebp),%eax
f010af18:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010af1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010af21:	8b 40 38             	mov    0x38(%eax),%eax
f010af24:	80 cc 02             	or     $0x2,%ah
f010af27:	89 c2                	mov    %eax,%edx
f010af29:	8b 45 08             	mov    0x8(%ebp),%eax
f010af2c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010af2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af33:	75 17                	jne    f010af4c <complete_environment_initialization+0x1b1>
f010af35:	83 ec 04             	sub    $0x4,%esp
f010af38:	68 92 69 13 f0       	push   $0xf0136992
f010af3d:	68 58 03 00 00       	push   $0x358
f010af42:	68 75 69 13 f0       	push   $0xf0136975
f010af47:	e8 b9 52 ff ff       	call   f0100205 <_panic>
f010af4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4f:	8b 40 44             	mov    0x44(%eax),%eax
f010af52:	85 c0                	test   %eax,%eax
f010af54:	74 11                	je     f010af67 <complete_environment_initialization+0x1cc>
f010af56:	8b 45 08             	mov    0x8(%ebp),%eax
f010af59:	8b 40 44             	mov    0x44(%eax),%eax
f010af5c:	8b 55 08             	mov    0x8(%ebp),%edx
f010af5f:	8b 52 48             	mov    0x48(%edx),%edx
f010af62:	89 50 48             	mov    %edx,0x48(%eax)
f010af65:	eb 0b                	jmp    f010af72 <complete_environment_initialization+0x1d7>
f010af67:	8b 45 08             	mov    0x8(%ebp),%eax
f010af6a:	8b 40 48             	mov    0x48(%eax),%eax
f010af6d:	a3 fc 97 86 f0       	mov    %eax,0xf08697fc
f010af72:	8b 45 08             	mov    0x8(%ebp),%eax
f010af75:	8b 40 48             	mov    0x48(%eax),%eax
f010af78:	85 c0                	test   %eax,%eax
f010af7a:	74 11                	je     f010af8d <complete_environment_initialization+0x1f2>
f010af7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af7f:	8b 40 48             	mov    0x48(%eax),%eax
f010af82:	8b 55 08             	mov    0x8(%ebp),%edx
f010af85:	8b 52 44             	mov    0x44(%edx),%edx
f010af88:	89 50 44             	mov    %edx,0x44(%eax)
f010af8b:	eb 0b                	jmp    f010af98 <complete_environment_initialization+0x1fd>
f010af8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af90:	8b 40 44             	mov    0x44(%eax),%eax
f010af93:	a3 f8 97 86 f0       	mov    %eax,0xf08697f8
f010af98:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010afa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010afac:	a1 04 98 86 f0       	mov    0xf0869804,%eax
f010afb1:	48                   	dec    %eax
f010afb2:	a3 04 98 86 f0       	mov    %eax,0xf0869804
	return ;
f010afb7:	90                   	nop
}
f010afb8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010afbb:	c9                   	leave  
f010afbc:	c3                   	ret    

f010afbd <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010afbd:	55                   	push   %ebp
f010afbe:	89 e5                	mov    %esp,%ebp
f010afc0:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afcc:	8b 00                	mov    (%eax),%eax
f010afce:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afd3:	74 17                	je     f010afec <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010afd5:	83 ec 04             	sub    $0x4,%esp
f010afd8:	68 cb 6a 13 f0       	push   $0xf0136acb
f010afdd:	68 64 03 00 00       	push   $0x364
f010afe2:	68 75 69 13 f0       	push   $0xf0136975
f010afe7:	e8 19 52 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010afec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afef:	8b 40 18             	mov    0x18(%eax),%eax
f010aff2:	89 c2                	mov    %eax,%edx
f010aff4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff7:	89 50 30             	mov    %edx,0x30(%eax)
}
f010affa:	90                   	nop
f010affb:	c9                   	leave  
f010affc:	c3                   	ret    

f010affd <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010affd:	55                   	push   %ebp
f010affe:	89 e5                	mov    %esp,%ebp
f010b000:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010b003:	8b 45 08             	mov    0x8(%ebp),%eax
f010b006:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010b00d:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010b010:	8b 45 08             	mov    0x8(%ebp),%eax
f010b013:	8b 40 78             	mov    0x78(%eax),%eax
f010b016:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b019:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01c:	8b 50 74             	mov    0x74(%eax),%edx
f010b01f:	89 d0                	mov    %edx,%eax
f010b021:	01 c0                	add    %eax,%eax
f010b023:	01 d0                	add    %edx,%eax
f010b025:	c1 e0 03             	shl    $0x3,%eax
f010b028:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010b02b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02e:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b034:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b037:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03a:	8b 40 78             	mov    0x78(%eax),%eax
f010b03d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b040:	eb 71                	jmp    f010b0b3 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010b042:	83 ec 0c             	sub    $0xc,%esp
f010b045:	ff 75 f4             	pushl  -0xc(%ebp)
f010b048:	e8 7d cb ff ff       	call   f0107bca <kheap_physical_address>
f010b04d:	83 c4 10             	add    $0x10,%esp
f010b050:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010b053:	8b 45 08             	mov    0x8(%ebp),%eax
f010b056:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b059:	83 ec 04             	sub    $0x4,%esp
f010b05c:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010b05f:	52                   	push   %edx
f010b060:	ff 75 f0             	pushl  -0x10(%ebp)
f010b063:	50                   	push   %eax
f010b064:	e8 a7 b9 ff ff       	call   f0106a10 <get_page_table>
f010b069:	83 c4 10             	add    $0x10,%esp
f010b06c:	83 f8 01             	cmp    $0x1,%eax
f010b06f:	75 18                	jne    f010b089 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010b071:	8b 45 08             	mov    0x8(%ebp),%eax
f010b074:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b077:	83 ec 08             	sub    $0x8,%esp
f010b07a:	ff 75 f0             	pushl  -0x10(%ebp)
f010b07d:	50                   	push   %eax
f010b07e:	e8 e3 ba ff ff       	call   f0106b66 <create_page_table>
f010b083:	83 c4 10             	add    $0x10,%esp
f010b086:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010b089:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b08c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b08f:	c1 ea 0c             	shr    $0xc,%edx
f010b092:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b098:	c1 e2 02             	shl    $0x2,%edx
f010b09b:	01 d0                	add    %edx,%eax
f010b09d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b0a0:	83 ca 05             	or     $0x5,%edx
f010b0a3:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b0a5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b0ac:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b0b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b6:	8b 40 78             	mov    0x78(%eax),%eax
f010b0b9:	89 c2                	mov    %eax,%edx
f010b0bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0be:	01 d0                	add    %edx,%eax
f010b0c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b0c3:	0f 87 79 ff ff ff    	ja     f010b042 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b0c9:	90                   	nop
f010b0ca:	c9                   	leave  
f010b0cb:	c3                   	ret    

f010b0cc <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b0cc:	55                   	push   %ebp
f010b0cd:	89 e5                	mov    %esp,%ebp
f010b0cf:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d5:	8b 50 74             	mov    0x74(%eax),%edx
f010b0d8:	89 d0                	mov    %edx,%eax
f010b0da:	01 c0                	add    %eax,%eax
f010b0dc:	01 d0                	add    %edx,%eax
f010b0de:	c1 e0 03             	shl    $0x3,%eax
f010b0e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b0e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e7:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b0ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b0f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f3:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b0f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b0fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b0ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b104:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b107:	eb 46                	jmp    f010b14f <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b109:	8b 45 08             	mov    0x8(%ebp),%eax
f010b10c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b10f:	83 ec 04             	sub    $0x4,%esp
f010b112:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b115:	52                   	push   %edx
f010b116:	ff 75 f4             	pushl  -0xc(%ebp)
f010b119:	50                   	push   %eax
f010b11a:	e8 f1 b8 ff ff       	call   f0106a10 <get_page_table>
f010b11f:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b122:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b125:	83 ec 0c             	sub    $0xc,%esp
f010b128:	50                   	push   %eax
f010b129:	e8 85 c9 ff ff       	call   f0107ab3 <kfree>
f010b12e:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b137:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b13a:	c1 ea 16             	shr    $0x16,%edx
f010b13d:	c1 e2 02             	shl    $0x2,%edx
f010b140:	01 d0                	add    %edx,%eax
f010b142:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b148:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b14f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b152:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b158:	89 c2                	mov    %eax,%edx
f010b15a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b15d:	01 d0                	add    %edx,%eax
f010b15f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b162:	77 a5                	ja     f010b109 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b164:	0f 20 d8             	mov    %cr3,%eax
f010b167:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b16a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b16d:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b170:	90                   	nop
f010b171:	c9                   	leave  
f010b172:	c3                   	ret    

f010b173 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b173:	55                   	push   %ebp
f010b174:	89 e5                	mov    %esp,%ebp
f010b176:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b179:	8b 45 08             	mov    0x8(%ebp),%eax
f010b17c:	8b 40 10             	mov    0x10(%eax),%eax
f010b17f:	8d 48 01             	lea    0x1(%eax),%ecx
f010b182:	8b 55 08             	mov    0x8(%ebp),%edx
f010b185:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b188:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b18b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b18e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b191:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b194:	8b 00                	mov    (%eax),%eax
f010b196:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b19b:	74 17                	je     f010b1b4 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b19d:	83 ec 04             	sub    $0x4,%esp
f010b1a0:	68 cb 6a 13 f0       	push   $0xf0136acb
f010b1a5:	68 ae 03 00 00       	push   $0x3ae
f010b1aa:	68 75 69 13 f0       	push   $0xf0136975
f010b1af:	e8 51 50 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b1b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1b7:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1bd:	01 d0                	add    %edx,%eax
f010b1bf:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b1c2:	eb 0f                	jmp    f010b1d3 <PROGRAM_SEGMENT_NEXT+0x60>
f010b1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c7:	8b 40 10             	mov    0x10(%eax),%eax
f010b1ca:	8d 50 01             	lea    0x1(%eax),%edx
f010b1cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1d0:	89 50 10             	mov    %edx,0x10(%eax)
f010b1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1d6:	8b 40 10             	mov    0x10(%eax),%eax
f010b1d9:	c1 e0 05             	shl    $0x5,%eax
f010b1dc:	89 c2                	mov    %eax,%edx
f010b1de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1e1:	01 d0                	add    %edx,%eax
f010b1e3:	8b 00                	mov    (%eax),%eax
f010b1e5:	83 f8 01             	cmp    $0x1,%eax
f010b1e8:	74 13                	je     f010b1fd <PROGRAM_SEGMENT_NEXT+0x8a>
f010b1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1ed:	8b 50 10             	mov    0x10(%eax),%edx
f010b1f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1f3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b1f6:	0f b7 c0             	movzwl %ax,%eax
f010b1f9:	39 c2                	cmp    %eax,%edx
f010b1fb:	72 c7                	jb     f010b1c4 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b1fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b200:	8b 40 10             	mov    0x10(%eax),%eax
f010b203:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b206:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b209:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b20c:	0f b7 c0             	movzwl %ax,%eax
f010b20f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b212:	7e 63                	jle    f010b277 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b217:	c1 e0 05             	shl    $0x5,%eax
f010b21a:	89 c2                	mov    %eax,%edx
f010b21c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b21f:	01 d0                	add    %edx,%eax
f010b221:	8b 50 04             	mov    0x4(%eax),%edx
f010b224:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b227:	01 c2                	add    %eax,%edx
f010b229:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22c:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b22e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b231:	c1 e0 05             	shl    $0x5,%eax
f010b234:	89 c2                	mov    %eax,%edx
f010b236:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b239:	01 d0                	add    %edx,%eax
f010b23b:	8b 50 14             	mov    0x14(%eax),%edx
f010b23e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b241:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b244:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b247:	c1 e0 05             	shl    $0x5,%eax
f010b24a:	89 c2                	mov    %eax,%edx
f010b24c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b24f:	01 d0                	add    %edx,%eax
f010b251:	8b 50 10             	mov    0x10(%eax),%edx
f010b254:	8b 45 08             	mov    0x8(%ebp),%eax
f010b257:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b25a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b25d:	c1 e0 05             	shl    $0x5,%eax
f010b260:	89 c2                	mov    %eax,%edx
f010b262:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b265:	01 d0                	add    %edx,%eax
f010b267:	8b 40 08             	mov    0x8(%eax),%eax
f010b26a:	89 c2                	mov    %eax,%edx
f010b26c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26f:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b272:	8b 45 08             	mov    0x8(%ebp),%eax
f010b275:	eb 05                	jmp    f010b27c <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b277:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b27c:	c9                   	leave  
f010b27d:	c3                   	ret    

f010b27e <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b27e:	55                   	push   %ebp
f010b27f:	89 e5                	mov    %esp,%ebp
f010b281:	57                   	push   %edi
f010b282:	56                   	push   %esi
f010b283:	53                   	push   %ebx
f010b284:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b287:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b28e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b291:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b294:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b297:	8b 00                	mov    (%eax),%eax
f010b299:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b29e:	74 17                	je     f010b2b7 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b2a0:	83 ec 04             	sub    $0x4,%esp
f010b2a3:	68 cb 6a 13 f0       	push   $0xf0136acb
f010b2a8:	68 ca 03 00 00       	push   $0x3ca
f010b2ad:	68 75 69 13 f0       	push   $0xf0136975
f010b2b2:	e8 4e 4f ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b2b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2ba:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b2bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2c0:	01 d0                	add    %edx,%eax
f010b2c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b2c5:	eb 07                	jmp    f010b2ce <PROGRAM_SEGMENT_FIRST+0x50>
f010b2c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2ca:	40                   	inc    %eax
f010b2cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b2ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2d1:	c1 e0 05             	shl    $0x5,%eax
f010b2d4:	89 c2                	mov    %eax,%edx
f010b2d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b2d9:	01 d0                	add    %edx,%eax
f010b2db:	8b 00                	mov    (%eax),%eax
f010b2dd:	83 f8 01             	cmp    $0x1,%eax
f010b2e0:	74 10                	je     f010b2f2 <PROGRAM_SEGMENT_FIRST+0x74>
f010b2e2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b2e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2e8:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b2eb:	0f b7 c0             	movzwl %ax,%eax
f010b2ee:	39 c2                	cmp    %eax,%edx
f010b2f0:	72 d5                	jb     f010b2c7 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b2f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2f5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b2f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2fb:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b2fe:	0f b7 c0             	movzwl %ax,%eax
f010b301:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b304:	7e 68                	jle    f010b36e <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b306:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b309:	c1 e0 05             	shl    $0x5,%eax
f010b30c:	89 c2                	mov    %eax,%edx
f010b30e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b311:	01 d0                	add    %edx,%eax
f010b313:	8b 50 04             	mov    0x4(%eax),%edx
f010b316:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b319:	01 d0                	add    %edx,%eax
f010b31b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b31e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b321:	c1 e0 05             	shl    $0x5,%eax
f010b324:	89 c2                	mov    %eax,%edx
f010b326:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b329:	01 d0                	add    %edx,%eax
f010b32b:	8b 40 14             	mov    0x14(%eax),%eax
f010b32e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b331:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b334:	c1 e0 05             	shl    $0x5,%eax
f010b337:	89 c2                	mov    %eax,%edx
f010b339:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b33c:	01 d0                	add    %edx,%eax
f010b33e:	8b 40 10             	mov    0x10(%eax),%eax
f010b341:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b344:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b347:	c1 e0 05             	shl    $0x5,%eax
f010b34a:	89 c2                	mov    %eax,%edx
f010b34c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b34f:	01 d0                	add    %edx,%eax
f010b351:	8b 40 08             	mov    0x8(%eax),%eax
f010b354:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b357:	8b 45 08             	mov    0x8(%ebp),%eax
f010b35a:	89 c3                	mov    %eax,%ebx
f010b35c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b35f:	ba 05 00 00 00       	mov    $0x5,%edx
f010b364:	89 df                	mov    %ebx,%edi
f010b366:	89 c6                	mov    %eax,%esi
f010b368:	89 d1                	mov    %edx,%ecx
f010b36a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b36c:	eb 1c                	jmp    f010b38a <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b36e:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b375:	8b 45 08             	mov    0x8(%ebp),%eax
f010b378:	89 c3                	mov    %eax,%ebx
f010b37a:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b37d:	ba 05 00 00 00       	mov    $0x5,%edx
f010b382:	89 df                	mov    %ebx,%edi
f010b384:	89 c6                	mov    %eax,%esi
f010b386:	89 d1                	mov    %edx,%ecx
f010b388:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b38d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b390:	5b                   	pop    %ebx
f010b391:	5e                   	pop    %esi
f010b392:	5f                   	pop    %edi
f010b393:	5d                   	pop    %ebp
f010b394:	c2 04 00             	ret    $0x4

f010b397 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b397:	55                   	push   %ebp
f010b398:	89 e5                	mov    %esp,%ebp
f010b39a:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b39d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b3a4:	a1 b8 a0 86 f0       	mov    0xf086a0b8,%eax
f010b3a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b3ac:	e9 c3 00 00 00       	jmp    f010b474 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b3b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3b4:	8b 40 10             	mov    0x10(%eax),%eax
f010b3b7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b3ba:	0f 85 ac 00 00 00    	jne    f010b46c <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b3c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3c3:	8b 50 0c             	mov    0xc(%eax),%edx
f010b3c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3c9:	8b 40 10             	mov    0x10(%eax),%eax
f010b3cc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b3cf:	83 ec 08             	sub    $0x8,%esp
f010b3d2:	52                   	push   %edx
f010b3d3:	50                   	push   %eax
f010b3d4:	e8 cd c9 ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f010b3d9:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b3dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3e0:	75 17                	jne    f010b3f9 <cleanup_buffers+0x62>
f010b3e2:	83 ec 04             	sub    $0x4,%esp
f010b3e5:	68 92 69 13 f0       	push   $0xf0136992
f010b3ea:	68 f1 03 00 00       	push   $0x3f1
f010b3ef:	68 75 69 13 f0       	push   $0xf0136975
f010b3f4:	e8 0c 4e ff ff       	call   f0100205 <_panic>
f010b3f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3fc:	8b 00                	mov    (%eax),%eax
f010b3fe:	85 c0                	test   %eax,%eax
f010b400:	74 10                	je     f010b412 <cleanup_buffers+0x7b>
f010b402:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b405:	8b 00                	mov    (%eax),%eax
f010b407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b40a:	8b 52 04             	mov    0x4(%edx),%edx
f010b40d:	89 50 04             	mov    %edx,0x4(%eax)
f010b410:	eb 0b                	jmp    f010b41d <cleanup_buffers+0x86>
f010b412:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b415:	8b 40 04             	mov    0x4(%eax),%eax
f010b418:	a3 bc a0 86 f0       	mov    %eax,0xf086a0bc
f010b41d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b420:	8b 40 04             	mov    0x4(%eax),%eax
f010b423:	85 c0                	test   %eax,%eax
f010b425:	74 0f                	je     f010b436 <cleanup_buffers+0x9f>
f010b427:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b42a:	8b 40 04             	mov    0x4(%eax),%eax
f010b42d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b430:	8b 12                	mov    (%edx),%edx
f010b432:	89 10                	mov    %edx,(%eax)
f010b434:	eb 0a                	jmp    f010b440 <cleanup_buffers+0xa9>
f010b436:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b439:	8b 00                	mov    (%eax),%eax
f010b43b:	a3 b8 a0 86 f0       	mov    %eax,0xf086a0b8
f010b440:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b443:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b449:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b44c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b453:	a1 c4 a0 86 f0       	mov    0xf086a0c4,%eax
f010b458:	48                   	dec    %eax
f010b459:	a3 c4 a0 86 f0       	mov    %eax,0xf086a0c4

			free_frame(ptr_fi);
f010b45e:	83 ec 0c             	sub    $0xc,%esp
f010b461:	ff 75 f4             	pushl  -0xc(%ebp)
f010b464:	e8 fd b4 ff ff       	call   f0106966 <free_frame>
f010b469:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b46c:	a1 c0 a0 86 f0       	mov    0xf086a0c0,%eax
f010b471:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b474:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b478:	74 07                	je     f010b481 <cleanup_buffers+0xea>
f010b47a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b47d:	8b 00                	mov    (%eax),%eax
f010b47f:	eb 05                	jmp    f010b486 <cleanup_buffers+0xef>
f010b481:	b8 00 00 00 00       	mov    $0x0,%eax
f010b486:	a3 c0 a0 86 f0       	mov    %eax,0xf086a0c0
f010b48b:	a1 c0 a0 86 f0       	mov    0xf086a0c0,%eax
f010b490:	85 c0                	test   %eax,%eax
f010b492:	0f 85 19 ff ff ff    	jne    f010b3b1 <cleanup_buffers+0x1a>
f010b498:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b49c:	0f 85 0f ff ff ff    	jne    f010b3b1 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b4a2:	90                   	nop
f010b4a3:	c9                   	leave  
f010b4a4:	c3                   	ret    

f010b4a5 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b4a5:	55                   	push   %ebp
f010b4a6:	89 e5                	mov    %esp,%ebp
f010b4a8:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b4ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b4af:	7e 06                	jle    f010b4b7 <set_program_priority+0x12>
f010b4b1:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b4b5:	7e 14                	jle    f010b4cb <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b4b7:	83 ec 04             	sub    $0x4,%esp
f010b4ba:	68 e4 6a 13 f0       	push   $0xf0136ae4
f010b4bf:	6a 10                	push   $0x10
f010b4c1:	68 08 6b 13 f0       	push   $0xf0136b08
f010b4c6:	e8 3a 4d ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b4cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b4cf:	74 75                	je     f010b546 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b4d1:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b4d5:	77 56                	ja     f010b52d <set_program_priority+0x88>
f010b4d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4da:	c1 e0 02             	shl    $0x2,%eax
f010b4dd:	05 44 6b 13 f0       	add    $0xf0136b44,%eax
f010b4e2:	8b 00                	mov    (%eax),%eax
f010b4e4:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b4e6:	83 ec 08             	sub    $0x8,%esp
f010b4e9:	6a 01                	push   $0x1
f010b4eb:	ff 75 08             	pushl  0x8(%ebp)
f010b4ee:	e8 4f d3 ff ff       	call   f0108842 <half_WS_Size>
f010b4f3:	83 c4 10             	add    $0x10,%esp
			break;
f010b4f6:	eb 35                	jmp    f010b52d <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b4f8:	83 ec 08             	sub    $0x8,%esp
f010b4fb:	6a 00                	push   $0x0
f010b4fd:	ff 75 08             	pushl  0x8(%ebp)
f010b500:	e8 3d d3 ff ff       	call   f0108842 <half_WS_Size>
f010b505:	83 c4 10             	add    $0x10,%esp
			break;
f010b508:	eb 23                	jmp    f010b52d <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b50a:	83 ec 08             	sub    $0x8,%esp
f010b50d:	6a 01                	push   $0x1
f010b50f:	ff 75 08             	pushl  0x8(%ebp)
f010b512:	e8 0e d3 ff ff       	call   f0108825 <double_WS_Size>
f010b517:	83 c4 10             	add    $0x10,%esp
			break;
f010b51a:	eb 11                	jmp    f010b52d <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b51c:	83 ec 08             	sub    $0x8,%esp
f010b51f:	6a 00                	push   $0x0
f010b521:	ff 75 08             	pushl  0x8(%ebp)
f010b524:	e8 fc d2 ff ff       	call   f0108825 <double_WS_Size>
f010b529:	83 c4 10             	add    $0x10,%esp
			break;
f010b52c:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b52d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b530:	8b 40 74             	mov    0x74(%eax),%eax
f010b533:	83 ec 08             	sub    $0x8,%esp
f010b536:	50                   	push   %eax
f010b537:	68 25 6b 13 f0       	push   $0xf0136b25
f010b53c:	e8 cd 57 ff ff       	call   f0100d0e <cprintf>
f010b541:	83 c4 10             	add    $0x10,%esp
f010b544:	eb 01                	jmp    f010b547 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b546:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b547:	c9                   	leave  
f010b548:	c3                   	ret    

f010b549 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b549:	55                   	push   %ebp
f010b54a:	89 e5                	mov    %esp,%ebp
f010b54c:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b54f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b556:	eb 29                	jmp    f010b581 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b558:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b55b:	89 d0                	mov    %edx,%eax
f010b55d:	01 c0                	add    %eax,%eax
f010b55f:	01 d0                	add    %edx,%eax
f010b561:	c1 e0 02             	shl    $0x2,%eax
f010b564:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b569:	8b 00                	mov    (%eax),%eax
f010b56b:	83 ec 08             	sub    $0x8,%esp
f010b56e:	50                   	push   %eax
f010b56f:	ff 75 08             	pushl  0x8(%ebp)
f010b572:	e8 6a 65 02 00       	call   f0131ae1 <strcmp>
f010b577:	83 c4 10             	add    $0x10,%esp
f010b57a:	85 c0                	test   %eax,%eax
f010b57c:	74 0f                	je     f010b58d <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b57e:	ff 45 f4             	incl   -0xc(%ebp)
f010b581:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b586:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b589:	7c cd                	jl     f010b558 <get_user_program_info+0xf>
f010b58b:	eb 01                	jmp    f010b58e <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b58d:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b58e:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b593:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b596:	75 1a                	jne    f010b5b2 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b598:	83 ec 08             	sub    $0x8,%esp
f010b59b:	ff 75 08             	pushl  0x8(%ebp)
f010b59e:	68 d9 76 13 f0       	push   $0xf01376d9
f010b5a3:	e8 66 57 ff ff       	call   f0100d0e <cprintf>
f010b5a8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b5ab:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5b0:	eb 11                	jmp    f010b5c3 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b5b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b5b5:	89 d0                	mov    %edx,%eax
f010b5b7:	01 c0                	add    %eax,%eax
f010b5b9:	01 d0                	add    %edx,%eax
f010b5bb:	c1 e0 02             	shl    $0x2,%eax
f010b5be:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b5c3:	c9                   	leave  
f010b5c4:	c3                   	ret    

f010b5c5 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b5c5:	55                   	push   %ebp
f010b5c6:	89 e5                	mov    %esp,%ebp
f010b5c8:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b5cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b5d2:	eb 30                	jmp    f010b604 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b5d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b5d7:	89 d0                	mov    %edx,%eax
f010b5d9:	01 c0                	add    %eax,%eax
f010b5db:	01 d0                	add    %edx,%eax
f010b5dd:	c1 e0 02             	shl    $0x2,%eax
f010b5e0:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b5e5:	8b 00                	mov    (%eax),%eax
f010b5e7:	8b 55 08             	mov    0x8(%ebp),%edx
f010b5ea:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b5f0:	83 ec 08             	sub    $0x8,%esp
f010b5f3:	50                   	push   %eax
f010b5f4:	52                   	push   %edx
f010b5f5:	e8 e7 64 02 00       	call   f0131ae1 <strcmp>
f010b5fa:	83 c4 10             	add    $0x10,%esp
f010b5fd:	85 c0                	test   %eax,%eax
f010b5ff:	74 0f                	je     f010b610 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b601:	ff 45 f4             	incl   -0xc(%ebp)
f010b604:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b609:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b60c:	7c c6                	jl     f010b5d4 <get_user_program_info_by_env+0xf>
f010b60e:	eb 01                	jmp    f010b611 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b610:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b611:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b616:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b619:	75 17                	jne    f010b632 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b61b:	83 ec 0c             	sub    $0xc,%esp
f010b61e:	68 f4 76 13 f0       	push   $0xf01376f4
f010b623:	e8 e6 56 ff ff       	call   f0100d0e <cprintf>
f010b628:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b62b:	b8 00 00 00 00       	mov    $0x0,%eax
f010b630:	eb 11                	jmp    f010b643 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b632:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b635:	89 d0                	mov    %edx,%eax
f010b637:	01 c0                	add    %eax,%eax
f010b639:	01 d0                	add    %edx,%eax
f010b63b:	c1 e0 02             	shl    $0x2,%eax
f010b63e:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b643:	c9                   	leave  
f010b644:	c3                   	ret    

f010b645 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b645:	55                   	push   %ebp
f010b646:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b648:	8b 45 08             	mov    0x8(%ebp),%eax
f010b64b:	83 f8 13             	cmp    $0x13,%eax
f010b64e:	77 0c                	ja     f010b65c <trapname+0x17>
		return excnames[trapno];
f010b650:	8b 45 08             	mov    0x8(%ebp),%eax
f010b653:	8b 04 85 40 7b 13 f0 	mov    -0xfec84c0(,%eax,4),%eax
f010b65a:	eb 12                	jmp    f010b66e <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b65c:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b660:	75 07                	jne    f010b669 <trapname+0x24>
		return "System call";
f010b662:	b8 20 77 13 f0       	mov    $0xf0137720,%eax
f010b667:	eb 05                	jmp    f010b66e <trapname+0x29>
	return "(unknown trap)";
f010b669:	b8 2c 77 13 f0       	mov    $0xf013772c,%eax
}
f010b66e:	5d                   	pop    %ebp
f010b66f:	c3                   	ret    

f010b670 <idt_init>:


void
idt_init(void)
{
f010b670:	55                   	push   %ebp
f010b671:	89 e5                	mov    %esp,%ebp
f010b673:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b676:	b8 04 cd 10 f0       	mov    $0xf010cd04,%eax
f010b67b:	66 a3 90 98 86 f0    	mov    %ax,0xf0869890
f010b681:	66 c7 05 92 98 86 f0 	movw   $0x8,0xf0869892
f010b688:	08 00 
f010b68a:	a0 94 98 86 f0       	mov    0xf0869894,%al
f010b68f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b692:	a2 94 98 86 f0       	mov    %al,0xf0869894
f010b697:	a0 94 98 86 f0       	mov    0xf0869894,%al
f010b69c:	83 e0 1f             	and    $0x1f,%eax
f010b69f:	a2 94 98 86 f0       	mov    %al,0xf0869894
f010b6a4:	a0 95 98 86 f0       	mov    0xf0869895,%al
f010b6a9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6ac:	83 c8 0e             	or     $0xe,%eax
f010b6af:	a2 95 98 86 f0       	mov    %al,0xf0869895
f010b6b4:	a0 95 98 86 f0       	mov    0xf0869895,%al
f010b6b9:	83 e0 ef             	and    $0xffffffef,%eax
f010b6bc:	a2 95 98 86 f0       	mov    %al,0xf0869895
f010b6c1:	a0 95 98 86 f0       	mov    0xf0869895,%al
f010b6c6:	83 e0 9f             	and    $0xffffff9f,%eax
f010b6c9:	a2 95 98 86 f0       	mov    %al,0xf0869895
f010b6ce:	a0 95 98 86 f0       	mov    0xf0869895,%al
f010b6d3:	83 c8 80             	or     $0xffffff80,%eax
f010b6d6:	a2 95 98 86 f0       	mov    %al,0xf0869895
f010b6db:	b8 04 cd 10 f0       	mov    $0xf010cd04,%eax
f010b6e0:	c1 e8 10             	shr    $0x10,%eax
f010b6e3:	66 a3 96 98 86 f0    	mov    %ax,0xf0869896
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b6e9:	b8 0c cd 10 f0       	mov    $0xf010cd0c,%eax
f010b6ee:	66 a3 a0 99 86 f0    	mov    %ax,0xf08699a0
f010b6f4:	66 c7 05 a2 99 86 f0 	movw   $0x8,0xf08699a2
f010b6fb:	08 00 
f010b6fd:	a0 a4 99 86 f0       	mov    0xf08699a4,%al
f010b702:	83 e0 e0             	and    $0xffffffe0,%eax
f010b705:	a2 a4 99 86 f0       	mov    %al,0xf08699a4
f010b70a:	a0 a4 99 86 f0       	mov    0xf08699a4,%al
f010b70f:	83 e0 1f             	and    $0x1f,%eax
f010b712:	a2 a4 99 86 f0       	mov    %al,0xf08699a4
f010b717:	a0 a5 99 86 f0       	mov    0xf08699a5,%al
f010b71c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b71f:	83 c8 0e             	or     $0xe,%eax
f010b722:	a2 a5 99 86 f0       	mov    %al,0xf08699a5
f010b727:	a0 a5 99 86 f0       	mov    0xf08699a5,%al
f010b72c:	83 e0 ef             	and    $0xffffffef,%eax
f010b72f:	a2 a5 99 86 f0       	mov    %al,0xf08699a5
f010b734:	a0 a5 99 86 f0       	mov    0xf08699a5,%al
f010b739:	83 c8 60             	or     $0x60,%eax
f010b73c:	a2 a5 99 86 f0       	mov    %al,0xf08699a5
f010b741:	a0 a5 99 86 f0       	mov    0xf08699a5,%al
f010b746:	83 c8 80             	or     $0xffffff80,%eax
f010b749:	a2 a5 99 86 f0       	mov    %al,0xf08699a5
f010b74e:	b8 0c cd 10 f0       	mov    $0xf010cd0c,%eax
f010b753:	c1 e8 10             	shr    $0x10,%eax
f010b756:	66 a3 a6 99 86 f0    	mov    %ax,0xf08699a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b75c:	b8 16 cd 10 f0       	mov    $0xf010cd16,%eax
f010b761:	66 a3 60 98 86 f0    	mov    %ax,0xf0869860
f010b767:	66 c7 05 62 98 86 f0 	movw   $0x8,0xf0869862
f010b76e:	08 00 
f010b770:	a0 64 98 86 f0       	mov    0xf0869864,%al
f010b775:	83 e0 e0             	and    $0xffffffe0,%eax
f010b778:	a2 64 98 86 f0       	mov    %al,0xf0869864
f010b77d:	a0 64 98 86 f0       	mov    0xf0869864,%al
f010b782:	83 e0 1f             	and    $0x1f,%eax
f010b785:	a2 64 98 86 f0       	mov    %al,0xf0869864
f010b78a:	a0 65 98 86 f0       	mov    0xf0869865,%al
f010b78f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b792:	83 c8 0e             	or     $0xe,%eax
f010b795:	a2 65 98 86 f0       	mov    %al,0xf0869865
f010b79a:	a0 65 98 86 f0       	mov    0xf0869865,%al
f010b79f:	83 e0 ef             	and    $0xffffffef,%eax
f010b7a2:	a2 65 98 86 f0       	mov    %al,0xf0869865
f010b7a7:	a0 65 98 86 f0       	mov    0xf0869865,%al
f010b7ac:	83 e0 9f             	and    $0xffffff9f,%eax
f010b7af:	a2 65 98 86 f0       	mov    %al,0xf0869865
f010b7b4:	a0 65 98 86 f0       	mov    0xf0869865,%al
f010b7b9:	83 c8 80             	or     $0xffffff80,%eax
f010b7bc:	a2 65 98 86 f0       	mov    %al,0xf0869865
f010b7c1:	b8 16 cd 10 f0       	mov    $0xf010cd16,%eax
f010b7c6:	c1 e8 10             	shr    $0x10,%eax
f010b7c9:	66 a3 66 98 86 f0    	mov    %ax,0xf0869866


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b7cf:	b8 1e cd 10 f0       	mov    $0xf010cd1e,%eax
f010b7d4:	66 a3 20 98 86 f0    	mov    %ax,0xf0869820
f010b7da:	66 c7 05 22 98 86 f0 	movw   $0x8,0xf0869822
f010b7e1:	08 00 
f010b7e3:	a0 24 98 86 f0       	mov    0xf0869824,%al
f010b7e8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7eb:	a2 24 98 86 f0       	mov    %al,0xf0869824
f010b7f0:	a0 24 98 86 f0       	mov    0xf0869824,%al
f010b7f5:	83 e0 1f             	and    $0x1f,%eax
f010b7f8:	a2 24 98 86 f0       	mov    %al,0xf0869824
f010b7fd:	a0 25 98 86 f0       	mov    0xf0869825,%al
f010b802:	83 e0 f0             	and    $0xfffffff0,%eax
f010b805:	83 c8 0e             	or     $0xe,%eax
f010b808:	a2 25 98 86 f0       	mov    %al,0xf0869825
f010b80d:	a0 25 98 86 f0       	mov    0xf0869825,%al
f010b812:	83 e0 ef             	and    $0xffffffef,%eax
f010b815:	a2 25 98 86 f0       	mov    %al,0xf0869825
f010b81a:	a0 25 98 86 f0       	mov    0xf0869825,%al
f010b81f:	83 c8 60             	or     $0x60,%eax
f010b822:	a2 25 98 86 f0       	mov    %al,0xf0869825
f010b827:	a0 25 98 86 f0       	mov    0xf0869825,%al
f010b82c:	83 c8 80             	or     $0xffffff80,%eax
f010b82f:	a2 25 98 86 f0       	mov    %al,0xf0869825
f010b834:	b8 1e cd 10 f0       	mov    $0xf010cd1e,%eax
f010b839:	c1 e8 10             	shr    $0x10,%eax
f010b83c:	66 a3 26 98 86 f0    	mov    %ax,0xf0869826
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b842:	b8 28 cd 10 f0       	mov    $0xf010cd28,%eax
f010b847:	66 a3 28 98 86 f0    	mov    %ax,0xf0869828
f010b84d:	66 c7 05 2a 98 86 f0 	movw   $0x8,0xf086982a
f010b854:	08 00 
f010b856:	a0 2c 98 86 f0       	mov    0xf086982c,%al
f010b85b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b85e:	a2 2c 98 86 f0       	mov    %al,0xf086982c
f010b863:	a0 2c 98 86 f0       	mov    0xf086982c,%al
f010b868:	83 e0 1f             	and    $0x1f,%eax
f010b86b:	a2 2c 98 86 f0       	mov    %al,0xf086982c
f010b870:	a0 2d 98 86 f0       	mov    0xf086982d,%al
f010b875:	83 c8 0f             	or     $0xf,%eax
f010b878:	a2 2d 98 86 f0       	mov    %al,0xf086982d
f010b87d:	a0 2d 98 86 f0       	mov    0xf086982d,%al
f010b882:	83 e0 ef             	and    $0xffffffef,%eax
f010b885:	a2 2d 98 86 f0       	mov    %al,0xf086982d
f010b88a:	a0 2d 98 86 f0       	mov    0xf086982d,%al
f010b88f:	83 c8 60             	or     $0x60,%eax
f010b892:	a2 2d 98 86 f0       	mov    %al,0xf086982d
f010b897:	a0 2d 98 86 f0       	mov    0xf086982d,%al
f010b89c:	83 c8 80             	or     $0xffffff80,%eax
f010b89f:	a2 2d 98 86 f0       	mov    %al,0xf086982d
f010b8a4:	b8 28 cd 10 f0       	mov    $0xf010cd28,%eax
f010b8a9:	c1 e8 10             	shr    $0x10,%eax
f010b8ac:	66 a3 2e 98 86 f0    	mov    %ax,0xf086982e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b8b2:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010b8b7:	66 a3 30 98 86 f0    	mov    %ax,0xf0869830
f010b8bd:	66 c7 05 32 98 86 f0 	movw   $0x8,0xf0869832
f010b8c4:	08 00 
f010b8c6:	a0 34 98 86 f0       	mov    0xf0869834,%al
f010b8cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8ce:	a2 34 98 86 f0       	mov    %al,0xf0869834
f010b8d3:	a0 34 98 86 f0       	mov    0xf0869834,%al
f010b8d8:	83 e0 1f             	and    $0x1f,%eax
f010b8db:	a2 34 98 86 f0       	mov    %al,0xf0869834
f010b8e0:	a0 35 98 86 f0       	mov    0xf0869835,%al
f010b8e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8e8:	83 c8 0e             	or     $0xe,%eax
f010b8eb:	a2 35 98 86 f0       	mov    %al,0xf0869835
f010b8f0:	a0 35 98 86 f0       	mov    0xf0869835,%al
f010b8f5:	83 e0 ef             	and    $0xffffffef,%eax
f010b8f8:	a2 35 98 86 f0       	mov    %al,0xf0869835
f010b8fd:	a0 35 98 86 f0       	mov    0xf0869835,%al
f010b902:	83 c8 60             	or     $0x60,%eax
f010b905:	a2 35 98 86 f0       	mov    %al,0xf0869835
f010b90a:	a0 35 98 86 f0       	mov    0xf0869835,%al
f010b90f:	83 c8 80             	or     $0xffffff80,%eax
f010b912:	a2 35 98 86 f0       	mov    %al,0xf0869835
f010b917:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010b91c:	c1 e8 10             	shr    $0x10,%eax
f010b91f:	66 a3 36 98 86 f0    	mov    %ax,0xf0869836
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b925:	b8 3c cd 10 f0       	mov    $0xf010cd3c,%eax
f010b92a:	66 a3 38 98 86 f0    	mov    %ax,0xf0869838
f010b930:	66 c7 05 3a 98 86 f0 	movw   $0x8,0xf086983a
f010b937:	08 00 
f010b939:	a0 3c 98 86 f0       	mov    0xf086983c,%al
f010b93e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b941:	a2 3c 98 86 f0       	mov    %al,0xf086983c
f010b946:	a0 3c 98 86 f0       	mov    0xf086983c,%al
f010b94b:	83 e0 1f             	and    $0x1f,%eax
f010b94e:	a2 3c 98 86 f0       	mov    %al,0xf086983c
f010b953:	a0 3d 98 86 f0       	mov    0xf086983d,%al
f010b958:	83 c8 0f             	or     $0xf,%eax
f010b95b:	a2 3d 98 86 f0       	mov    %al,0xf086983d
f010b960:	a0 3d 98 86 f0       	mov    0xf086983d,%al
f010b965:	83 e0 ef             	and    $0xffffffef,%eax
f010b968:	a2 3d 98 86 f0       	mov    %al,0xf086983d
f010b96d:	a0 3d 98 86 f0       	mov    0xf086983d,%al
f010b972:	83 c8 60             	or     $0x60,%eax
f010b975:	a2 3d 98 86 f0       	mov    %al,0xf086983d
f010b97a:	a0 3d 98 86 f0       	mov    0xf086983d,%al
f010b97f:	83 c8 80             	or     $0xffffff80,%eax
f010b982:	a2 3d 98 86 f0       	mov    %al,0xf086983d
f010b987:	b8 3c cd 10 f0       	mov    $0xf010cd3c,%eax
f010b98c:	c1 e8 10             	shr    $0x10,%eax
f010b98f:	66 a3 3e 98 86 f0    	mov    %ax,0xf086983e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b995:	b8 46 cd 10 f0       	mov    $0xf010cd46,%eax
f010b99a:	66 a3 40 98 86 f0    	mov    %ax,0xf0869840
f010b9a0:	66 c7 05 42 98 86 f0 	movw   $0x8,0xf0869842
f010b9a7:	08 00 
f010b9a9:	a0 44 98 86 f0       	mov    0xf0869844,%al
f010b9ae:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9b1:	a2 44 98 86 f0       	mov    %al,0xf0869844
f010b9b6:	a0 44 98 86 f0       	mov    0xf0869844,%al
f010b9bb:	83 e0 1f             	and    $0x1f,%eax
f010b9be:	a2 44 98 86 f0       	mov    %al,0xf0869844
f010b9c3:	a0 45 98 86 f0       	mov    0xf0869845,%al
f010b9c8:	83 c8 0f             	or     $0xf,%eax
f010b9cb:	a2 45 98 86 f0       	mov    %al,0xf0869845
f010b9d0:	a0 45 98 86 f0       	mov    0xf0869845,%al
f010b9d5:	83 e0 ef             	and    $0xffffffef,%eax
f010b9d8:	a2 45 98 86 f0       	mov    %al,0xf0869845
f010b9dd:	a0 45 98 86 f0       	mov    0xf0869845,%al
f010b9e2:	83 c8 60             	or     $0x60,%eax
f010b9e5:	a2 45 98 86 f0       	mov    %al,0xf0869845
f010b9ea:	a0 45 98 86 f0       	mov    0xf0869845,%al
f010b9ef:	83 c8 80             	or     $0xffffff80,%eax
f010b9f2:	a2 45 98 86 f0       	mov    %al,0xf0869845
f010b9f7:	b8 46 cd 10 f0       	mov    $0xf010cd46,%eax
f010b9fc:	c1 e8 10             	shr    $0x10,%eax
f010b9ff:	66 a3 46 98 86 f0    	mov    %ax,0xf0869846
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010ba05:	b8 50 cd 10 f0       	mov    $0xf010cd50,%eax
f010ba0a:	66 a3 48 98 86 f0    	mov    %ax,0xf0869848
f010ba10:	66 c7 05 4a 98 86 f0 	movw   $0x8,0xf086984a
f010ba17:	08 00 
f010ba19:	a0 4c 98 86 f0       	mov    0xf086984c,%al
f010ba1e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba21:	a2 4c 98 86 f0       	mov    %al,0xf086984c
f010ba26:	a0 4c 98 86 f0       	mov    0xf086984c,%al
f010ba2b:	83 e0 1f             	and    $0x1f,%eax
f010ba2e:	a2 4c 98 86 f0       	mov    %al,0xf086984c
f010ba33:	a0 4d 98 86 f0       	mov    0xf086984d,%al
f010ba38:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba3b:	83 c8 0e             	or     $0xe,%eax
f010ba3e:	a2 4d 98 86 f0       	mov    %al,0xf086984d
f010ba43:	a0 4d 98 86 f0       	mov    0xf086984d,%al
f010ba48:	83 e0 ef             	and    $0xffffffef,%eax
f010ba4b:	a2 4d 98 86 f0       	mov    %al,0xf086984d
f010ba50:	a0 4d 98 86 f0       	mov    0xf086984d,%al
f010ba55:	83 c8 60             	or     $0x60,%eax
f010ba58:	a2 4d 98 86 f0       	mov    %al,0xf086984d
f010ba5d:	a0 4d 98 86 f0       	mov    0xf086984d,%al
f010ba62:	83 c8 80             	or     $0xffffff80,%eax
f010ba65:	a2 4d 98 86 f0       	mov    %al,0xf086984d
f010ba6a:	b8 50 cd 10 f0       	mov    $0xf010cd50,%eax
f010ba6f:	c1 e8 10             	shr    $0x10,%eax
f010ba72:	66 a3 4e 98 86 f0    	mov    %ax,0xf086984e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010ba78:	b8 5a cd 10 f0       	mov    $0xf010cd5a,%eax
f010ba7d:	66 a3 50 98 86 f0    	mov    %ax,0xf0869850
f010ba83:	66 c7 05 52 98 86 f0 	movw   $0x8,0xf0869852
f010ba8a:	08 00 
f010ba8c:	a0 54 98 86 f0       	mov    0xf0869854,%al
f010ba91:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba94:	a2 54 98 86 f0       	mov    %al,0xf0869854
f010ba99:	a0 54 98 86 f0       	mov    0xf0869854,%al
f010ba9e:	83 e0 1f             	and    $0x1f,%eax
f010baa1:	a2 54 98 86 f0       	mov    %al,0xf0869854
f010baa6:	a0 55 98 86 f0       	mov    0xf0869855,%al
f010baab:	83 e0 f0             	and    $0xfffffff0,%eax
f010baae:	83 c8 0e             	or     $0xe,%eax
f010bab1:	a2 55 98 86 f0       	mov    %al,0xf0869855
f010bab6:	a0 55 98 86 f0       	mov    0xf0869855,%al
f010babb:	83 e0 ef             	and    $0xffffffef,%eax
f010babe:	a2 55 98 86 f0       	mov    %al,0xf0869855
f010bac3:	a0 55 98 86 f0       	mov    0xf0869855,%al
f010bac8:	83 c8 60             	or     $0x60,%eax
f010bacb:	a2 55 98 86 f0       	mov    %al,0xf0869855
f010bad0:	a0 55 98 86 f0       	mov    0xf0869855,%al
f010bad5:	83 c8 80             	or     $0xffffff80,%eax
f010bad8:	a2 55 98 86 f0       	mov    %al,0xf0869855
f010badd:	b8 5a cd 10 f0       	mov    $0xf010cd5a,%eax
f010bae2:	c1 e8 10             	shr    $0x10,%eax
f010bae5:	66 a3 56 98 86 f0    	mov    %ax,0xf0869856
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010baeb:	b8 64 cd 10 f0       	mov    $0xf010cd64,%eax
f010baf0:	66 a3 58 98 86 f0    	mov    %ax,0xf0869858
f010baf6:	66 c7 05 5a 98 86 f0 	movw   $0x8,0xf086985a
f010bafd:	08 00 
f010baff:	a0 5c 98 86 f0       	mov    0xf086985c,%al
f010bb04:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb07:	a2 5c 98 86 f0       	mov    %al,0xf086985c
f010bb0c:	a0 5c 98 86 f0       	mov    0xf086985c,%al
f010bb11:	83 e0 1f             	and    $0x1f,%eax
f010bb14:	a2 5c 98 86 f0       	mov    %al,0xf086985c
f010bb19:	a0 5d 98 86 f0       	mov    0xf086985d,%al
f010bb1e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb21:	83 c8 0e             	or     $0xe,%eax
f010bb24:	a2 5d 98 86 f0       	mov    %al,0xf086985d
f010bb29:	a0 5d 98 86 f0       	mov    0xf086985d,%al
f010bb2e:	83 e0 ef             	and    $0xffffffef,%eax
f010bb31:	a2 5d 98 86 f0       	mov    %al,0xf086985d
f010bb36:	a0 5d 98 86 f0       	mov    0xf086985d,%al
f010bb3b:	83 c8 60             	or     $0x60,%eax
f010bb3e:	a2 5d 98 86 f0       	mov    %al,0xf086985d
f010bb43:	a0 5d 98 86 f0       	mov    0xf086985d,%al
f010bb48:	83 c8 80             	or     $0xffffff80,%eax
f010bb4b:	a2 5d 98 86 f0       	mov    %al,0xf086985d
f010bb50:	b8 64 cd 10 f0       	mov    $0xf010cd64,%eax
f010bb55:	c1 e8 10             	shr    $0x10,%eax
f010bb58:	66 a3 5e 98 86 f0    	mov    %ax,0xf086985e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bb5e:	b8 6e cd 10 f0       	mov    $0xf010cd6e,%eax
f010bb63:	66 a3 70 98 86 f0    	mov    %ax,0xf0869870
f010bb69:	66 c7 05 72 98 86 f0 	movw   $0x8,0xf0869872
f010bb70:	08 00 
f010bb72:	a0 74 98 86 f0       	mov    0xf0869874,%al
f010bb77:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb7a:	a2 74 98 86 f0       	mov    %al,0xf0869874
f010bb7f:	a0 74 98 86 f0       	mov    0xf0869874,%al
f010bb84:	83 e0 1f             	and    $0x1f,%eax
f010bb87:	a2 74 98 86 f0       	mov    %al,0xf0869874
f010bb8c:	a0 75 98 86 f0       	mov    0xf0869875,%al
f010bb91:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb94:	83 c8 0e             	or     $0xe,%eax
f010bb97:	a2 75 98 86 f0       	mov    %al,0xf0869875
f010bb9c:	a0 75 98 86 f0       	mov    0xf0869875,%al
f010bba1:	83 e0 ef             	and    $0xffffffef,%eax
f010bba4:	a2 75 98 86 f0       	mov    %al,0xf0869875
f010bba9:	a0 75 98 86 f0       	mov    0xf0869875,%al
f010bbae:	83 c8 60             	or     $0x60,%eax
f010bbb1:	a2 75 98 86 f0       	mov    %al,0xf0869875
f010bbb6:	a0 75 98 86 f0       	mov    0xf0869875,%al
f010bbbb:	83 c8 80             	or     $0xffffff80,%eax
f010bbbe:	a2 75 98 86 f0       	mov    %al,0xf0869875
f010bbc3:	b8 6e cd 10 f0       	mov    $0xf010cd6e,%eax
f010bbc8:	c1 e8 10             	shr    $0x10,%eax
f010bbcb:	66 a3 76 98 86 f0    	mov    %ax,0xf0869876
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bbd1:	b8 76 cd 10 f0       	mov    $0xf010cd76,%eax
f010bbd6:	66 a3 78 98 86 f0    	mov    %ax,0xf0869878
f010bbdc:	66 c7 05 7a 98 86 f0 	movw   $0x8,0xf086987a
f010bbe3:	08 00 
f010bbe5:	a0 7c 98 86 f0       	mov    0xf086987c,%al
f010bbea:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbed:	a2 7c 98 86 f0       	mov    %al,0xf086987c
f010bbf2:	a0 7c 98 86 f0       	mov    0xf086987c,%al
f010bbf7:	83 e0 1f             	and    $0x1f,%eax
f010bbfa:	a2 7c 98 86 f0       	mov    %al,0xf086987c
f010bbff:	a0 7d 98 86 f0       	mov    0xf086987d,%al
f010bc04:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc07:	83 c8 0e             	or     $0xe,%eax
f010bc0a:	a2 7d 98 86 f0       	mov    %al,0xf086987d
f010bc0f:	a0 7d 98 86 f0       	mov    0xf086987d,%al
f010bc14:	83 e0 ef             	and    $0xffffffef,%eax
f010bc17:	a2 7d 98 86 f0       	mov    %al,0xf086987d
f010bc1c:	a0 7d 98 86 f0       	mov    0xf086987d,%al
f010bc21:	83 c8 60             	or     $0x60,%eax
f010bc24:	a2 7d 98 86 f0       	mov    %al,0xf086987d
f010bc29:	a0 7d 98 86 f0       	mov    0xf086987d,%al
f010bc2e:	83 c8 80             	or     $0xffffff80,%eax
f010bc31:	a2 7d 98 86 f0       	mov    %al,0xf086987d
f010bc36:	b8 76 cd 10 f0       	mov    $0xf010cd76,%eax
f010bc3b:	c1 e8 10             	shr    $0x10,%eax
f010bc3e:	66 a3 7e 98 86 f0    	mov    %ax,0xf086987e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bc44:	b8 7a cd 10 f0       	mov    $0xf010cd7a,%eax
f010bc49:	66 a3 80 98 86 f0    	mov    %ax,0xf0869880
f010bc4f:	66 c7 05 82 98 86 f0 	movw   $0x8,0xf0869882
f010bc56:	08 00 
f010bc58:	a0 84 98 86 f0       	mov    0xf0869884,%al
f010bc5d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc60:	a2 84 98 86 f0       	mov    %al,0xf0869884
f010bc65:	a0 84 98 86 f0       	mov    0xf0869884,%al
f010bc6a:	83 e0 1f             	and    $0x1f,%eax
f010bc6d:	a2 84 98 86 f0       	mov    %al,0xf0869884
f010bc72:	a0 85 98 86 f0       	mov    0xf0869885,%al
f010bc77:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc7a:	83 c8 0e             	or     $0xe,%eax
f010bc7d:	a2 85 98 86 f0       	mov    %al,0xf0869885
f010bc82:	a0 85 98 86 f0       	mov    0xf0869885,%al
f010bc87:	83 e0 ef             	and    $0xffffffef,%eax
f010bc8a:	a2 85 98 86 f0       	mov    %al,0xf0869885
f010bc8f:	a0 85 98 86 f0       	mov    0xf0869885,%al
f010bc94:	83 c8 60             	or     $0x60,%eax
f010bc97:	a2 85 98 86 f0       	mov    %al,0xf0869885
f010bc9c:	a0 85 98 86 f0       	mov    0xf0869885,%al
f010bca1:	83 c8 80             	or     $0xffffff80,%eax
f010bca4:	a2 85 98 86 f0       	mov    %al,0xf0869885
f010bca9:	b8 7a cd 10 f0       	mov    $0xf010cd7a,%eax
f010bcae:	c1 e8 10             	shr    $0x10,%eax
f010bcb1:	66 a3 86 98 86 f0    	mov    %ax,0xf0869886
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bcb7:	b8 7e cd 10 f0       	mov    $0xf010cd7e,%eax
f010bcbc:	66 a3 88 98 86 f0    	mov    %ax,0xf0869888
f010bcc2:	66 c7 05 8a 98 86 f0 	movw   $0x8,0xf086988a
f010bcc9:	08 00 
f010bccb:	a0 8c 98 86 f0       	mov    0xf086988c,%al
f010bcd0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcd3:	a2 8c 98 86 f0       	mov    %al,0xf086988c
f010bcd8:	a0 8c 98 86 f0       	mov    0xf086988c,%al
f010bcdd:	83 e0 1f             	and    $0x1f,%eax
f010bce0:	a2 8c 98 86 f0       	mov    %al,0xf086988c
f010bce5:	a0 8d 98 86 f0       	mov    0xf086988d,%al
f010bcea:	83 e0 f0             	and    $0xfffffff0,%eax
f010bced:	83 c8 0e             	or     $0xe,%eax
f010bcf0:	a2 8d 98 86 f0       	mov    %al,0xf086988d
f010bcf5:	a0 8d 98 86 f0       	mov    0xf086988d,%al
f010bcfa:	83 e0 ef             	and    $0xffffffef,%eax
f010bcfd:	a2 8d 98 86 f0       	mov    %al,0xf086988d
f010bd02:	a0 8d 98 86 f0       	mov    0xf086988d,%al
f010bd07:	83 c8 60             	or     $0x60,%eax
f010bd0a:	a2 8d 98 86 f0       	mov    %al,0xf086988d
f010bd0f:	a0 8d 98 86 f0       	mov    0xf086988d,%al
f010bd14:	83 c8 80             	or     $0xffffff80,%eax
f010bd17:	a2 8d 98 86 f0       	mov    %al,0xf086988d
f010bd1c:	b8 7e cd 10 f0       	mov    $0xf010cd7e,%eax
f010bd21:	c1 e8 10             	shr    $0x10,%eax
f010bd24:	66 a3 8e 98 86 f0    	mov    %ax,0xf086988e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bd2a:	b8 82 cd 10 f0       	mov    $0xf010cd82,%eax
f010bd2f:	66 a3 a0 98 86 f0    	mov    %ax,0xf08698a0
f010bd35:	66 c7 05 a2 98 86 f0 	movw   $0x8,0xf08698a2
f010bd3c:	08 00 
f010bd3e:	a0 a4 98 86 f0       	mov    0xf08698a4,%al
f010bd43:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd46:	a2 a4 98 86 f0       	mov    %al,0xf08698a4
f010bd4b:	a0 a4 98 86 f0       	mov    0xf08698a4,%al
f010bd50:	83 e0 1f             	and    $0x1f,%eax
f010bd53:	a2 a4 98 86 f0       	mov    %al,0xf08698a4
f010bd58:	a0 a5 98 86 f0       	mov    0xf08698a5,%al
f010bd5d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd60:	83 c8 0e             	or     $0xe,%eax
f010bd63:	a2 a5 98 86 f0       	mov    %al,0xf08698a5
f010bd68:	a0 a5 98 86 f0       	mov    0xf08698a5,%al
f010bd6d:	83 e0 ef             	and    $0xffffffef,%eax
f010bd70:	a2 a5 98 86 f0       	mov    %al,0xf08698a5
f010bd75:	a0 a5 98 86 f0       	mov    0xf08698a5,%al
f010bd7a:	83 c8 60             	or     $0x60,%eax
f010bd7d:	a2 a5 98 86 f0       	mov    %al,0xf08698a5
f010bd82:	a0 a5 98 86 f0       	mov    0xf08698a5,%al
f010bd87:	83 c8 80             	or     $0xffffff80,%eax
f010bd8a:	a2 a5 98 86 f0       	mov    %al,0xf08698a5
f010bd8f:	b8 82 cd 10 f0       	mov    $0xf010cd82,%eax
f010bd94:	c1 e8 10             	shr    $0x10,%eax
f010bd97:	66 a3 a6 98 86 f0    	mov    %ax,0xf08698a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bd9d:	b8 88 cd 10 f0       	mov    $0xf010cd88,%eax
f010bda2:	66 a3 a8 98 86 f0    	mov    %ax,0xf08698a8
f010bda8:	66 c7 05 aa 98 86 f0 	movw   $0x8,0xf08698aa
f010bdaf:	08 00 
f010bdb1:	a0 ac 98 86 f0       	mov    0xf08698ac,%al
f010bdb6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdb9:	a2 ac 98 86 f0       	mov    %al,0xf08698ac
f010bdbe:	a0 ac 98 86 f0       	mov    0xf08698ac,%al
f010bdc3:	83 e0 1f             	and    $0x1f,%eax
f010bdc6:	a2 ac 98 86 f0       	mov    %al,0xf08698ac
f010bdcb:	a0 ad 98 86 f0       	mov    0xf08698ad,%al
f010bdd0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdd3:	83 c8 0e             	or     $0xe,%eax
f010bdd6:	a2 ad 98 86 f0       	mov    %al,0xf08698ad
f010bddb:	a0 ad 98 86 f0       	mov    0xf08698ad,%al
f010bde0:	83 e0 ef             	and    $0xffffffef,%eax
f010bde3:	a2 ad 98 86 f0       	mov    %al,0xf08698ad
f010bde8:	a0 ad 98 86 f0       	mov    0xf08698ad,%al
f010bded:	83 c8 60             	or     $0x60,%eax
f010bdf0:	a2 ad 98 86 f0       	mov    %al,0xf08698ad
f010bdf5:	a0 ad 98 86 f0       	mov    0xf08698ad,%al
f010bdfa:	83 c8 80             	or     $0xffffff80,%eax
f010bdfd:	a2 ad 98 86 f0       	mov    %al,0xf08698ad
f010be02:	b8 88 cd 10 f0       	mov    $0xf010cd88,%eax
f010be07:	c1 e8 10             	shr    $0x10,%eax
f010be0a:	66 a3 ae 98 86 f0    	mov    %ax,0xf08698ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010be10:	b8 8c cd 10 f0       	mov    $0xf010cd8c,%eax
f010be15:	66 a3 b0 98 86 f0    	mov    %ax,0xf08698b0
f010be1b:	66 c7 05 b2 98 86 f0 	movw   $0x8,0xf08698b2
f010be22:	08 00 
f010be24:	a0 b4 98 86 f0       	mov    0xf08698b4,%al
f010be29:	83 e0 e0             	and    $0xffffffe0,%eax
f010be2c:	a2 b4 98 86 f0       	mov    %al,0xf08698b4
f010be31:	a0 b4 98 86 f0       	mov    0xf08698b4,%al
f010be36:	83 e0 1f             	and    $0x1f,%eax
f010be39:	a2 b4 98 86 f0       	mov    %al,0xf08698b4
f010be3e:	a0 b5 98 86 f0       	mov    0xf08698b5,%al
f010be43:	83 e0 f0             	and    $0xfffffff0,%eax
f010be46:	83 c8 0e             	or     $0xe,%eax
f010be49:	a2 b5 98 86 f0       	mov    %al,0xf08698b5
f010be4e:	a0 b5 98 86 f0       	mov    0xf08698b5,%al
f010be53:	83 e0 ef             	and    $0xffffffef,%eax
f010be56:	a2 b5 98 86 f0       	mov    %al,0xf08698b5
f010be5b:	a0 b5 98 86 f0       	mov    0xf08698b5,%al
f010be60:	83 c8 60             	or     $0x60,%eax
f010be63:	a2 b5 98 86 f0       	mov    %al,0xf08698b5
f010be68:	a0 b5 98 86 f0       	mov    0xf08698b5,%al
f010be6d:	83 c8 80             	or     $0xffffff80,%eax
f010be70:	a2 b5 98 86 f0       	mov    %al,0xf08698b5
f010be75:	b8 8c cd 10 f0       	mov    $0xf010cd8c,%eax
f010be7a:	c1 e8 10             	shr    $0x10,%eax
f010be7d:	66 a3 b6 98 86 f0    	mov    %ax,0xf08698b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010be83:	b8 92 cd 10 f0       	mov    $0xf010cd92,%eax
f010be88:	66 a3 b8 98 86 f0    	mov    %ax,0xf08698b8
f010be8e:	66 c7 05 ba 98 86 f0 	movw   $0x8,0xf08698ba
f010be95:	08 00 
f010be97:	a0 bc 98 86 f0       	mov    0xf08698bc,%al
f010be9c:	83 e0 e0             	and    $0xffffffe0,%eax
f010be9f:	a2 bc 98 86 f0       	mov    %al,0xf08698bc
f010bea4:	a0 bc 98 86 f0       	mov    0xf08698bc,%al
f010bea9:	83 e0 1f             	and    $0x1f,%eax
f010beac:	a2 bc 98 86 f0       	mov    %al,0xf08698bc
f010beb1:	a0 bd 98 86 f0       	mov    0xf08698bd,%al
f010beb6:	83 e0 f0             	and    $0xfffffff0,%eax
f010beb9:	83 c8 0e             	or     $0xe,%eax
f010bebc:	a2 bd 98 86 f0       	mov    %al,0xf08698bd
f010bec1:	a0 bd 98 86 f0       	mov    0xf08698bd,%al
f010bec6:	83 e0 ef             	and    $0xffffffef,%eax
f010bec9:	a2 bd 98 86 f0       	mov    %al,0xf08698bd
f010bece:	a0 bd 98 86 f0       	mov    0xf08698bd,%al
f010bed3:	83 c8 60             	or     $0x60,%eax
f010bed6:	a2 bd 98 86 f0       	mov    %al,0xf08698bd
f010bedb:	a0 bd 98 86 f0       	mov    0xf08698bd,%al
f010bee0:	83 c8 80             	or     $0xffffff80,%eax
f010bee3:	a2 bd 98 86 f0       	mov    %al,0xf08698bd
f010bee8:	b8 92 cd 10 f0       	mov    $0xf010cd92,%eax
f010beed:	c1 e8 10             	shr    $0x10,%eax
f010bef0:	66 a3 be 98 86 f0    	mov    %ax,0xf08698be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bef6:	b8 98 cd 10 f0       	mov    $0xf010cd98,%eax
f010befb:	66 a3 20 99 86 f0    	mov    %ax,0xf0869920
f010bf01:	66 c7 05 22 99 86 f0 	movw   $0x8,0xf0869922
f010bf08:	08 00 
f010bf0a:	a0 24 99 86 f0       	mov    0xf0869924,%al
f010bf0f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf12:	a2 24 99 86 f0       	mov    %al,0xf0869924
f010bf17:	a0 24 99 86 f0       	mov    0xf0869924,%al
f010bf1c:	83 e0 1f             	and    $0x1f,%eax
f010bf1f:	a2 24 99 86 f0       	mov    %al,0xf0869924
f010bf24:	a0 25 99 86 f0       	mov    0xf0869925,%al
f010bf29:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf2c:	83 c8 0e             	or     $0xe,%eax
f010bf2f:	a2 25 99 86 f0       	mov    %al,0xf0869925
f010bf34:	a0 25 99 86 f0       	mov    0xf0869925,%al
f010bf39:	83 e0 ef             	and    $0xffffffef,%eax
f010bf3c:	a2 25 99 86 f0       	mov    %al,0xf0869925
f010bf41:	a0 25 99 86 f0       	mov    0xf0869925,%al
f010bf46:	83 c8 60             	or     $0x60,%eax
f010bf49:	a2 25 99 86 f0       	mov    %al,0xf0869925
f010bf4e:	a0 25 99 86 f0       	mov    0xf0869925,%al
f010bf53:	83 c8 80             	or     $0xffffff80,%eax
f010bf56:	a2 25 99 86 f0       	mov    %al,0xf0869925
f010bf5b:	b8 98 cd 10 f0       	mov    $0xf010cd98,%eax
f010bf60:	c1 e8 10             	shr    $0x10,%eax
f010bf63:	66 a3 26 99 86 f0    	mov    %ax,0xf0869926
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bf69:	b8 9e cd 10 f0       	mov    $0xf010cd9e,%eax
f010bf6e:	66 a3 28 99 86 f0    	mov    %ax,0xf0869928
f010bf74:	66 c7 05 2a 99 86 f0 	movw   $0x8,0xf086992a
f010bf7b:	08 00 
f010bf7d:	a0 2c 99 86 f0       	mov    0xf086992c,%al
f010bf82:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf85:	a2 2c 99 86 f0       	mov    %al,0xf086992c
f010bf8a:	a0 2c 99 86 f0       	mov    0xf086992c,%al
f010bf8f:	83 e0 1f             	and    $0x1f,%eax
f010bf92:	a2 2c 99 86 f0       	mov    %al,0xf086992c
f010bf97:	a0 2d 99 86 f0       	mov    0xf086992d,%al
f010bf9c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf9f:	83 c8 0e             	or     $0xe,%eax
f010bfa2:	a2 2d 99 86 f0       	mov    %al,0xf086992d
f010bfa7:	a0 2d 99 86 f0       	mov    0xf086992d,%al
f010bfac:	83 e0 ef             	and    $0xffffffef,%eax
f010bfaf:	a2 2d 99 86 f0       	mov    %al,0xf086992d
f010bfb4:	a0 2d 99 86 f0       	mov    0xf086992d,%al
f010bfb9:	83 c8 60             	or     $0x60,%eax
f010bfbc:	a2 2d 99 86 f0       	mov    %al,0xf086992d
f010bfc1:	a0 2d 99 86 f0       	mov    0xf086992d,%al
f010bfc6:	83 c8 80             	or     $0xffffff80,%eax
f010bfc9:	a2 2d 99 86 f0       	mov    %al,0xf086992d
f010bfce:	b8 9e cd 10 f0       	mov    $0xf010cd9e,%eax
f010bfd3:	c1 e8 10             	shr    $0x10,%eax
f010bfd6:	66 a3 2e 99 86 f0    	mov    %ax,0xf086992e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bfdc:	b8 a4 cd 10 f0       	mov    $0xf010cda4,%eax
f010bfe1:	66 a3 30 99 86 f0    	mov    %ax,0xf0869930
f010bfe7:	66 c7 05 32 99 86 f0 	movw   $0x8,0xf0869932
f010bfee:	08 00 
f010bff0:	a0 34 99 86 f0       	mov    0xf0869934,%al
f010bff5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bff8:	a2 34 99 86 f0       	mov    %al,0xf0869934
f010bffd:	a0 34 99 86 f0       	mov    0xf0869934,%al
f010c002:	83 e0 1f             	and    $0x1f,%eax
f010c005:	a2 34 99 86 f0       	mov    %al,0xf0869934
f010c00a:	a0 35 99 86 f0       	mov    0xf0869935,%al
f010c00f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c012:	83 c8 0e             	or     $0xe,%eax
f010c015:	a2 35 99 86 f0       	mov    %al,0xf0869935
f010c01a:	a0 35 99 86 f0       	mov    0xf0869935,%al
f010c01f:	83 e0 ef             	and    $0xffffffef,%eax
f010c022:	a2 35 99 86 f0       	mov    %al,0xf0869935
f010c027:	a0 35 99 86 f0       	mov    0xf0869935,%al
f010c02c:	83 c8 60             	or     $0x60,%eax
f010c02f:	a2 35 99 86 f0       	mov    %al,0xf0869935
f010c034:	a0 35 99 86 f0       	mov    0xf0869935,%al
f010c039:	83 c8 80             	or     $0xffffff80,%eax
f010c03c:	a2 35 99 86 f0       	mov    %al,0xf0869935
f010c041:	b8 a4 cd 10 f0       	mov    $0xf010cda4,%eax
f010c046:	c1 e8 10             	shr    $0x10,%eax
f010c049:	66 a3 36 99 86 f0    	mov    %ax,0xf0869936
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c04f:	b8 aa cd 10 f0       	mov    $0xf010cdaa,%eax
f010c054:	66 a3 38 99 86 f0    	mov    %ax,0xf0869938
f010c05a:	66 c7 05 3a 99 86 f0 	movw   $0x8,0xf086993a
f010c061:	08 00 
f010c063:	a0 3c 99 86 f0       	mov    0xf086993c,%al
f010c068:	83 e0 e0             	and    $0xffffffe0,%eax
f010c06b:	a2 3c 99 86 f0       	mov    %al,0xf086993c
f010c070:	a0 3c 99 86 f0       	mov    0xf086993c,%al
f010c075:	83 e0 1f             	and    $0x1f,%eax
f010c078:	a2 3c 99 86 f0       	mov    %al,0xf086993c
f010c07d:	a0 3d 99 86 f0       	mov    0xf086993d,%al
f010c082:	83 e0 f0             	and    $0xfffffff0,%eax
f010c085:	83 c8 0e             	or     $0xe,%eax
f010c088:	a2 3d 99 86 f0       	mov    %al,0xf086993d
f010c08d:	a0 3d 99 86 f0       	mov    0xf086993d,%al
f010c092:	83 e0 ef             	and    $0xffffffef,%eax
f010c095:	a2 3d 99 86 f0       	mov    %al,0xf086993d
f010c09a:	a0 3d 99 86 f0       	mov    0xf086993d,%al
f010c09f:	83 c8 60             	or     $0x60,%eax
f010c0a2:	a2 3d 99 86 f0       	mov    %al,0xf086993d
f010c0a7:	a0 3d 99 86 f0       	mov    0xf086993d,%al
f010c0ac:	83 c8 80             	or     $0xffffff80,%eax
f010c0af:	a2 3d 99 86 f0       	mov    %al,0xf086993d
f010c0b4:	b8 aa cd 10 f0       	mov    $0xf010cdaa,%eax
f010c0b9:	c1 e8 10             	shr    $0x10,%eax
f010c0bc:	66 a3 3e 99 86 f0    	mov    %ax,0xf086993e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c0c2:	b8 b0 cd 10 f0       	mov    $0xf010cdb0,%eax
f010c0c7:	66 a3 40 99 86 f0    	mov    %ax,0xf0869940
f010c0cd:	66 c7 05 42 99 86 f0 	movw   $0x8,0xf0869942
f010c0d4:	08 00 
f010c0d6:	a0 44 99 86 f0       	mov    0xf0869944,%al
f010c0db:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0de:	a2 44 99 86 f0       	mov    %al,0xf0869944
f010c0e3:	a0 44 99 86 f0       	mov    0xf0869944,%al
f010c0e8:	83 e0 1f             	and    $0x1f,%eax
f010c0eb:	a2 44 99 86 f0       	mov    %al,0xf0869944
f010c0f0:	a0 45 99 86 f0       	mov    0xf0869945,%al
f010c0f5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0f8:	83 c8 0e             	or     $0xe,%eax
f010c0fb:	a2 45 99 86 f0       	mov    %al,0xf0869945
f010c100:	a0 45 99 86 f0       	mov    0xf0869945,%al
f010c105:	83 e0 ef             	and    $0xffffffef,%eax
f010c108:	a2 45 99 86 f0       	mov    %al,0xf0869945
f010c10d:	a0 45 99 86 f0       	mov    0xf0869945,%al
f010c112:	83 c8 60             	or     $0x60,%eax
f010c115:	a2 45 99 86 f0       	mov    %al,0xf0869945
f010c11a:	a0 45 99 86 f0       	mov    0xf0869945,%al
f010c11f:	83 c8 80             	or     $0xffffff80,%eax
f010c122:	a2 45 99 86 f0       	mov    %al,0xf0869945
f010c127:	b8 b0 cd 10 f0       	mov    $0xf010cdb0,%eax
f010c12c:	c1 e8 10             	shr    $0x10,%eax
f010c12f:	66 a3 46 99 86 f0    	mov    %ax,0xf0869946
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c135:	b8 b6 cd 10 f0       	mov    $0xf010cdb6,%eax
f010c13a:	66 a3 48 99 86 f0    	mov    %ax,0xf0869948
f010c140:	66 c7 05 4a 99 86 f0 	movw   $0x8,0xf086994a
f010c147:	08 00 
f010c149:	a0 4c 99 86 f0       	mov    0xf086994c,%al
f010c14e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c151:	a2 4c 99 86 f0       	mov    %al,0xf086994c
f010c156:	a0 4c 99 86 f0       	mov    0xf086994c,%al
f010c15b:	83 e0 1f             	and    $0x1f,%eax
f010c15e:	a2 4c 99 86 f0       	mov    %al,0xf086994c
f010c163:	a0 4d 99 86 f0       	mov    0xf086994d,%al
f010c168:	83 e0 f0             	and    $0xfffffff0,%eax
f010c16b:	83 c8 0e             	or     $0xe,%eax
f010c16e:	a2 4d 99 86 f0       	mov    %al,0xf086994d
f010c173:	a0 4d 99 86 f0       	mov    0xf086994d,%al
f010c178:	83 e0 ef             	and    $0xffffffef,%eax
f010c17b:	a2 4d 99 86 f0       	mov    %al,0xf086994d
f010c180:	a0 4d 99 86 f0       	mov    0xf086994d,%al
f010c185:	83 c8 60             	or     $0x60,%eax
f010c188:	a2 4d 99 86 f0       	mov    %al,0xf086994d
f010c18d:	a0 4d 99 86 f0       	mov    0xf086994d,%al
f010c192:	83 c8 80             	or     $0xffffff80,%eax
f010c195:	a2 4d 99 86 f0       	mov    %al,0xf086994d
f010c19a:	b8 b6 cd 10 f0       	mov    $0xf010cdb6,%eax
f010c19f:	c1 e8 10             	shr    $0x10,%eax
f010c1a2:	66 a3 4e 99 86 f0    	mov    %ax,0xf086994e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c1a8:	b8 bc cd 10 f0       	mov    $0xf010cdbc,%eax
f010c1ad:	66 a3 50 99 86 f0    	mov    %ax,0xf0869950
f010c1b3:	66 c7 05 52 99 86 f0 	movw   $0x8,0xf0869952
f010c1ba:	08 00 
f010c1bc:	a0 54 99 86 f0       	mov    0xf0869954,%al
f010c1c1:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1c4:	a2 54 99 86 f0       	mov    %al,0xf0869954
f010c1c9:	a0 54 99 86 f0       	mov    0xf0869954,%al
f010c1ce:	83 e0 1f             	and    $0x1f,%eax
f010c1d1:	a2 54 99 86 f0       	mov    %al,0xf0869954
f010c1d6:	a0 55 99 86 f0       	mov    0xf0869955,%al
f010c1db:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1de:	83 c8 0e             	or     $0xe,%eax
f010c1e1:	a2 55 99 86 f0       	mov    %al,0xf0869955
f010c1e6:	a0 55 99 86 f0       	mov    0xf0869955,%al
f010c1eb:	83 e0 ef             	and    $0xffffffef,%eax
f010c1ee:	a2 55 99 86 f0       	mov    %al,0xf0869955
f010c1f3:	a0 55 99 86 f0       	mov    0xf0869955,%al
f010c1f8:	83 c8 60             	or     $0x60,%eax
f010c1fb:	a2 55 99 86 f0       	mov    %al,0xf0869955
f010c200:	a0 55 99 86 f0       	mov    0xf0869955,%al
f010c205:	83 c8 80             	or     $0xffffff80,%eax
f010c208:	a2 55 99 86 f0       	mov    %al,0xf0869955
f010c20d:	b8 bc cd 10 f0       	mov    $0xf010cdbc,%eax
f010c212:	c1 e8 10             	shr    $0x10,%eax
f010c215:	66 a3 56 99 86 f0    	mov    %ax,0xf0869956
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c21b:	b8 c2 cd 10 f0       	mov    $0xf010cdc2,%eax
f010c220:	66 a3 58 99 86 f0    	mov    %ax,0xf0869958
f010c226:	66 c7 05 5a 99 86 f0 	movw   $0x8,0xf086995a
f010c22d:	08 00 
f010c22f:	a0 5c 99 86 f0       	mov    0xf086995c,%al
f010c234:	83 e0 e0             	and    $0xffffffe0,%eax
f010c237:	a2 5c 99 86 f0       	mov    %al,0xf086995c
f010c23c:	a0 5c 99 86 f0       	mov    0xf086995c,%al
f010c241:	83 e0 1f             	and    $0x1f,%eax
f010c244:	a2 5c 99 86 f0       	mov    %al,0xf086995c
f010c249:	a0 5d 99 86 f0       	mov    0xf086995d,%al
f010c24e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c251:	83 c8 0e             	or     $0xe,%eax
f010c254:	a2 5d 99 86 f0       	mov    %al,0xf086995d
f010c259:	a0 5d 99 86 f0       	mov    0xf086995d,%al
f010c25e:	83 e0 ef             	and    $0xffffffef,%eax
f010c261:	a2 5d 99 86 f0       	mov    %al,0xf086995d
f010c266:	a0 5d 99 86 f0       	mov    0xf086995d,%al
f010c26b:	83 c8 60             	or     $0x60,%eax
f010c26e:	a2 5d 99 86 f0       	mov    %al,0xf086995d
f010c273:	a0 5d 99 86 f0       	mov    0xf086995d,%al
f010c278:	83 c8 80             	or     $0xffffff80,%eax
f010c27b:	a2 5d 99 86 f0       	mov    %al,0xf086995d
f010c280:	b8 c2 cd 10 f0       	mov    $0xf010cdc2,%eax
f010c285:	c1 e8 10             	shr    $0x10,%eax
f010c288:	66 a3 5e 99 86 f0    	mov    %ax,0xf086995e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c28e:	b8 c8 cd 10 f0       	mov    $0xf010cdc8,%eax
f010c293:	66 a3 60 99 86 f0    	mov    %ax,0xf0869960
f010c299:	66 c7 05 62 99 86 f0 	movw   $0x8,0xf0869962
f010c2a0:	08 00 
f010c2a2:	a0 64 99 86 f0       	mov    0xf0869964,%al
f010c2a7:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2aa:	a2 64 99 86 f0       	mov    %al,0xf0869964
f010c2af:	a0 64 99 86 f0       	mov    0xf0869964,%al
f010c2b4:	83 e0 1f             	and    $0x1f,%eax
f010c2b7:	a2 64 99 86 f0       	mov    %al,0xf0869964
f010c2bc:	a0 65 99 86 f0       	mov    0xf0869965,%al
f010c2c1:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2c4:	83 c8 0e             	or     $0xe,%eax
f010c2c7:	a2 65 99 86 f0       	mov    %al,0xf0869965
f010c2cc:	a0 65 99 86 f0       	mov    0xf0869965,%al
f010c2d1:	83 e0 ef             	and    $0xffffffef,%eax
f010c2d4:	a2 65 99 86 f0       	mov    %al,0xf0869965
f010c2d9:	a0 65 99 86 f0       	mov    0xf0869965,%al
f010c2de:	83 c8 60             	or     $0x60,%eax
f010c2e1:	a2 65 99 86 f0       	mov    %al,0xf0869965
f010c2e6:	a0 65 99 86 f0       	mov    0xf0869965,%al
f010c2eb:	83 c8 80             	or     $0xffffff80,%eax
f010c2ee:	a2 65 99 86 f0       	mov    %al,0xf0869965
f010c2f3:	b8 c8 cd 10 f0       	mov    $0xf010cdc8,%eax
f010c2f8:	c1 e8 10             	shr    $0x10,%eax
f010c2fb:	66 a3 66 99 86 f0    	mov    %ax,0xf0869966
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c301:	b8 ce cd 10 f0       	mov    $0xf010cdce,%eax
f010c306:	66 a3 68 99 86 f0    	mov    %ax,0xf0869968
f010c30c:	66 c7 05 6a 99 86 f0 	movw   $0x8,0xf086996a
f010c313:	08 00 
f010c315:	a0 6c 99 86 f0       	mov    0xf086996c,%al
f010c31a:	83 e0 e0             	and    $0xffffffe0,%eax
f010c31d:	a2 6c 99 86 f0       	mov    %al,0xf086996c
f010c322:	a0 6c 99 86 f0       	mov    0xf086996c,%al
f010c327:	83 e0 1f             	and    $0x1f,%eax
f010c32a:	a2 6c 99 86 f0       	mov    %al,0xf086996c
f010c32f:	a0 6d 99 86 f0       	mov    0xf086996d,%al
f010c334:	83 e0 f0             	and    $0xfffffff0,%eax
f010c337:	83 c8 0e             	or     $0xe,%eax
f010c33a:	a2 6d 99 86 f0       	mov    %al,0xf086996d
f010c33f:	a0 6d 99 86 f0       	mov    0xf086996d,%al
f010c344:	83 e0 ef             	and    $0xffffffef,%eax
f010c347:	a2 6d 99 86 f0       	mov    %al,0xf086996d
f010c34c:	a0 6d 99 86 f0       	mov    0xf086996d,%al
f010c351:	83 c8 60             	or     $0x60,%eax
f010c354:	a2 6d 99 86 f0       	mov    %al,0xf086996d
f010c359:	a0 6d 99 86 f0       	mov    0xf086996d,%al
f010c35e:	83 c8 80             	or     $0xffffff80,%eax
f010c361:	a2 6d 99 86 f0       	mov    %al,0xf086996d
f010c366:	b8 ce cd 10 f0       	mov    $0xf010cdce,%eax
f010c36b:	c1 e8 10             	shr    $0x10,%eax
f010c36e:	66 a3 6e 99 86 f0    	mov    %ax,0xf086996e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c374:	b8 d4 cd 10 f0       	mov    $0xf010cdd4,%eax
f010c379:	66 a3 70 99 86 f0    	mov    %ax,0xf0869970
f010c37f:	66 c7 05 72 99 86 f0 	movw   $0x8,0xf0869972
f010c386:	08 00 
f010c388:	a0 74 99 86 f0       	mov    0xf0869974,%al
f010c38d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c390:	a2 74 99 86 f0       	mov    %al,0xf0869974
f010c395:	a0 74 99 86 f0       	mov    0xf0869974,%al
f010c39a:	83 e0 1f             	and    $0x1f,%eax
f010c39d:	a2 74 99 86 f0       	mov    %al,0xf0869974
f010c3a2:	a0 75 99 86 f0       	mov    0xf0869975,%al
f010c3a7:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3aa:	83 c8 0e             	or     $0xe,%eax
f010c3ad:	a2 75 99 86 f0       	mov    %al,0xf0869975
f010c3b2:	a0 75 99 86 f0       	mov    0xf0869975,%al
f010c3b7:	83 e0 ef             	and    $0xffffffef,%eax
f010c3ba:	a2 75 99 86 f0       	mov    %al,0xf0869975
f010c3bf:	a0 75 99 86 f0       	mov    0xf0869975,%al
f010c3c4:	83 c8 60             	or     $0x60,%eax
f010c3c7:	a2 75 99 86 f0       	mov    %al,0xf0869975
f010c3cc:	a0 75 99 86 f0       	mov    0xf0869975,%al
f010c3d1:	83 c8 80             	or     $0xffffff80,%eax
f010c3d4:	a2 75 99 86 f0       	mov    %al,0xf0869975
f010c3d9:	b8 d4 cd 10 f0       	mov    $0xf010cdd4,%eax
f010c3de:	c1 e8 10             	shr    $0x10,%eax
f010c3e1:	66 a3 76 99 86 f0    	mov    %ax,0xf0869976
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c3e7:	b8 da cd 10 f0       	mov    $0xf010cdda,%eax
f010c3ec:	66 a3 78 99 86 f0    	mov    %ax,0xf0869978
f010c3f2:	66 c7 05 7a 99 86 f0 	movw   $0x8,0xf086997a
f010c3f9:	08 00 
f010c3fb:	a0 7c 99 86 f0       	mov    0xf086997c,%al
f010c400:	83 e0 e0             	and    $0xffffffe0,%eax
f010c403:	a2 7c 99 86 f0       	mov    %al,0xf086997c
f010c408:	a0 7c 99 86 f0       	mov    0xf086997c,%al
f010c40d:	83 e0 1f             	and    $0x1f,%eax
f010c410:	a2 7c 99 86 f0       	mov    %al,0xf086997c
f010c415:	a0 7d 99 86 f0       	mov    0xf086997d,%al
f010c41a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c41d:	83 c8 0e             	or     $0xe,%eax
f010c420:	a2 7d 99 86 f0       	mov    %al,0xf086997d
f010c425:	a0 7d 99 86 f0       	mov    0xf086997d,%al
f010c42a:	83 e0 ef             	and    $0xffffffef,%eax
f010c42d:	a2 7d 99 86 f0       	mov    %al,0xf086997d
f010c432:	a0 7d 99 86 f0       	mov    0xf086997d,%al
f010c437:	83 c8 60             	or     $0x60,%eax
f010c43a:	a2 7d 99 86 f0       	mov    %al,0xf086997d
f010c43f:	a0 7d 99 86 f0       	mov    0xf086997d,%al
f010c444:	83 c8 80             	or     $0xffffff80,%eax
f010c447:	a2 7d 99 86 f0       	mov    %al,0xf086997d
f010c44c:	b8 da cd 10 f0       	mov    $0xf010cdda,%eax
f010c451:	c1 e8 10             	shr    $0x10,%eax
f010c454:	66 a3 7e 99 86 f0    	mov    %ax,0xf086997e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c45a:	b8 e0 cd 10 f0       	mov    $0xf010cde0,%eax
f010c45f:	66 a3 80 99 86 f0    	mov    %ax,0xf0869980
f010c465:	66 c7 05 82 99 86 f0 	movw   $0x8,0xf0869982
f010c46c:	08 00 
f010c46e:	a0 84 99 86 f0       	mov    0xf0869984,%al
f010c473:	83 e0 e0             	and    $0xffffffe0,%eax
f010c476:	a2 84 99 86 f0       	mov    %al,0xf0869984
f010c47b:	a0 84 99 86 f0       	mov    0xf0869984,%al
f010c480:	83 e0 1f             	and    $0x1f,%eax
f010c483:	a2 84 99 86 f0       	mov    %al,0xf0869984
f010c488:	a0 85 99 86 f0       	mov    0xf0869985,%al
f010c48d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c490:	83 c8 0e             	or     $0xe,%eax
f010c493:	a2 85 99 86 f0       	mov    %al,0xf0869985
f010c498:	a0 85 99 86 f0       	mov    0xf0869985,%al
f010c49d:	83 e0 ef             	and    $0xffffffef,%eax
f010c4a0:	a2 85 99 86 f0       	mov    %al,0xf0869985
f010c4a5:	a0 85 99 86 f0       	mov    0xf0869985,%al
f010c4aa:	83 c8 60             	or     $0x60,%eax
f010c4ad:	a2 85 99 86 f0       	mov    %al,0xf0869985
f010c4b2:	a0 85 99 86 f0       	mov    0xf0869985,%al
f010c4b7:	83 c8 80             	or     $0xffffff80,%eax
f010c4ba:	a2 85 99 86 f0       	mov    %al,0xf0869985
f010c4bf:	b8 e0 cd 10 f0       	mov    $0xf010cde0,%eax
f010c4c4:	c1 e8 10             	shr    $0x10,%eax
f010c4c7:	66 a3 86 99 86 f0    	mov    %ax,0xf0869986
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c4cd:	b8 e6 cd 10 f0       	mov    $0xf010cde6,%eax
f010c4d2:	66 a3 88 99 86 f0    	mov    %ax,0xf0869988
f010c4d8:	66 c7 05 8a 99 86 f0 	movw   $0x8,0xf086998a
f010c4df:	08 00 
f010c4e1:	a0 8c 99 86 f0       	mov    0xf086998c,%al
f010c4e6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4e9:	a2 8c 99 86 f0       	mov    %al,0xf086998c
f010c4ee:	a0 8c 99 86 f0       	mov    0xf086998c,%al
f010c4f3:	83 e0 1f             	and    $0x1f,%eax
f010c4f6:	a2 8c 99 86 f0       	mov    %al,0xf086998c
f010c4fb:	a0 8d 99 86 f0       	mov    0xf086998d,%al
f010c500:	83 e0 f0             	and    $0xfffffff0,%eax
f010c503:	83 c8 0e             	or     $0xe,%eax
f010c506:	a2 8d 99 86 f0       	mov    %al,0xf086998d
f010c50b:	a0 8d 99 86 f0       	mov    0xf086998d,%al
f010c510:	83 e0 ef             	and    $0xffffffef,%eax
f010c513:	a2 8d 99 86 f0       	mov    %al,0xf086998d
f010c518:	a0 8d 99 86 f0       	mov    0xf086998d,%al
f010c51d:	83 c8 60             	or     $0x60,%eax
f010c520:	a2 8d 99 86 f0       	mov    %al,0xf086998d
f010c525:	a0 8d 99 86 f0       	mov    0xf086998d,%al
f010c52a:	83 c8 80             	or     $0xffffff80,%eax
f010c52d:	a2 8d 99 86 f0       	mov    %al,0xf086998d
f010c532:	b8 e6 cd 10 f0       	mov    $0xf010cde6,%eax
f010c537:	c1 e8 10             	shr    $0x10,%eax
f010c53a:	66 a3 8e 99 86 f0    	mov    %ax,0xf086998e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c540:	b8 ec cd 10 f0       	mov    $0xf010cdec,%eax
f010c545:	66 a3 90 99 86 f0    	mov    %ax,0xf0869990
f010c54b:	66 c7 05 92 99 86 f0 	movw   $0x8,0xf0869992
f010c552:	08 00 
f010c554:	a0 94 99 86 f0       	mov    0xf0869994,%al
f010c559:	83 e0 e0             	and    $0xffffffe0,%eax
f010c55c:	a2 94 99 86 f0       	mov    %al,0xf0869994
f010c561:	a0 94 99 86 f0       	mov    0xf0869994,%al
f010c566:	83 e0 1f             	and    $0x1f,%eax
f010c569:	a2 94 99 86 f0       	mov    %al,0xf0869994
f010c56e:	a0 95 99 86 f0       	mov    0xf0869995,%al
f010c573:	83 e0 f0             	and    $0xfffffff0,%eax
f010c576:	83 c8 0e             	or     $0xe,%eax
f010c579:	a2 95 99 86 f0       	mov    %al,0xf0869995
f010c57e:	a0 95 99 86 f0       	mov    0xf0869995,%al
f010c583:	83 e0 ef             	and    $0xffffffef,%eax
f010c586:	a2 95 99 86 f0       	mov    %al,0xf0869995
f010c58b:	a0 95 99 86 f0       	mov    0xf0869995,%al
f010c590:	83 c8 60             	or     $0x60,%eax
f010c593:	a2 95 99 86 f0       	mov    %al,0xf0869995
f010c598:	a0 95 99 86 f0       	mov    0xf0869995,%al
f010c59d:	83 c8 80             	or     $0xffffff80,%eax
f010c5a0:	a2 95 99 86 f0       	mov    %al,0xf0869995
f010c5a5:	b8 ec cd 10 f0       	mov    $0xf010cdec,%eax
f010c5aa:	c1 e8 10             	shr    $0x10,%eax
f010c5ad:	66 a3 96 99 86 f0    	mov    %ax,0xf0869996
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c5b3:	b8 f2 cd 10 f0       	mov    $0xf010cdf2,%eax
f010c5b8:	66 a3 98 99 86 f0    	mov    %ax,0xf0869998
f010c5be:	66 c7 05 9a 99 86 f0 	movw   $0x8,0xf086999a
f010c5c5:	08 00 
f010c5c7:	a0 9c 99 86 f0       	mov    0xf086999c,%al
f010c5cc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5cf:	a2 9c 99 86 f0       	mov    %al,0xf086999c
f010c5d4:	a0 9c 99 86 f0       	mov    0xf086999c,%al
f010c5d9:	83 e0 1f             	and    $0x1f,%eax
f010c5dc:	a2 9c 99 86 f0       	mov    %al,0xf086999c
f010c5e1:	a0 9d 99 86 f0       	mov    0xf086999d,%al
f010c5e6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5e9:	83 c8 0e             	or     $0xe,%eax
f010c5ec:	a2 9d 99 86 f0       	mov    %al,0xf086999d
f010c5f1:	a0 9d 99 86 f0       	mov    0xf086999d,%al
f010c5f6:	83 e0 ef             	and    $0xffffffef,%eax
f010c5f9:	a2 9d 99 86 f0       	mov    %al,0xf086999d
f010c5fe:	a0 9d 99 86 f0       	mov    0xf086999d,%al
f010c603:	83 c8 60             	or     $0x60,%eax
f010c606:	a2 9d 99 86 f0       	mov    %al,0xf086999d
f010c60b:	a0 9d 99 86 f0       	mov    0xf086999d,%al
f010c610:	83 c8 80             	or     $0xffffff80,%eax
f010c613:	a2 9d 99 86 f0       	mov    %al,0xf086999d
f010c618:	b8 f2 cd 10 f0       	mov    $0xf010cdf2,%eax
f010c61d:	c1 e8 10             	shr    $0x10,%eax
f010c620:	66 a3 9e 99 86 f0    	mov    %ax,0xf086999e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c626:	c7 05 44 a0 86 f0 00 	movl   $0xefc00000,0xf086a044
f010c62d:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c630:	66 c7 05 48 a0 86 f0 	movw   $0x10,0xf086a048
f010c637:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c639:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c640:	68 00 
f010c642:	b8 40 a0 86 f0       	mov    $0xf086a040,%eax
f010c647:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c64d:	b8 40 a0 86 f0       	mov    $0xf086a040,%eax
f010c652:	c1 e8 10             	shr    $0x10,%eax
f010c655:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c65a:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c65f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c662:	83 c8 09             	or     $0x9,%eax
f010c665:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c66a:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c66f:	83 c8 10             	or     $0x10,%eax
f010c672:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c677:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c67c:	83 e0 9f             	and    $0xffffff9f,%eax
f010c67f:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c684:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c689:	83 c8 80             	or     $0xffffff80,%eax
f010c68c:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c691:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c696:	83 e0 f0             	and    $0xfffffff0,%eax
f010c699:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c69e:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6a3:	83 e0 ef             	and    $0xffffffef,%eax
f010c6a6:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6ab:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6b0:	83 e0 df             	and    $0xffffffdf,%eax
f010c6b3:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6b8:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6bd:	83 c8 40             	or     $0x40,%eax
f010c6c0:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6c5:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6ca:	83 e0 7f             	and    $0x7f,%eax
f010c6cd:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6d2:	b8 40 a0 86 f0       	mov    $0xf086a040,%eax
f010c6d7:	c1 e8 18             	shr    $0x18,%eax
f010c6da:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c6df:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c6e4:	83 e0 ef             	and    $0xffffffef,%eax
f010c6e7:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c6ec:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c6f2:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c6f6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c6f9:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c700:	90                   	nop
f010c701:	c9                   	leave  
f010c702:	c3                   	ret    

f010c703 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c703:	55                   	push   %ebp
f010c704:	89 e5                	mov    %esp,%ebp
f010c706:	53                   	push   %ebx
f010c707:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c70a:	83 ec 08             	sub    $0x8,%esp
f010c70d:	ff 75 08             	pushl  0x8(%ebp)
f010c710:	68 3b 77 13 f0       	push   $0xf013773b
f010c715:	e8 f4 45 ff ff       	call   f0100d0e <cprintf>
f010c71a:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c71d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c720:	83 ec 0c             	sub    $0xc,%esp
f010c723:	50                   	push   %eax
f010c724:	e8 fd 00 00 00       	call   f010c826 <print_regs>
f010c729:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c72f:	8b 40 20             	mov    0x20(%eax),%eax
f010c732:	0f b7 c0             	movzwl %ax,%eax
f010c735:	83 ec 08             	sub    $0x8,%esp
f010c738:	50                   	push   %eax
f010c739:	68 4d 77 13 f0       	push   $0xf013774d
f010c73e:	e8 cb 45 ff ff       	call   f0100d0e <cprintf>
f010c743:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c746:	8b 45 08             	mov    0x8(%ebp),%eax
f010c749:	8b 40 24             	mov    0x24(%eax),%eax
f010c74c:	0f b7 c0             	movzwl %ax,%eax
f010c74f:	83 ec 08             	sub    $0x8,%esp
f010c752:	50                   	push   %eax
f010c753:	68 60 77 13 f0       	push   $0xf0137760
f010c758:	e8 b1 45 ff ff       	call   f0100d0e <cprintf>
f010c75d:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c760:	8b 45 08             	mov    0x8(%ebp),%eax
f010c763:	8b 58 28             	mov    0x28(%eax),%ebx
f010c766:	8b 45 08             	mov    0x8(%ebp),%eax
f010c769:	8b 40 28             	mov    0x28(%eax),%eax
f010c76c:	83 ec 0c             	sub    $0xc,%esp
f010c76f:	50                   	push   %eax
f010c770:	e8 d0 ee ff ff       	call   f010b645 <trapname>
f010c775:	83 c4 10             	add    $0x10,%esp
f010c778:	89 c2                	mov    %eax,%edx
f010c77a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c77d:	8b 40 28             	mov    0x28(%eax),%eax
f010c780:	53                   	push   %ebx
f010c781:	52                   	push   %edx
f010c782:	50                   	push   %eax
f010c783:	68 73 77 13 f0       	push   $0xf0137773
f010c788:	e8 81 45 ff ff       	call   f0100d0e <cprintf>
f010c78d:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c790:	8b 45 08             	mov    0x8(%ebp),%eax
f010c793:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c796:	83 ec 08             	sub    $0x8,%esp
f010c799:	50                   	push   %eax
f010c79a:	68 8a 77 13 f0       	push   $0xf013778a
f010c79f:	e8 6a 45 ff ff       	call   f0100d0e <cprintf>
f010c7a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c7a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7aa:	8b 40 30             	mov    0x30(%eax),%eax
f010c7ad:	83 ec 08             	sub    $0x8,%esp
f010c7b0:	50                   	push   %eax
f010c7b1:	68 99 77 13 f0       	push   $0xf0137799
f010c7b6:	e8 53 45 ff ff       	call   f0100d0e <cprintf>
f010c7bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c7be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7c1:	8b 40 34             	mov    0x34(%eax),%eax
f010c7c4:	0f b7 c0             	movzwl %ax,%eax
f010c7c7:	83 ec 08             	sub    $0x8,%esp
f010c7ca:	50                   	push   %eax
f010c7cb:	68 a8 77 13 f0       	push   $0xf01377a8
f010c7d0:	e8 39 45 ff ff       	call   f0100d0e <cprintf>
f010c7d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c7d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7db:	8b 40 38             	mov    0x38(%eax),%eax
f010c7de:	83 ec 08             	sub    $0x8,%esp
f010c7e1:	50                   	push   %eax
f010c7e2:	68 bb 77 13 f0       	push   $0xf01377bb
f010c7e7:	e8 22 45 ff ff       	call   f0100d0e <cprintf>
f010c7ec:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c7ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f2:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c7f5:	83 ec 08             	sub    $0x8,%esp
f010c7f8:	50                   	push   %eax
f010c7f9:	68 ca 77 13 f0       	push   $0xf01377ca
f010c7fe:	e8 0b 45 ff ff       	call   f0100d0e <cprintf>
f010c803:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c806:	8b 45 08             	mov    0x8(%ebp),%eax
f010c809:	8b 40 40             	mov    0x40(%eax),%eax
f010c80c:	0f b7 c0             	movzwl %ax,%eax
f010c80f:	83 ec 08             	sub    $0x8,%esp
f010c812:	50                   	push   %eax
f010c813:	68 d9 77 13 f0       	push   $0xf01377d9
f010c818:	e8 f1 44 ff ff       	call   f0100d0e <cprintf>
f010c81d:	83 c4 10             	add    $0x10,%esp
}
f010c820:	90                   	nop
f010c821:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c824:	c9                   	leave  
f010c825:	c3                   	ret    

f010c826 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c826:	55                   	push   %ebp
f010c827:	89 e5                	mov    %esp,%ebp
f010c829:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c82c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c82f:	8b 00                	mov    (%eax),%eax
f010c831:	83 ec 08             	sub    $0x8,%esp
f010c834:	50                   	push   %eax
f010c835:	68 ec 77 13 f0       	push   $0xf01377ec
f010c83a:	e8 cf 44 ff ff       	call   f0100d0e <cprintf>
f010c83f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c842:	8b 45 08             	mov    0x8(%ebp),%eax
f010c845:	8b 40 04             	mov    0x4(%eax),%eax
f010c848:	83 ec 08             	sub    $0x8,%esp
f010c84b:	50                   	push   %eax
f010c84c:	68 fb 77 13 f0       	push   $0xf01377fb
f010c851:	e8 b8 44 ff ff       	call   f0100d0e <cprintf>
f010c856:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c859:	8b 45 08             	mov    0x8(%ebp),%eax
f010c85c:	8b 40 08             	mov    0x8(%eax),%eax
f010c85f:	83 ec 08             	sub    $0x8,%esp
f010c862:	50                   	push   %eax
f010c863:	68 0a 78 13 f0       	push   $0xf013780a
f010c868:	e8 a1 44 ff ff       	call   f0100d0e <cprintf>
f010c86d:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c870:	8b 45 08             	mov    0x8(%ebp),%eax
f010c873:	8b 40 0c             	mov    0xc(%eax),%eax
f010c876:	83 ec 08             	sub    $0x8,%esp
f010c879:	50                   	push   %eax
f010c87a:	68 19 78 13 f0       	push   $0xf0137819
f010c87f:	e8 8a 44 ff ff       	call   f0100d0e <cprintf>
f010c884:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c887:	8b 45 08             	mov    0x8(%ebp),%eax
f010c88a:	8b 40 10             	mov    0x10(%eax),%eax
f010c88d:	83 ec 08             	sub    $0x8,%esp
f010c890:	50                   	push   %eax
f010c891:	68 28 78 13 f0       	push   $0xf0137828
f010c896:	e8 73 44 ff ff       	call   f0100d0e <cprintf>
f010c89b:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c89e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a1:	8b 40 14             	mov    0x14(%eax),%eax
f010c8a4:	83 ec 08             	sub    $0x8,%esp
f010c8a7:	50                   	push   %eax
f010c8a8:	68 37 78 13 f0       	push   $0xf0137837
f010c8ad:	e8 5c 44 ff ff       	call   f0100d0e <cprintf>
f010c8b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c8b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8b8:	8b 40 18             	mov    0x18(%eax),%eax
f010c8bb:	83 ec 08             	sub    $0x8,%esp
f010c8be:	50                   	push   %eax
f010c8bf:	68 46 78 13 f0       	push   $0xf0137846
f010c8c4:	e8 45 44 ff ff       	call   f0100d0e <cprintf>
f010c8c9:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c8cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8cf:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c8d2:	83 ec 08             	sub    $0x8,%esp
f010c8d5:	50                   	push   %eax
f010c8d6:	68 55 78 13 f0       	push   $0xf0137855
f010c8db:	e8 2e 44 ff ff       	call   f0100d0e <cprintf>
f010c8e0:	83 c4 10             	add    $0x10,%esp
}
f010c8e3:	90                   	nop
f010c8e4:	c9                   	leave  
f010c8e5:	c3                   	ret    

f010c8e6 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c8e6:	55                   	push   %ebp
f010c8e7:	89 e5                	mov    %esp,%ebp
f010c8e9:	57                   	push   %edi
f010c8ea:	56                   	push   %esi
f010c8eb:	53                   	push   %ebx
f010c8ec:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c8ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f2:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f5:	83 f8 0e             	cmp    $0xe,%eax
f010c8f8:	75 29                	jne    f010c923 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c8fa:	83 ec 0c             	sub    $0xc,%esp
f010c8fd:	6a 01                	push   $0x1
f010c8ff:	e8 fb 18 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010c904:	83 c4 10             	add    $0x10,%esp
f010c907:	85 c0                	test   %eax,%eax
f010c909:	74 05                	je     f010c910 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c90b:	e8 7b 90 ff ff       	call   f010598b <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c910:	83 ec 0c             	sub    $0xc,%esp
f010c913:	ff 75 08             	pushl  0x8(%ebp)
f010c916:	e8 51 02 00 00       	call   f010cb6c <fault_handler>
f010c91b:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c91e:	e9 bb 00 00 00       	jmp    f010c9de <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c923:	8b 45 08             	mov    0x8(%ebp),%eax
f010c926:	8b 40 28             	mov    0x28(%eax),%eax
f010c929:	83 f8 30             	cmp    $0x30,%eax
f010c92c:	75 42                	jne    f010c970 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c931:	8b 78 04             	mov    0x4(%eax),%edi
f010c934:	8b 45 08             	mov    0x8(%ebp),%eax
f010c937:	8b 30                	mov    (%eax),%esi
f010c939:	8b 45 08             	mov    0x8(%ebp),%eax
f010c93c:	8b 58 10             	mov    0x10(%eax),%ebx
f010c93f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c942:	8b 48 18             	mov    0x18(%eax),%ecx
f010c945:	8b 45 08             	mov    0x8(%ebp),%eax
f010c948:	8b 50 14             	mov    0x14(%eax),%edx
f010c94b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c94e:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c951:	83 ec 08             	sub    $0x8,%esp
f010c954:	57                   	push   %edi
f010c955:	56                   	push   %esi
f010c956:	53                   	push   %ebx
f010c957:	51                   	push   %ecx
f010c958:	52                   	push   %edx
f010c959:	50                   	push   %eax
f010c95a:	e8 eb 0f 00 00       	call   f010d94a <syscall>
f010c95f:	83 c4 20             	add    $0x20,%esp
f010c962:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c965:	8b 45 08             	mov    0x8(%ebp),%eax
f010c968:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c96b:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c96e:	eb 6e                	jmp    f010c9de <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c970:	8b 45 08             	mov    0x8(%ebp),%eax
f010c973:	8b 40 28             	mov    0x28(%eax),%eax
f010c976:	83 f8 08             	cmp    $0x8,%eax
f010c979:	75 17                	jne    f010c992 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c97b:	83 ec 04             	sub    $0x4,%esp
f010c97e:	68 64 78 13 f0       	push   $0xf0137864
f010c983:	68 e7 00 00 00       	push   $0xe7
f010c988:	68 73 78 13 f0       	push   $0xf0137873
f010c98d:	e8 73 38 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c992:	8b 45 08             	mov    0x8(%ebp),%eax
f010c995:	8b 40 28             	mov    0x28(%eax),%eax
f010c998:	83 f8 20             	cmp    $0x20,%eax
f010c99b:	75 07                	jne    f010c9a4 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c99d:	e8 c8 8f ff ff       	call   f010596a <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c9a2:	eb 3a                	jmp    f010c9de <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c9a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9a7:	8b 40 34             	mov    0x34(%eax),%eax
f010c9aa:	66 83 f8 08          	cmp    $0x8,%ax
f010c9ae:	75 17                	jne    f010c9c7 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c9b0:	83 ec 04             	sub    $0x4,%esp
f010c9b3:	68 84 78 13 f0       	push   $0xf0137884
f010c9b8:	68 f4 00 00 00       	push   $0xf4
f010c9bd:	68 73 78 13 f0       	push   $0xf0137873
f010c9c2:	e8 3e 38 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c9c7:	83 ec 04             	sub    $0x4,%esp
f010c9ca:	68 a0 78 13 f0       	push   $0xf01378a0
f010c9cf:	68 f8 00 00 00       	push   $0xf8
f010c9d4:	68 73 78 13 f0       	push   $0xf0137873
f010c9d9:	e8 27 38 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c9de:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c9e1:	5b                   	pop    %ebx
f010c9e2:	5e                   	pop    %esi
f010c9e3:	5f                   	pop    %edi
f010c9e4:	5d                   	pop    %ebp
f010c9e5:	c3                   	ret    

f010c9e6 <trap>:

void trap(struct Trapframe *tf)
{
f010c9e6:	55                   	push   %ebp
f010c9e7:	89 e5                	mov    %esp,%ebp
f010c9e9:	57                   	push   %edi
f010c9ea:	56                   	push   %esi
f010c9eb:	53                   	push   %ebx
f010c9ec:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c9ef:	e8 ff 76 ff ff       	call   f01040f3 <kclock_stop>

	int userTrap = 0;
f010c9f4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c9fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fe:	8b 40 34             	mov    0x34(%eax),%eax
f010ca01:	0f b7 c0             	movzwl %ax,%eax
f010ca04:	83 e0 03             	and    $0x3,%eax
f010ca07:	83 f8 03             	cmp    $0x3,%eax
f010ca0a:	75 49                	jne    f010ca55 <trap+0x6f>
		assert(curenv);
f010ca0c:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ca11:	85 c0                	test   %eax,%eax
f010ca13:	75 19                	jne    f010ca2e <trap+0x48>
f010ca15:	68 bf 78 13 f0       	push   $0xf01378bf
f010ca1a:	68 c6 78 13 f0       	push   $0xf01378c6
f010ca1f:	68 06 01 00 00       	push   $0x106
f010ca24:	68 73 78 13 f0       	push   $0xf0137873
f010ca29:	e8 d7 37 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010ca2e:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f010ca34:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca37:	89 c3                	mov    %eax,%ebx
f010ca39:	b8 11 00 00 00       	mov    $0x11,%eax
f010ca3e:	89 d7                	mov    %edx,%edi
f010ca40:	89 de                	mov    %ebx,%esi
f010ca42:	89 c1                	mov    %eax,%ecx
f010ca44:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010ca46:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ca4b:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010ca4e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010ca55:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca58:	8b 40 28             	mov    0x28(%eax),%eax
f010ca5b:	83 f8 20             	cmp    $0x20,%eax
f010ca5e:	75 40                	jne    f010caa0 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010ca60:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ca64:	0f 84 a6 00 00 00    	je     f010cb10 <trap+0x12a>
		{
			assert(curenv);
f010ca6a:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ca6f:	85 c0                	test   %eax,%eax
f010ca71:	75 19                	jne    f010ca8c <trap+0xa6>
f010ca73:	68 bf 78 13 f0       	push   $0xf01378bf
f010ca78:	68 c6 78 13 f0       	push   $0xf01378c6
f010ca7d:	68 12 01 00 00       	push   $0x112
f010ca82:	68 73 78 13 f0       	push   $0xf0137873
f010ca87:	e8 79 37 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010ca8c:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ca91:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010ca97:	42                   	inc    %edx
f010ca98:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010ca9e:	eb 70                	jmp    f010cb10 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010caa0:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa3:	8b 40 28             	mov    0x28(%eax),%eax
f010caa6:	83 f8 0e             	cmp    $0xe,%eax
f010caa9:	75 65                	jne    f010cb10 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010caab:	a0 a8 a0 86 f0       	mov    0xf086a0a8,%al
f010cab0:	84 c0                	test   %al,%al
f010cab2:	74 5c                	je     f010cb10 <trap+0x12a>
			if (userTrap){
f010cab4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cab8:	74 2c                	je     f010cae6 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010caba:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cabf:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f010cac5:	8b 52 30             	mov    0x30(%edx),%edx
f010cac8:	89 d1                	mov    %edx,%ecx
f010caca:	8a 15 a8 a0 86 f0    	mov    0xf086a0a8,%dl
f010cad0:	0f b6 d2             	movzbl %dl,%edx
f010cad3:	01 ca                	add    %ecx,%edx
f010cad5:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cad8:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cadd:	83 ec 0c             	sub    $0xc,%esp
f010cae0:	50                   	push   %eax
f010cae1:	e8 43 d4 ff ff       	call   f0109f29 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cae6:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae9:	8b 40 30             	mov    0x30(%eax),%eax
f010caec:	89 c2                	mov    %eax,%edx
f010caee:	a0 a8 a0 86 f0       	mov    0xf086a0a8,%al
f010caf3:	0f b6 c0             	movzbl %al,%eax
f010caf6:	01 d0                	add    %edx,%eax
f010caf8:	89 c2                	mov    %eax,%edx
f010cafa:	8b 45 08             	mov    0x8(%ebp),%eax
f010cafd:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010cb00:	e8 19 76 ff ff       	call   f010411e <kclock_resume>
				env_pop_tf(tf);
f010cb05:	83 ec 0c             	sub    $0xc,%esp
f010cb08:	ff 75 08             	pushl  0x8(%ebp)
f010cb0b:	e8 7c d5 ff ff       	call   f010a08c <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cb10:	83 ec 0c             	sub    $0xc,%esp
f010cb13:	ff 75 08             	pushl  0x8(%ebp)
f010cb16:	e8 cb fd ff ff       	call   f010c8e6 <trap_dispatch>
f010cb1b:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cb1e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cb22:	74 3d                	je     f010cb61 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cb24:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cb29:	85 c0                	test   %eax,%eax
f010cb2b:	74 0d                	je     f010cb3a <trap+0x154>
f010cb2d:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cb32:	8b 40 54             	mov    0x54(%eax),%eax
f010cb35:	83 f8 02             	cmp    $0x2,%eax
f010cb38:	74 19                	je     f010cb53 <trap+0x16d>
f010cb3a:	68 dc 78 13 f0       	push   $0xf01378dc
f010cb3f:	68 c6 78 13 f0       	push   $0xf01378c6
f010cb44:	68 27 01 00 00       	push   $0x127
f010cb49:	68 73 78 13 f0       	push   $0xf0137873
f010cb4e:	e8 b2 36 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010cb53:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cb58:	83 ec 0c             	sub    $0xc,%esp
f010cb5b:	50                   	push   %eax
f010cb5c:	e8 c8 d3 ff ff       	call   f0109f29 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010cb61:	83 ec 0c             	sub    $0xc,%esp
f010cb64:	ff 75 08             	pushl  0x8(%ebp)
f010cb67:	e8 20 d5 ff ff       	call   f010a08c <env_pop_tf>

f010cb6c <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010cb6c:	55                   	push   %ebp
f010cb6d:	89 e5                	mov    %esp,%ebp
f010cb6f:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010cb72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb79:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb7c:	8b 40 34             	mov    0x34(%eax),%eax
f010cb7f:	0f b7 c0             	movzwl %ax,%eax
f010cb82:	83 e0 03             	and    $0x3,%eax
f010cb85:	83 f8 03             	cmp    $0x3,%eax
f010cb88:	75 07                	jne    f010cb91 <fault_handler+0x25>
		userTrap = 1;
f010cb8a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cb91:	0f 20 d0             	mov    %cr2,%eax
f010cb94:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010cb97:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010cb9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010cb9d:	a1 20 a0 86 f0       	mov    0xf086a020,%eax
f010cba2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cba5:	75 2b                	jne    f010cbd2 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010cba7:	a0 24 a0 86 f0       	mov    0xf086a024,%al
f010cbac:	40                   	inc    %eax
f010cbad:	a2 24 a0 86 f0       	mov    %al,0xf086a024
		if (num_repeated_fault == 3)
f010cbb2:	a0 24 a0 86 f0       	mov    0xf086a024,%al
f010cbb7:	3c 03                	cmp    $0x3,%al
f010cbb9:	75 1e                	jne    f010cbd9 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cbbb:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbbe:	68 0c 79 13 f0       	push   $0xf013790c
f010cbc3:	68 47 01 00 00       	push   $0x147
f010cbc8:	68 73 78 13 f0       	push   $0xf0137873
f010cbcd:	e8 33 36 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cbd2:	c6 05 24 a0 86 f0 00 	movb   $0x0,0xf086a024
	}
	last_fault_va = fault_va ;
f010cbd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbdc:	a3 20 a0 86 f0       	mov    %eax,0xf086a020
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cbe1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbe5:	75 29                	jne    f010cc10 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cbe7:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cbee:	77 40                	ja     f010cc30 <fault_handler+0xc4>
f010cbf0:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cbf7:	76 37                	jbe    f010cc30 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cbf9:	83 ec 04             	sub    $0x4,%esp
f010cbfc:	68 58 79 13 f0       	push   $0xf0137958
f010cc01:	68 53 01 00 00       	push   $0x153
f010cc06:	68 73 78 13 f0       	push   $0xf0137873
f010cc0b:	e8 f5 35 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cc10:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cc17:	76 17                	jbe    f010cc30 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cc19:	83 ec 04             	sub    $0x4,%esp
f010cc1c:	68 7c 79 13 f0       	push   $0xf013797c
f010cc21:	68 59 01 00 00       	push   $0x159
f010cc26:	68 73 78 13 f0       	push   $0xf0137873
f010cc2b:	e8 d5 35 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cc30:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010cc35:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cc38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc3b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cc3e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cc41:	c1 ea 16             	shr    $0x16,%edx
f010cc44:	c1 e2 02             	shl    $0x2,%edx
f010cc47:	01 d0                	add    %edx,%eax
f010cc49:	8b 00                	mov    (%eax),%eax
f010cc4b:	83 e0 01             	and    $0x1,%eax
f010cc4e:	85 c0                	test   %eax,%eax
f010cc50:	75 28                	jne    f010cc7a <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cc52:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc55:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cc5b:	8d 50 01             	lea    0x1(%eax),%edx
f010cc5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc61:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cc67:	83 ec 08             	sub    $0x8,%esp
f010cc6a:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc6d:	ff 75 e8             	pushl  -0x18(%ebp)
f010cc70:	e8 6f 16 00 00       	call   f010e2e4 <table_fault_handler>
f010cc75:	83 c4 10             	add    $0x10,%esp
f010cc78:	eb 7b                	jmp    f010ccf5 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cc7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc7d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cc80:	83 ec 08             	sub    $0x8,%esp
f010cc83:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc86:	50                   	push   %eax
f010cc87:	e8 bc b0 ff ff       	call   f0107d48 <pt_get_page_permissions>
f010cc8c:	83 c4 10             	add    $0x10,%esp
f010cc8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cc92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cc95:	83 e0 01             	and    $0x1,%eax
f010cc98:	85 c0                	test   %eax,%eax
f010cc9a:	74 17                	je     f010ccb3 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cc9c:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc9f:	68 a0 79 13 f0       	push   $0xf01379a0
f010cca4:	68 6e 01 00 00       	push   $0x16e
f010cca9:	68 73 78 13 f0       	push   $0xf0137873
f010ccae:	e8 52 35 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ccb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccb6:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010ccbc:	8d 50 01             	lea    0x1(%eax),%edx
f010ccbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccc2:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ccc8:	e8 f5 15 00 00       	call   f010e2c2 <isBufferingEnabled>
f010cccd:	84 c0                	test   %al,%al
f010cccf:	74 13                	je     f010cce4 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ccd1:	83 ec 08             	sub    $0x8,%esp
f010ccd4:	ff 75 ec             	pushl  -0x14(%ebp)
f010ccd7:	ff 75 e8             	pushl  -0x18(%ebp)
f010ccda:	e8 9e 1a 00 00       	call   f010e77d <__page_fault_handler_with_buffering>
f010ccdf:	83 c4 10             	add    $0x10,%esp
f010cce2:	eb 11                	jmp    f010ccf5 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cce4:	83 ec 08             	sub    $0x8,%esp
f010cce7:	ff 75 ec             	pushl  -0x14(%ebp)
f010ccea:	ff 75 e8             	pushl  -0x18(%ebp)
f010cced:	e8 13 16 00 00       	call   f010e305 <page_fault_handler>
f010ccf2:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ccf5:	0f 20 d8             	mov    %cr3,%eax
f010ccf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ccfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ccfe:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cd01:	90                   	nop
f010cd02:	c9                   	leave  
f010cd03:	c3                   	ret    

f010cd04 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cd04:	6a 0e                	push   $0xe
f010cd06:	e9 ed 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd0b:	90                   	nop

f010cd0c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cd0c:	6a 00                	push   $0x0
f010cd0e:	6a 30                	push   $0x30
f010cd10:	e9 e3 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd15:	90                   	nop

f010cd16 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cd16:	6a 08                	push   $0x8
f010cd18:	e9 db 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd1d:	90                   	nop

f010cd1e <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cd1e:	6a 00                	push   $0x0
f010cd20:	6a 00                	push   $0x0
f010cd22:	e9 d1 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd27:	90                   	nop

f010cd28 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cd28:	6a 00                	push   $0x0
f010cd2a:	6a 01                	push   $0x1
f010cd2c:	e9 c7 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd31:	90                   	nop

f010cd32 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cd32:	6a 00                	push   $0x0
f010cd34:	6a 02                	push   $0x2
f010cd36:	e9 bd 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd3b:	90                   	nop

f010cd3c <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cd3c:	6a 00                	push   $0x0
f010cd3e:	6a 03                	push   $0x3
f010cd40:	e9 b3 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd45:	90                   	nop

f010cd46 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cd46:	6a 00                	push   $0x0
f010cd48:	6a 04                	push   $0x4
f010cd4a:	e9 a9 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd4f:	90                   	nop

f010cd50 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cd50:	6a 00                	push   $0x0
f010cd52:	6a 05                	push   $0x5
f010cd54:	e9 9f 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd59:	90                   	nop

f010cd5a <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cd5a:	6a 00                	push   $0x0
f010cd5c:	6a 06                	push   $0x6
f010cd5e:	e9 95 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd63:	90                   	nop

f010cd64 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cd64:	6a 00                	push   $0x0
f010cd66:	6a 07                	push   $0x7
f010cd68:	e9 8b 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd6d:	90                   	nop

f010cd6e <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cd6e:	6a 0a                	push   $0xa
f010cd70:	e9 83 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd75:	90                   	nop

f010cd76 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cd76:	6a 0b                	push   $0xb
f010cd78:	eb 7e                	jmp    f010cdf8 <_alltraps>

f010cd7a <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cd7a:	6a 0c                	push   $0xc
f010cd7c:	eb 7a                	jmp    f010cdf8 <_alltraps>

f010cd7e <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cd7e:	6a 0d                	push   $0xd
f010cd80:	eb 76                	jmp    f010cdf8 <_alltraps>

f010cd82 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cd82:	6a 00                	push   $0x0
f010cd84:	6a 10                	push   $0x10
f010cd86:	eb 70                	jmp    f010cdf8 <_alltraps>

f010cd88 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cd88:	6a 11                	push   $0x11
f010cd8a:	eb 6c                	jmp    f010cdf8 <_alltraps>

f010cd8c <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cd8c:	6a 00                	push   $0x0
f010cd8e:	6a 12                	push   $0x12
f010cd90:	eb 66                	jmp    f010cdf8 <_alltraps>

f010cd92 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cd92:	6a 00                	push   $0x0
f010cd94:	6a 13                	push   $0x13
f010cd96:	eb 60                	jmp    f010cdf8 <_alltraps>

f010cd98 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cd98:	6a 00                	push   $0x0
f010cd9a:	6a 20                	push   $0x20
f010cd9c:	eb 5a                	jmp    f010cdf8 <_alltraps>

f010cd9e <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cd9e:	6a 00                	push   $0x0
f010cda0:	6a 21                	push   $0x21
f010cda2:	eb 54                	jmp    f010cdf8 <_alltraps>

f010cda4 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cda4:	6a 00                	push   $0x0
f010cda6:	6a 22                	push   $0x22
f010cda8:	eb 4e                	jmp    f010cdf8 <_alltraps>

f010cdaa <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cdaa:	6a 00                	push   $0x0
f010cdac:	6a 23                	push   $0x23
f010cdae:	eb 48                	jmp    f010cdf8 <_alltraps>

f010cdb0 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cdb0:	6a 00                	push   $0x0
f010cdb2:	6a 24                	push   $0x24
f010cdb4:	eb 42                	jmp    f010cdf8 <_alltraps>

f010cdb6 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cdb6:	6a 00                	push   $0x0
f010cdb8:	6a 25                	push   $0x25
f010cdba:	eb 3c                	jmp    f010cdf8 <_alltraps>

f010cdbc <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cdbc:	6a 00                	push   $0x0
f010cdbe:	6a 26                	push   $0x26
f010cdc0:	eb 36                	jmp    f010cdf8 <_alltraps>

f010cdc2 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cdc2:	6a 00                	push   $0x0
f010cdc4:	6a 27                	push   $0x27
f010cdc6:	eb 30                	jmp    f010cdf8 <_alltraps>

f010cdc8 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cdc8:	6a 00                	push   $0x0
f010cdca:	6a 28                	push   $0x28
f010cdcc:	eb 2a                	jmp    f010cdf8 <_alltraps>

f010cdce <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cdce:	6a 00                	push   $0x0
f010cdd0:	6a 29                	push   $0x29
f010cdd2:	eb 24                	jmp    f010cdf8 <_alltraps>

f010cdd4 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cdd4:	6a 00                	push   $0x0
f010cdd6:	6a 2a                	push   $0x2a
f010cdd8:	eb 1e                	jmp    f010cdf8 <_alltraps>

f010cdda <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cdda:	6a 00                	push   $0x0
f010cddc:	6a 2b                	push   $0x2b
f010cdde:	eb 18                	jmp    f010cdf8 <_alltraps>

f010cde0 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cde0:	6a 00                	push   $0x0
f010cde2:	6a 2c                	push   $0x2c
f010cde4:	eb 12                	jmp    f010cdf8 <_alltraps>

f010cde6 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cde6:	6a 00                	push   $0x0
f010cde8:	6a 2d                	push   $0x2d
f010cdea:	eb 0c                	jmp    f010cdf8 <_alltraps>

f010cdec <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cdec:	6a 00                	push   $0x0
f010cdee:	6a 2e                	push   $0x2e
f010cdf0:	eb 06                	jmp    f010cdf8 <_alltraps>

f010cdf2 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cdf2:	6a 00                	push   $0x0
f010cdf4:	6a 2f                	push   $0x2f
f010cdf6:	eb 00                	jmp    f010cdf8 <_alltraps>

f010cdf8 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cdf8:	1e                   	push   %ds
push %es
f010cdf9:	06                   	push   %es
pushal
f010cdfa:	60                   	pusha  

mov $(GD_KD), %ax
f010cdfb:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cdff:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010ce01:	8e c0                	mov    %eax,%es

push %esp
f010ce03:	54                   	push   %esp

call trap
f010ce04:	e8 dd fb ff ff       	call   f010c9e6 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010ce09:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010ce0a:	61                   	popa   
pop %es
f010ce0b:	07                   	pop    %es
pop %ds
f010ce0c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010ce0d:	83 c4 08             	add    $0x8,%esp

iret
f010ce10:	cf                   	iret   

f010ce11 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010ce11:	55                   	push   %ebp
f010ce12:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010ce14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce17:	8b 15 54 a1 86 f0    	mov    0xf086a154,%edx
f010ce1d:	29 d0                	sub    %edx,%eax
f010ce1f:	c1 f8 03             	sar    $0x3,%eax
f010ce22:	89 c2                	mov    %eax,%edx
f010ce24:	89 d0                	mov    %edx,%eax
f010ce26:	c1 e0 02             	shl    $0x2,%eax
f010ce29:	01 d0                	add    %edx,%eax
f010ce2b:	c1 e0 02             	shl    $0x2,%eax
f010ce2e:	01 d0                	add    %edx,%eax
f010ce30:	c1 e0 02             	shl    $0x2,%eax
f010ce33:	01 d0                	add    %edx,%eax
f010ce35:	89 c1                	mov    %eax,%ecx
f010ce37:	c1 e1 08             	shl    $0x8,%ecx
f010ce3a:	01 c8                	add    %ecx,%eax
f010ce3c:	89 c1                	mov    %eax,%ecx
f010ce3e:	c1 e1 10             	shl    $0x10,%ecx
f010ce41:	01 c8                	add    %ecx,%eax
f010ce43:	01 c0                	add    %eax,%eax
f010ce45:	01 d0                	add    %edx,%eax
}
f010ce47:	5d                   	pop    %ebp
f010ce48:	c3                   	ret    

f010ce49 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010ce49:	55                   	push   %ebp
f010ce4a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010ce4c:	ff 75 08             	pushl  0x8(%ebp)
f010ce4f:	e8 bd ff ff ff       	call   f010ce11 <to_frame_number>
f010ce54:	83 c4 04             	add    $0x4,%esp
f010ce57:	c1 e0 0c             	shl    $0xc,%eax
}
f010ce5a:	c9                   	leave  
f010ce5b:	c3                   	ret    

f010ce5c <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010ce5c:	55                   	push   %ebp
f010ce5d:	89 e5                	mov    %esp,%ebp
f010ce5f:	83 ec 18             	sub    $0x18,%esp
f010ce62:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce65:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010ce68:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010ce6c:	74 26                	je     f010ce94 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010ce6e:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ce73:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce76:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f010ce7c:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010ce82:	83 ec 04             	sub    $0x4,%esp
f010ce85:	50                   	push   %eax
f010ce86:	52                   	push   %edx
f010ce87:	68 90 7b 13 f0       	push   $0xf0137b90
f010ce8c:	e8 7d 3e ff ff       	call   f0100d0e <cprintf>
f010ce91:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010ce94:	83 ec 04             	sub    $0x4,%esp
f010ce97:	ff 75 08             	pushl  0x8(%ebp)
f010ce9a:	ff 75 0c             	pushl  0xc(%ebp)
f010ce9d:	68 99 7b 13 f0       	push   $0xf0137b99
f010cea2:	e8 67 3e ff ff       	call   f0100d0e <cprintf>
f010cea7:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010ceaa:	90                   	nop
f010ceab:	c9                   	leave  
f010ceac:	c3                   	ret    

f010cead <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cead:	55                   	push   %ebp
f010ceae:	89 e5                	mov    %esp,%ebp
f010ceb0:	83 ec 18             	sub    $0x18,%esp
f010ceb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ceb6:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010ceb9:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cebd:	83 ec 08             	sub    $0x8,%esp
f010cec0:	50                   	push   %eax
f010cec1:	68 9e 7b 13 f0       	push   $0xf0137b9e
f010cec6:	e8 43 3e ff ff       	call   f0100d0e <cprintf>
f010cecb:	83 c4 10             	add    $0x10,%esp
}
f010cece:	90                   	nop
f010cecf:	c9                   	leave  
f010ced0:	c3                   	ret    

f010ced1 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ced1:	55                   	push   %ebp
f010ced2:	89 e5                	mov    %esp,%ebp
f010ced4:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ced7:	e8 6c 3c ff ff       	call   f0100b48 <cons_getc2>
f010cedc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cedf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cee2:	c9                   	leave  
f010cee3:	c3                   	ret    

f010cee4 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cee4:	55                   	push   %ebp
f010cee5:	89 e5                	mov    %esp,%ebp
f010cee7:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ceea:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ceef:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cef2:	83 ec 0c             	sub    $0xc,%esp
f010cef5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cef8:	50                   	push   %eax
f010cef9:	e8 53 99 ff ff       	call   f0106851 <allocate_frame>
f010cefe:	83 c4 10             	add    $0x10,%esp
f010cf01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cf04:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cf08:	75 08                	jne    f010cf12 <__sys_allocate_page+0x2e>
		return r ;
f010cf0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf0d:	e9 e9 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cf12:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf15:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cf1a:	77 0c                	ja     f010cf28 <__sys_allocate_page+0x44>
f010cf1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf1f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cf24:	85 c0                	test   %eax,%eax
f010cf26:	74 0a                	je     f010cf32 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cf28:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cf2d:	e9 c9 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cf32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf35:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cf3a:	83 f8 04             	cmp    $0x4,%eax
f010cf3d:	74 0a                	je     f010cf49 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cf3f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cf44:	e9 b2 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cf49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf4c:	83 ec 0c             	sub    $0xc,%esp
f010cf4f:	50                   	push   %eax
f010cf50:	e8 f4 fe ff ff       	call   f010ce49 <to_physical_address>
f010cf55:	83 c4 10             	add    $0x10,%esp
f010cf58:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cf5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf61:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cf64:	6a 02                	push   $0x2
f010cf66:	68 00 00 80 ef       	push   $0xef800000
f010cf6b:	52                   	push   %edx
f010cf6c:	50                   	push   %eax
f010cf6d:	e8 2e 9d ff ff       	call   f0106ca0 <map_frame>
f010cf72:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cf75:	83 ec 04             	sub    $0x4,%esp
f010cf78:	68 00 10 00 00       	push   $0x1000
f010cf7d:	6a 00                	push   $0x0
f010cf7f:	68 00 00 80 ef       	push   $0xef800000
f010cf84:	e8 3a 4c 02 00       	call   f0131bc3 <memset>
f010cf89:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cf8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf92:	8b 40 08             	mov    0x8(%eax),%eax
f010cf95:	40                   	inc    %eax
f010cf96:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cf9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf9d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfa0:	83 ec 08             	sub    $0x8,%esp
f010cfa3:	68 00 00 80 ef       	push   $0xef800000
f010cfa8:	50                   	push   %eax
f010cfa9:	e8 27 9e ff ff       	call   f0106dd5 <unmap_frame>
f010cfae:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cfb1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cfb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfb7:	8b 40 08             	mov    0x8(%eax),%eax
f010cfba:	48                   	dec    %eax
f010cfbb:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cfbf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cfc2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cfc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfc8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfcb:	ff 75 0c             	pushl  0xc(%ebp)
f010cfce:	51                   	push   %ecx
f010cfcf:	52                   	push   %edx
f010cfd0:	50                   	push   %eax
f010cfd1:	e8 ca 9c ff ff       	call   f0106ca0 <map_frame>
f010cfd6:	83 c4 10             	add    $0x10,%esp
f010cfd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cfdc:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cfe0:	75 14                	jne    f010cff6 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cfe2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfe5:	83 ec 0c             	sub    $0xc,%esp
f010cfe8:	50                   	push   %eax
f010cfe9:	e8 f2 99 ff ff       	call   f01069e0 <decrement_references>
f010cfee:	83 c4 10             	add    $0x10,%esp
		return r;
f010cff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cff4:	eb 05                	jmp    f010cffb <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cff6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cffb:	c9                   	leave  
f010cffc:	c3                   	ret    

f010cffd <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cffd:	55                   	push   %ebp
f010cffe:	89 e5                	mov    %esp,%ebp
f010d000:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d003:	83 ec 04             	sub    $0x4,%esp
f010d006:	68 a1 7b 13 f0       	push   $0xf0137ba1
f010d00b:	68 b3 00 00 00       	push   $0xb3
f010d010:	68 bf 7b 13 f0       	push   $0xf0137bbf
f010d015:	e8 eb 31 ff ff       	call   f0100205 <_panic>

f010d01a <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d01a:	55                   	push   %ebp
f010d01b:	89 e5                	mov    %esp,%ebp
f010d01d:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d020:	83 ec 04             	sub    $0x4,%esp
f010d023:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010d028:	68 c3 00 00 00       	push   $0xc3
f010d02d:	68 bf 7b 13 f0       	push   $0xf0137bbf
f010d032:	e8 ce 31 ff ff       	call   f0100205 <_panic>

f010d037 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d037:	55                   	push   %ebp
f010d038:	89 e5                	mov    %esp,%ebp
f010d03a:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d03d:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d042:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d045:	83 ec 04             	sub    $0x4,%esp
f010d048:	ff 75 0c             	pushl  0xc(%ebp)
f010d04b:	ff 75 08             	pushl  0x8(%ebp)
f010d04e:	50                   	push   %eax
f010d04f:	e8 a8 bf ff ff       	call   f0108ffc <calculate_required_frames>
f010d054:	83 c4 10             	add    $0x10,%esp
}
f010d057:	c9                   	leave  
f010d058:	c3                   	ret    

f010d059 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d059:	55                   	push   %ebp
f010d05a:	89 e5                	mov    %esp,%ebp
f010d05c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d05f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d062:	83 ec 0c             	sub    $0xc,%esp
f010d065:	50                   	push   %eax
f010d066:	e8 cf 9e ff ff       	call   f0106f3a <calculate_available_frames>
f010d06b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d06e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d071:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d074:	01 d0                	add    %edx,%eax
}
f010d076:	c9                   	leave  
f010d077:	c3                   	ret    

f010d078 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d078:	55                   	push   %ebp
f010d079:	89 e5                	mov    %esp,%ebp
f010d07b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d07e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d081:	83 ec 0c             	sub    $0xc,%esp
f010d084:	50                   	push   %eax
f010d085:	e8 b0 9e ff ff       	call   f0106f3a <calculate_available_frames>
f010d08a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d08d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d090:	c9                   	leave  
f010d091:	c3                   	ret    

f010d092 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d092:	55                   	push   %ebp
f010d093:	89 e5                	mov    %esp,%ebp
f010d095:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d098:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d09b:	83 ec 0c             	sub    $0xc,%esp
f010d09e:	50                   	push   %eax
f010d09f:	e8 96 9e ff ff       	call   f0106f3a <calculate_available_frames>
f010d0a4:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d0a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d0aa:	c9                   	leave  
f010d0ab:	c3                   	ret    

f010d0ac <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d0ac:	55                   	push   %ebp
f010d0ad:	89 e5                	mov    %esp,%ebp
f010d0af:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d0b2:	83 ec 0c             	sub    $0xc,%esp
f010d0b5:	ff 75 08             	pushl  0x8(%ebp)
f010d0b8:	e8 23 38 02 00       	call   f01308e0 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d0bd:	83 c4 10             	add    $0x10,%esp
}
f010d0c0:	c9                   	leave  
f010d0c1:	c3                   	ret    

f010d0c2 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d0c2:	55                   	push   %ebp
f010d0c3:	89 e5                	mov    %esp,%ebp
f010d0c5:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d0c8:	e8 6b 37 02 00       	call   f0130838 <scarce_memory>
}
f010d0cd:	90                   	nop
f010d0ce:	c9                   	leave  
f010d0cf:	c3                   	ret    

f010d0d0 <sys_clearFFL>:

void sys_clearFFL()
{
f010d0d0:	55                   	push   %ebp
f010d0d1:	89 e5                	mov    %esp,%ebp
f010d0d3:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d0d6:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f010d0db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d0de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d0e5:	eb 12                	jmp    f010d0f9 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d0e7:	83 ec 0c             	sub    $0xc,%esp
f010d0ea:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d0ed:	50                   	push   %eax
f010d0ee:	e8 5e 97 ff ff       	call   f0106851 <allocate_frame>
f010d0f3:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d0f6:	ff 45 f4             	incl   -0xc(%ebp)
f010d0f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d0ff:	7c e6                	jl     f010d0e7 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d101:	90                   	nop
f010d102:	c9                   	leave  
f010d103:	c3                   	ret    

f010d104 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d104:	55                   	push   %ebp
f010d105:	89 e5                	mov    %esp,%ebp
f010d107:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d10a:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d10f:	83 ec 0c             	sub    $0xc,%esp
f010d112:	50                   	push   %eax
f010d113:	e8 6f 6b ff ff       	call   f0103c87 <pf_calculate_allocated_pages>
f010d118:	83 c4 10             	add    $0x10,%esp
}
f010d11b:	c9                   	leave  
f010d11c:	c3                   	ret    

f010d11d <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d11d:	55                   	push   %ebp
f010d11e:	89 e5                	mov    %esp,%ebp
f010d120:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d123:	e8 9a 11 00 00       	call   f010e2c2 <isBufferingEnabled>
f010d128:	84 c0                	test   %al,%al
f010d12a:	74 19                	je     f010d145 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d12c:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d131:	83 ec 04             	sub    $0x4,%esp
f010d134:	ff 75 0c             	pushl  0xc(%ebp)
f010d137:	ff 75 08             	pushl  0x8(%ebp)
f010d13a:	50                   	push   %eax
f010d13b:	e8 a6 c1 ff ff       	call   f01092e6 <__free_user_mem_with_buffering>
f010d140:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d143:	eb 18                	jmp    f010d15d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d145:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d14a:	83 ec 04             	sub    $0x4,%esp
f010d14d:	ff 75 0c             	pushl  0xc(%ebp)
f010d150:	ff 75 08             	pushl  0x8(%ebp)
f010d153:	50                   	push   %eax
f010d154:	e8 00 c0 ff ff       	call   f0109159 <free_user_mem>
f010d159:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d15c:	90                   	nop
}
f010d15d:	c9                   	leave  
f010d15e:	c3                   	ret    

f010d15f <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d15f:	55                   	push   %ebp
f010d160:	89 e5                	mov    %esp,%ebp
f010d162:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d165:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d16a:	83 ec 04             	sub    $0x4,%esp
f010d16d:	ff 75 0c             	pushl  0xc(%ebp)
f010d170:	ff 75 08             	pushl  0x8(%ebp)
f010d173:	50                   	push   %eax
f010d174:	e8 c3 bf ff ff       	call   f010913c <allocate_user_mem>
f010d179:	83 c4 10             	add    $0x10,%esp
	return;
f010d17c:	90                   	nop
}
f010d17d:	c9                   	leave  
f010d17e:	c3                   	ret    

f010d17f <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d17f:	55                   	push   %ebp
f010d180:	89 e5                	mov    %esp,%ebp
f010d182:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d185:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d18a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d18d:	ff 75 10             	pushl  0x10(%ebp)
f010d190:	ff 75 0c             	pushl  0xc(%ebp)
f010d193:	ff 75 08             	pushl  0x8(%ebp)
f010d196:	50                   	push   %eax
f010d197:	e8 fc bb ff ff       	call   f0108d98 <allocate_chunk>
f010d19c:	83 c4 10             	add    $0x10,%esp
	return;
f010d19f:	90                   	nop
}
f010d1a0:	c9                   	leave  
f010d1a1:	c3                   	ret    

f010d1a2 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d1a2:	55                   	push   %ebp
f010d1a3:	89 e5                	mov    %esp,%ebp
f010d1a5:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d1a8:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d1ad:	ff 75 10             	pushl  0x10(%ebp)
f010d1b0:	ff 75 0c             	pushl  0xc(%ebp)
f010d1b3:	ff 75 08             	pushl  0x8(%ebp)
f010d1b6:	50                   	push   %eax
f010d1b7:	e8 47 c1 ff ff       	call   f0109303 <move_user_mem>
f010d1bc:	83 c4 10             	add    $0x10,%esp
	return;
f010d1bf:	90                   	nop
}
f010d1c0:	c9                   	leave  
f010d1c1:	c3                   	ret    

f010d1c2 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d1c2:	55                   	push   %ebp
f010d1c3:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d1c5:	a1 30 a1 86 f0       	mov    0xf086a130,%eax
}
f010d1ca:	5d                   	pop    %ebp
f010d1cb:	c3                   	ret    

f010d1cc <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d1cc:	55                   	push   %ebp
f010d1cd:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	a3 30 a1 86 f0       	mov    %eax,0xf086a130
}
f010d1d7:	90                   	nop
f010d1d8:	5d                   	pop    %ebp
f010d1d9:	c3                   	ret    

f010d1da <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d1da:	55                   	push   %ebp
f010d1db:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d1dd:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d1e2:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f010d1e8:	8b 52 38             	mov    0x38(%edx),%edx
f010d1eb:	80 e6 fd             	and    $0xfd,%dh
f010d1ee:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d1f1:	90                   	nop
f010d1f2:	5d                   	pop    %ebp
f010d1f3:	c3                   	ret    

f010d1f4 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d1f4:	55                   	push   %ebp
f010d1f5:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d1f7:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d1fc:	8b 15 f4 97 86 f0    	mov    0xf08697f4,%edx
f010d202:	8b 52 38             	mov    0x38(%edx),%edx
f010d205:	80 ce 02             	or     $0x2,%dh
f010d208:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d20b:	90                   	nop
f010d20c:	5d                   	pop    %ebp
f010d20d:	c3                   	ret    

f010d20e <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d20e:	55                   	push   %ebp
f010d20f:	89 e5                	mov    %esp,%ebp
f010d211:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d214:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d219:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d21c:	83 ec 04             	sub    $0x4,%esp
f010d21f:	ff 75 0c             	pushl  0xc(%ebp)
f010d222:	ff 75 08             	pushl  0x8(%ebp)
f010d225:	50                   	push   %eax
f010d226:	e8 11 19 00 00       	call   f010eb3c <createSemaphore>
f010d22b:	83 c4 10             	add    $0x10,%esp
}
f010d22e:	c9                   	leave  
f010d22f:	c3                   	ret    

f010d230 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d230:	55                   	push   %ebp
f010d231:	89 e5                	mov    %esp,%ebp
f010d233:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d236:	83 ec 08             	sub    $0x8,%esp
f010d239:	ff 75 0c             	pushl  0xc(%ebp)
f010d23c:	ff 75 08             	pushl  0x8(%ebp)
f010d23f:	e8 c1 19 00 00       	call   f010ec05 <waitSemaphore>
f010d244:	83 c4 10             	add    $0x10,%esp
}
f010d247:	90                   	nop
f010d248:	c9                   	leave  
f010d249:	c3                   	ret    

f010d24a <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d24a:	55                   	push   %ebp
f010d24b:	89 e5                	mov    %esp,%ebp
f010d24d:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d250:	83 ec 08             	sub    $0x8,%esp
f010d253:	ff 75 0c             	pushl  0xc(%ebp)
f010d256:	ff 75 08             	pushl  0x8(%ebp)
f010d259:	e8 63 1a 00 00       	call   f010ecc1 <signalSemaphore>
f010d25e:	83 c4 10             	add    $0x10,%esp
}
f010d261:	90                   	nop
f010d262:	c9                   	leave  
f010d263:	c3                   	ret    

f010d264 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d264:	55                   	push   %ebp
f010d265:	89 e5                	mov    %esp,%ebp
f010d267:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d26a:	83 ec 08             	sub    $0x8,%esp
f010d26d:	ff 75 0c             	pushl  0xc(%ebp)
f010d270:	ff 75 08             	pushl  0x8(%ebp)
f010d273:	e8 3c 17 00 00       	call   f010e9b4 <get_semaphore_object_ID>
f010d278:	83 c4 10             	add    $0x10,%esp
f010d27b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d27e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d282:	78 0c                	js     f010d290 <sys_getSemaphoreValue+0x2c>
f010d284:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d287:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010d28c:	39 c2                	cmp    %eax,%edx
f010d28e:	72 19                	jb     f010d2a9 <sys_getSemaphoreValue+0x45>
f010d290:	68 f4 7b 13 f0       	push   $0xf0137bf4
f010d295:	68 19 7c 13 f0       	push   $0xf0137c19
f010d29a:	68 4a 01 00 00       	push   $0x14a
f010d29f:	68 bf 7b 13 f0       	push   $0xf0137bbf
f010d2a4:	e8 5c 2f ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d2a9:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010d2af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d2b2:	89 d0                	mov    %edx,%eax
f010d2b4:	c1 e0 02             	shl    $0x2,%eax
f010d2b7:	01 d0                	add    %edx,%eax
f010d2b9:	01 c0                	add    %eax,%eax
f010d2bb:	01 d0                	add    %edx,%eax
f010d2bd:	01 c0                	add    %eax,%eax
f010d2bf:	01 d0                	add    %edx,%eax
f010d2c1:	c1 e0 02             	shl    $0x2,%eax
f010d2c4:	01 c8                	add    %ecx,%eax
f010d2c6:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d2c9:	c9                   	leave  
f010d2ca:	c3                   	ret    

f010d2cb <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d2cb:	55                   	push   %ebp
f010d2cc:	89 e5                	mov    %esp,%ebp
f010d2ce:	83 ec 18             	sub    $0x18,%esp
f010d2d1:	8b 45 10             	mov    0x10(%ebp),%eax
f010d2d4:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d2d7:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d2db:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d2e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d2e3:	83 ec 0c             	sub    $0xc,%esp
f010d2e6:	ff 75 14             	pushl  0x14(%ebp)
f010d2e9:	52                   	push   %edx
f010d2ea:	ff 75 0c             	pushl  0xc(%ebp)
f010d2ed:	ff 75 08             	pushl  0x8(%ebp)
f010d2f0:	50                   	push   %eax
f010d2f1:	e8 05 a2 ff ff       	call   f01074fb <createSharedObject>
f010d2f6:	83 c4 20             	add    $0x20,%esp
}
f010d2f9:	c9                   	leave  
f010d2fa:	c3                   	ret    

f010d2fb <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d2fb:	55                   	push   %ebp
f010d2fc:	89 e5                	mov    %esp,%ebp
f010d2fe:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d301:	83 ec 08             	sub    $0x8,%esp
f010d304:	ff 75 0c             	pushl  0xc(%ebp)
f010d307:	ff 75 08             	pushl  0x8(%ebp)
f010d30a:	e8 a6 a1 ff ff       	call   f01074b5 <getSizeOfSharedObject>
f010d30f:	83 c4 10             	add    $0x10,%esp
}
f010d312:	c9                   	leave  
f010d313:	c3                   	ret    

f010d314 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d314:	55                   	push   %ebp
f010d315:	89 e5                	mov    %esp,%ebp
f010d317:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d31a:	83 ec 04             	sub    $0x4,%esp
f010d31d:	ff 75 10             	pushl  0x10(%ebp)
f010d320:	ff 75 0c             	pushl  0xc(%ebp)
f010d323:	ff 75 08             	pushl  0x8(%ebp)
f010d326:	e8 1b a3 ff ff       	call   f0107646 <getSharedObject>
f010d32b:	83 c4 10             	add    $0x10,%esp
}
f010d32e:	c9                   	leave  
f010d32f:	c3                   	ret    

f010d330 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d330:	55                   	push   %ebp
f010d331:	89 e5                	mov    %esp,%ebp
f010d333:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d336:	83 ec 08             	sub    $0x8,%esp
f010d339:	ff 75 0c             	pushl  0xc(%ebp)
f010d33c:	ff 75 08             	pushl  0x8(%ebp)
f010d33f:	e8 33 a4 ff ff       	call   f0107777 <freeSharedObject>
f010d344:	83 c4 10             	add    $0x10,%esp
}
f010d347:	c9                   	leave  
f010d348:	c3                   	ret    

f010d349 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d349:	55                   	push   %ebp
f010d34a:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d34c:	a1 28 a1 86 f0       	mov    0xf086a128,%eax
}
f010d351:	5d                   	pop    %ebp
f010d352:	c3                   	ret    

f010d353 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d353:	55                   	push   %ebp
f010d354:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d356:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d35b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d35e:	5d                   	pop    %ebp
f010d35f:	c3                   	ret    

f010d360 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d360:	55                   	push   %ebp
f010d361:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d363:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d368:	89 c2                	mov    %eax,%edx
f010d36a:	a1 f0 97 86 f0       	mov    0xf08697f0,%eax
f010d36f:	29 c2                	sub    %eax,%edx
f010d371:	89 d0                	mov    %edx,%eax
f010d373:	c1 f8 04             	sar    $0x4,%eax
f010d376:	89 c2                	mov    %eax,%edx
f010d378:	89 d0                	mov    %edx,%eax
f010d37a:	c1 e0 03             	shl    $0x3,%eax
f010d37d:	01 d0                	add    %edx,%eax
f010d37f:	01 c0                	add    %eax,%eax
f010d381:	01 d0                	add    %edx,%eax
f010d383:	c1 e0 03             	shl    $0x3,%eax
f010d386:	01 d0                	add    %edx,%eax
f010d388:	89 c1                	mov    %eax,%ecx
f010d38a:	c1 e1 08             	shl    $0x8,%ecx
f010d38d:	01 c8                	add    %ecx,%eax
f010d38f:	01 c0                	add    %eax,%eax
f010d391:	01 d0                	add    %edx,%eax
f010d393:	01 c0                	add    %eax,%eax
f010d395:	01 d0                	add    %edx,%eax
f010d397:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d39e:	01 d0                	add    %edx,%eax
f010d3a0:	89 c2                	mov    %eax,%edx
f010d3a2:	c1 e2 09             	shl    $0x9,%edx
f010d3a5:	29 c2                	sub    %eax,%edx
f010d3a7:	89 d0                	mov    %edx,%eax
f010d3a9:	f7 d8                	neg    %eax
}
f010d3ab:	5d                   	pop    %ebp
f010d3ac:	c3                   	ret    

f010d3ad <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d3ad:	55                   	push   %ebp
f010d3ae:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d3b0:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d3b5:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d3b8:	5d                   	pop    %ebp
f010d3b9:	c3                   	ret    

f010d3ba <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d3ba:	55                   	push   %ebp
f010d3bb:	89 e5                	mov    %esp,%ebp
f010d3bd:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d3c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d3c4:	75 0a                	jne    f010d3d0 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d3c6:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d3cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d3ce:	eb 22                	jmp    f010d3f2 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d3d0:	83 ec 04             	sub    $0x4,%esp
f010d3d3:	6a 00                	push   $0x0
f010d3d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d3d8:	50                   	push   %eax
f010d3d9:	ff 75 08             	pushl  0x8(%ebp)
f010d3dc:	e8 e6 cb ff ff       	call   f0109fc7 <envid2env>
f010d3e1:	83 c4 10             	add    $0x10,%esp
f010d3e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d3e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3eb:	79 05                	jns    f010d3f2 <sys_destroy_env+0x38>
	{
		return r;
f010d3ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f0:	eb 5e                	jmp    f010d450 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d3f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d3f5:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d3fa:	39 c2                	cmp    %eax,%edx
f010d3fc:	75 1b                	jne    f010d419 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d3fe:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d403:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d406:	83 ec 08             	sub    $0x8,%esp
f010d409:	50                   	push   %eax
f010d40a:	68 2e 7c 13 f0       	push   $0xf0137c2e
f010d40f:	e8 fa 38 ff ff       	call   f0100d0e <cprintf>
f010d414:	83 c4 10             	add    $0x10,%esp
f010d417:	eb 20                	jmp    f010d439 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d419:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d41c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d41f:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d424:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d427:	83 ec 04             	sub    $0x4,%esp
f010d42a:	52                   	push   %edx
f010d42b:	50                   	push   %eax
f010d42c:	68 49 7c 13 f0       	push   $0xf0137c49
f010d431:	e8 d8 38 ff ff       	call   f0100d0e <cprintf>
f010d436:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d439:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d43c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d43f:	83 ec 0c             	sub    $0xc,%esp
f010d442:	50                   	push   %eax
f010d443:	e8 56 81 ff ff       	call   f010559e <sched_kill_env>
f010d448:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d44b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d450:	c9                   	leave  
f010d451:	c3                   	ret    

f010d452 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d452:	55                   	push   %ebp
f010d453:	89 e5                	mov    %esp,%ebp
f010d455:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d458:	e8 4b cb ff ff       	call   f0109fa8 <env_exit>
	//env_run_cmd_prmpt();
}
f010d45d:	90                   	nop
f010d45e:	c9                   	leave  
f010d45f:	c3                   	ret    

f010d460 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d460:	55                   	push   %ebp
f010d461:	89 e5                	mov    %esp,%ebp
f010d463:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d466:	ff 75 14             	pushl  0x14(%ebp)
f010d469:	ff 75 10             	pushl  0x10(%ebp)
f010d46c:	ff 75 0c             	pushl  0xc(%ebp)
f010d46f:	ff 75 08             	pushl  0x8(%ebp)
f010d472:	e8 a9 be ff ff       	call   f0109320 <env_create>
f010d477:	83 c4 10             	add    $0x10,%esp
f010d47a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d47d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d481:	75 07                	jne    f010d48a <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d483:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d488:	eb 14                	jmp    f010d49e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d48a:	83 ec 0c             	sub    $0xc,%esp
f010d48d:	ff 75 f4             	pushl  -0xc(%ebp)
f010d490:	e8 ce 7c ff ff       	call   f0105163 <sched_new_env>
f010d495:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d49b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d49e:	c9                   	leave  
f010d49f:	c3                   	ret    

f010d4a0 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d4a0:	55                   	push   %ebp
f010d4a1:	89 e5                	mov    %esp,%ebp
f010d4a3:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d4a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a9:	83 ec 0c             	sub    $0xc,%esp
f010d4ac:	50                   	push   %eax
f010d4ad:	e8 ce 7c ff ff       	call   f0105180 <sched_run_env>
f010d4b2:	83 c4 10             	add    $0x10,%esp
}
f010d4b5:	90                   	nop
f010d4b6:	c9                   	leave  
f010d4b7:	c3                   	ret    

f010d4b8 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d4b8:	55                   	push   %ebp
f010d4b9:	89 e5                	mov    %esp,%ebp
f010d4bb:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d4be:	0f 31                	rdtsc  
f010d4c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d4c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d4c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d4cf:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d4d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d4d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d4d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d4db:	89 01                	mov    %eax,(%ecx)
f010d4dd:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d4e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e3:	c9                   	leave  
f010d4e4:	c2 04 00             	ret    $0x4

f010d4e7 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d4e7:	55                   	push   %ebp
f010d4e8:	89 e5                	mov    %esp,%ebp
f010d4ea:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d4ed:	0f 20 d0             	mov    %cr2,%eax
f010d4f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d4f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d4f6:	90                   	nop
}
f010d4f7:	c9                   	leave  
f010d4f8:	c3                   	ret    

f010d4f9 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d4f9:	55                   	push   %ebp
f010d4fa:	89 e5                	mov    %esp,%ebp
f010d4fc:	83 ec 04             	sub    $0x4,%esp
f010d4ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010d502:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d505:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d508:	a2 a8 a0 86 f0       	mov    %al,0xf086a0a8
}
f010d50d:	90                   	nop
f010d50e:	c9                   	leave  
f010d50f:	c3                   	ret    

f010d510 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d510:	55                   	push   %ebp
f010d511:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d513:	c7 05 b0 a2 86 f0 00 	movl   $0x0,0xf086a2b0
f010d51a:	00 00 00 
}
f010d51d:	90                   	nop
f010d51e:	5d                   	pop    %ebp
f010d51f:	c3                   	ret    

f010d520 <inctst>:
void inctst()
{
f010d520:	55                   	push   %ebp
f010d521:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d523:	a1 b0 a2 86 f0       	mov    0xf086a2b0,%eax
f010d528:	40                   	inc    %eax
f010d529:	a3 b0 a2 86 f0       	mov    %eax,0xf086a2b0
}
f010d52e:	90                   	nop
f010d52f:	5d                   	pop    %ebp
f010d530:	c3                   	ret    

f010d531 <gettst>:
uint32 gettst()
{
f010d531:	55                   	push   %ebp
f010d532:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d534:	a1 b0 a2 86 f0       	mov    0xf086a2b0,%eax
}
f010d539:	5d                   	pop    %ebp
f010d53a:	c3                   	ret    

f010d53b <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d53b:	55                   	push   %ebp
f010d53c:	89 e5                	mov    %esp,%ebp
f010d53e:	83 ec 28             	sub    $0x28,%esp
f010d541:	8b 45 14             	mov    0x14(%ebp),%eax
f010d544:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d547:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d54e:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d552:	83 f8 65             	cmp    $0x65,%eax
f010d555:	74 5d                	je     f010d5b4 <tst+0x79>
f010d557:	83 f8 65             	cmp    $0x65,%eax
f010d55a:	7f 0a                	jg     f010d566 <tst+0x2b>
f010d55c:	83 f8 62             	cmp    $0x62,%eax
f010d55f:	74 73                	je     f010d5d4 <tst+0x99>
f010d561:	e9 91 00 00 00       	jmp    f010d5f7 <tst+0xbc>
f010d566:	83 f8 67             	cmp    $0x67,%eax
f010d569:	74 29                	je     f010d594 <tst+0x59>
f010d56b:	83 f8 6c             	cmp    $0x6c,%eax
f010d56e:	0f 85 83 00 00 00    	jne    f010d5f7 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d574:	8b 45 08             	mov    0x8(%ebp),%eax
f010d577:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d57a:	73 09                	jae    f010d585 <tst+0x4a>
			chk = 1;
f010d57c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d583:	eb 68                	jmp    f010d5ed <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d585:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d589:	74 62                	je     f010d5ed <tst+0xb2>
			chk = 1;
f010d58b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d592:	eb 59                	jmp    f010d5ed <tst+0xb2>
	case 'g':
		if (n > v1)
f010d594:	8b 45 08             	mov    0x8(%ebp),%eax
f010d597:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d59a:	76 09                	jbe    f010d5a5 <tst+0x6a>
			chk = 1;
f010d59c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d5a3:	eb 4b                	jmp    f010d5f0 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d5a5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d5a9:	74 45                	je     f010d5f0 <tst+0xb5>
			chk = 1;
f010d5ab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5b2:	eb 3c                	jmp    f010d5f0 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d5b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5ba:	75 09                	jne    f010d5c5 <tst+0x8a>
			chk = 1;
f010d5bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d5c3:	eb 2e                	jmp    f010d5f3 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d5c5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d5c9:	74 28                	je     f010d5f3 <tst+0xb8>
			chk = 1;
f010d5cb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5d2:	eb 1f                	jmp    f010d5f3 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d5d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5da:	72 1a                	jb     f010d5f6 <tst+0xbb>
f010d5dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5df:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5e2:	77 12                	ja     f010d5f6 <tst+0xbb>
			chk = 1;
f010d5e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5eb:	eb 09                	jmp    f010d5f6 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5ed:	90                   	nop
f010d5ee:	eb 07                	jmp    f010d5f7 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5f0:	90                   	nop
f010d5f1:	eb 04                	jmp    f010d5f7 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5f3:	90                   	nop
f010d5f4:	eb 01                	jmp    f010d5f7 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d5f6:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d5f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5fb:	75 17                	jne    f010d614 <tst+0xd9>
f010d5fd:	83 ec 04             	sub    $0x4,%esp
f010d600:	68 61 7c 13 f0       	push   $0xf0137c61
f010d605:	68 00 02 00 00       	push   $0x200
f010d60a:	68 bf 7b 13 f0       	push   $0xf0137bbf
f010d60f:	e8 f1 2b ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d614:	a1 b0 a2 86 f0       	mov    0xf086a2b0,%eax
f010d619:	40                   	inc    %eax
f010d61a:	a3 b0 a2 86 f0       	mov    %eax,0xf086a2b0
	return;
f010d61f:	90                   	nop
}
f010d620:	c9                   	leave  
f010d621:	c3                   	ret    

f010d622 <chktst>:

void chktst(uint32 n)
{
f010d622:	55                   	push   %ebp
f010d623:	89 e5                	mov    %esp,%ebp
f010d625:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d628:	a1 b0 a2 86 f0       	mov    0xf086a2b0,%eax
f010d62d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d630:	75 12                	jne    f010d644 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d632:	83 ec 0c             	sub    $0xc,%esp
f010d635:	68 74 7c 13 f0       	push   $0xf0137c74
f010d63a:	e8 cf 36 ff ff       	call   f0100d0e <cprintf>
f010d63f:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d642:	eb 17                	jmp    f010d65b <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d644:	83 ec 04             	sub    $0x4,%esp
f010d647:	68 a0 7c 13 f0       	push   $0xf0137ca0
f010d64c:	68 0a 02 00 00       	push   $0x20a
f010d651:	68 bf 7b 13 f0       	push   $0xf0137bbf
f010d656:	e8 aa 2b ff ff       	call   f0100205 <_panic>
}
f010d65b:	c9                   	leave  
f010d65c:	c3                   	ret    

f010d65d <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d65d:	55                   	push   %ebp
f010d65e:	89 e5                	mov    %esp,%ebp
f010d660:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d663:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d668:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d66b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d672:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d67d:	0f 84 a5 00 00 00    	je     f010d728 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d683:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d68a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d68d:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d693:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d696:	eb 4a                	jmp    f010d6e2 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d698:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d69b:	8b 00                	mov    (%eax),%eax
f010d69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d6a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d6a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6a8:	89 c2                	mov    %eax,%edx
f010d6aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6ad:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d6b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6b7:	01 c8                	add    %ecx,%eax
f010d6b9:	8b 00                	mov    (%eax),%eax
f010d6bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d6be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d6c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6c6:	39 c2                	cmp    %eax,%edx
f010d6c8:	74 09                	je     f010d6d3 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d6ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d6d1:	eb 3e                	jmp    f010d711 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d6d3:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d6d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d6d9:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d6e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6e6:	74 08                	je     f010d6f0 <sys_check_LRU_lists+0x93>
f010d6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6eb:	8b 40 10             	mov    0x10(%eax),%eax
f010d6ee:	eb 05                	jmp    f010d6f5 <sys_check_LRU_lists+0x98>
f010d6f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d6f8:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d6fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d701:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d707:	85 c0                	test   %eax,%eax
f010d709:	75 8d                	jne    f010d698 <sys_check_LRU_lists+0x3b>
f010d70b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d70f:	75 87                	jne    f010d698 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d711:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d714:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d71a:	8b 45 10             	mov    0x10(%ebp),%eax
f010d71d:	39 c2                	cmp    %eax,%edx
f010d71f:	74 07                	je     f010d728 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d721:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d728:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d72c:	0f 84 a5 00 00 00    	je     f010d7d7 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d732:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d73c:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d742:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d745:	eb 4a                	jmp    f010d791 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d74a:	8b 00                	mov    (%eax),%eax
f010d74c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d74f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d752:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d757:	89 c2                	mov    %eax,%edx
f010d759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d75c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d763:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d766:	01 c8                	add    %ecx,%eax
f010d768:	8b 00                	mov    (%eax),%eax
f010d76a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d76d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d770:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d775:	39 c2                	cmp    %eax,%edx
f010d777:	74 09                	je     f010d782 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d779:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d780:	eb 3e                	jmp    f010d7c0 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d782:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d785:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d788:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d78e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d791:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d795:	74 08                	je     f010d79f <sys_check_LRU_lists+0x142>
f010d797:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d79a:	8b 40 10             	mov    0x10(%eax),%eax
f010d79d:	eb 05                	jmp    f010d7a4 <sys_check_LRU_lists+0x147>
f010d79f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d7a7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d7ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7b0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d7b6:	85 c0                	test   %eax,%eax
f010d7b8:	75 8d                	jne    f010d747 <sys_check_LRU_lists+0xea>
f010d7ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d7be:	75 87                	jne    f010d747 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d7c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7c3:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d7c9:	8b 45 14             	mov    0x14(%ebp),%eax
f010d7cc:	39 c2                	cmp    %eax,%edx
f010d7ce:	74 07                	je     f010d7d7 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d7d0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d7d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d7da:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d7dd:	c9                   	leave  
f010d7de:	c3                   	ret    

f010d7df <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d7df:	55                   	push   %ebp
f010d7e0:	89 e5                	mov    %esp,%ebp
f010d7e2:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d7e5:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010d7ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d7ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7f7:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d7fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d800:	eb 65                	jmp    f010d867 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d809:	eb 3a                	jmp    f010d845 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d80b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d80e:	8b 00                	mov    (%eax),%eax
f010d810:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d813:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d816:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d81b:	89 c2                	mov    %eax,%edx
f010d81d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d820:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d827:	8b 45 08             	mov    0x8(%ebp),%eax
f010d82a:	01 c8                	add    %ecx,%eax
f010d82c:	8b 00                	mov    (%eax),%eax
f010d82e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d831:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d834:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d839:	39 c2                	cmp    %eax,%edx
f010d83b:	75 05                	jne    f010d842 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d83d:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d840:	eb 0b                	jmp    f010d84d <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d842:	ff 45 f4             	incl   -0xc(%ebp)
f010d845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d848:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d84b:	7c be                	jl     f010d80b <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d84d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d851:	7e 08                	jle    f010d85b <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d853:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d856:	e9 ed 00 00 00       	jmp    f010d948 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d85e:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d864:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d867:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d86b:	74 08                	je     f010d875 <sys_check_LRU_lists_free+0x96>
f010d86d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d870:	8b 40 10             	mov    0x10(%eax),%eax
f010d873:	eb 05                	jmp    f010d87a <sys_check_LRU_lists_free+0x9b>
f010d875:	b8 00 00 00 00       	mov    $0x0,%eax
f010d87a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d87d:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d886:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d88c:	85 c0                	test   %eax,%eax
f010d88e:	0f 85 6e ff ff ff    	jne    f010d802 <sys_check_LRU_lists_free+0x23>
f010d894:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d898:	0f 85 64 ff ff ff    	jne    f010d802 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d89e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8a1:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d8a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8aa:	eb 62                	jmp    f010d90e <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d8ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d8b3:	eb 3a                	jmp    f010d8ef <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d8b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8b8:	8b 00                	mov    (%eax),%eax
f010d8ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d8bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8c5:	89 c2                	mov    %eax,%edx
f010d8c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8ca:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d8d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8d4:	01 c8                	add    %ecx,%eax
f010d8d6:	8b 00                	mov    (%eax),%eax
f010d8d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d8db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d8de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8e3:	39 c2                	cmp    %eax,%edx
f010d8e5:	75 05                	jne    f010d8ec <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d8e7:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d8ea:	eb 0b                	jmp    f010d8f7 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d8ec:	ff 45 f0             	incl   -0x10(%ebp)
f010d8ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d8f5:	7c be                	jl     f010d8b5 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d8f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d8fb:	7e 05                	jle    f010d902 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d8fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d900:	eb 46                	jmp    f010d948 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d902:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d905:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d90b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d90e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d912:	74 08                	je     f010d91c <sys_check_LRU_lists_free+0x13d>
f010d914:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d917:	8b 40 10             	mov    0x10(%eax),%eax
f010d91a:	eb 05                	jmp    f010d921 <sys_check_LRU_lists_free+0x142>
f010d91c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d921:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d924:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d92a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d933:	85 c0                	test   %eax,%eax
f010d935:	0f 85 71 ff ff ff    	jne    f010d8ac <sys_check_LRU_lists_free+0xcd>
f010d93b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d93f:	0f 85 67 ff ff ff    	jne    f010d8ac <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d945:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d948:	c9                   	leave  
f010d949:	c3                   	ret    

f010d94a <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d94a:	55                   	push   %ebp
f010d94b:	89 e5                	mov    %esp,%ebp
f010d94d:	56                   	push   %esi
f010d94e:	53                   	push   %ebx
f010d94f:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d952:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d956:	0f 87 0e 04 00 00    	ja     f010dd6a <syscall+0x420>
f010d95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d95f:	c1 e0 02             	shl    $0x2,%eax
f010d962:	05 bc 7c 13 f0       	add    $0xf0137cbc,%eax
f010d967:	8b 00                	mov    (%eax),%eax
f010d969:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d96b:	8b 45 14             	mov    0x14(%ebp),%eax
f010d96e:	0f b6 d0             	movzbl %al,%edx
f010d971:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d974:	83 ec 04             	sub    $0x4,%esp
f010d977:	52                   	push   %edx
f010d978:	ff 75 10             	pushl  0x10(%ebp)
f010d97b:	50                   	push   %eax
f010d97c:	e8 db f4 ff ff       	call   f010ce5c <sys_cputs>
f010d981:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d984:	b8 00 00 00 00       	mov    $0x0,%eax
f010d989:	e9 e1 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d98e:	e8 3e f5 ff ff       	call   f010ced1 <sys_cgetc>
f010d993:	e9 d7 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d998:	83 ec 08             	sub    $0x8,%esp
f010d99b:	ff 75 10             	pushl  0x10(%ebp)
f010d99e:	ff 75 0c             	pushl  0xc(%ebp)
f010d9a1:	e8 91 f6 ff ff       	call   f010d037 <sys_calculate_required_frames>
f010d9a6:	83 c4 10             	add    $0x10,%esp
f010d9a9:	e9 c1 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d9ae:	e8 a6 f6 ff ff       	call   f010d059 <sys_calculate_free_frames>
f010d9b3:	e9 b7 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d9b8:	e8 bb f6 ff ff       	call   f010d078 <sys_calculate_modified_frames>
f010d9bd:	e9 ad 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d9c2:	e8 cb f6 ff ff       	call   f010d092 <sys_calculate_notmod_frames>
f010d9c7:	e9 a3 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d9cc:	e8 33 f7 ff ff       	call   f010d104 <sys_pf_calculate_allocated_pages>
f010d9d1:	e9 99 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d9d6:	83 ec 0c             	sub    $0xc,%esp
f010d9d9:	ff 75 0c             	pushl  0xc(%ebp)
f010d9dc:	e8 cb f6 ff ff       	call   f010d0ac <sys_calculate_pages_tobe_removed_ready_exit>
f010d9e1:	83 c4 10             	add    $0x10,%esp
f010d9e4:	e9 86 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d9e9:	e8 d4 f6 ff ff       	call   f010d0c2 <sys_scarce_memory>
		return 0;
f010d9ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9f3:	e9 77 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d9f8:	83 ec 08             	sub    $0x8,%esp
f010d9fb:	ff 75 10             	pushl  0x10(%ebp)
f010d9fe:	ff 75 0c             	pushl  0xc(%ebp)
f010da01:	e8 17 f7 ff ff       	call   f010d11d <sys_free_user_mem>
f010da06:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da09:	b8 00 00 00 00       	mov    $0x0,%eax
f010da0e:	e9 5c 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010da13:	8b 55 10             	mov    0x10(%ebp),%edx
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	83 ec 08             	sub    $0x8,%esp
f010da1c:	52                   	push   %edx
f010da1d:	50                   	push   %eax
f010da1e:	e8 c1 f4 ff ff       	call   f010cee4 <__sys_allocate_page>
f010da23:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da26:	b8 00 00 00 00       	mov    $0x0,%eax
f010da2b:	e9 3f 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010da30:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010da33:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010da36:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010da39:	8b 55 10             	mov    0x10(%ebp),%edx
f010da3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da3f:	83 ec 0c             	sub    $0xc,%esp
f010da42:	56                   	push   %esi
f010da43:	53                   	push   %ebx
f010da44:	51                   	push   %ecx
f010da45:	52                   	push   %edx
f010da46:	50                   	push   %eax
f010da47:	e8 b1 f5 ff ff       	call   f010cffd <__sys_map_frame>
f010da4c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010da4f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da54:	e9 16 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010da59:	8b 55 10             	mov    0x10(%ebp),%edx
f010da5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da5f:	83 ec 08             	sub    $0x8,%esp
f010da62:	52                   	push   %edx
f010da63:	50                   	push   %eax
f010da64:	e8 b1 f5 ff ff       	call   f010d01a <__sys_unmap_frame>
f010da69:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da6c:	b8 00 00 00 00       	mov    $0x0,%eax
f010da71:	e9 f9 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010da76:	83 ec 04             	sub    $0x4,%esp
f010da79:	ff 75 14             	pushl  0x14(%ebp)
f010da7c:	ff 75 10             	pushl  0x10(%ebp)
f010da7f:	ff 75 0c             	pushl  0xc(%ebp)
f010da82:	e8 f8 f6 ff ff       	call   f010d17f <sys_allocate_chunk>
f010da87:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010da8f:	e9 db 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010da94:	e8 41 f7 ff ff       	call   f010d1da <sys_disable_interrupt>
		return 0;
f010da99:	b8 00 00 00 00       	mov    $0x0,%eax
f010da9e:	e9 cc 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010daa3:	e8 4c f7 ff ff       	call   f010d1f4 <sys_enable_interrupt>
		return 0;
f010daa8:	b8 00 00 00 00       	mov    $0x0,%eax
f010daad:	e9 bd 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dab2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab5:	0f be c0             	movsbl %al,%eax
f010dab8:	83 ec 0c             	sub    $0xc,%esp
f010dabb:	50                   	push   %eax
f010dabc:	e8 ec f3 ff ff       	call   f010cead <sys_cputc>
f010dac1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dac4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dac9:	e9 a1 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dace:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dad1:	0f be c0             	movsbl %al,%eax
f010dad4:	83 ec 0c             	sub    $0xc,%esp
f010dad7:	50                   	push   %eax
f010dad8:	e8 f3 f5 ff ff       	call   f010d0d0 <sys_clearFFL>
f010dadd:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dae0:	b8 00 00 00 00       	mov    $0x0,%eax
f010dae5:	e9 85 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010daea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daed:	83 ec 08             	sub    $0x8,%esp
f010daf0:	ff 75 10             	pushl  0x10(%ebp)
f010daf3:	50                   	push   %eax
f010daf4:	e8 15 f7 ff ff       	call   f010d20e <sys_createSemaphore>
f010daf9:	83 c4 10             	add    $0x10,%esp
f010dafc:	e9 6e 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010db01:	8b 55 10             	mov    0x10(%ebp),%edx
f010db04:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db07:	83 ec 08             	sub    $0x8,%esp
f010db0a:	52                   	push   %edx
f010db0b:	50                   	push   %eax
f010db0c:	e8 1f f7 ff ff       	call   f010d230 <sys_waitSemaphore>
f010db11:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db14:	b8 00 00 00 00       	mov    $0x0,%eax
f010db19:	e9 51 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010db1e:	8b 55 10             	mov    0x10(%ebp),%edx
f010db21:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db24:	83 ec 08             	sub    $0x8,%esp
f010db27:	52                   	push   %edx
f010db28:	50                   	push   %eax
f010db29:	e8 1c f7 ff ff       	call   f010d24a <sys_signalSemaphore>
f010db2e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db31:	b8 00 00 00 00       	mov    $0x0,%eax
f010db36:	e9 34 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010db3b:	8b 55 10             	mov    0x10(%ebp),%edx
f010db3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db41:	83 ec 08             	sub    $0x8,%esp
f010db44:	52                   	push   %edx
f010db45:	50                   	push   %eax
f010db46:	e8 19 f7 ff ff       	call   f010d264 <sys_getSemaphoreValue>
f010db4b:	83 c4 10             	add    $0x10,%esp
f010db4e:	e9 1c 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010db53:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010db56:	8b 45 14             	mov    0x14(%ebp),%eax
f010db59:	0f b6 d0             	movzbl %al,%edx
f010db5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db5f:	51                   	push   %ecx
f010db60:	52                   	push   %edx
f010db61:	ff 75 10             	pushl  0x10(%ebp)
f010db64:	50                   	push   %eax
f010db65:	e8 61 f7 ff ff       	call   f010d2cb <sys_createSharedObject>
f010db6a:	83 c4 10             	add    $0x10,%esp
f010db6d:	e9 fd 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010db72:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db75:	8b 55 10             	mov    0x10(%ebp),%edx
f010db78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db7b:	83 ec 04             	sub    $0x4,%esp
f010db7e:	51                   	push   %ecx
f010db7f:	52                   	push   %edx
f010db80:	50                   	push   %eax
f010db81:	e8 8e f7 ff ff       	call   f010d314 <sys_getSharedObject>
f010db86:	83 c4 10             	add    $0x10,%esp
f010db89:	e9 e1 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010db8e:	8b 55 10             	mov    0x10(%ebp),%edx
f010db91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db94:	83 ec 08             	sub    $0x8,%esp
f010db97:	52                   	push   %edx
f010db98:	50                   	push   %eax
f010db99:	e8 92 f7 ff ff       	call   f010d330 <sys_freeSharedObject>
f010db9e:	83 c4 10             	add    $0x10,%esp
f010dba1:	e9 c9 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dba6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dba9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbac:	83 ec 08             	sub    $0x8,%esp
f010dbaf:	52                   	push   %edx
f010dbb0:	50                   	push   %eax
f010dbb1:	e8 45 f7 ff ff       	call   f010d2fb <sys_getSizeOfSharedObject>
f010dbb6:	83 c4 10             	add    $0x10,%esp
f010dbb9:	e9 b1 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dbbe:	e8 86 f7 ff ff       	call   f010d349 <sys_getMaxShares>
f010dbc3:	e9 a7 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dbc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbcb:	ff 75 18             	pushl  0x18(%ebp)
f010dbce:	ff 75 14             	pushl  0x14(%ebp)
f010dbd1:	ff 75 10             	pushl  0x10(%ebp)
f010dbd4:	50                   	push   %eax
f010dbd5:	e8 86 f8 ff ff       	call   f010d460 <sys_create_env>
f010dbda:	83 c4 10             	add    $0x10,%esp
f010dbdd:	e9 8d 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dbe2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbe5:	83 ec 0c             	sub    $0xc,%esp
f010dbe8:	50                   	push   %eax
f010dbe9:	e8 b2 f8 ff ff       	call   f010d4a0 <sys_run_env>
f010dbee:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbf1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbf6:	e9 74 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dbfb:	e8 60 f7 ff ff       	call   f010d360 <sys_getenvindex>
f010dc00:	e9 6a 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dc05:	e8 49 f7 ff ff       	call   f010d353 <sys_getenvid>
f010dc0a:	e9 60 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dc0f:	e8 99 f7 ff ff       	call   f010d3ad <sys_getparentenvid>
f010dc14:	e9 56 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dc19:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc1c:	83 ec 0c             	sub    $0xc,%esp
f010dc1f:	50                   	push   %eax
f010dc20:	e8 95 f7 ff ff       	call   f010d3ba <sys_destroy_env>
f010dc25:	83 c4 10             	add    $0x10,%esp
f010dc28:	e9 42 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dc2d:	e8 20 f8 ff ff       	call   f010d452 <sys_exit_env>
		return 0;
f010dc32:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc37:	e9 33 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dc3c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dc3f:	83 ec 0c             	sub    $0xc,%esp
f010dc42:	50                   	push   %eax
f010dc43:	e8 70 f8 ff ff       	call   f010d4b8 <sys_get_virtual_time>
f010dc48:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dc4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dc51:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dc57:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dc5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5d:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dc5f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc65:	89 10                	mov    %edx,(%eax)
		return 0;
f010dc67:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc6c:	e9 fe 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dc71:	83 ec 04             	sub    $0x4,%esp
f010dc74:	ff 75 14             	pushl  0x14(%ebp)
f010dc77:	ff 75 10             	pushl  0x10(%ebp)
f010dc7a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc7d:	e8 20 f5 ff ff       	call   f010d1a2 <sys_move_user_mem>
f010dc82:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc85:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc8a:	e9 e0 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dc8f:	e8 53 f8 ff ff       	call   f010d4e7 <sys_rcr2>
f010dc94:	e9 d6 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dc99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc9c:	0f b6 c0             	movzbl %al,%eax
f010dc9f:	83 ec 0c             	sub    $0xc,%esp
f010dca2:	50                   	push   %eax
f010dca3:	e8 51 f8 ff ff       	call   f010d4f9 <sys_bypassPageFault>
f010dca8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dcab:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcb0:	e9 ba 00 00 00       	jmp    f010dd6f <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010dcb5:	e8 56 f8 ff ff       	call   f010d510 <rsttst>
		return 0;
f010dcba:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcbf:	e9 ab 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_inctst:
		inctst();
f010dcc4:	e8 57 f8 ff ff       	call   f010d520 <inctst>
		return 0;
f010dcc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcce:	e9 9c 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010dcd3:	83 ec 0c             	sub    $0xc,%esp
f010dcd6:	ff 75 0c             	pushl  0xc(%ebp)
f010dcd9:	e8 44 f9 ff ff       	call   f010d622 <chktst>
f010dcde:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dce1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dce6:	e9 84 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010dceb:	e8 41 f8 ff ff       	call   f010d531 <gettst>
f010dcf0:	eb 7d                	jmp    f010dd6f <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010dcf2:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010dcf5:	8b 45 18             	mov    0x18(%ebp),%eax
f010dcf8:	0f be c0             	movsbl %al,%eax
f010dcfb:	83 ec 0c             	sub    $0xc,%esp
f010dcfe:	52                   	push   %edx
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 14             	pushl  0x14(%ebp)
f010dd03:	ff 75 10             	pushl  0x10(%ebp)
f010dd06:	ff 75 0c             	pushl  0xc(%ebp)
f010dd09:	e8 2d f8 ff ff       	call   f010d53b <tst>
f010dd0e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dd11:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd16:	eb 57                	jmp    f010dd6f <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010dd18:	e8 a5 f4 ff ff       	call   f010d1c2 <sys_get_heap_strategy>
f010dd1d:	eb 50                	jmp    f010dd6f <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010dd1f:	83 ec 0c             	sub    $0xc,%esp
f010dd22:	ff 75 0c             	pushl  0xc(%ebp)
f010dd25:	e8 a2 f4 ff ff       	call   f010d1cc <sys_set_uheap_strategy>
f010dd2a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd2d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd32:	eb 3b                	jmp    f010dd6f <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010dd34:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dd37:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dd3a:	8b 55 10             	mov    0x10(%ebp),%edx
f010dd3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd40:	53                   	push   %ebx
f010dd41:	51                   	push   %ecx
f010dd42:	52                   	push   %edx
f010dd43:	50                   	push   %eax
f010dd44:	e8 14 f9 ff ff       	call   f010d65d <sys_check_LRU_lists>
f010dd49:	83 c4 10             	add    $0x10,%esp
f010dd4c:	eb 21                	jmp    f010dd6f <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dd4e:	8b 55 10             	mov    0x10(%ebp),%edx
f010dd51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd54:	83 ec 08             	sub    $0x8,%esp
f010dd57:	52                   	push   %edx
f010dd58:	50                   	push   %eax
f010dd59:	e8 81 fa ff ff       	call   f010d7df <sys_check_LRU_lists_free>
f010dd5e:	83 c4 10             	add    $0x10,%esp
f010dd61:	eb 0c                	jmp    f010dd6f <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dd63:	b8 03 00 00 00       	mov    $0x3,%eax
f010dd68:	eb 05                	jmp    f010dd6f <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dd6a:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dd6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dd72:	5b                   	pop    %ebx
f010dd73:	5e                   	pop    %esi
f010dd74:	5d                   	pop    %ebp
f010dd75:	c3                   	ret    

f010dd76 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dd76:	55                   	push   %ebp
f010dd77:	89 e5                	mov    %esp,%ebp
f010dd79:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dd7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd7f:	8b 00                	mov    (%eax),%eax
f010dd81:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dd84:	8b 45 10             	mov    0x10(%ebp),%eax
f010dd87:	8b 00                	mov    (%eax),%eax
f010dd89:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dd8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dd93:	e9 ca 00 00 00       	jmp    f010de62 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dd98:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dd9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dd9e:	01 d0                	add    %edx,%eax
f010dda0:	89 c2                	mov    %eax,%edx
f010dda2:	c1 ea 1f             	shr    $0x1f,%edx
f010dda5:	01 d0                	add    %edx,%eax
f010dda7:	d1 f8                	sar    %eax
f010dda9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010ddac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddaf:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ddb2:	eb 03                	jmp    f010ddb7 <stab_binsearch+0x41>
			m--;
f010ddb4:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ddb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ddbd:	7c 1e                	jl     f010dddd <stab_binsearch+0x67>
f010ddbf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddc2:	89 d0                	mov    %edx,%eax
f010ddc4:	01 c0                	add    %eax,%eax
f010ddc6:	01 d0                	add    %edx,%eax
f010ddc8:	c1 e0 02             	shl    $0x2,%eax
f010ddcb:	89 c2                	mov    %eax,%edx
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	01 d0                	add    %edx,%eax
f010ddd2:	8a 40 04             	mov    0x4(%eax),%al
f010ddd5:	0f b6 c0             	movzbl %al,%eax
f010ddd8:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dddb:	75 d7                	jne    f010ddb4 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010dddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dde0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dde3:	7d 09                	jge    f010ddee <stab_binsearch+0x78>
			l = true_m + 1;
f010dde5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dde8:	40                   	inc    %eax
f010dde9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010ddec:	eb 74                	jmp    f010de62 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010ddee:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010ddf5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddf8:	89 d0                	mov    %edx,%eax
f010ddfa:	01 c0                	add    %eax,%eax
f010ddfc:	01 d0                	add    %edx,%eax
f010ddfe:	c1 e0 02             	shl    $0x2,%eax
f010de01:	89 c2                	mov    %eax,%edx
f010de03:	8b 45 08             	mov    0x8(%ebp),%eax
f010de06:	01 d0                	add    %edx,%eax
f010de08:	8b 40 08             	mov    0x8(%eax),%eax
f010de0b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010de0e:	73 11                	jae    f010de21 <stab_binsearch+0xab>
			*region_left = m;
f010de10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de16:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010de18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de1b:	40                   	inc    %eax
f010de1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de1f:	eb 41                	jmp    f010de62 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010de21:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de24:	89 d0                	mov    %edx,%eax
f010de26:	01 c0                	add    %eax,%eax
f010de28:	01 d0                	add    %edx,%eax
f010de2a:	c1 e0 02             	shl    $0x2,%eax
f010de2d:	89 c2                	mov    %eax,%edx
f010de2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010de32:	01 d0                	add    %edx,%eax
f010de34:	8b 40 08             	mov    0x8(%eax),%eax
f010de37:	3b 45 18             	cmp    0x18(%ebp),%eax
f010de3a:	76 14                	jbe    f010de50 <stab_binsearch+0xda>
			*region_right = m - 1;
f010de3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de3f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010de42:	8b 45 10             	mov    0x10(%ebp),%eax
f010de45:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010de47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de4a:	48                   	dec    %eax
f010de4b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010de4e:	eb 12                	jmp    f010de62 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010de50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de56:	89 10                	mov    %edx,(%eax)
			l = m;
f010de58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010de5e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010de62:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010de65:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010de68:	0f 8e 2a ff ff ff    	jle    f010dd98 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010de6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010de72:	75 0f                	jne    f010de83 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010de74:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de77:	8b 00                	mov    (%eax),%eax
f010de79:	8d 50 ff             	lea    -0x1(%eax),%edx
f010de7c:	8b 45 10             	mov    0x10(%ebp),%eax
f010de7f:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010de81:	eb 3d                	jmp    f010dec0 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010de83:	8b 45 10             	mov    0x10(%ebp),%eax
f010de86:	8b 00                	mov    (%eax),%eax
f010de88:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de8b:	eb 03                	jmp    f010de90 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010de8d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010de90:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de93:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010de95:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010de98:	7d 1e                	jge    f010deb8 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010de9a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de9d:	89 d0                	mov    %edx,%eax
f010de9f:	01 c0                	add    %eax,%eax
f010dea1:	01 d0                	add    %edx,%eax
f010dea3:	c1 e0 02             	shl    $0x2,%eax
f010dea6:	89 c2                	mov    %eax,%edx
f010dea8:	8b 45 08             	mov    0x8(%ebp),%eax
f010deab:	01 d0                	add    %edx,%eax
f010dead:	8a 40 04             	mov    0x4(%eax),%al
f010deb0:	0f b6 c0             	movzbl %al,%eax
f010deb3:	3b 45 14             	cmp    0x14(%ebp),%eax
f010deb6:	75 d5                	jne    f010de8d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010deb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010debb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010debe:	89 10                	mov    %edx,(%eax)
	}
}
f010dec0:	90                   	nop
f010dec1:	c9                   	leave  
f010dec2:	c3                   	ret    

f010dec3 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dec3:	55                   	push   %ebp
f010dec4:	89 e5                	mov    %esp,%ebp
f010dec6:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dec9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010decc:	c7 00 80 7d 13 f0    	movl   $0xf0137d80,(%eax)
	info->eip_line = 0;
f010ded2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dedc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dedf:	c7 40 08 80 7d 13 f0 	movl   $0xf0137d80,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dee9:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010def0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def3:	8b 55 08             	mov    0x8(%ebp),%edx
f010def6:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010def9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010defc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010df03:	8b 45 08             	mov    0x8(%ebp),%eax
f010df06:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010df0b:	76 1e                	jbe    f010df2b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010df0d:	c7 45 f4 fc d8 13 f0 	movl   $0xf013d8fc,-0xc(%ebp)
		stab_end = __STAB_END__;
f010df14:	c7 45 f0 b4 e0 17 f0 	movl   $0xf017e0b4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010df1b:	c7 45 ec b5 e0 17 f0 	movl   $0xf017e0b5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010df22:	c7 45 e8 57 ac 18 f0 	movl   $0xf018ac57,-0x18(%ebp)
f010df29:	eb 2a                	jmp    f010df55 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010df2b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010df32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df35:	8b 00                	mov    (%eax),%eax
f010df37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010df3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df3d:	8b 40 04             	mov    0x4(%eax),%eax
f010df40:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010df43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df46:	8b 40 08             	mov    0x8(%eax),%eax
f010df49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010df4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df4f:	8b 40 0c             	mov    0xc(%eax),%eax
f010df52:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010df55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010df5b:	76 0a                	jbe    f010df67 <debuginfo_eip+0xa4>
f010df5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df60:	48                   	dec    %eax
f010df61:	8a 00                	mov    (%eax),%al
f010df63:	84 c0                	test   %al,%al
f010df65:	74 0a                	je     f010df71 <debuginfo_eip+0xae>
		return -1;
f010df67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010df6c:	e9 01 02 00 00       	jmp    f010e172 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010df71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010df78:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df7e:	29 c2                	sub    %eax,%edx
f010df80:	89 d0                	mov    %edx,%eax
f010df82:	c1 f8 02             	sar    $0x2,%eax
f010df85:	89 c2                	mov    %eax,%edx
f010df87:	89 d0                	mov    %edx,%eax
f010df89:	c1 e0 02             	shl    $0x2,%eax
f010df8c:	01 d0                	add    %edx,%eax
f010df8e:	c1 e0 02             	shl    $0x2,%eax
f010df91:	01 d0                	add    %edx,%eax
f010df93:	c1 e0 02             	shl    $0x2,%eax
f010df96:	01 d0                	add    %edx,%eax
f010df98:	89 c1                	mov    %eax,%ecx
f010df9a:	c1 e1 08             	shl    $0x8,%ecx
f010df9d:	01 c8                	add    %ecx,%eax
f010df9f:	89 c1                	mov    %eax,%ecx
f010dfa1:	c1 e1 10             	shl    $0x10,%ecx
f010dfa4:	01 c8                	add    %ecx,%eax
f010dfa6:	01 c0                	add    %eax,%eax
f010dfa8:	01 d0                	add    %edx,%eax
f010dfaa:	48                   	dec    %eax
f010dfab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010dfae:	ff 75 08             	pushl  0x8(%ebp)
f010dfb1:	6a 64                	push   $0x64
f010dfb3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dfb6:	50                   	push   %eax
f010dfb7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dfba:	50                   	push   %eax
f010dfbb:	ff 75 f4             	pushl  -0xc(%ebp)
f010dfbe:	e8 b3 fd ff ff       	call   f010dd76 <stab_binsearch>
f010dfc3:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010dfc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dfc9:	85 c0                	test   %eax,%eax
f010dfcb:	75 0a                	jne    f010dfd7 <debuginfo_eip+0x114>
		return -1;
f010dfcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dfd2:	e9 9b 01 00 00       	jmp    f010e172 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010dfd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dfda:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010dfdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dfe0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010dfe3:	ff 75 08             	pushl  0x8(%ebp)
f010dfe6:	6a 24                	push   $0x24
f010dfe8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010dfeb:	50                   	push   %eax
f010dfec:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010dfef:	50                   	push   %eax
f010dff0:	ff 75 f4             	pushl  -0xc(%ebp)
f010dff3:	e8 7e fd ff ff       	call   f010dd76 <stab_binsearch>
f010dff8:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010dffb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010dffe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e001:	39 c2                	cmp    %eax,%edx
f010e003:	0f 8f 86 00 00 00    	jg     f010e08f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e009:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e00c:	89 c2                	mov    %eax,%edx
f010e00e:	89 d0                	mov    %edx,%eax
f010e010:	01 c0                	add    %eax,%eax
f010e012:	01 d0                	add    %edx,%eax
f010e014:	c1 e0 02             	shl    $0x2,%eax
f010e017:	89 c2                	mov    %eax,%edx
f010e019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e01c:	01 d0                	add    %edx,%eax
f010e01e:	8b 00                	mov    (%eax),%eax
f010e020:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e023:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e026:	29 d1                	sub    %edx,%ecx
f010e028:	89 ca                	mov    %ecx,%edx
f010e02a:	39 d0                	cmp    %edx,%eax
f010e02c:	73 22                	jae    f010e050 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e02e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e031:	89 c2                	mov    %eax,%edx
f010e033:	89 d0                	mov    %edx,%eax
f010e035:	01 c0                	add    %eax,%eax
f010e037:	01 d0                	add    %edx,%eax
f010e039:	c1 e0 02             	shl    $0x2,%eax
f010e03c:	89 c2                	mov    %eax,%edx
f010e03e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e041:	01 d0                	add    %edx,%eax
f010e043:	8b 10                	mov    (%eax),%edx
f010e045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e048:	01 c2                	add    %eax,%edx
f010e04a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e04d:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e050:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e053:	89 c2                	mov    %eax,%edx
f010e055:	89 d0                	mov    %edx,%eax
f010e057:	01 c0                	add    %eax,%eax
f010e059:	01 d0                	add    %edx,%eax
f010e05b:	c1 e0 02             	shl    $0x2,%eax
f010e05e:	89 c2                	mov    %eax,%edx
f010e060:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e063:	01 d0                	add    %edx,%eax
f010e065:	8b 50 08             	mov    0x8(%eax),%edx
f010e068:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e06b:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e06e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e071:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e074:	8b 40 10             	mov    0x10(%eax),%eax
f010e077:	29 c2                	sub    %eax,%edx
f010e079:	89 d0                	mov    %edx,%eax
f010e07b:	c1 f8 02             	sar    $0x2,%eax
f010e07e:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e081:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e084:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e087:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e08a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e08d:	eb 15                	jmp    f010e0a4 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e08f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e092:	8b 55 08             	mov    0x8(%ebp),%edx
f010e095:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e098:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e09b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e09e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e0a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e0a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a7:	8b 40 08             	mov    0x8(%eax),%eax
f010e0aa:	83 ec 08             	sub    $0x8,%esp
f010e0ad:	6a 3a                	push   $0x3a
f010e0af:	50                   	push   %eax
f010e0b0:	e8 e2 3a 02 00       	call   f0131b97 <strfind>
f010e0b5:	83 c4 10             	add    $0x10,%esp
f010e0b8:	89 c2                	mov    %eax,%edx
f010e0ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0bd:	8b 40 08             	mov    0x8(%eax),%eax
f010e0c0:	29 c2                	sub    %eax,%edx
f010e0c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0c5:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e0c8:	eb 03                	jmp    f010e0cd <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e0ca:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e0cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0d0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e0d3:	7c 4e                	jl     f010e123 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e0d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0d8:	89 d0                	mov    %edx,%eax
f010e0da:	01 c0                	add    %eax,%eax
f010e0dc:	01 d0                	add    %edx,%eax
f010e0de:	c1 e0 02             	shl    $0x2,%eax
f010e0e1:	89 c2                	mov    %eax,%edx
f010e0e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0e6:	01 d0                	add    %edx,%eax
f010e0e8:	8a 40 04             	mov    0x4(%eax),%al
f010e0eb:	3c 84                	cmp    $0x84,%al
f010e0ed:	74 34                	je     f010e123 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e0ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0f2:	89 d0                	mov    %edx,%eax
f010e0f4:	01 c0                	add    %eax,%eax
f010e0f6:	01 d0                	add    %edx,%eax
f010e0f8:	c1 e0 02             	shl    $0x2,%eax
f010e0fb:	89 c2                	mov    %eax,%edx
f010e0fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e100:	01 d0                	add    %edx,%eax
f010e102:	8a 40 04             	mov    0x4(%eax),%al
f010e105:	3c 64                	cmp    $0x64,%al
f010e107:	75 c1                	jne    f010e0ca <debuginfo_eip+0x207>
f010e109:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e10c:	89 d0                	mov    %edx,%eax
f010e10e:	01 c0                	add    %eax,%eax
f010e110:	01 d0                	add    %edx,%eax
f010e112:	c1 e0 02             	shl    $0x2,%eax
f010e115:	89 c2                	mov    %eax,%edx
f010e117:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e11a:	01 d0                	add    %edx,%eax
f010e11c:	8b 40 08             	mov    0x8(%eax),%eax
f010e11f:	85 c0                	test   %eax,%eax
f010e121:	74 a7                	je     f010e0ca <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e123:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e126:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e129:	7c 42                	jl     f010e16d <debuginfo_eip+0x2aa>
f010e12b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e12e:	89 d0                	mov    %edx,%eax
f010e130:	01 c0                	add    %eax,%eax
f010e132:	01 d0                	add    %edx,%eax
f010e134:	c1 e0 02             	shl    $0x2,%eax
f010e137:	89 c2                	mov    %eax,%edx
f010e139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e13c:	01 d0                	add    %edx,%eax
f010e13e:	8b 00                	mov    (%eax),%eax
f010e140:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e143:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e146:	29 d1                	sub    %edx,%ecx
f010e148:	89 ca                	mov    %ecx,%edx
f010e14a:	39 d0                	cmp    %edx,%eax
f010e14c:	73 1f                	jae    f010e16d <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e14e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e151:	89 d0                	mov    %edx,%eax
f010e153:	01 c0                	add    %eax,%eax
f010e155:	01 d0                	add    %edx,%eax
f010e157:	c1 e0 02             	shl    $0x2,%eax
f010e15a:	89 c2                	mov    %eax,%edx
f010e15c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e15f:	01 d0                	add    %edx,%eax
f010e161:	8b 10                	mov    (%eax),%edx
f010e163:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e166:	01 c2                	add    %eax,%edx
f010e168:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e16b:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e16d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e172:	c9                   	leave  
f010e173:	c3                   	ret    

f010e174 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e174:	55                   	push   %ebp
f010e175:	89 e5                	mov    %esp,%ebp
f010e177:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e17a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e17e:	74 1c                	je     f010e19c <setPageReplacmentAlgorithmLRU+0x28>
f010e180:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e184:	74 16                	je     f010e19c <setPageReplacmentAlgorithmLRU+0x28>
f010e186:	68 8c 7d 13 f0       	push   $0xf0137d8c
f010e18b:	68 d6 7d 13 f0       	push   $0xf0137dd6
f010e190:	6a 18                	push   $0x18
f010e192:	68 eb 7d 13 f0       	push   $0xf0137deb
f010e197:	e8 69 20 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e19c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e19f:	a3 88 a1 86 f0       	mov    %eax,0xf086a188
}
f010e1a4:	90                   	nop
f010e1a5:	c9                   	leave  
f010e1a6:	c3                   	ret    

f010e1a7 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e1a7:	55                   	push   %ebp
f010e1a8:	89 e5                	mov    %esp,%ebp
f010e1aa:	c7 05 88 a1 86 f0 03 	movl   $0x3,0xf086a188
f010e1b1:	00 00 00 
f010e1b4:	90                   	nop
f010e1b5:	5d                   	pop    %ebp
f010e1b6:	c3                   	ret    

f010e1b7 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e1b7:	55                   	push   %ebp
f010e1b8:	89 e5                	mov    %esp,%ebp
f010e1ba:	c7 05 88 a1 86 f0 04 	movl   $0x4,0xf086a188
f010e1c1:	00 00 00 
f010e1c4:	90                   	nop
f010e1c5:	5d                   	pop    %ebp
f010e1c6:	c3                   	ret    

f010e1c7 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e1c7:	55                   	push   %ebp
f010e1c8:	89 e5                	mov    %esp,%ebp
f010e1ca:	c7 05 88 a1 86 f0 05 	movl   $0x5,0xf086a188
f010e1d1:	00 00 00 
f010e1d4:	90                   	nop
f010e1d5:	5d                   	pop    %ebp
f010e1d6:	c3                   	ret    

f010e1d7 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e1d7:	55                   	push   %ebp
f010e1d8:	89 e5                	mov    %esp,%ebp
f010e1da:	c7 05 88 a1 86 f0 07 	movl   $0x7,0xf086a188
f010e1e1:	00 00 00 
f010e1e4:	90                   	nop
f010e1e5:	5d                   	pop    %ebp
f010e1e6:	c3                   	ret    

f010e1e7 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e1e7:	55                   	push   %ebp
f010e1e8:	89 e5                	mov    %esp,%ebp
f010e1ea:	c7 05 88 a1 86 f0 06 	movl   $0x6,0xf086a188
f010e1f1:	00 00 00 
f010e1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1f7:	a3 e4 a0 86 f0       	mov    %eax,0xf086a0e4
f010e1fc:	90                   	nop
f010e1fd:	5d                   	pop    %ebp
f010e1fe:	c3                   	ret    

f010e1ff <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e1ff:	55                   	push   %ebp
f010e200:	89 e5                	mov    %esp,%ebp
f010e202:	8b 15 88 a1 86 f0    	mov    0xf086a188,%edx
f010e208:	8b 45 08             	mov    0x8(%ebp),%eax
f010e20b:	39 c2                	cmp    %eax,%edx
f010e20d:	0f 94 c0             	sete   %al
f010e210:	0f b6 c0             	movzbl %al,%eax
f010e213:	5d                   	pop    %ebp
f010e214:	c3                   	ret    

f010e215 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e215:	55                   	push   %ebp
f010e216:	89 e5                	mov    %esp,%ebp
f010e218:	a1 88 a1 86 f0       	mov    0xf086a188,%eax
f010e21d:	83 f8 03             	cmp    $0x3,%eax
f010e220:	75 07                	jne    f010e229 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e222:	b8 01 00 00 00       	mov    $0x1,%eax
f010e227:	eb 05                	jmp    f010e22e <isPageReplacmentAlgorithmCLOCK+0x19>
f010e229:	b8 00 00 00 00       	mov    $0x0,%eax
f010e22e:	5d                   	pop    %ebp
f010e22f:	c3                   	ret    

f010e230 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e230:	55                   	push   %ebp
f010e231:	89 e5                	mov    %esp,%ebp
f010e233:	a1 88 a1 86 f0       	mov    0xf086a188,%eax
f010e238:	83 f8 04             	cmp    $0x4,%eax
f010e23b:	75 07                	jne    f010e244 <isPageReplacmentAlgorithmFIFO+0x14>
f010e23d:	b8 01 00 00 00       	mov    $0x1,%eax
f010e242:	eb 05                	jmp    f010e249 <isPageReplacmentAlgorithmFIFO+0x19>
f010e244:	b8 00 00 00 00       	mov    $0x0,%eax
f010e249:	5d                   	pop    %ebp
f010e24a:	c3                   	ret    

f010e24b <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e24b:	55                   	push   %ebp
f010e24c:	89 e5                	mov    %esp,%ebp
f010e24e:	a1 88 a1 86 f0       	mov    0xf086a188,%eax
f010e253:	83 f8 05             	cmp    $0x5,%eax
f010e256:	75 07                	jne    f010e25f <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e258:	b8 01 00 00 00       	mov    $0x1,%eax
f010e25d:	eb 05                	jmp    f010e264 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e25f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e264:	5d                   	pop    %ebp
f010e265:	c3                   	ret    

f010e266 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e266:	55                   	push   %ebp
f010e267:	89 e5                	mov    %esp,%ebp
f010e269:	a1 88 a1 86 f0       	mov    0xf086a188,%eax
f010e26e:	83 f8 07             	cmp    $0x7,%eax
f010e271:	75 07                	jne    f010e27a <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e273:	b8 01 00 00 00       	mov    $0x1,%eax
f010e278:	eb 05                	jmp    f010e27f <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e27a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e27f:	5d                   	pop    %ebp
f010e280:	c3                   	ret    

f010e281 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e281:	55                   	push   %ebp
f010e282:	89 e5                	mov    %esp,%ebp
f010e284:	a1 88 a1 86 f0       	mov    0xf086a188,%eax
f010e289:	83 f8 06             	cmp    $0x6,%eax
f010e28c:	75 07                	jne    f010e295 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e28e:	b8 01 00 00 00       	mov    $0x1,%eax
f010e293:	eb 05                	jmp    f010e29a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e295:	b8 00 00 00 00       	mov    $0x0,%eax
f010e29a:	5d                   	pop    %ebp
f010e29b:	c3                   	ret    

f010e29c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e29c:	55                   	push   %ebp
f010e29d:	89 e5                	mov    %esp,%ebp
f010e29f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2a2:	a3 50 a1 86 f0       	mov    %eax,0xf086a150
f010e2a7:	90                   	nop
f010e2a8:	5d                   	pop    %ebp
f010e2a9:	c3                   	ret    

f010e2aa <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e2aa:	55                   	push   %ebp
f010e2ab:	89 e5                	mov    %esp,%ebp
f010e2ad:	a1 50 a1 86 f0       	mov    0xf086a150,%eax
f010e2b2:	5d                   	pop    %ebp
f010e2b3:	c3                   	ret    

f010e2b4 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e2b4:	55                   	push   %ebp
f010e2b5:	89 e5                	mov    %esp,%ebp
f010e2b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2ba:	a3 90 a1 86 f0       	mov    %eax,0xf086a190
f010e2bf:	90                   	nop
f010e2c0:	5d                   	pop    %ebp
f010e2c1:	c3                   	ret    

f010e2c2 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e2c2:	55                   	push   %ebp
f010e2c3:	89 e5                	mov    %esp,%ebp
f010e2c5:	a1 90 a1 86 f0       	mov    0xf086a190,%eax
f010e2ca:	5d                   	pop    %ebp
f010e2cb:	c3                   	ret    

f010e2cc <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e2cc:	55                   	push   %ebp
f010e2cd:	89 e5                	mov    %esp,%ebp
f010e2cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2d2:	a3 b0 a1 86 f0       	mov    %eax,0xf086a1b0
f010e2d7:	90                   	nop
f010e2d8:	5d                   	pop    %ebp
f010e2d9:	c3                   	ret    

f010e2da <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e2da:	55                   	push   %ebp
f010e2db:	89 e5                	mov    %esp,%ebp
f010e2dd:	a1 b0 a1 86 f0       	mov    0xf086a1b0,%eax
f010e2e2:	5d                   	pop    %ebp
f010e2e3:	c3                   	ret    

f010e2e4 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e2e4:	55                   	push   %ebp
f010e2e5:	89 e5                	mov    %esp,%ebp
f010e2e7:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2ed:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2f0:	83 ec 08             	sub    $0x8,%esp
f010e2f3:	ff 75 0c             	pushl  0xc(%ebp)
f010e2f6:	50                   	push   %eax
f010e2f7:	e8 6a 88 ff ff       	call   f0106b66 <create_page_table>
f010e2fc:	83 c4 10             	add    $0x10,%esp
f010e2ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e302:	90                   	nop
f010e303:	c9                   	leave  
f010e304:	c3                   	ret    

f010e305 <page_fault_handler>:

//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e305:	55                   	push   %ebp
f010e306:	89 e5                	mov    %esp,%ebp
f010e308:	83 ec 68             	sub    $0x68,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	//inline uint32 env_page_ws_get_size(struct Env *curenv);
	uint32 env_size=env_page_ws_get_size(curenv);
f010e30b:	83 ec 0c             	sub    $0xc,%esp
f010e30e:	ff 75 08             	pushl  0x8(%ebp)
f010e311:	e8 0f 9c ff ff       	call   f0107f25 <env_page_ws_get_size>
f010e316:	83 c4 10             	add    $0x10,%esp
f010e319:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	unsigned int *ptr_page_table = NULL;
f010e31c:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
	uint32 round_va = ROUNDDOWN(fault_va, PAGE_SIZE);//1
f010e323:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e326:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e329:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e32c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010e331:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(env_size < curenv->page_WS_max_size)
f010e334:	8b 45 08             	mov    0x8(%ebp),%eax
f010e337:	8b 40 74             	mov    0x74(%eax),%eax
f010e33a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e33d:	0f 86 61 01 00 00    	jbe    f010e4a4 <page_fault_handler+0x19f>
	{
		struct FrameInfo *frame = NULL;
f010e343:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		int ret1 = allocate_frame(&frame);
f010e34a:	83 ec 0c             	sub    $0xc,%esp
f010e34d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e350:	50                   	push   %eax
f010e351:	e8 fb 84 ff ff       	call   f0106851 <allocate_frame>
f010e356:	83 c4 10             	add    $0x10,%esp
f010e359:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ret1 = map_frame(curenv->env_page_directory, frame, round_va, PERM_WRITEABLE|PERM_USER);
f010e35c:	8b 55 a0             	mov    -0x60(%ebp),%edx
f010e35f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e362:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e365:	6a 06                	push   $0x6
f010e367:	ff 75 dc             	pushl  -0x24(%ebp)
f010e36a:	52                   	push   %edx
f010e36b:	50                   	push   %eax
f010e36c:	e8 2f 89 ff ff       	call   f0106ca0 <map_frame>
f010e371:	83 c4 10             	add    $0x10,%esp
f010e374:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int ret = pf_read_env_page(curenv,(void*) fault_va);
f010e377:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e37a:	83 ec 08             	sub    $0x8,%esp
f010e37d:	50                   	push   %eax
f010e37e:	ff 75 08             	pushl  0x8(%ebp)
f010e381:	e8 13 56 ff ff       	call   f0103999 <pf_read_env_page>
f010e386:	83 c4 10             	add    $0x10,%esp
f010e389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if(ret == E_PAGE_NOT_EXIST_IN_PF)
f010e38c:	83 7d d4 f7          	cmpl   $0xfffffff7,-0x2c(%ebp)
f010e390:	75 54                	jne    f010e3e6 <page_fault_handler+0xe1>
		{
			if(!((fault_va >= USTACKBOTTOM && fault_va < USTACKTOP)||(fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX)))
f010e392:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010e399:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e39c:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e3a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010e3a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e3a7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3ac:	f7 75 d0             	divl   -0x30(%ebp)
f010e3af:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e3b2:	29 d0                	sub    %edx,%eax
f010e3b4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e3b7:	77 09                	ja     f010e3c2 <page_fault_handler+0xbd>
f010e3b9:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e3c0:	76 24                	jbe    f010e3e6 <page_fault_handler+0xe1>
f010e3c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3c5:	85 c0                	test   %eax,%eax
f010e3c7:	79 09                	jns    f010e3d2 <page_fault_handler+0xcd>
f010e3c9:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e3d0:	76 14                	jbe    f010e3e6 <page_fault_handler+0xe1>
			{
				panic("ILLEGAL MEMORY ACCESS ");
f010e3d2:	83 ec 04             	sub    $0x4,%esp
f010e3d5:	68 05 7e 13 f0       	push   $0xf0137e05
f010e3da:	6a 5e                	push   $0x5e
f010e3dc:	68 eb 7d 13 f0       	push   $0xf0137deb
f010e3e1:	e8 1f 1e ff ff       	call   f0100205 <_panic>
		// else
		// {
		//
		// }
		}
		int index=curenv->page_last_WS_index;
f010e3e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3e9:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e3ef:	89 45 c8             	mov    %eax,-0x38(%ebp)
		for (uint32 i = index; i <curenv->page_WS_max_size+index; i++)
f010e3f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e3f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e3f8:	eb 53                	jmp    f010e44d <page_fault_handler+0x148>
		{
			if (curenv->ptr_pageWorkingSet[i].empty)
f010e3fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3fd:	8b 48 78             	mov    0x78(%eax),%ecx
f010e400:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e403:	89 d0                	mov    %edx,%eax
f010e405:	01 c0                	add    %eax,%eax
f010e407:	01 d0                	add    %edx,%eax
f010e409:	c1 e0 03             	shl    $0x3,%eax
f010e40c:	01 c8                	add    %ecx,%eax
f010e40e:	8a 40 04             	mov    0x4(%eax),%al
f010e411:	84 c0                	test   %al,%al
f010e413:	74 22                	je     f010e437 <page_fault_handler+0x132>
			{
					env_page_ws_set_entry(curenv,i,fault_va);
f010e415:	83 ec 04             	sub    $0x4,%esp
f010e418:	ff 75 0c             	pushl  0xc(%ebp)
f010e41b:	ff 75 f4             	pushl  -0xc(%ebp)
f010e41e:	ff 75 08             	pushl  0x8(%ebp)
f010e421:	e8 b3 9b ff ff       	call   f0107fd9 <env_page_ws_set_entry>
f010e426:	83 c4 10             	add    $0x10,%esp
					curenv->page_last_WS_index=i;
f010e429:	8b 45 08             	mov    0x8(%ebp),%eax
f010e42c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e42f:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
					break;
f010e435:	eb 26                	jmp    f010e45d <page_fault_handler+0x158>
			}
			if(i==curenv->page_WS_max_size-1)
f010e437:	8b 45 08             	mov    0x8(%ebp),%eax
f010e43a:	8b 40 74             	mov    0x74(%eax),%eax
f010e43d:	48                   	dec    %eax
f010e43e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e441:	75 07                	jne    f010e44a <page_fault_handler+0x145>
			{
				i=0;
f010e443:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		// {
		//
		// }
		}
		int index=curenv->page_last_WS_index;
		for (uint32 i = index; i <curenv->page_WS_max_size+index; i++)
f010e44a:	ff 45 f4             	incl   -0xc(%ebp)
f010e44d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e450:	8b 50 74             	mov    0x74(%eax),%edx
f010e453:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e456:	01 d0                	add    %edx,%eax
f010e458:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e45b:	77 9d                	ja     f010e3fa <page_fault_handler+0xf5>
			{
				i=0;
			}
		}
		//env_page_ws_set_entry(curenv,curenv->page_last_WS_index,ROUNDDOWN(fault_va,PAGE_SIZE));
		curenv->page_last_WS_index++;
f010e45d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e460:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e466:	8d 50 01             	lea    0x1(%eax),%edx
f010e469:	8b 45 08             	mov    0x8(%ebp),%eax
f010e46c:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index%curenv->page_WS_max_size==0)
f010e472:	8b 45 08             	mov    0x8(%ebp),%eax
f010e475:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e47b:	8b 55 08             	mov    0x8(%ebp),%edx
f010e47e:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e481:	ba 00 00 00 00       	mov    $0x0,%edx
f010e486:	f7 f1                	div    %ecx
f010e488:	89 d0                	mov    %edx,%eax
f010e48a:	85 c0                	test   %eax,%eax
f010e48c:	0f 85 e8 02 00 00    	jne    f010e77a <page_fault_handler+0x475>
		curenv->page_last_WS_index = 0;
f010e492:	8b 45 08             	mov    0x8(%ebp),%eax
f010e495:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e49c:	00 00 00 
		curenv->page_last_WS_index++;
		if(curenv->page_last_WS_index%curenv->page_WS_max_size==0)
			curenv->page_last_WS_index = 0;

	}
}
f010e49f:	e9 d6 02 00 00       	jmp    f010e77a <page_fault_handler+0x475>
		curenv->page_last_WS_index = 0;

	}
	else
	{
		struct FrameInfo* modified_frame= NULL;
f010e4a4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		uint32 new;
		bool is_true=1;
f010e4ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
		while(is_true==1)
f010e4b2:	e9 96 00 00 00       	jmp    f010e54d <page_fault_handler+0x248>
		{
			uint32 x=env_page_ws_get_virtual_address(curenv,curenv->page_last_WS_index);
f010e4b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4ba:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e4c0:	83 ec 08             	sub    $0x8,%esp
f010e4c3:	50                   	push   %eax
f010e4c4:	ff 75 08             	pushl  0x8(%ebp)
f010e4c7:	e8 25 9c ff ff       	call   f01080f1 <env_page_ws_get_virtual_address>
f010e4cc:	83 c4 10             	add    $0x10,%esp
f010e4cf:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if(((pt_get_page_permissions(curenv->env_page_directory,x))& PERM_USED) == PERM_USED)
f010e4d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4d5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e4d8:	83 ec 08             	sub    $0x8,%esp
f010e4db:	ff 75 c0             	pushl  -0x40(%ebp)
f010e4de:	50                   	push   %eax
f010e4df:	e8 64 98 ff ff       	call   f0107d48 <pt_get_page_permissions>
f010e4e4:	83 c4 10             	add    $0x10,%esp
f010e4e7:	83 e0 20             	and    $0x20,%eax
f010e4ea:	85 c0                	test   %eax,%eax
f010e4ec:	74 4c                	je     f010e53a <page_fault_handler+0x235>
			{
				pt_set_page_permissions(curenv->env_page_directory,x,0,PERM_USED);
f010e4ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4f1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e4f4:	6a 20                	push   $0x20
f010e4f6:	6a 00                	push   $0x0
f010e4f8:	ff 75 c0             	pushl  -0x40(%ebp)
f010e4fb:	50                   	push   %eax
f010e4fc:	e8 92 97 ff ff       	call   f0107c93 <pt_set_page_permissions>
f010e501:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index+=1;
f010e504:	8b 45 08             	mov    0x8(%ebp),%eax
f010e507:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e50d:	8d 50 01             	lea    0x1(%eax),%edx
f010e510:	8b 45 08             	mov    0x8(%ebp),%eax
f010e513:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
				curenv->page_last_WS_index%=curenv->page_WS_max_size;
f010e519:	8b 45 08             	mov    0x8(%ebp),%eax
f010e51c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e522:	8b 55 08             	mov    0x8(%ebp),%edx
f010e525:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e528:	ba 00 00 00 00       	mov    $0x0,%edx
f010e52d:	f7 f1                	div    %ecx
f010e52f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e532:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
f010e538:	eb 13                	jmp    f010e54d <page_fault_handler+0x248>
			}
			else
			{
				 new= curenv->page_last_WS_index;
f010e53a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e53d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e543:	89 45 f0             	mov    %eax,-0x10(%ebp)
				 is_true=0;
f010e546:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	else
	{
		struct FrameInfo* modified_frame= NULL;
		uint32 new;
		bool is_true=1;
		while(is_true==1)
f010e54d:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e551:	0f 84 60 ff ff ff    	je     f010e4b7 <page_fault_handler+0x1b2>
				 new= curenv->page_last_WS_index;
				 is_true=0;
			}

		}
		modified_frame = get_frame_info(curenv->env_page_directory,curenv->ptr_pageWorkingSet[new].virtual_address,&ptr_page_table);
f010e557:	8b 45 08             	mov    0x8(%ebp),%eax
f010e55a:	8b 48 78             	mov    0x78(%eax),%ecx
f010e55d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e560:	89 d0                	mov    %edx,%eax
f010e562:	01 c0                	add    %eax,%eax
f010e564:	01 d0                	add    %edx,%eax
f010e566:	c1 e0 03             	shl    $0x3,%eax
f010e569:	01 c8                	add    %ecx,%eax
f010e56b:	8b 10                	mov    (%eax),%edx
f010e56d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e570:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e573:	83 ec 04             	sub    $0x4,%esp
f010e576:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
f010e579:	51                   	push   %ecx
f010e57a:	52                   	push   %edx
f010e57b:	50                   	push   %eax
f010e57c:	e8 e4 87 ff ff       	call   f0106d65 <get_frame_info>
f010e581:	83 c4 10             	add    $0x10,%esp
f010e584:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		int perm = pt_get_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[new].virtual_address);
f010e587:	8b 45 08             	mov    0x8(%ebp),%eax
f010e58a:	8b 48 78             	mov    0x78(%eax),%ecx
f010e58d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e590:	89 d0                	mov    %edx,%eax
f010e592:	01 c0                	add    %eax,%eax
f010e594:	01 d0                	add    %edx,%eax
f010e596:	c1 e0 03             	shl    $0x3,%eax
f010e599:	01 c8                	add    %ecx,%eax
f010e59b:	8b 10                	mov    (%eax),%edx
f010e59d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e5a3:	83 ec 08             	sub    $0x8,%esp
f010e5a6:	52                   	push   %edx
f010e5a7:	50                   	push   %eax
f010e5a8:	e8 9b 97 ff ff       	call   f0107d48 <pt_get_page_permissions>
f010e5ad:	83 c4 10             	add    $0x10,%esp
f010e5b0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if((perm & PERM_MODIFIED) == PERM_MODIFIED)
f010e5b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e5b6:	83 e0 40             	and    $0x40,%eax
f010e5b9:	85 c0                	test   %eax,%eax
f010e5bb:	74 28                	je     f010e5e5 <page_fault_handler+0x2e0>
			pf_update_env_page(curenv,curenv->ptr_pageWorkingSet[new].virtual_address,modified_frame);
f010e5bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5c0:	8b 48 78             	mov    0x78(%eax),%ecx
f010e5c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e5c6:	89 d0                	mov    %edx,%eax
f010e5c8:	01 c0                	add    %eax,%eax
f010e5ca:	01 d0                	add    %edx,%eax
f010e5cc:	c1 e0 03             	shl    $0x3,%eax
f010e5cf:	01 c8                	add    %ecx,%eax
f010e5d1:	8b 00                	mov    (%eax),%eax
f010e5d3:	83 ec 04             	sub    $0x4,%esp
f010e5d6:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e5d9:	50                   	push   %eax
f010e5da:	ff 75 08             	pushl  0x8(%ebp)
f010e5dd:	e8 55 51 ff ff       	call   f0103737 <pf_update_env_page>
f010e5e2:	83 c4 10             	add    $0x10,%esp

		unmap_frame(curenv->env_page_directory,curenv->ptr_pageWorkingSet[new].virtual_address);
f010e5e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5e8:	8b 48 78             	mov    0x78(%eax),%ecx
f010e5eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e5ee:	89 d0                	mov    %edx,%eax
f010e5f0:	01 c0                	add    %eax,%eax
f010e5f2:	01 d0                	add    %edx,%eax
f010e5f4:	c1 e0 03             	shl    $0x3,%eax
f010e5f7:	01 c8                	add    %ecx,%eax
f010e5f9:	8b 10                	mov    (%eax),%edx
f010e5fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e601:	83 ec 08             	sub    $0x8,%esp
f010e604:	52                   	push   %edx
f010e605:	50                   	push   %eax
f010e606:	e8 ca 87 ff ff       	call   f0106dd5 <unmap_frame>
f010e60b:	83 c4 10             	add    $0x10,%esp
		env_page_ws_clear_entry(curenv,new);
f010e60e:	83 ec 08             	sub    $0x8,%esp
f010e611:	ff 75 f0             	pushl  -0x10(%ebp)
f010e614:	ff 75 08             	pushl  0x8(%ebp)
f010e617:	e8 5e 9a ff ff       	call   f010807a <env_page_ws_clear_entry>
f010e61c:	83 c4 10             	add    $0x10,%esp
		//placement
		struct FrameInfo *frame = NULL;
f010e61f:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
		int ret1 = allocate_frame(&frame);
f010e626:	83 ec 0c             	sub    $0xc,%esp
f010e629:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e62c:	50                   	push   %eax
f010e62d:	e8 1f 82 ff ff       	call   f0106851 <allocate_frame>
f010e632:	83 c4 10             	add    $0x10,%esp
f010e635:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ret1 = map_frame(curenv->env_page_directory, frame , round_va, PERM_WRITEABLE|PERM_USER);
f010e638:	8b 55 9c             	mov    -0x64(%ebp),%edx
f010e63b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e63e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e641:	6a 06                	push   $0x6
f010e643:	ff 75 dc             	pushl  -0x24(%ebp)
f010e646:	52                   	push   %edx
f010e647:	50                   	push   %eax
f010e648:	e8 53 86 ff ff       	call   f0106ca0 <map_frame>
f010e64d:	83 c4 10             	add    $0x10,%esp
f010e650:	89 45 b8             	mov    %eax,-0x48(%ebp)
		//allocate_chunk(curenv->env_page_directory, fault_va,curenv->page_WS_max_size,PERM_WRITEABLE|PERM_USER);
		int ret = pf_read_env_page(curenv,(void*) fault_va);
f010e653:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e656:	83 ec 08             	sub    $0x8,%esp
f010e659:	50                   	push   %eax
f010e65a:	ff 75 08             	pushl  0x8(%ebp)
f010e65d:	e8 37 53 ff ff       	call   f0103999 <pf_read_env_page>
f010e662:	83 c4 10             	add    $0x10,%esp
f010e665:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if(ret == E_PAGE_NOT_EXIST_IN_PF)
f010e668:	83 7d b4 f7          	cmpl   $0xfffffff7,-0x4c(%ebp)
f010e66c:	75 57                	jne    f010e6c5 <page_fault_handler+0x3c0>
		{
			if(!((fault_va >= USTACKBOTTOM && fault_va < USTACKTOP)||(fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX)))
f010e66e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010e675:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e678:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e67d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010e680:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e683:	ba 00 00 00 00       	mov    $0x0,%edx
f010e688:	f7 75 b0             	divl   -0x50(%ebp)
f010e68b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e68e:	29 d0                	sub    %edx,%eax
f010e690:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e693:	77 09                	ja     f010e69e <page_fault_handler+0x399>
f010e695:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e69c:	76 27                	jbe    f010e6c5 <page_fault_handler+0x3c0>
f010e69e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6a1:	85 c0                	test   %eax,%eax
f010e6a3:	79 09                	jns    f010e6ae <page_fault_handler+0x3a9>
f010e6a5:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e6ac:	76 17                	jbe    f010e6c5 <page_fault_handler+0x3c0>
			{

				panic("ILLEGAL MEMORY ACCESS ");
f010e6ae:	83 ec 04             	sub    $0x4,%esp
f010e6b1:	68 05 7e 13 f0       	push   $0xf0137e05
f010e6b6:	68 a0 00 00 00       	push   $0xa0
f010e6bb:	68 eb 7d 13 f0       	push   $0xf0137deb
f010e6c0:	e8 40 1b ff ff       	call   f0100205 <_panic>
			}
		}

		int j=curenv->page_last_WS_index;
f010e6c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6c8:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e6ce:	89 45 a8             	mov    %eax,-0x58(%ebp)
		for (uint32 i = j; i <curenv->page_WS_max_size+j; i++)
f010e6d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e6d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010e6d7:	eb 53                	jmp    f010e72c <page_fault_handler+0x427>
		{
			if (curenv->ptr_pageWorkingSet[i].empty)
f010e6d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6dc:	8b 48 78             	mov    0x78(%eax),%ecx
f010e6df:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e6e2:	89 d0                	mov    %edx,%eax
f010e6e4:	01 c0                	add    %eax,%eax
f010e6e6:	01 d0                	add    %edx,%eax
f010e6e8:	c1 e0 03             	shl    $0x3,%eax
f010e6eb:	01 c8                	add    %ecx,%eax
f010e6ed:	8a 40 04             	mov    0x4(%eax),%al
f010e6f0:	84 c0                	test   %al,%al
f010e6f2:	74 22                	je     f010e716 <page_fault_handler+0x411>
			{
				env_page_ws_set_entry(curenv,i,fault_va);
f010e6f4:	83 ec 04             	sub    $0x4,%esp
f010e6f7:	ff 75 0c             	pushl  0xc(%ebp)
f010e6fa:	ff 75 e8             	pushl  -0x18(%ebp)
f010e6fd:	ff 75 08             	pushl  0x8(%ebp)
f010e700:	e8 d4 98 ff ff       	call   f0107fd9 <env_page_ws_set_entry>
f010e705:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index=i;
f010e708:	8b 45 08             	mov    0x8(%ebp),%eax
f010e70b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e70e:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
				break;
f010e714:	eb 26                	jmp    f010e73c <page_fault_handler+0x437>
			}
			if(i==curenv->page_WS_max_size-1){
f010e716:	8b 45 08             	mov    0x8(%ebp),%eax
f010e719:	8b 40 74             	mov    0x74(%eax),%eax
f010e71c:	48                   	dec    %eax
f010e71d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e720:	75 07                	jne    f010e729 <page_fault_handler+0x424>
				i=0;
f010e722:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
				panic("ILLEGAL MEMORY ACCESS ");
			}
		}

		int j=curenv->page_last_WS_index;
		for (uint32 i = j; i <curenv->page_WS_max_size+j; i++)
f010e729:	ff 45 e8             	incl   -0x18(%ebp)
f010e72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e72f:	8b 50 74             	mov    0x74(%eax),%edx
f010e732:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e735:	01 d0                	add    %edx,%eax
f010e737:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e73a:	77 9d                	ja     f010e6d9 <page_fault_handler+0x3d4>
				i=0;
			}
		}

		//env_page_ws_set_entry(curenv,curenv->page_last_WS_index,ROUNDDOWN(fault_va,PAGE_SIZE));
		curenv->page_last_WS_index++;
f010e73c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e73f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e745:	8d 50 01             	lea    0x1(%eax),%edx
f010e748:	8b 45 08             	mov    0x8(%ebp),%eax
f010e74b:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index%curenv->page_WS_max_size==0)
f010e751:	8b 45 08             	mov    0x8(%ebp),%eax
f010e754:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e75a:	8b 55 08             	mov    0x8(%ebp),%edx
f010e75d:	8b 4a 74             	mov    0x74(%edx),%ecx
f010e760:	ba 00 00 00 00       	mov    $0x0,%edx
f010e765:	f7 f1                	div    %ecx
f010e767:	89 d0                	mov    %edx,%eax
f010e769:	85 c0                	test   %eax,%eax
f010e76b:	75 0d                	jne    f010e77a <page_fault_handler+0x475>
			curenv->page_last_WS_index = 0;
f010e76d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e770:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e777:	00 00 00 

	}
}
f010e77a:	90                   	nop
f010e77b:	c9                   	leave  
f010e77c:	c3                   	ret    

f010e77d <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e77d:	55                   	push   %ebp
f010e77e:	89 e5                	mov    %esp,%ebp
f010e780:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e783:	83 ec 04             	sub    $0x4,%esp
f010e786:	68 1c 7e 13 f0       	push   $0xf0137e1c
f010e78b:	68 bd 00 00 00       	push   $0xbd
f010e790:	68 eb 7d 13 f0       	push   $0xf0137deb
f010e795:	e8 6b 1a ff ff       	call   f0100205 <_panic>

f010e79a <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e79a:	55                   	push   %ebp
f010e79b:	89 e5                	mov    %esp,%ebp
f010e79d:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e7a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7a3:	a3 b4 a0 86 f0       	mov    %eax,0xf086a0b4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e7a8:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7ab:	89 d0                	mov    %edx,%eax
f010e7ad:	c1 e0 02             	shl    $0x2,%eax
f010e7b0:	01 d0                	add    %edx,%eax
f010e7b2:	01 c0                	add    %eax,%eax
f010e7b4:	01 d0                	add    %edx,%eax
f010e7b6:	01 c0                	add    %eax,%eax
f010e7b8:	01 d0                	add    %edx,%eax
f010e7ba:	c1 e0 02             	shl    $0x2,%eax
f010e7bd:	83 ec 0c             	sub    $0xc,%esp
f010e7c0:	50                   	push   %eax
f010e7c1:	e8 a4 91 ff ff       	call   f010796a <kmalloc>
f010e7c6:	83 c4 10             	add    $0x10,%esp
f010e7c9:	a3 0c a1 86 f0       	mov    %eax,0xf086a10c
	if (semaphores == NULL)
f010e7ce:	a1 0c a1 86 f0       	mov    0xf086a10c,%eax
f010e7d3:	85 c0                	test   %eax,%eax
f010e7d5:	75 14                	jne    f010e7eb <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e7d7:	83 ec 04             	sub    $0x4,%esp
f010e7da:	68 60 7e 13 f0       	push   $0xf0137e60
f010e7df:	6a 1e                	push   $0x1e
f010e7e1:	68 a0 7e 13 f0       	push   $0xf0137ea0
f010e7e6:	e8 1a 1a ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e7eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e7f2:	e9 bd 00 00 00       	jmp    f010e8b4 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e7f7:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e7fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e800:	89 d0                	mov    %edx,%eax
f010e802:	c1 e0 02             	shl    $0x2,%eax
f010e805:	01 d0                	add    %edx,%eax
f010e807:	01 c0                	add    %eax,%eax
f010e809:	01 d0                	add    %edx,%eax
f010e80b:	01 c0                	add    %eax,%eax
f010e80d:	01 d0                	add    %edx,%eax
f010e80f:	c1 e0 02             	shl    $0x2,%eax
f010e812:	01 c8                	add    %ecx,%eax
f010e814:	83 ec 04             	sub    $0x4,%esp
f010e817:	6a 5c                	push   $0x5c
f010e819:	6a 00                	push   $0x0
f010e81b:	50                   	push   %eax
f010e81c:	e8 a2 33 02 00       	call   f0131bc3 <memset>
f010e821:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e824:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e82a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e82d:	89 d0                	mov    %edx,%eax
f010e82f:	c1 e0 02             	shl    $0x2,%eax
f010e832:	01 d0                	add    %edx,%eax
f010e834:	01 c0                	add    %eax,%eax
f010e836:	01 d0                	add    %edx,%eax
f010e838:	01 c0                	add    %eax,%eax
f010e83a:	01 d0                	add    %edx,%eax
f010e83c:	c1 e0 02             	shl    $0x2,%eax
f010e83f:	01 c8                	add    %ecx,%eax
f010e841:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e845:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e84b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e84e:	89 d0                	mov    %edx,%eax
f010e850:	c1 e0 02             	shl    $0x2,%eax
f010e853:	01 d0                	add    %edx,%eax
f010e855:	01 c0                	add    %eax,%eax
f010e857:	01 d0                	add    %edx,%eax
f010e859:	01 c0                	add    %eax,%eax
f010e85b:	01 d0                	add    %edx,%eax
f010e85d:	c1 e0 02             	shl    $0x2,%eax
f010e860:	01 c8                	add    %ecx,%eax
f010e862:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e869:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e86f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e872:	89 d0                	mov    %edx,%eax
f010e874:	c1 e0 02             	shl    $0x2,%eax
f010e877:	01 d0                	add    %edx,%eax
f010e879:	01 c0                	add    %eax,%eax
f010e87b:	01 d0                	add    %edx,%eax
f010e87d:	01 c0                	add    %eax,%eax
f010e87f:	01 d0                	add    %edx,%eax
f010e881:	c1 e0 02             	shl    $0x2,%eax
f010e884:	01 c8                	add    %ecx,%eax
f010e886:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e88d:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e896:	89 d0                	mov    %edx,%eax
f010e898:	c1 e0 02             	shl    $0x2,%eax
f010e89b:	01 d0                	add    %edx,%eax
f010e89d:	01 c0                	add    %eax,%eax
f010e89f:	01 d0                	add    %edx,%eax
f010e8a1:	01 c0                	add    %eax,%eax
f010e8a3:	01 d0                	add    %edx,%eax
f010e8a5:	c1 e0 02             	shl    $0x2,%eax
f010e8a8:	01 c8                	add    %ecx,%eax
f010e8aa:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8b1:	ff 45 f4             	incl   -0xc(%ebp)
f010e8b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8b7:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010e8bc:	39 c2                	cmp    %eax,%edx
f010e8be:	0f 82 33 ff ff ff    	jb     f010e7f7 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e8c4:	90                   	nop
f010e8c5:	c9                   	leave  
f010e8c6:	c3                   	ret    

f010e8c7 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e8c7:	55                   	push   %ebp
f010e8c8:	89 e5                	mov    %esp,%ebp
f010e8ca:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e8cd:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e8db:	eb 2f                	jmp    f010e90c <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e8dd:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e8e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8e6:	89 d0                	mov    %edx,%eax
f010e8e8:	c1 e0 02             	shl    $0x2,%eax
f010e8eb:	01 d0                	add    %edx,%eax
f010e8ed:	01 c0                	add    %eax,%eax
f010e8ef:	01 d0                	add    %edx,%eax
f010e8f1:	01 c0                	add    %eax,%eax
f010e8f3:	01 d0                	add    %edx,%eax
f010e8f5:	c1 e0 02             	shl    $0x2,%eax
f010e8f8:	01 c8                	add    %ecx,%eax
f010e8fa:	8a 40 58             	mov    0x58(%eax),%al
f010e8fd:	84 c0                	test   %al,%al
f010e8ff:	74 08                	je     f010e909 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e901:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e904:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e907:	eb 0f                	jmp    f010e918 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e909:	ff 45 f0             	incl   -0x10(%ebp)
f010e90c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e90f:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010e914:	39 c2                	cmp    %eax,%edx
f010e916:	72 c5                	jb     f010e8dd <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e918:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e91c:	75 4d                	jne    f010e96b <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e91e:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010e923:	01 c0                	add    %eax,%eax
f010e925:	89 c2                	mov    %eax,%edx
f010e927:	a1 0c a1 86 f0       	mov    0xf086a10c,%eax
f010e92c:	83 ec 08             	sub    $0x8,%esp
f010e92f:	52                   	push   %edx
f010e930:	50                   	push   %eax
f010e931:	e8 40 93 ff ff       	call   f0107c76 <krealloc>
f010e936:	83 c4 10             	add    $0x10,%esp
f010e939:	a3 0c a1 86 f0       	mov    %eax,0xf086a10c
			if (semaphores == NULL)
f010e93e:	a1 0c a1 86 f0       	mov    0xf086a10c,%eax
f010e943:	85 c0                	test   %eax,%eax
f010e945:	75 10                	jne    f010e957 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e947:	8b 45 08             	mov    0x8(%ebp),%eax
f010e94a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e950:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e955:	eb 5b                	jmp    f010e9b2 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e957:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010e95c:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e95f:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010e964:	01 c0                	add    %eax,%eax
f010e966:	a3 b4 a0 86 f0       	mov    %eax,0xf086a0b4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e96b:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e971:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e974:	89 d0                	mov    %edx,%eax
f010e976:	c1 e0 02             	shl    $0x2,%eax
f010e979:	01 d0                	add    %edx,%eax
f010e97b:	01 c0                	add    %eax,%eax
f010e97d:	01 d0                	add    %edx,%eax
f010e97f:	01 c0                	add    %eax,%eax
f010e981:	01 d0                	add    %edx,%eax
f010e983:	c1 e0 02             	shl    $0x2,%eax
f010e986:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e989:	8b 45 08             	mov    0x8(%ebp),%eax
f010e98c:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e98e:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e994:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e997:	89 d0                	mov    %edx,%eax
f010e999:	c1 e0 02             	shl    $0x2,%eax
f010e99c:	01 d0                	add    %edx,%eax
f010e99e:	01 c0                	add    %eax,%eax
f010e9a0:	01 d0                	add    %edx,%eax
f010e9a2:	01 c0                	add    %eax,%eax
f010e9a4:	01 d0                	add    %edx,%eax
f010e9a6:	c1 e0 02             	shl    $0x2,%eax
f010e9a9:	01 c8                	add    %ecx,%eax
f010e9ab:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e9af:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9b2:	c9                   	leave  
f010e9b3:	c3                   	ret    

f010e9b4 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e9b4:	55                   	push   %ebp
f010e9b5:	89 e5                	mov    %esp,%ebp
f010e9b7:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e9ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e9c1:	e9 84 00 00 00       	jmp    f010ea4a <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e9c6:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e9cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9cf:	89 d0                	mov    %edx,%eax
f010e9d1:	c1 e0 02             	shl    $0x2,%eax
f010e9d4:	01 d0                	add    %edx,%eax
f010e9d6:	01 c0                	add    %eax,%eax
f010e9d8:	01 d0                	add    %edx,%eax
f010e9da:	01 c0                	add    %eax,%eax
f010e9dc:	01 d0                	add    %edx,%eax
f010e9de:	c1 e0 02             	shl    $0x2,%eax
f010e9e1:	01 c8                	add    %ecx,%eax
f010e9e3:	8a 40 58             	mov    0x58(%eax),%al
f010e9e6:	84 c0                	test   %al,%al
f010e9e8:	75 5c                	jne    f010ea46 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e9ea:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010e9f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9f3:	89 d0                	mov    %edx,%eax
f010e9f5:	c1 e0 02             	shl    $0x2,%eax
f010e9f8:	01 d0                	add    %edx,%eax
f010e9fa:	01 c0                	add    %eax,%eax
f010e9fc:	01 d0                	add    %edx,%eax
f010e9fe:	01 c0                	add    %eax,%eax
f010ea00:	01 d0                	add    %edx,%eax
f010ea02:	c1 e0 02             	shl    $0x2,%eax
f010ea05:	01 c8                	add    %ecx,%eax
f010ea07:	8b 00                	mov    (%eax),%eax
f010ea09:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ea0c:	75 39                	jne    f010ea47 <get_semaphore_object_ID+0x93>
f010ea0e:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ea14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea17:	89 d0                	mov    %edx,%eax
f010ea19:	c1 e0 02             	shl    $0x2,%eax
f010ea1c:	01 d0                	add    %edx,%eax
f010ea1e:	01 c0                	add    %eax,%eax
f010ea20:	01 d0                	add    %edx,%eax
f010ea22:	01 c0                	add    %eax,%eax
f010ea24:	01 d0                	add    %edx,%eax
f010ea26:	c1 e0 02             	shl    $0x2,%eax
f010ea29:	01 c8                	add    %ecx,%eax
f010ea2b:	83 c0 04             	add    $0x4,%eax
f010ea2e:	83 ec 08             	sub    $0x8,%esp
f010ea31:	50                   	push   %eax
f010ea32:	ff 75 0c             	pushl  0xc(%ebp)
f010ea35:	e8 a7 30 02 00       	call   f0131ae1 <strcmp>
f010ea3a:	83 c4 10             	add    $0x10,%esp
f010ea3d:	85 c0                	test   %eax,%eax
f010ea3f:	75 06                	jne    f010ea47 <get_semaphore_object_ID+0x93>
		{
			return i;
f010ea41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea44:	eb 19                	jmp    f010ea5f <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010ea46:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010ea47:	ff 45 f4             	incl   -0xc(%ebp)
f010ea4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea4d:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010ea52:	39 c2                	cmp    %eax,%edx
f010ea54:	0f 82 6c ff ff ff    	jb     f010e9c6 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010ea5a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010ea5f:	c9                   	leave  
f010ea60:	c3                   	ret    

f010ea61 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010ea61:	55                   	push   %ebp
f010ea62:	89 e5                	mov    %esp,%ebp
f010ea64:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010ea67:	a1 b4 a0 86 f0       	mov    0xf086a0b4,%eax
f010ea6c:	39 45 08             	cmp    %eax,0x8(%ebp)
f010ea6f:	72 0a                	jb     f010ea7b <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010ea71:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010ea76:	e9 bf 00 00 00       	jmp    f010eb3a <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010ea7b:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ea81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea84:	89 d0                	mov    %edx,%eax
f010ea86:	c1 e0 02             	shl    $0x2,%eax
f010ea89:	01 d0                	add    %edx,%eax
f010ea8b:	01 c0                	add    %eax,%eax
f010ea8d:	01 d0                	add    %edx,%eax
f010ea8f:	01 c0                	add    %eax,%eax
f010ea91:	01 d0                	add    %edx,%eax
f010ea93:	c1 e0 02             	shl    $0x2,%eax
f010ea96:	01 c8                	add    %ecx,%eax
f010ea98:	83 ec 04             	sub    $0x4,%esp
f010ea9b:	6a 5c                	push   $0x5c
f010ea9d:	6a 00                	push   $0x0
f010ea9f:	50                   	push   %eax
f010eaa0:	e8 1e 31 02 00       	call   f0131bc3 <memset>
f010eaa5:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010eaa8:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010eaae:	8b 55 08             	mov    0x8(%ebp),%edx
f010eab1:	89 d0                	mov    %edx,%eax
f010eab3:	c1 e0 02             	shl    $0x2,%eax
f010eab6:	01 d0                	add    %edx,%eax
f010eab8:	01 c0                	add    %eax,%eax
f010eaba:	01 d0                	add    %edx,%eax
f010eabc:	01 c0                	add    %eax,%eax
f010eabe:	01 d0                	add    %edx,%eax
f010eac0:	c1 e0 02             	shl    $0x2,%eax
f010eac3:	01 c8                	add    %ecx,%eax
f010eac5:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010eac9:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010eacf:	8b 55 08             	mov    0x8(%ebp),%edx
f010ead2:	89 d0                	mov    %edx,%eax
f010ead4:	c1 e0 02             	shl    $0x2,%eax
f010ead7:	01 d0                	add    %edx,%eax
f010ead9:	01 c0                	add    %eax,%eax
f010eadb:	01 d0                	add    %edx,%eax
f010eadd:	01 c0                	add    %eax,%eax
f010eadf:	01 d0                	add    %edx,%eax
f010eae1:	c1 e0 02             	shl    $0x2,%eax
f010eae4:	01 c8                	add    %ecx,%eax
f010eae6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010eaed:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010eaf3:	8b 55 08             	mov    0x8(%ebp),%edx
f010eaf6:	89 d0                	mov    %edx,%eax
f010eaf8:	c1 e0 02             	shl    $0x2,%eax
f010eafb:	01 d0                	add    %edx,%eax
f010eafd:	01 c0                	add    %eax,%eax
f010eaff:	01 d0                	add    %edx,%eax
f010eb01:	01 c0                	add    %eax,%eax
f010eb03:	01 d0                	add    %edx,%eax
f010eb05:	c1 e0 02             	shl    $0x2,%eax
f010eb08:	01 c8                	add    %ecx,%eax
f010eb0a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010eb11:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010eb17:	8b 55 08             	mov    0x8(%ebp),%edx
f010eb1a:	89 d0                	mov    %edx,%eax
f010eb1c:	c1 e0 02             	shl    $0x2,%eax
f010eb1f:	01 d0                	add    %edx,%eax
f010eb21:	01 c0                	add    %eax,%eax
f010eb23:	01 d0                	add    %edx,%eax
f010eb25:	01 c0                	add    %eax,%eax
f010eb27:	01 d0                	add    %edx,%eax
f010eb29:	c1 e0 02             	shl    $0x2,%eax
f010eb2c:	01 c8                	add    %ecx,%eax
f010eb2e:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010eb35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb3a:	c9                   	leave  
f010eb3b:	c3                   	ret    

f010eb3c <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010eb3c:	55                   	push   %ebp
f010eb3d:	89 e5                	mov    %esp,%ebp
f010eb3f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code

	struct Semaphore *object=NULL;
f010eb42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int id=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010eb49:	83 ec 08             	sub    $0x8,%esp
f010eb4c:	ff 75 0c             	pushl  0xc(%ebp)
f010eb4f:	ff 75 08             	pushl  0x8(%ebp)
f010eb52:	e8 5d fe ff ff       	call   f010e9b4 <get_semaphore_object_ID>
f010eb57:	83 c4 10             	add    $0x10,%esp
f010eb5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(id!=E_SEMAPHORE_NOT_EXISTS)
f010eb5d:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010eb61:	74 08                	je     f010eb6b <createSemaphore+0x2f>
		return id ;
f010eb63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eb66:	e9 98 00 00 00       	jmp    f010ec03 <createSemaphore+0xc7>

	id=allocate_semaphore_object(&object);
f010eb6b:	83 ec 0c             	sub    $0xc,%esp
f010eb6e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010eb71:	50                   	push   %eax
f010eb72:	e8 50 fd ff ff       	call   f010e8c7 <allocate_semaphore_object>
f010eb77:	83 c4 10             	add    $0x10,%esp
f010eb7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(id!=E_NO_SEMAPHORE)
f010eb7d:	83 7d f4 f5          	cmpl   $0xfffffff5,-0xc(%ebp)
f010eb81:	74 7b                	je     f010ebfe <createSemaphore+0xc2>
	{
		semaphores[id].ownerID=ownerEnvID;
f010eb83:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010eb89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb8c:	89 d0                	mov    %edx,%eax
f010eb8e:	c1 e0 02             	shl    $0x2,%eax
f010eb91:	01 d0                	add    %edx,%eax
f010eb93:	01 c0                	add    %eax,%eax
f010eb95:	01 d0                	add    %edx,%eax
f010eb97:	01 c0                	add    %eax,%eax
f010eb99:	01 d0                	add    %edx,%eax
f010eb9b:	c1 e0 02             	shl    $0x2,%eax
f010eb9e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010eba1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eba4:	89 02                	mov    %eax,(%edx)
		strcpy(semaphores[id].name,semaphoreName);
f010eba6:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ebac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ebaf:	89 d0                	mov    %edx,%eax
f010ebb1:	c1 e0 02             	shl    $0x2,%eax
f010ebb4:	01 d0                	add    %edx,%eax
f010ebb6:	01 c0                	add    %eax,%eax
f010ebb8:	01 d0                	add    %edx,%eax
f010ebba:	01 c0                	add    %eax,%eax
f010ebbc:	01 d0                	add    %edx,%eax
f010ebbe:	c1 e0 02             	shl    $0x2,%eax
f010ebc1:	01 c8                	add    %ecx,%eax
f010ebc3:	83 c0 04             	add    $0x4,%eax
f010ebc6:	83 ec 08             	sub    $0x8,%esp
f010ebc9:	ff 75 0c             	pushl  0xc(%ebp)
f010ebcc:	50                   	push   %eax
f010ebcd:	e8 52 2e 02 00       	call   f0131a24 <strcpy>
f010ebd2:	83 c4 10             	add    $0x10,%esp
		semaphores[id].value=initialValue;
f010ebd5:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ebdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ebde:	89 d0                	mov    %edx,%eax
f010ebe0:	c1 e0 02             	shl    $0x2,%eax
f010ebe3:	01 d0                	add    %edx,%eax
f010ebe5:	01 c0                	add    %eax,%eax
f010ebe7:	01 d0                	add    %edx,%eax
f010ebe9:	01 c0                	add    %eax,%eax
f010ebeb:	01 d0                	add    %edx,%eax
f010ebed:	c1 e0 02             	shl    $0x2,%eax
f010ebf0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ebf3:	8b 45 10             	mov    0x10(%ebp),%eax
f010ebf6:	89 42 54             	mov    %eax,0x54(%edx)
		return id;
f010ebf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ebfc:	eb 05                	jmp    f010ec03 <createSemaphore+0xc7>
	}

	return E_NO_SEMAPHORE;
f010ebfe:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010ec03:	c9                   	leave  
f010ec04:	c3                   	ret    

f010ec05 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ec05:	55                   	push   %ebp
f010ec06:	89 e5                	mov    %esp,%ebp
f010ec08:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code

	struct Env* myenv = curenv; //The calling environment
f010ec0b:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010ec10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int id=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010ec13:	83 ec 08             	sub    $0x8,%esp
f010ec16:	ff 75 0c             	pushl  0xc(%ebp)
f010ec19:	ff 75 08             	pushl  0x8(%ebp)
f010ec1c:	e8 93 fd ff ff       	call   f010e9b4 <get_semaphore_object_ID>
f010ec21:	83 c4 10             	add    $0x10,%esp
f010ec24:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(id!=E_SEMAPHORE_NOT_EXISTS)
f010ec27:	83 7d f0 f3          	cmpl   $0xfffffff3,-0x10(%ebp)
f010ec2b:	0f 84 8b 00 00 00    	je     f010ecbc <waitSemaphore+0xb7>
	{
		semaphores[id].value--;
f010ec31:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ec37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec3a:	89 d0                	mov    %edx,%eax
f010ec3c:	c1 e0 02             	shl    $0x2,%eax
f010ec3f:	01 d0                	add    %edx,%eax
f010ec41:	01 c0                	add    %eax,%eax
f010ec43:	01 d0                	add    %edx,%eax
f010ec45:	01 c0                	add    %eax,%eax
f010ec47:	01 d0                	add    %edx,%eax
f010ec49:	c1 e0 02             	shl    $0x2,%eax
f010ec4c:	01 c8                	add    %ecx,%eax
f010ec4e:	8b 50 54             	mov    0x54(%eax),%edx
f010ec51:	4a                   	dec    %edx
f010ec52:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[id].value<0)
f010ec55:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ec5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec5e:	89 d0                	mov    %edx,%eax
f010ec60:	c1 e0 02             	shl    $0x2,%eax
f010ec63:	01 d0                	add    %edx,%eax
f010ec65:	01 c0                	add    %eax,%eax
f010ec67:	01 d0                	add    %edx,%eax
f010ec69:	01 c0                	add    %eax,%eax
f010ec6b:	01 d0                	add    %edx,%eax
f010ec6d:	c1 e0 02             	shl    $0x2,%eax
f010ec70:	01 c8                	add    %ecx,%eax
f010ec72:	8b 40 54             	mov    0x54(%eax),%eax
f010ec75:	85 c0                	test   %eax,%eax
f010ec77:	79 43                	jns    f010ecbc <waitSemaphore+0xb7>
		{
			enqueue(&semaphores[id].env_queue, myenv);
f010ec79:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ec7f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec82:	89 d0                	mov    %edx,%eax
f010ec84:	c1 e0 02             	shl    $0x2,%eax
f010ec87:	01 d0                	add    %edx,%eax
f010ec89:	01 c0                	add    %eax,%eax
f010ec8b:	01 d0                	add    %edx,%eax
f010ec8d:	01 c0                	add    %eax,%eax
f010ec8f:	01 d0                	add    %edx,%eax
f010ec91:	c1 e0 02             	shl    $0x2,%eax
f010ec94:	01 c8                	add    %ecx,%eax
f010ec96:	83 c0 44             	add    $0x44,%eax
f010ec99:	83 ec 08             	sub    $0x8,%esp
f010ec9c:	ff 75 f4             	pushl  -0xc(%ebp)
f010ec9f:	50                   	push   %eax
f010eca0:	e8 57 57 ff ff       	call   f01043fc <enqueue>
f010eca5:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010eca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ecab:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			curenv=NULL;
f010ecb2:	c7 05 f4 97 86 f0 00 	movl   $0x0,0xf08697f4
f010ecb9:	00 00 00 
		}

	}
	fos_scheduler();
f010ecbc:	e8 c4 59 ff ff       	call   f0104685 <fos_scheduler>

f010ecc1 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010ecc1:	55                   	push   %ebp
f010ecc2:	89 e5                	mov    %esp,%ebp
f010ecc4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore

	struct Env* myenv = curenv; //The calling environment
f010ecc7:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f010eccc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int id=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010eccf:	83 ec 08             	sub    $0x8,%esp
f010ecd2:	ff 75 0c             	pushl  0xc(%ebp)
f010ecd5:	ff 75 08             	pushl  0x8(%ebp)
f010ecd8:	e8 d7 fc ff ff       	call   f010e9b4 <get_semaphore_object_ID>
f010ecdd:	83 c4 10             	add    $0x10,%esp
f010ece0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(id!=E_SEMAPHORE_NOT_EXISTS)
f010ece3:	83 7d f0 f3          	cmpl   $0xfffffff3,-0x10(%ebp)
f010ece7:	0f 84 8f 00 00 00    	je     f010ed7c <signalSemaphore+0xbb>
	{
		semaphores[id].value++;
f010eced:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ecf3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ecf6:	89 d0                	mov    %edx,%eax
f010ecf8:	c1 e0 02             	shl    $0x2,%eax
f010ecfb:	01 d0                	add    %edx,%eax
f010ecfd:	01 c0                	add    %eax,%eax
f010ecff:	01 d0                	add    %edx,%eax
f010ed01:	01 c0                	add    %eax,%eax
f010ed03:	01 d0                	add    %edx,%eax
f010ed05:	c1 e0 02             	shl    $0x2,%eax
f010ed08:	01 c8                	add    %ecx,%eax
f010ed0a:	8b 50 54             	mov    0x54(%eax),%edx
f010ed0d:	42                   	inc    %edx
f010ed0e:	89 50 54             	mov    %edx,0x54(%eax)
		if(semaphores[id].value<=0)
f010ed11:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ed17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ed1a:	89 d0                	mov    %edx,%eax
f010ed1c:	c1 e0 02             	shl    $0x2,%eax
f010ed1f:	01 d0                	add    %edx,%eax
f010ed21:	01 c0                	add    %eax,%eax
f010ed23:	01 d0                	add    %edx,%eax
f010ed25:	01 c0                	add    %eax,%eax
f010ed27:	01 d0                	add    %edx,%eax
f010ed29:	c1 e0 02             	shl    $0x2,%eax
f010ed2c:	01 c8                	add    %ecx,%eax
f010ed2e:	8b 40 54             	mov    0x54(%eax),%eax
f010ed31:	85 c0                	test   %eax,%eax
f010ed33:	7f 47                	jg     f010ed7c <signalSemaphore+0xbb>
		{
			myenv =dequeue(&semaphores[id].env_queue);
f010ed35:	8b 0d 0c a1 86 f0    	mov    0xf086a10c,%ecx
f010ed3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ed3e:	89 d0                	mov    %edx,%eax
f010ed40:	c1 e0 02             	shl    $0x2,%eax
f010ed43:	01 d0                	add    %edx,%eax
f010ed45:	01 c0                	add    %eax,%eax
f010ed47:	01 d0                	add    %edx,%eax
f010ed49:	01 c0                	add    %eax,%eax
f010ed4b:	01 d0                	add    %edx,%eax
f010ed4d:	c1 e0 02             	shl    $0x2,%eax
f010ed50:	01 c8                	add    %ecx,%eax
f010ed52:	83 c0 44             	add    $0x44,%eax
f010ed55:	83 ec 0c             	sub    $0xc,%esp
f010ed58:	50                   	push   %eax
f010ed59:	e8 2f 57 ff ff       	call   f010448d <dequeue>
f010ed5e:	83 c4 10             	add    $0x10,%esp
f010ed61:	89 45 f4             	mov    %eax,-0xc(%ebp)
			sched_insert_ready(myenv);
f010ed64:	83 ec 0c             	sub    $0xc,%esp
f010ed67:	ff 75 f4             	pushl  -0xc(%ebp)
f010ed6a:	e8 3c 5b ff ff       	call   f01048ab <sched_insert_ready>
f010ed6f:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_READY;
f010ed72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed75:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)

		}
	}
}
f010ed7c:	90                   	nop
f010ed7d:	c9                   	leave  
f010ed7e:	c3                   	ret    

f010ed7f <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010ed7f:	55                   	push   %ebp
f010ed80:	89 e5                	mov    %esp,%ebp
f010ed82:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010ed85:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ed8c:	83 ec 0c             	sub    $0xc,%esp
f010ed8f:	ff 75 ec             	pushl  -0x14(%ebp)
f010ed92:	e8 a8 37 02 00       	call   f013253f <initialize_MemBlocksList>
f010ed97:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010ed9a:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010ed9f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010eda2:	74 17                	je     f010edbb <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010eda4:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010eda9:	50                   	push   %eax
f010edaa:	68 c0 7e 13 f0       	push   $0xf0137ec0
f010edaf:	6a 1f                	push   $0x1f
f010edb1:	68 14 7f 13 f0       	push   $0xf0137f14
f010edb6:	e8 4a 14 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edbb:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010edc0:	85 c0                	test   %eax,%eax
f010edc2:	74 17                	je     f010eddb <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010edc4:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010edc9:	50                   	push   %eax
f010edca:	68 38 7f 13 f0       	push   $0xf0137f38
f010edcf:	6a 26                	push   $0x26
f010edd1:	68 14 7f 13 f0       	push   $0xf0137f14
f010edd6:	e8 2a 14 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010eddb:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010ede0:	85 c0                	test   %eax,%eax
f010ede2:	74 17                	je     f010edfb <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010ede4:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010ede9:	50                   	push   %eax
f010edea:	68 88 7f 13 f0       	push   $0xf0137f88
f010edef:	6a 2c                	push   $0x2c
f010edf1:	68 14 7f 13 f0       	push   $0xf0137f14
f010edf6:	e8 0a 14 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010edfb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ee02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee09:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f010ee0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee11:	eb 29                	jmp    f010ee3c <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010ee13:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010ee16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee19:	8b 50 0c             	mov    0xc(%eax),%edx
f010ee1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee1f:	8b 40 08             	mov    0x8(%eax),%eax
f010ee22:	83 ec 04             	sub    $0x4,%esp
f010ee25:	52                   	push   %edx
f010ee26:	50                   	push   %eax
f010ee27:	68 d8 7f 13 f0       	push   $0xf0137fd8
f010ee2c:	e8 dd 1e ff ff       	call   f0100d0e <cprintf>
f010ee31:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee34:	a1 a0 a1 86 f0       	mov    0xf086a1a0,%eax
f010ee39:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee40:	74 07                	je     f010ee49 <test_initialize_MemBlocksList+0xca>
f010ee42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee45:	8b 00                	mov    (%eax),%eax
f010ee47:	eb 05                	jmp    f010ee4e <test_initialize_MemBlocksList+0xcf>
f010ee49:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee4e:	a3 a0 a1 86 f0       	mov    %eax,0xf086a1a0
f010ee53:	a1 a0 a1 86 f0       	mov    0xf086a1a0,%eax
f010ee58:	85 c0                	test   %eax,%eax
f010ee5a:	75 b7                	jne    f010ee13 <test_initialize_MemBlocksList+0x94>
f010ee5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee60:	75 b1                	jne    f010ee13 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ee62:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010ee67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee6a:	74 14                	je     f010ee80 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ee6c:	83 ec 04             	sub    $0x4,%esp
f010ee6f:	68 f8 7f 13 f0       	push   $0xf0137ff8
f010ee74:	6a 38                	push   $0x38
f010ee76:	68 14 7f 13 f0       	push   $0xf0137f14
f010ee7b:	e8 85 13 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ee80:	83 ec 0c             	sub    $0xc,%esp
f010ee83:	68 50 80 13 f0       	push   $0xf0138050
f010ee88:	e8 81 1e ff ff       	call   f0100d0e <cprintf>
f010ee8d:	83 c4 10             	add    $0x10,%esp
}
f010ee90:	90                   	nop
f010ee91:	c9                   	leave  
f010ee92:	c3                   	ret    

f010ee93 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010ee93:	55                   	push   %ebp
f010ee94:	89 e5                	mov    %esp,%ebp
f010ee96:	57                   	push   %edi
f010ee97:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010ee9d:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eea4:	83 ec 0c             	sub    $0xc,%esp
f010eea7:	ff 75 f4             	pushl  -0xc(%ebp)
f010eeaa:	e8 90 36 02 00       	call   f013253f <initialize_MemBlocksList>
f010eeaf:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eeb2:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f010eeb9:	00 00 00 
f010eebc:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f010eec3:	00 00 00 
f010eec6:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f010eecd:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010eed0:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f010eed7:	00 00 00 
f010eeda:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f010eee1:	00 00 00 
f010eee4:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f010eeeb:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010eeee:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010eef1:	b9 05 00 00 00       	mov    $0x5,%ecx
f010eef6:	b8 00 00 00 00       	mov    $0x0,%eax
f010eefb:	89 d7                	mov    %edx,%edi
f010eefd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010eeff:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ef02:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef07:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef0c:	89 d7                	mov    %edx,%edi
f010ef0e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ef10:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010ef17:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010ef1e:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010ef25:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010ef2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef2f:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010ef32:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ef35:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010ef38:	83 ec 0c             	sub    $0xc,%esp
f010ef3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ef3e:	50                   	push   %eax
f010ef3f:	e8 30 37 02 00       	call   f0132674 <insert_sorted_allocList>
f010ef44:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010ef47:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ef4e:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010ef53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef56:	74 14                	je     f010ef6c <test_insert_sorted_allocList+0xd9>
f010ef58:	83 ec 04             	sub    $0x4,%esp
f010ef5b:	68 9c 80 13 f0       	push   $0xf013809c
f010ef60:	6a 56                	push   $0x56
f010ef62:	68 14 7f 13 f0       	push   $0xf0137f14
f010ef67:	e8 99 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ef6c:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010ef71:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef74:	74 14                	je     f010ef8a <test_insert_sorted_allocList+0xf7>
f010ef76:	83 ec 04             	sub    $0x4,%esp
f010ef79:	68 e8 80 13 f0       	push   $0xf01380e8
f010ef7e:	6a 59                	push   $0x59
f010ef80:	68 14 7f 13 f0       	push   $0xf0137f14
f010ef85:	e8 7b 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ef8a:	83 ec 0c             	sub    $0xc,%esp
f010ef8d:	ff 75 f0             	pushl  -0x10(%ebp)
f010ef90:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ef93:	50                   	push   %eax
f010ef94:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ef97:	50                   	push   %eax
f010ef98:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ef9b:	50                   	push   %eax
f010ef9c:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010efa1:	e8 7d 26 00 00       	call   f0111623 <check_list_data>
f010efa6:	83 c4 20             	add    $0x20,%esp
f010efa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010efac:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010efb0:	74 14                	je     f010efc6 <test_insert_sorted_allocList+0x133>
f010efb2:	83 ec 04             	sub    $0x4,%esp
f010efb5:	68 38 81 13 f0       	push   $0xf0138138
f010efba:	6a 5d                	push   $0x5d
f010efbc:	68 14 7f 13 f0       	push   $0xf0137f14
f010efc1:	e8 3f 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010efc6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efc9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efcc:	74 14                	je     f010efe2 <test_insert_sorted_allocList+0x14f>
f010efce:	83 ec 04             	sub    $0x4,%esp
f010efd1:	68 88 81 13 f0       	push   $0xf0138188
f010efd6:	6a 5e                	push   $0x5e
f010efd8:	68 14 7f 13 f0       	push   $0xf0137f14
f010efdd:	e8 23 12 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010efe2:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010efe9:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010eff0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010eff3:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010eff6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eff9:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010effc:	83 ec 0c             	sub    $0xc,%esp
f010efff:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f002:	50                   	push   %eax
f010f003:	e8 6c 36 02 00       	call   f0132674 <insert_sorted_allocList>
f010f008:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010f00b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f012:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f017:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f01a:	74 14                	je     f010f030 <test_insert_sorted_allocList+0x19d>
f010f01c:	83 ec 04             	sub    $0x4,%esp
f010f01f:	68 9c 80 13 f0       	push   $0xf013809c
f010f024:	6a 6d                	push   $0x6d
f010f026:	68 14 7f 13 f0       	push   $0xf0137f14
f010f02b:	e8 d5 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f030:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f035:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f038:	74 14                	je     f010f04e <test_insert_sorted_allocList+0x1bb>
f010f03a:	83 ec 04             	sub    $0x4,%esp
f010f03d:	68 e8 80 13 f0       	push   $0xf01380e8
f010f042:	6a 70                	push   $0x70
f010f044:	68 14 7f 13 f0       	push   $0xf0137f14
f010f049:	e8 b7 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f04e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f055:	83 ec 0c             	sub    $0xc,%esp
f010f058:	ff 75 f0             	pushl  -0x10(%ebp)
f010f05b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f05e:	50                   	push   %eax
f010f05f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f062:	50                   	push   %eax
f010f063:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f066:	50                   	push   %eax
f010f067:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f06c:	e8 b2 25 00 00       	call   f0111623 <check_list_data>
f010f071:	83 c4 20             	add    $0x20,%esp
f010f074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f077:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f07b:	74 14                	je     f010f091 <test_insert_sorted_allocList+0x1fe>
f010f07d:	83 ec 04             	sub    $0x4,%esp
f010f080:	68 38 81 13 f0       	push   $0xf0138138
f010f085:	6a 75                	push   $0x75
f010f087:	68 14 7f 13 f0       	push   $0xf0137f14
f010f08c:	e8 74 11 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f091:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f094:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f097:	74 14                	je     f010f0ad <test_insert_sorted_allocList+0x21a>
f010f099:	83 ec 04             	sub    $0x4,%esp
f010f09c:	68 88 81 13 f0       	push   $0xf0138188
f010f0a1:	6a 76                	push   $0x76
f010f0a3:	68 14 7f 13 f0       	push   $0xf0137f14
f010f0a8:	e8 58 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010f0ad:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010f0b4:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010f0bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f0be:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010f0c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f0c4:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010f0c7:	83 ec 0c             	sub    $0xc,%esp
f010f0ca:	8d 45 90             	lea    -0x70(%ebp),%eax
f010f0cd:	50                   	push   %eax
f010f0ce:	e8 a1 35 02 00       	call   f0132674 <insert_sorted_allocList>
f010f0d3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010f0d6:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f0dd:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f0e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0e5:	74 17                	je     f010f0fe <test_insert_sorted_allocList+0x26b>
f010f0e7:	83 ec 04             	sub    $0x4,%esp
f010f0ea:	68 9c 80 13 f0       	push   $0xf013809c
f010f0ef:	68 85 00 00 00       	push   $0x85
f010f0f4:	68 14 7f 13 f0       	push   $0xf0137f14
f010f0f9:	e8 07 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010f0fe:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f103:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f106:	74 17                	je     f010f11f <test_insert_sorted_allocList+0x28c>
f010f108:	83 ec 04             	sub    $0x4,%esp
f010f10b:	68 d4 81 13 f0       	push   $0xf01381d4
f010f110:	68 88 00 00 00       	push   $0x88
f010f115:	68 14 7f 13 f0       	push   $0xf0137f14
f010f11a:	e8 e6 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f11f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f126:	83 ec 0c             	sub    $0xc,%esp
f010f129:	ff 75 f0             	pushl  -0x10(%ebp)
f010f12c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f12f:	50                   	push   %eax
f010f130:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f133:	50                   	push   %eax
f010f134:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f137:	50                   	push   %eax
f010f138:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f13d:	e8 e1 24 00 00       	call   f0111623 <check_list_data>
f010f142:	83 c4 20             	add    $0x20,%esp
f010f145:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f148:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f14c:	74 17                	je     f010f165 <test_insert_sorted_allocList+0x2d2>
f010f14e:	83 ec 04             	sub    $0x4,%esp
f010f151:	68 38 81 13 f0       	push   $0xf0138138
f010f156:	68 8d 00 00 00       	push   $0x8d
f010f15b:	68 14 7f 13 f0       	push   $0xf0137f14
f010f160:	e8 a0 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f165:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f168:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f16b:	74 17                	je     f010f184 <test_insert_sorted_allocList+0x2f1>
f010f16d:	83 ec 04             	sub    $0x4,%esp
f010f170:	68 88 81 13 f0       	push   $0xf0138188
f010f175:	68 8e 00 00 00       	push   $0x8e
f010f17a:	68 14 7f 13 f0       	push   $0xf0137f14
f010f17f:	e8 81 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010f184:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010f18b:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010f192:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f195:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010f198:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f19b:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010f19e:	83 ec 0c             	sub    $0xc,%esp
f010f1a1:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f1a4:	50                   	push   %eax
f010f1a5:	e8 ca 34 02 00       	call   f0132674 <insert_sorted_allocList>
f010f1aa:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010f1ad:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f1b4:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f1b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1bc:	74 17                	je     f010f1d5 <test_insert_sorted_allocList+0x342>
f010f1be:	83 ec 04             	sub    $0x4,%esp
f010f1c1:	68 9c 80 13 f0       	push   $0xf013809c
f010f1c6:	68 9c 00 00 00       	push   $0x9c
f010f1cb:	68 14 7f 13 f0       	push   $0xf0137f14
f010f1d0:	e8 30 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f1d5:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f1da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f1dd:	74 17                	je     f010f1f6 <test_insert_sorted_allocList+0x363>
f010f1df:	83 ec 04             	sub    $0x4,%esp
f010f1e2:	68 e8 80 13 f0       	push   $0xf01380e8
f010f1e7:	68 9f 00 00 00       	push   $0x9f
f010f1ec:	68 14 7f 13 f0       	push   $0xf0137f14
f010f1f1:	e8 0f 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f1f6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f1fd:	83 ec 0c             	sub    $0xc,%esp
f010f200:	ff 75 f0             	pushl  -0x10(%ebp)
f010f203:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f206:	50                   	push   %eax
f010f207:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f20a:	50                   	push   %eax
f010f20b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f20e:	50                   	push   %eax
f010f20f:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f214:	e8 0a 24 00 00       	call   f0111623 <check_list_data>
f010f219:	83 c4 20             	add    $0x20,%esp
f010f21c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f21f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f223:	74 17                	je     f010f23c <test_insert_sorted_allocList+0x3a9>
f010f225:	83 ec 04             	sub    $0x4,%esp
f010f228:	68 38 81 13 f0       	push   $0xf0138138
f010f22d:	68 a4 00 00 00       	push   $0xa4
f010f232:	68 14 7f 13 f0       	push   $0xf0137f14
f010f237:	e8 c9 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f23c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f23f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f242:	74 17                	je     f010f25b <test_insert_sorted_allocList+0x3c8>
f010f244:	83 ec 04             	sub    $0x4,%esp
f010f247:	68 88 81 13 f0       	push   $0xf0138188
f010f24c:	68 a5 00 00 00       	push   $0xa5
f010f251:	68 14 7f 13 f0       	push   $0xf0137f14
f010f256:	e8 aa 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010f25b:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010f262:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010f269:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f26c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010f272:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f275:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010f27b:	83 ec 0c             	sub    $0xc,%esp
f010f27e:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010f284:	50                   	push   %eax
f010f285:	e8 ea 33 02 00       	call   f0132674 <insert_sorted_allocList>
f010f28a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010f28d:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f294:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f299:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f29c:	74 17                	je     f010f2b5 <test_insert_sorted_allocList+0x422>
f010f29e:	83 ec 04             	sub    $0x4,%esp
f010f2a1:	68 9c 80 13 f0       	push   $0xf013809c
f010f2a6:	68 b3 00 00 00       	push   $0xb3
f010f2ab:	68 14 7f 13 f0       	push   $0xf0137f14
f010f2b0:	e8 50 0f ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f2b5:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f2ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f2bd:	74 17                	je     f010f2d6 <test_insert_sorted_allocList+0x443>
f010f2bf:	83 ec 04             	sub    $0x4,%esp
f010f2c2:	68 e8 80 13 f0       	push   $0xf01380e8
f010f2c7:	68 b6 00 00 00       	push   $0xb6
f010f2cc:	68 14 7f 13 f0       	push   $0xf0137f14
f010f2d1:	e8 2f 0f ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f2d6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f2dd:	83 ec 0c             	sub    $0xc,%esp
f010f2e0:	ff 75 f0             	pushl  -0x10(%ebp)
f010f2e3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f2e6:	50                   	push   %eax
f010f2e7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f2ea:	50                   	push   %eax
f010f2eb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f2ee:	50                   	push   %eax
f010f2ef:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f2f4:	e8 2a 23 00 00       	call   f0111623 <check_list_data>
f010f2f9:	83 c4 20             	add    $0x20,%esp
f010f2fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f2ff:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f303:	74 17                	je     f010f31c <test_insert_sorted_allocList+0x489>
f010f305:	83 ec 04             	sub    $0x4,%esp
f010f308:	68 38 81 13 f0       	push   $0xf0138138
f010f30d:	68 bb 00 00 00       	push   $0xbb
f010f312:	68 14 7f 13 f0       	push   $0xf0137f14
f010f317:	e8 e9 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f31c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f31f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f322:	74 17                	je     f010f33b <test_insert_sorted_allocList+0x4a8>
f010f324:	83 ec 04             	sub    $0x4,%esp
f010f327:	68 88 81 13 f0       	push   $0xf0138188
f010f32c:	68 bc 00 00 00       	push   $0xbc
f010f331:	68 14 7f 13 f0       	push   $0xf0137f14
f010f336:	e8 ca 0e ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f33b:	83 ec 0c             	sub    $0xc,%esp
f010f33e:	68 24 82 13 f0       	push   $0xf0138224
f010f343:	e8 c6 19 ff ff       	call   f0100d0e <cprintf>
f010f348:	83 c4 10             	add    $0x10,%esp
}
f010f34b:	90                   	nop
f010f34c:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f34f:	c9                   	leave  
f010f350:	c3                   	ret    

f010f351 <test_find_block>:

void test_find_block()
{
f010f351:	55                   	push   %ebp
f010f352:	89 e5                	mov    %esp,%ebp
f010f354:	57                   	push   %edi
f010f355:	56                   	push   %esi
f010f356:	53                   	push   %ebx
f010f357:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f35d:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f364:	83 ec 0c             	sub    $0xc,%esp
f010f367:	ff 75 e0             	pushl  -0x20(%ebp)
f010f36a:	e8 d0 31 02 00       	call   f013253f <initialize_MemBlocksList>
f010f36f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f372:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f010f379:	00 00 00 
f010f37c:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f010f383:	00 00 00 
f010f386:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f010f38d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f390:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f393:	bb 9c 83 13 f0       	mov    $0xf013839c,%ebx
f010f398:	ba 06 00 00 00       	mov    $0x6,%edx
f010f39d:	89 c7                	mov    %eax,%edi
f010f39f:	89 de                	mov    %ebx,%esi
f010f3a1:	89 d1                	mov    %edx,%ecx
f010f3a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f3a5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f3a8:	bb b4 83 13 f0       	mov    $0xf01383b4,%ebx
f010f3ad:	ba 06 00 00 00       	mov    $0x6,%edx
f010f3b2:	89 c7                	mov    %eax,%edi
f010f3b4:	89 de                	mov    %ebx,%esi
f010f3b6:	89 d1                	mov    %edx,%ecx
f010f3b8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f3ba:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f010f3c1:	00 00 00 
f010f3c4:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f010f3cb:	00 00 00 
f010f3ce:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f010f3d5:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f3d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f3df:	e9 5f 01 00 00       	jmp    f010f543 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f3e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3e7:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f3eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f3ee:	c1 e2 04             	shl    $0x4,%edx
f010f3f1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f3f4:	01 da                	add    %ebx,%edx
f010f3f6:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f3fc:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f3fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f401:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f405:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f408:	c1 e2 04             	shl    $0x4,%edx
f010f40b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f40e:	01 f2                	add    %esi,%edx
f010f410:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f416:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f418:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f41c:	0f 85 92 00 00 00    	jne    f010f4b4 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f422:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f010f427:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f42a:	c1 e2 04             	shl    $0x4,%edx
f010f42d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f430:	01 fa                	add    %edi,%edx
f010f432:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f438:	89 02                	mov    %eax,(%edx)
f010f43a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f43d:	c1 e0 04             	shl    $0x4,%eax
f010f440:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f443:	01 d8                	add    %ebx,%eax
f010f445:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f44a:	8b 00                	mov    (%eax),%eax
f010f44c:	85 c0                	test   %eax,%eax
f010f44e:	74 18                	je     f010f468 <test_find_block+0x117>
f010f450:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f010f455:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f45b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f45e:	c1 e1 04             	shl    $0x4,%ecx
f010f461:	01 ca                	add    %ecx,%edx
f010f463:	89 50 04             	mov    %edx,0x4(%eax)
f010f466:	eb 13                	jmp    f010f47b <test_find_block+0x12a>
f010f468:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f46e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f471:	c1 e2 04             	shl    $0x4,%edx
f010f474:	01 d0                	add    %edx,%eax
f010f476:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f010f47b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f481:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f484:	c1 e2 04             	shl    $0x4,%edx
f010f487:	01 d0                	add    %edx,%eax
f010f489:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f010f48e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f491:	c1 e0 04             	shl    $0x4,%eax
f010f494:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f497:	01 f0                	add    %esi,%eax
f010f499:	2d 98 00 00 00       	sub    $0x98,%eax
f010f49e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f4a4:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f4a9:	40                   	inc    %eax
f010f4aa:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
f010f4af:	e9 8c 00 00 00       	jmp    f010f540 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f4b4:	a1 cc a0 86 f0       	mov    0xf086a0cc,%eax
f010f4b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4bc:	c1 e2 04             	shl    $0x4,%edx
f010f4bf:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4c2:	01 fa                	add    %edi,%edx
f010f4c4:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f4ca:	89 02                	mov    %eax,(%edx)
f010f4cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4cf:	c1 e0 04             	shl    $0x4,%eax
f010f4d2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4d5:	01 d8                	add    %ebx,%eax
f010f4d7:	2d 98 00 00 00       	sub    $0x98,%eax
f010f4dc:	8b 00                	mov    (%eax),%eax
f010f4de:	85 c0                	test   %eax,%eax
f010f4e0:	74 17                	je     f010f4f9 <test_find_block+0x1a8>
f010f4e2:	a1 cc a0 86 f0       	mov    0xf086a0cc,%eax
f010f4e7:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f4ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4f0:	c1 e1 04             	shl    $0x4,%ecx
f010f4f3:	01 ca                	add    %ecx,%edx
f010f4f5:	89 10                	mov    %edx,(%eax)
f010f4f7:	eb 13                	jmp    f010f50c <test_find_block+0x1bb>
f010f4f9:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f4ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f502:	c1 e2 04             	shl    $0x4,%edx
f010f505:	01 d0                	add    %edx,%eax
f010f507:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f010f50c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f512:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f515:	c1 e2 04             	shl    $0x4,%edx
f010f518:	01 d0                	add    %edx,%eax
f010f51a:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f010f51f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f522:	c1 e0 04             	shl    $0x4,%eax
f010f525:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f528:	01 f0                	add    %esi,%eax
f010f52a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f52f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f535:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f53a:	40                   	inc    %eax
f010f53b:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f540:	ff 45 e4             	incl   -0x1c(%ebp)
f010f543:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f547:	0f 8e 97 fe ff ff    	jle    f010f3e4 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f54d:	83 ec 08             	sub    $0x8,%esp
f010f550:	68 00 10 00 00       	push   $0x1000
f010f555:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f55a:	e8 bd 30 02 00       	call   f013261c <find_block>
f010f55f:	83 c4 10             	add    $0x10,%esp
f010f562:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f565:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f569:	74 17                	je     f010f582 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f56b:	83 ec 04             	sub    $0x4,%esp
f010f56e:	68 64 82 13 f0       	push   $0xf0138264
f010f573:	68 de 00 00 00       	push   $0xde
f010f578:	68 14 7f 13 f0       	push   $0xf0137f14
f010f57d:	e8 83 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f582:	83 ec 08             	sub    $0x8,%esp
f010f585:	6a 00                	push   $0x0
f010f587:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f58c:	e8 8b 30 02 00       	call   f013261c <find_block>
f010f591:	83 c4 10             	add    $0x10,%esp
f010f594:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f597:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f59b:	74 17                	je     f010f5b4 <test_find_block+0x263>
f010f59d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5a0:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5a3:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f5a8:	75 0a                	jne    f010f5b4 <test_find_block+0x263>
f010f5aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5ad:	8b 40 08             	mov    0x8(%eax),%eax
f010f5b0:	85 c0                	test   %eax,%eax
f010f5b2:	74 17                	je     f010f5cb <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f5b4:	83 ec 04             	sub    $0x4,%esp
f010f5b7:	68 c8 82 13 f0       	push   $0xf01382c8
f010f5bc:	68 e3 00 00 00       	push   $0xe3
f010f5c1:	68 14 7f 13 f0       	push   $0xf0137f14
f010f5c6:	e8 3a 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f5cb:	83 ec 08             	sub    $0x8,%esp
f010f5ce:	68 00 70 00 00       	push   $0x7000
f010f5d3:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f5d8:	e8 3f 30 02 00       	call   f013261c <find_block>
f010f5dd:	83 c4 10             	add    $0x10,%esp
f010f5e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f5e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5e7:	74 1a                	je     f010f603 <test_find_block+0x2b2>
f010f5e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5ec:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5ef:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f5f4:	75 0d                	jne    f010f603 <test_find_block+0x2b2>
f010f5f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5f9:	8b 40 08             	mov    0x8(%eax),%eax
f010f5fc:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f601:	74 17                	je     f010f61a <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f603:	83 ec 04             	sub    $0x4,%esp
f010f606:	68 c8 82 13 f0       	push   $0xf01382c8
f010f60b:	68 e8 00 00 00       	push   $0xe8
f010f610:	68 14 7f 13 f0       	push   $0xf0137f14
f010f615:	e8 eb 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f61a:	83 ec 08             	sub    $0x8,%esp
f010f61d:	68 00 a4 01 00       	push   $0x1a400
f010f622:	68 c8 a0 86 f0       	push   $0xf086a0c8
f010f627:	e8 f0 2f 02 00       	call   f013261c <find_block>
f010f62c:	83 c4 10             	add    $0x10,%esp
f010f62f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f632:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f636:	74 1a                	je     f010f652 <test_find_block+0x301>
f010f638:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f63b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f63e:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f643:	75 0d                	jne    f010f652 <test_find_block+0x301>
f010f645:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f648:	8b 40 08             	mov    0x8(%eax),%eax
f010f64b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f650:	74 17                	je     f010f669 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f652:	83 ec 04             	sub    $0x4,%esp
f010f655:	68 c8 82 13 f0       	push   $0xf01382c8
f010f65a:	68 ed 00 00 00       	push   $0xed
f010f65f:	68 14 7f 13 f0       	push   $0xf0137f14
f010f664:	e8 9c 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f669:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f66e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f671:	75 09                	jne    f010f67c <test_find_block+0x32b>
f010f673:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010f678:	85 c0                	test   %eax,%eax
f010f67a:	74 17                	je     f010f693 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f67c:	83 ec 04             	sub    $0x4,%esp
f010f67f:	68 fc 82 13 f0       	push   $0xf01382fc
f010f684:	68 f2 00 00 00       	push   $0xf2
f010f689:	68 14 7f 13 f0       	push   $0xf0137f14
f010f68e:	e8 72 0b ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f693:	83 ec 0c             	sub    $0xc,%esp
f010f696:	68 60 83 13 f0       	push   $0xf0138360
f010f69b:	e8 6e 16 ff ff       	call   f0100d0e <cprintf>
f010f6a0:	83 c4 10             	add    $0x10,%esp
}
f010f6a3:	90                   	nop
f010f6a4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6a7:	5b                   	pop    %ebx
f010f6a8:	5e                   	pop    %esi
f010f6a9:	5f                   	pop    %edi
f010f6aa:	5d                   	pop    %ebp
f010f6ab:	c3                   	ret    

f010f6ac <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f6ac:	55                   	push   %ebp
f010f6ad:	89 e5                	mov    %esp,%ebp
f010f6af:	57                   	push   %edi
f010f6b0:	56                   	push   %esi
f010f6b1:	53                   	push   %ebx
f010f6b2:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f6b8:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f6bf:	83 ec 0c             	sub    $0xc,%esp
f010f6c2:	ff 75 e0             	pushl  -0x20(%ebp)
f010f6c5:	e8 75 2e 02 00       	call   f013253f <initialize_MemBlocksList>
f010f6ca:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f6cd:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f010f6d4:	00 00 00 
f010f6d7:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f010f6de:	00 00 00 
f010f6e1:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f010f6e8:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f6eb:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f6ee:	bb 40 86 13 f0       	mov    $0xf0138640,%ebx
f010f6f3:	ba 08 00 00 00       	mov    $0x8,%edx
f010f6f8:	89 c7                	mov    %eax,%edi
f010f6fa:	89 de                	mov    %ebx,%esi
f010f6fc:	89 d1                	mov    %edx,%ecx
f010f6fe:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f700:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f703:	bb 60 86 13 f0       	mov    $0xf0138660,%ebx
f010f708:	ba 08 00 00 00       	mov    $0x8,%edx
f010f70d:	89 c7                	mov    %eax,%edi
f010f70f:	89 de                	mov    %ebx,%esi
f010f711:	89 d1                	mov    %edx,%ecx
f010f713:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f715:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f010f71c:	00 00 00 
f010f71f:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f010f726:	00 00 00 
f010f729:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f010f730:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f733:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f73a:	e9 5f 01 00 00       	jmp    f010f89e <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f73f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f742:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f746:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f749:	c1 e2 04             	shl    $0x4,%edx
f010f74c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f74f:	01 da                	add    %ebx,%edx
f010f751:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f757:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f759:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f75c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f760:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f763:	c1 e2 04             	shl    $0x4,%edx
f010f766:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f769:	01 f2                	add    %esi,%edx
f010f76b:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f771:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f773:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f777:	0f 85 92 00 00 00    	jne    f010f80f <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f77d:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f010f782:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f785:	c1 e2 04             	shl    $0x4,%edx
f010f788:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f78b:	01 fa                	add    %edi,%edx
f010f78d:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f793:	89 02                	mov    %eax,(%edx)
f010f795:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f798:	c1 e0 04             	shl    $0x4,%eax
f010f79b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f79e:	01 d8                	add    %ebx,%eax
f010f7a0:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f7a5:	8b 00                	mov    (%eax),%eax
f010f7a7:	85 c0                	test   %eax,%eax
f010f7a9:	74 18                	je     f010f7c3 <test_alloc_block_FF+0x117>
f010f7ab:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f010f7b0:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f7b6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f7b9:	c1 e1 04             	shl    $0x4,%ecx
f010f7bc:	01 ca                	add    %ecx,%edx
f010f7be:	89 50 04             	mov    %edx,0x4(%eax)
f010f7c1:	eb 13                	jmp    f010f7d6 <test_alloc_block_FF+0x12a>
f010f7c3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7cc:	c1 e2 04             	shl    $0x4,%edx
f010f7cf:	01 d0                	add    %edx,%eax
f010f7d1:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f010f7d6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7df:	c1 e2 04             	shl    $0x4,%edx
f010f7e2:	01 d0                	add    %edx,%eax
f010f7e4:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f010f7e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7ec:	c1 e0 04             	shl    $0x4,%eax
f010f7ef:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7f2:	01 f0                	add    %esi,%eax
f010f7f4:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f7f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f7ff:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010f804:	40                   	inc    %eax
f010f805:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
f010f80a:	e9 8c 00 00 00       	jmp    f010f89b <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f80f:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f010f814:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f817:	c1 e2 04             	shl    $0x4,%edx
f010f81a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f81d:	01 fa                	add    %edi,%edx
f010f81f:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f825:	89 02                	mov    %eax,(%edx)
f010f827:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f82a:	c1 e0 04             	shl    $0x4,%eax
f010f82d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f830:	01 d8                	add    %ebx,%eax
f010f832:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f837:	8b 00                	mov    (%eax),%eax
f010f839:	85 c0                	test   %eax,%eax
f010f83b:	74 17                	je     f010f854 <test_alloc_block_FF+0x1a8>
f010f83d:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f010f842:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f848:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f84b:	c1 e1 04             	shl    $0x4,%ecx
f010f84e:	01 ca                	add    %ecx,%edx
f010f850:	89 10                	mov    %edx,(%eax)
f010f852:	eb 13                	jmp    f010f867 <test_alloc_block_FF+0x1bb>
f010f854:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f85a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f85d:	c1 e2 04             	shl    $0x4,%edx
f010f860:	01 d0                	add    %edx,%eax
f010f862:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f010f867:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f86d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f870:	c1 e2 04             	shl    $0x4,%edx
f010f873:	01 d0                	add    %edx,%eax
f010f875:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f010f87a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f87d:	c1 e0 04             	shl    $0x4,%eax
f010f880:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f883:	01 f0                	add    %esi,%eax
f010f885:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f88a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f890:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010f895:	40                   	inc    %eax
f010f896:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f89b:	ff 45 e4             	incl   -0x1c(%ebp)
f010f89e:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f8a2:	0f 8e 97 fe ff ff    	jle    f010f73f <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f8a8:	83 ec 0c             	sub    $0xc,%esp
f010f8ab:	68 00 00 30 00       	push   $0x300000
f010f8b0:	e8 bf 2f 02 00       	call   f0132874 <alloc_block_FF>
f010f8b5:	83 c4 10             	add    $0x10,%esp
f010f8b8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f8bb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8bf:	74 17                	je     f010f8d8 <test_alloc_block_FF+0x22c>
f010f8c1:	83 ec 04             	sub    $0x4,%esp
f010f8c4:	68 cc 83 13 f0       	push   $0xf01383cc
f010f8c9:	68 15 01 00 00       	push   $0x115
f010f8ce:	68 14 7f 13 f0       	push   $0xf0137f14
f010f8d3:	e8 2d 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f8d8:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f8dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f8e0:	75 13                	jne    f010f8f5 <test_alloc_block_FF+0x249>
f010f8e2:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010f8e7:	83 f8 08             	cmp    $0x8,%eax
f010f8ea:	75 09                	jne    f010f8f5 <test_alloc_block_FF+0x249>
f010f8ec:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f8f1:	85 c0                	test   %eax,%eax
f010f8f3:	74 17                	je     f010f90c <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f8f5:	83 ec 04             	sub    $0x4,%esp
f010f8f8:	68 40 84 13 f0       	push   $0xf0138440
f010f8fd:	68 19 01 00 00       	push   $0x119
f010f902:	68 14 7f 13 f0       	push   $0xf0137f14
f010f907:	e8 f9 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f90c:	83 ec 0c             	sub    $0xc,%esp
f010f90f:	68 00 24 00 00       	push   $0x2400
f010f914:	e8 5b 2f 02 00       	call   f0132874 <alloc_block_FF>
f010f919:	83 c4 10             	add    $0x10,%esp
f010f91c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f91f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f923:	74 1a                	je     f010f93f <test_alloc_block_FF+0x293>
f010f925:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f928:	8b 40 0c             	mov    0xc(%eax),%eax
f010f92b:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f930:	75 0d                	jne    f010f93f <test_alloc_block_FF+0x293>
f010f932:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f935:	8b 40 08             	mov    0x8(%eax),%eax
f010f938:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f93d:	74 17                	je     f010f956 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f93f:	83 ec 04             	sub    $0x4,%esp
f010f942:	68 b8 84 13 f0       	push   $0xf01384b8
f010f947:	68 21 01 00 00       	push   $0x121
f010f94c:	68 14 7f 13 f0       	push   $0xf0137f14
f010f951:	e8 af 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f956:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010f95b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f95e:	75 13                	jne    f010f973 <test_alloc_block_FF+0x2c7>
f010f960:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010f965:	83 f8 07             	cmp    $0x7,%eax
f010f968:	75 09                	jne    f010f973 <test_alloc_block_FF+0x2c7>
f010f96a:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010f96f:	85 c0                	test   %eax,%eax
f010f971:	74 17                	je     f010f98a <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f973:	83 ec 04             	sub    $0x4,%esp
f010f976:	68 fc 84 13 f0       	push   $0xf01384fc
f010f97b:	68 25 01 00 00       	push   $0x125
f010f980:	68 14 7f 13 f0       	push   $0xf0137f14
f010f985:	e8 7b 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f98a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f991:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f994:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f99b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f9a2:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9a9:	83 ec 0c             	sub    $0xc,%esp
f010f9ac:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9af:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9b5:	50                   	push   %eax
f010f9b6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9b9:	50                   	push   %eax
f010f9ba:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9bd:	50                   	push   %eax
f010f9be:	68 64 a1 86 f0       	push   $0xf086a164
f010f9c3:	e8 5b 1c 00 00       	call   f0111623 <check_list_data>
f010f9c8:	83 c4 20             	add    $0x20,%esp
f010f9cb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9ce:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f9d2:	74 17                	je     f010f9eb <test_alloc_block_FF+0x33f>
f010f9d4:	83 ec 04             	sub    $0x4,%esp
f010f9d7:	68 60 85 13 f0       	push   $0xf0138560
f010f9dc:	68 2d 01 00 00       	push   $0x12d
f010f9e1:	68 14 7f 13 f0       	push   $0xf0137f14
f010f9e6:	e8 1a 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f9eb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f9f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f9f4:	74 17                	je     f010fa0d <test_alloc_block_FF+0x361>
f010f9f6:	83 ec 04             	sub    $0x4,%esp
f010f9f9:	68 ac 85 13 f0       	push   $0xf01385ac
f010f9fe:	68 2e 01 00 00       	push   $0x12e
f010fa03:	68 14 7f 13 f0       	push   $0xf0137f14
f010fa08:	e8 f8 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010fa0d:	83 ec 0c             	sub    $0xc,%esp
f010fa10:	68 00 00 10 00       	push   $0x100000
f010fa15:	e8 5a 2e 02 00       	call   f0132874 <alloc_block_FF>
f010fa1a:	83 c4 10             	add    $0x10,%esp
f010fa1d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fa20:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa24:	74 1a                	je     f010fa40 <test_alloc_block_FF+0x394>
f010fa26:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa29:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa2c:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa31:	75 0d                	jne    f010fa40 <test_alloc_block_FF+0x394>
f010fa33:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa36:	8b 40 08             	mov    0x8(%eax),%eax
f010fa39:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa3e:	74 17                	je     f010fa57 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010fa40:	83 ec 04             	sub    $0x4,%esp
f010fa43:	68 b8 84 13 f0       	push   $0xf01384b8
f010fa48:	68 36 01 00 00       	push   $0x136
f010fa4d:	68 14 7f 13 f0       	push   $0xf0137f14
f010fa52:	e8 ae 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa57:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010fa5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa5f:	4a                   	dec    %edx
f010fa60:	39 d0                	cmp    %edx,%eax
f010fa62:	75 13                	jne    f010fa77 <test_alloc_block_FF+0x3cb>
f010fa64:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fa69:	83 f8 07             	cmp    $0x7,%eax
f010fa6c:	75 09                	jne    f010fa77 <test_alloc_block_FF+0x3cb>
f010fa6e:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010fa73:	85 c0                	test   %eax,%eax
f010fa75:	74 17                	je     f010fa8e <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa77:	83 ec 04             	sub    $0x4,%esp
f010fa7a:	68 fc 84 13 f0       	push   $0xf01384fc
f010fa7f:	68 3a 01 00 00       	push   $0x13a
f010fa84:	68 14 7f 13 f0       	push   $0xf0137f14
f010fa89:	e8 77 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fa8e:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fa95:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010fa98:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010fa9f:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010faa6:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010faad:	83 ec 0c             	sub    $0xc,%esp
f010fab0:	ff 75 d8             	pushl  -0x28(%ebp)
f010fab3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fab9:	50                   	push   %eax
f010faba:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fabd:	50                   	push   %eax
f010fabe:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fac1:	50                   	push   %eax
f010fac2:	68 64 a1 86 f0       	push   $0xf086a164
f010fac7:	e8 57 1b 00 00       	call   f0111623 <check_list_data>
f010facc:	83 c4 20             	add    $0x20,%esp
f010facf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010fad2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fad6:	74 17                	je     f010faef <test_alloc_block_FF+0x443>
f010fad8:	83 ec 04             	sub    $0x4,%esp
f010fadb:	68 60 85 13 f0       	push   $0xf0138560
f010fae0:	68 42 01 00 00       	push   $0x142
f010fae5:	68 14 7f 13 f0       	push   $0xf0137f14
f010faea:	e8 16 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010faef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010faf5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010faf8:	74 17                	je     f010fb11 <test_alloc_block_FF+0x465>
f010fafa:	83 ec 04             	sub    $0x4,%esp
f010fafd:	68 ac 85 13 f0       	push   $0xf01385ac
f010fb02:	68 43 01 00 00       	push   $0x143
f010fb07:	68 14 7f 13 f0       	push   $0xf0137f14
f010fb0c:	e8 f4 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010fb11:	83 ec 0c             	sub    $0xc,%esp
f010fb14:	68 f8 85 13 f0       	push   $0xf01385f8
f010fb19:	e8 f0 11 ff ff       	call   f0100d0e <cprintf>
f010fb1e:	83 c4 10             	add    $0x10,%esp
}
f010fb21:	90                   	nop
f010fb22:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fb25:	5b                   	pop    %ebx
f010fb26:	5e                   	pop    %esi
f010fb27:	5f                   	pop    %edi
f010fb28:	5d                   	pop    %ebp
f010fb29:	c3                   	ret    

f010fb2a <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010fb2a:	55                   	push   %ebp
f010fb2b:	89 e5                	mov    %esp,%ebp
f010fb2d:	57                   	push   %edi
f010fb2e:	56                   	push   %esi
f010fb2f:	53                   	push   %ebx
f010fb30:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010fb36:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fb3d:	83 ec 0c             	sub    $0xc,%esp
f010fb40:	ff 75 e0             	pushl  -0x20(%ebp)
f010fb43:	e8 f7 29 02 00       	call   f013253f <initialize_MemBlocksList>
f010fb48:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fb4b:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f010fb52:	00 00 00 
f010fb55:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f010fb5c:	00 00 00 
f010fb5f:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f010fb66:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010fb69:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb6c:	bb 74 88 13 f0       	mov    $0xf0138874,%ebx
f010fb71:	ba 07 00 00 00       	mov    $0x7,%edx
f010fb76:	89 c7                	mov    %eax,%edi
f010fb78:	89 de                	mov    %ebx,%esi
f010fb7a:	89 d1                	mov    %edx,%ecx
f010fb7c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010fb7e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb81:	bb 90 88 13 f0       	mov    $0xf0138890,%ebx
f010fb86:	ba 07 00 00 00       	mov    $0x7,%edx
f010fb8b:	89 c7                	mov    %eax,%edi
f010fb8d:	89 de                	mov    %ebx,%esi
f010fb8f:	89 d1                	mov    %edx,%ecx
f010fb91:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fb93:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f010fb9a:	00 00 00 
f010fb9d:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f010fba4:	00 00 00 
f010fba7:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f010fbae:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fbb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fbb8:	e9 5f 01 00 00       	jmp    f010fd1c <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fbbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbc0:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010fbc4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbc7:	c1 e2 04             	shl    $0x4,%edx
f010fbca:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fbcd:	01 da                	add    %ebx,%edx
f010fbcf:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010fbd5:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fbd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbda:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010fbde:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbe1:	c1 e2 04             	shl    $0x4,%edx
f010fbe4:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fbe7:	01 f2                	add    %esi,%edx
f010fbe9:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010fbef:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fbf1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fbf5:	0f 85 92 00 00 00    	jne    f010fc8d <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fbfb:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f010fc00:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc03:	c1 e2 04             	shl    $0x4,%edx
f010fc06:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fc09:	01 fa                	add    %edi,%edx
f010fc0b:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010fc11:	89 02                	mov    %eax,(%edx)
f010fc13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc16:	c1 e0 04             	shl    $0x4,%eax
f010fc19:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fc1c:	01 d8                	add    %ebx,%eax
f010fc1e:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fc23:	8b 00                	mov    (%eax),%eax
f010fc25:	85 c0                	test   %eax,%eax
f010fc27:	74 18                	je     f010fc41 <test_alloc_block_BF+0x117>
f010fc29:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f010fc2e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fc34:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fc37:	c1 e1 04             	shl    $0x4,%ecx
f010fc3a:	01 ca                	add    %ecx,%edx
f010fc3c:	89 50 04             	mov    %edx,0x4(%eax)
f010fc3f:	eb 13                	jmp    f010fc54 <test_alloc_block_BF+0x12a>
f010fc41:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc47:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc4a:	c1 e2 04             	shl    $0x4,%edx
f010fc4d:	01 d0                	add    %edx,%eax
f010fc4f:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f010fc54:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc5a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc5d:	c1 e2 04             	shl    $0x4,%edx
f010fc60:	01 d0                	add    %edx,%eax
f010fc62:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f010fc67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc6a:	c1 e0 04             	shl    $0x4,%eax
f010fc6d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc70:	01 f0                	add    %esi,%eax
f010fc72:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fc77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fc7d:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fc82:	40                   	inc    %eax
f010fc83:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
f010fc88:	e9 8c 00 00 00       	jmp    f010fd19 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fc8d:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f010fc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc95:	c1 e2 04             	shl    $0x4,%edx
f010fc98:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fc9b:	01 fa                	add    %edi,%edx
f010fc9d:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010fca3:	89 02                	mov    %eax,(%edx)
f010fca5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fca8:	c1 e0 04             	shl    $0x4,%eax
f010fcab:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fcae:	01 d8                	add    %ebx,%eax
f010fcb0:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fcb5:	8b 00                	mov    (%eax),%eax
f010fcb7:	85 c0                	test   %eax,%eax
f010fcb9:	74 17                	je     f010fcd2 <test_alloc_block_BF+0x1a8>
f010fcbb:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f010fcc0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fcc6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fcc9:	c1 e1 04             	shl    $0x4,%ecx
f010fccc:	01 ca                	add    %ecx,%edx
f010fcce:	89 10                	mov    %edx,(%eax)
f010fcd0:	eb 13                	jmp    f010fce5 <test_alloc_block_BF+0x1bb>
f010fcd2:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fcd8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcdb:	c1 e2 04             	shl    $0x4,%edx
f010fcde:	01 d0                	add    %edx,%eax
f010fce0:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f010fce5:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fceb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcee:	c1 e2 04             	shl    $0x4,%edx
f010fcf1:	01 d0                	add    %edx,%eax
f010fcf3:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f010fcf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcfb:	c1 e0 04             	shl    $0x4,%eax
f010fcfe:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd01:	01 f0                	add    %esi,%eax
f010fd03:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fd08:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fd0e:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fd13:	40                   	inc    %eax
f010fd14:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fd19:	ff 45 e4             	incl   -0x1c(%ebp)
f010fd1c:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fd20:	0f 8e 97 fe ff ff    	jle    f010fbbd <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010fd26:	83 ec 0c             	sub    $0xc,%esp
f010fd29:	68 00 00 40 00       	push   $0x400000
f010fd2e:	e8 ff 2c 02 00       	call   f0132a32 <alloc_block_BF>
f010fd33:	83 c4 10             	add    $0x10,%esp
f010fd36:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fd39:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd3d:	74 17                	je     f010fd56 <test_alloc_block_BF+0x22c>
f010fd3f:	83 ec 04             	sub    $0x4,%esp
f010fd42:	68 80 86 13 f0       	push   $0xf0138680
f010fd47:	68 66 01 00 00       	push   $0x166
f010fd4c:	68 14 7f 13 f0       	push   $0xf0137f14
f010fd51:	e8 af 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd56:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010fd5b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd5e:	75 13                	jne    f010fd73 <test_alloc_block_BF+0x249>
f010fd60:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fd65:	83 f8 07             	cmp    $0x7,%eax
f010fd68:	75 09                	jne    f010fd73 <test_alloc_block_BF+0x249>
f010fd6a:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010fd6f:	85 c0                	test   %eax,%eax
f010fd71:	74 17                	je     f010fd8a <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fd73:	83 ec 04             	sub    $0x4,%esp
f010fd76:	68 40 84 13 f0       	push   $0xf0138440
f010fd7b:	68 6a 01 00 00       	push   $0x16a
f010fd80:	68 14 7f 13 f0       	push   $0xf0137f14
f010fd85:	e8 7b 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fd8a:	83 ec 0c             	sub    $0xc,%esp
f010fd8d:	68 00 00 10 00       	push   $0x100000
f010fd92:	e8 9b 2c 02 00       	call   f0132a32 <alloc_block_BF>
f010fd97:	83 c4 10             	add    $0x10,%esp
f010fd9a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fd9d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fda1:	74 1a                	je     f010fdbd <test_alloc_block_BF+0x293>
f010fda3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fda6:	8b 40 0c             	mov    0xc(%eax),%eax
f010fda9:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fdae:	75 0d                	jne    f010fdbd <test_alloc_block_BF+0x293>
f010fdb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdb3:	8b 40 08             	mov    0x8(%eax),%eax
f010fdb6:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fdbb:	74 17                	je     f010fdd4 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fdbd:	83 ec 04             	sub    $0x4,%esp
f010fdc0:	68 f4 86 13 f0       	push   $0xf01386f4
f010fdc5:	68 72 01 00 00       	push   $0x172
f010fdca:	68 14 7f 13 f0       	push   $0xf0137f14
f010fdcf:	e8 31 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fdd4:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010fdd9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fddc:	75 13                	jne    f010fdf1 <test_alloc_block_BF+0x2c7>
f010fdde:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fde3:	83 f8 06             	cmp    $0x6,%eax
f010fde6:	75 09                	jne    f010fdf1 <test_alloc_block_BF+0x2c7>
f010fde8:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010fded:	85 c0                	test   %eax,%eax
f010fdef:	74 17                	je     f010fe08 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fdf1:	83 ec 04             	sub    $0x4,%esp
f010fdf4:	68 38 87 13 f0       	push   $0xf0138738
f010fdf9:	68 76 01 00 00       	push   $0x176
f010fdfe:	68 14 7f 13 f0       	push   $0xf0137f14
f010fe03:	e8 fd 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fe08:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fe0f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fe12:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010fe19:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010fe20:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe27:	83 ec 0c             	sub    $0xc,%esp
f010fe2a:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe2d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fe33:	50                   	push   %eax
f010fe34:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fe37:	50                   	push   %eax
f010fe38:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fe3b:	50                   	push   %eax
f010fe3c:	68 64 a1 86 f0       	push   $0xf086a164
f010fe41:	e8 dd 17 00 00       	call   f0111623 <check_list_data>
f010fe46:	83 c4 20             	add    $0x20,%esp
f010fe49:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe4c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe50:	74 17                	je     f010fe69 <test_alloc_block_BF+0x33f>
f010fe52:	83 ec 04             	sub    $0x4,%esp
f010fe55:	68 9c 87 13 f0       	push   $0xf013879c
f010fe5a:	68 7e 01 00 00       	push   $0x17e
f010fe5f:	68 14 7f 13 f0       	push   $0xf0137f14
f010fe64:	e8 9c 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe69:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fe6f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe72:	74 17                	je     f010fe8b <test_alloc_block_BF+0x361>
f010fe74:	83 ec 04             	sub    $0x4,%esp
f010fe77:	68 e8 87 13 f0       	push   $0xf01387e8
f010fe7c:	68 7f 01 00 00       	push   $0x17f
f010fe81:	68 14 7f 13 f0       	push   $0xf0137f14
f010fe86:	e8 7a 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fe8b:	83 ec 0c             	sub    $0xc,%esp
f010fe8e:	68 00 00 10 00       	push   $0x100000
f010fe93:	e8 9a 2b 02 00       	call   f0132a32 <alloc_block_BF>
f010fe98:	83 c4 10             	add    $0x10,%esp
f010fe9b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fe9e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fea2:	74 1a                	je     f010febe <test_alloc_block_BF+0x394>
f010fea4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fea7:	8b 40 0c             	mov    0xc(%eax),%eax
f010feaa:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010feaf:	75 0d                	jne    f010febe <test_alloc_block_BF+0x394>
f010feb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010feb4:	8b 40 08             	mov    0x8(%eax),%eax
f010feb7:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010febc:	74 17                	je     f010fed5 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010febe:	83 ec 04             	sub    $0x4,%esp
f010fec1:	68 f4 86 13 f0       	push   $0xf01386f4
f010fec6:	68 87 01 00 00       	push   $0x187
f010fecb:	68 14 7f 13 f0       	push   $0xf0137f14
f010fed0:	e8 30 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fed5:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010feda:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fedd:	4a                   	dec    %edx
f010fede:	39 d0                	cmp    %edx,%eax
f010fee0:	75 13                	jne    f010fef5 <test_alloc_block_BF+0x3cb>
f010fee2:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010fee7:	83 f8 06             	cmp    $0x6,%eax
f010feea:	75 09                	jne    f010fef5 <test_alloc_block_BF+0x3cb>
f010feec:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010fef1:	85 c0                	test   %eax,%eax
f010fef3:	74 17                	je     f010ff0c <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fef5:	83 ec 04             	sub    $0x4,%esp
f010fef8:	68 38 87 13 f0       	push   $0xf0138738
f010fefd:	68 8b 01 00 00       	push   $0x18b
f010ff02:	68 14 7f 13 f0       	push   $0xf0137f14
f010ff07:	e8 f9 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff0c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ff13:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ff16:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ff1d:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ff24:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff2b:	83 ec 0c             	sub    $0xc,%esp
f010ff2e:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff31:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ff37:	50                   	push   %eax
f010ff38:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ff3b:	50                   	push   %eax
f010ff3c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ff3f:	50                   	push   %eax
f010ff40:	68 64 a1 86 f0       	push   $0xf086a164
f010ff45:	e8 d9 16 00 00       	call   f0111623 <check_list_data>
f010ff4a:	83 c4 20             	add    $0x20,%esp
f010ff4d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff50:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff54:	74 17                	je     f010ff6d <test_alloc_block_BF+0x443>
f010ff56:	83 ec 04             	sub    $0x4,%esp
f010ff59:	68 9c 87 13 f0       	push   $0xf013879c
f010ff5e:	68 93 01 00 00       	push   $0x193
f010ff63:	68 14 7f 13 f0       	push   $0xf0137f14
f010ff68:	e8 98 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff6d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ff73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff76:	74 17                	je     f010ff8f <test_alloc_block_BF+0x465>
f010ff78:	83 ec 04             	sub    $0x4,%esp
f010ff7b:	68 e8 87 13 f0       	push   $0xf01387e8
f010ff80:	68 94 01 00 00       	push   $0x194
f010ff85:	68 14 7f 13 f0       	push   $0xf0137f14
f010ff8a:	e8 76 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010ff8f:	83 ec 0c             	sub    $0xc,%esp
f010ff92:	68 00 0c 00 00       	push   $0xc00
f010ff97:	e8 96 2a 02 00       	call   f0132a32 <alloc_block_BF>
f010ff9c:	83 c4 10             	add    $0x10,%esp
f010ff9f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010ffa2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ffa6:	74 1a                	je     f010ffc2 <test_alloc_block_BF+0x498>
f010ffa8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffab:	8b 40 0c             	mov    0xc(%eax),%eax
f010ffae:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ffb3:	75 0d                	jne    f010ffc2 <test_alloc_block_BF+0x498>
f010ffb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffb8:	8b 40 08             	mov    0x8(%eax),%eax
f010ffbb:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010ffc0:	74 17                	je     f010ffd9 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ffc2:	83 ec 04             	sub    $0x4,%esp
f010ffc5:	68 f4 86 13 f0       	push   $0xf01386f4
f010ffca:	68 9c 01 00 00       	push   $0x19c
f010ffcf:	68 14 7f 13 f0       	push   $0xf0137f14
f010ffd4:	e8 2c 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ffd9:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f010ffde:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ffe1:	83 ea 02             	sub    $0x2,%edx
f010ffe4:	39 d0                	cmp    %edx,%eax
f010ffe6:	75 13                	jne    f010fffb <test_alloc_block_BF+0x4d1>
f010ffe8:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f010ffed:	83 f8 06             	cmp    $0x6,%eax
f010fff0:	75 09                	jne    f010fffb <test_alloc_block_BF+0x4d1>
f010fff2:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f010fff7:	85 c0                	test   %eax,%eax
f010fff9:	74 17                	je     f0110012 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fffb:	83 ec 04             	sub    $0x4,%esp
f010fffe:	68 38 87 13 f0       	push   $0xf0138738
f0110003:	68 a0 01 00 00       	push   $0x1a0
f0110008:	68 14 7f 13 f0       	push   $0xf0137f14
f011000d:	e8 f3 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110012:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0110019:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f011001c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f0110023:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f011002a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110031:	83 ec 0c             	sub    $0xc,%esp
f0110034:	ff 75 d8             	pushl  -0x28(%ebp)
f0110037:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f011003d:	50                   	push   %eax
f011003e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0110041:	50                   	push   %eax
f0110042:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110045:	50                   	push   %eax
f0110046:	68 64 a1 86 f0       	push   $0xf086a164
f011004b:	e8 d3 15 00 00       	call   f0111623 <check_list_data>
f0110050:	83 c4 20             	add    $0x20,%esp
f0110053:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110056:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011005a:	74 17                	je     f0110073 <test_alloc_block_BF+0x549>
f011005c:	83 ec 04             	sub    $0x4,%esp
f011005f:	68 9c 87 13 f0       	push   $0xf013879c
f0110064:	68 a8 01 00 00       	push   $0x1a8
f0110069:	68 14 7f 13 f0       	push   $0xf0137f14
f011006e:	e8 92 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110073:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110079:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011007c:	74 17                	je     f0110095 <test_alloc_block_BF+0x56b>
f011007e:	83 ec 04             	sub    $0x4,%esp
f0110081:	68 e8 87 13 f0       	push   $0xf01387e8
f0110086:	68 a9 01 00 00       	push   $0x1a9
f011008b:	68 14 7f 13 f0       	push   $0xf0137f14
f0110090:	e8 70 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f0110095:	83 ec 0c             	sub    $0xc,%esp
f0110098:	68 00 08 00 00       	push   $0x800
f011009d:	e8 90 29 02 00       	call   f0132a32 <alloc_block_BF>
f01100a2:	83 c4 10             	add    $0x10,%esp
f01100a5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f01100a8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100ac:	74 17                	je     f01100c5 <test_alloc_block_BF+0x59b>
f01100ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100b1:	8b 40 0c             	mov    0xc(%eax),%eax
f01100b4:	3d 00 08 00 00       	cmp    $0x800,%eax
f01100b9:	75 0a                	jne    f01100c5 <test_alloc_block_BF+0x59b>
f01100bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100be:	8b 40 08             	mov    0x8(%eax),%eax
f01100c1:	85 c0                	test   %eax,%eax
f01100c3:	74 17                	je     f01100dc <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f01100c5:	83 ec 04             	sub    $0x4,%esp
f01100c8:	68 f4 86 13 f0       	push   $0xf01386f4
f01100cd:	68 b1 01 00 00       	push   $0x1b1
f01100d2:	68 14 7f 13 f0       	push   $0xf0137f14
f01100d7:	e8 29 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01100dc:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01100e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01100e4:	83 ea 02             	sub    $0x2,%edx
f01100e7:	39 d0                	cmp    %edx,%eax
f01100e9:	75 13                	jne    f01100fe <test_alloc_block_BF+0x5d4>
f01100eb:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f01100f0:	83 f8 05             	cmp    $0x5,%eax
f01100f3:	75 09                	jne    f01100fe <test_alloc_block_BF+0x5d4>
f01100f5:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01100fa:	85 c0                	test   %eax,%eax
f01100fc:	74 17                	je     f0110115 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100fe:	83 ec 04             	sub    $0x4,%esp
f0110101:	68 38 87 13 f0       	push   $0xf0138738
f0110106:	68 b5 01 00 00       	push   $0x1b5
f011010b:	68 14 7f 13 f0       	push   $0xf0137f14
f0110110:	e8 f0 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110115:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f011011c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f011011f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f0110126:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f011012d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110134:	83 ec 0c             	sub    $0xc,%esp
f0110137:	ff 75 d8             	pushl  -0x28(%ebp)
f011013a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0110140:	50                   	push   %eax
f0110141:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0110144:	50                   	push   %eax
f0110145:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110148:	50                   	push   %eax
f0110149:	68 64 a1 86 f0       	push   $0xf086a164
f011014e:	e8 d0 14 00 00       	call   f0111623 <check_list_data>
f0110153:	83 c4 20             	add    $0x20,%esp
f0110156:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110159:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011015d:	74 17                	je     f0110176 <test_alloc_block_BF+0x64c>
f011015f:	83 ec 04             	sub    $0x4,%esp
f0110162:	68 9c 87 13 f0       	push   $0xf013879c
f0110167:	68 bd 01 00 00       	push   $0x1bd
f011016c:	68 14 7f 13 f0       	push   $0xf0137f14
f0110171:	e8 8f 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110176:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011017c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011017f:	74 17                	je     f0110198 <test_alloc_block_BF+0x66e>
f0110181:	83 ec 04             	sub    $0x4,%esp
f0110184:	68 e8 87 13 f0       	push   $0xf01387e8
f0110189:	68 be 01 00 00       	push   $0x1be
f011018e:	68 14 7f 13 f0       	push   $0xf0137f14
f0110193:	e8 6d 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f0110198:	83 ec 0c             	sub    $0xc,%esp
f011019b:	68 34 88 13 f0       	push   $0xf0138834
f01101a0:	e8 69 0b ff ff       	call   f0100d0e <cprintf>
f01101a5:	83 c4 10             	add    $0x10,%esp
}
f01101a8:	90                   	nop
f01101a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01101ac:	5b                   	pop    %ebx
f01101ad:	5e                   	pop    %esi
f01101ae:	5f                   	pop    %edi
f01101af:	5d                   	pop    %ebp
f01101b0:	c3                   	ret    

f01101b1 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f01101b1:	55                   	push   %ebp
f01101b2:	89 e5                	mov    %esp,%ebp
f01101b4:	57                   	push   %edi
f01101b5:	56                   	push   %esi
f01101b6:	53                   	push   %ebx
f01101b7:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f01101bd:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f01101c4:	83 ec 0c             	sub    $0xc,%esp
f01101c7:	ff 75 e0             	pushl  -0x20(%ebp)
f01101ca:	e8 70 23 02 00       	call   f013253f <initialize_MemBlocksList>
f01101cf:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f01101d2:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f01101d9:	00 00 00 
f01101dc:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f01101e3:	00 00 00 
f01101e6:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f01101ed:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f01101f0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01101f3:	bb 40 86 13 f0       	mov    $0xf0138640,%ebx
f01101f8:	ba 08 00 00 00       	mov    $0x8,%edx
f01101fd:	89 c7                	mov    %eax,%edi
f01101ff:	89 de                	mov    %ebx,%esi
f0110201:	89 d1                	mov    %edx,%ecx
f0110203:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f0110205:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110208:	bb a0 8a 13 f0       	mov    $0xf0138aa0,%ebx
f011020d:	ba 08 00 00 00       	mov    $0x8,%edx
f0110212:	89 c7                	mov    %eax,%edi
f0110214:	89 de                	mov    %ebx,%esi
f0110216:	89 d1                	mov    %edx,%ecx
f0110218:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f011021a:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f0110221:	00 00 00 
f0110224:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f011022b:	00 00 00 
f011022e:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f0110235:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110238:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011023f:	e9 5f 01 00 00       	jmp    f01103a3 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f0110244:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110247:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f011024b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011024e:	c1 e2 04             	shl    $0x4,%edx
f0110251:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110254:	01 da                	add    %ebx,%edx
f0110256:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f011025c:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f011025e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110261:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f0110265:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110268:	c1 e2 04             	shl    $0x4,%edx
f011026b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f011026e:	01 f2                	add    %esi,%edx
f0110270:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f0110276:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f0110278:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011027c:	0f 85 92 00 00 00    	jne    f0110314 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f0110282:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0110287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011028a:	c1 e2 04             	shl    $0x4,%edx
f011028d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f0110290:	01 fa                	add    %edi,%edx
f0110292:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f0110298:	89 02                	mov    %eax,(%edx)
f011029a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011029d:	c1 e0 04             	shl    $0x4,%eax
f01102a0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01102a3:	01 d8                	add    %ebx,%eax
f01102a5:	2d d4 00 00 00       	sub    $0xd4,%eax
f01102aa:	8b 00                	mov    (%eax),%eax
f01102ac:	85 c0                	test   %eax,%eax
f01102ae:	74 18                	je     f01102c8 <test_alloc_block_NF+0x117>
f01102b0:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f01102b5:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01102bb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01102be:	c1 e1 04             	shl    $0x4,%ecx
f01102c1:	01 ca                	add    %ecx,%edx
f01102c3:	89 50 04             	mov    %edx,0x4(%eax)
f01102c6:	eb 13                	jmp    f01102db <test_alloc_block_NF+0x12a>
f01102c8:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01102ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102d1:	c1 e2 04             	shl    $0x4,%edx
f01102d4:	01 d0                	add    %edx,%eax
f01102d6:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f01102db:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01102e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102e4:	c1 e2 04             	shl    $0x4,%edx
f01102e7:	01 d0                	add    %edx,%eax
f01102e9:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f01102ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01102f1:	c1 e0 04             	shl    $0x4,%eax
f01102f4:	8d 75 e8             	lea    -0x18(%ebp),%esi
f01102f7:	01 f0                	add    %esi,%eax
f01102f9:	2d d0 00 00 00       	sub    $0xd0,%eax
f01102fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110304:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110309:	40                   	inc    %eax
f011030a:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
f011030f:	e9 8c 00 00 00       	jmp    f01103a0 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f0110314:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f0110319:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011031c:	c1 e2 04             	shl    $0x4,%edx
f011031f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f0110322:	01 fa                	add    %edi,%edx
f0110324:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f011032a:	89 02                	mov    %eax,(%edx)
f011032c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011032f:	c1 e0 04             	shl    $0x4,%eax
f0110332:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110335:	01 d8                	add    %ebx,%eax
f0110337:	2d d0 00 00 00       	sub    $0xd0,%eax
f011033c:	8b 00                	mov    (%eax),%eax
f011033e:	85 c0                	test   %eax,%eax
f0110340:	74 17                	je     f0110359 <test_alloc_block_NF+0x1a8>
f0110342:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f0110347:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011034d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0110350:	c1 e1 04             	shl    $0x4,%ecx
f0110353:	01 ca                	add    %ecx,%edx
f0110355:	89 10                	mov    %edx,(%eax)
f0110357:	eb 13                	jmp    f011036c <test_alloc_block_NF+0x1bb>
f0110359:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011035f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110362:	c1 e2 04             	shl    $0x4,%edx
f0110365:	01 d0                	add    %edx,%eax
f0110367:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f011036c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110372:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110375:	c1 e2 04             	shl    $0x4,%edx
f0110378:	01 d0                	add    %edx,%eax
f011037a:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f011037f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110382:	c1 e0 04             	shl    $0x4,%eax
f0110385:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110388:	01 f0                	add    %esi,%eax
f011038a:	2d d4 00 00 00       	sub    $0xd4,%eax
f011038f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110395:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011039a:	40                   	inc    %eax
f011039b:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f01103a0:	ff 45 e4             	incl   -0x1c(%ebp)
f01103a3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f01103a7:	0f 8e 97 fe ff ff    	jle    f0110244 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f01103ad:	83 ec 0c             	sub    $0xc,%esp
f01103b0:	68 00 00 a0 00       	push   $0xa00000
f01103b5:	e8 c3 28 02 00       	call   f0132c7d <alloc_block_NF>
f01103ba:	83 c4 10             	add    $0x10,%esp
f01103bd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f01103c0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01103c4:	74 17                	je     f01103dd <test_alloc_block_NF+0x22c>
f01103c6:	83 ec 04             	sub    $0x4,%esp
f01103c9:	68 ac 88 13 f0       	push   $0xf01388ac
f01103ce:	68 e1 01 00 00       	push   $0x1e1
f01103d3:	68 14 7f 13 f0       	push   $0xf0137f14
f01103d8:	e8 28 fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01103dd:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01103e2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01103e5:	75 13                	jne    f01103fa <test_alloc_block_NF+0x249>
f01103e7:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f01103ec:	83 f8 08             	cmp    $0x8,%eax
f01103ef:	75 09                	jne    f01103fa <test_alloc_block_NF+0x249>
f01103f1:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01103f6:	85 c0                	test   %eax,%eax
f01103f8:	74 17                	je     f0110411 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f01103fa:	83 ec 04             	sub    $0x4,%esp
f01103fd:	68 40 84 13 f0       	push   $0xf0138440
f0110402:	68 e5 01 00 00       	push   $0x1e5
f0110407:	68 14 7f 13 f0       	push   $0xf0137f14
f011040c:	e8 f4 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f0110411:	83 ec 0c             	sub    $0xc,%esp
f0110414:	68 00 28 00 00       	push   $0x2800
f0110419:	e8 5f 28 02 00       	call   f0132c7d <alloc_block_NF>
f011041e:	83 c4 10             	add    $0x10,%esp
f0110421:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f0110424:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110428:	74 1a                	je     f0110444 <test_alloc_block_NF+0x293>
f011042a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011042d:	8b 40 0c             	mov    0xc(%eax),%eax
f0110430:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110435:	75 0d                	jne    f0110444 <test_alloc_block_NF+0x293>
f0110437:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011043a:	8b 40 08             	mov    0x8(%eax),%eax
f011043d:	3d 00 70 00 00       	cmp    $0x7000,%eax
f0110442:	74 17                	je     f011045b <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110444:	83 ec 04             	sub    $0x4,%esp
f0110447:	68 20 89 13 f0       	push   $0xf0138920
f011044c:	68 ed 01 00 00       	push   $0x1ed
f0110451:	68 14 7f 13 f0       	push   $0xf0137f14
f0110456:	e8 aa fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011045b:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110460:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110463:	75 13                	jne    f0110478 <test_alloc_block_NF+0x2c7>
f0110465:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011046a:	83 f8 07             	cmp    $0x7,%eax
f011046d:	75 09                	jne    f0110478 <test_alloc_block_NF+0x2c7>
f011046f:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110474:	85 c0                	test   %eax,%eax
f0110476:	74 17                	je     f011048f <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110478:	83 ec 04             	sub    $0x4,%esp
f011047b:	68 64 89 13 f0       	push   $0xf0138964
f0110480:	68 f1 01 00 00       	push   $0x1f1
f0110485:	68 14 7f 13 f0       	push   $0xf0137f14
f011048a:	e8 76 fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f011048f:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110496:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f0110499:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f01104a0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f01104a7:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01104ae:	83 ec 0c             	sub    $0xc,%esp
f01104b1:	ff 75 d8             	pushl  -0x28(%ebp)
f01104b4:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104ba:	50                   	push   %eax
f01104bb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104be:	50                   	push   %eax
f01104bf:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104c2:	50                   	push   %eax
f01104c3:	68 64 a1 86 f0       	push   $0xf086a164
f01104c8:	e8 56 11 00 00       	call   f0111623 <check_list_data>
f01104cd:	83 c4 20             	add    $0x20,%esp
f01104d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104d3:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104d7:	74 17                	je     f01104f0 <test_alloc_block_NF+0x33f>
f01104d9:	83 ec 04             	sub    $0x4,%esp
f01104dc:	68 c8 89 13 f0       	push   $0xf01389c8
f01104e1:	68 f9 01 00 00       	push   $0x1f9
f01104e6:	68 14 7f 13 f0       	push   $0xf0137f14
f01104eb:	e8 15 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104f0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01104f6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01104f9:	74 17                	je     f0110512 <test_alloc_block_NF+0x361>
f01104fb:	83 ec 04             	sub    $0x4,%esp
f01104fe:	68 14 8a 13 f0       	push   $0xf0138a14
f0110503:	68 fa 01 00 00       	push   $0x1fa
f0110508:	68 14 7f 13 f0       	push   $0xf0137f14
f011050d:	e8 f3 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f0110512:	83 ec 0c             	sub    $0xc,%esp
f0110515:	68 00 00 20 00       	push   $0x200000
f011051a:	e8 5e 27 02 00       	call   f0132c7d <alloc_block_NF>
f011051f:	83 c4 10             	add    $0x10,%esp
f0110522:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f0110525:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110529:	74 1a                	je     f0110545 <test_alloc_block_NF+0x394>
f011052b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011052e:	8b 40 0c             	mov    0xc(%eax),%eax
f0110531:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110536:	75 0d                	jne    f0110545 <test_alloc_block_NF+0x394>
f0110538:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011053b:	8b 40 08             	mov    0x8(%eax),%eax
f011053e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f0110543:	74 17                	je     f011055c <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110545:	83 ec 04             	sub    $0x4,%esp
f0110548:	68 20 89 13 f0       	push   $0xf0138920
f011054d:	68 03 02 00 00       	push   $0x203
f0110552:	68 14 7f 13 f0       	push   $0xf0137f14
f0110557:	e8 a9 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011055c:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110561:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110564:	75 13                	jne    f0110579 <test_alloc_block_NF+0x3c8>
f0110566:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011056b:	83 f8 06             	cmp    $0x6,%eax
f011056e:	75 09                	jne    f0110579 <test_alloc_block_NF+0x3c8>
f0110570:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110575:	85 c0                	test   %eax,%eax
f0110577:	74 17                	je     f0110590 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110579:	83 ec 04             	sub    $0x4,%esp
f011057c:	68 64 89 13 f0       	push   $0xf0138964
f0110581:	68 07 02 00 00       	push   $0x207
f0110586:	68 14 7f 13 f0       	push   $0xf0137f14
f011058b:	e8 75 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110590:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110597:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011059a:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f01105a1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f01105a8:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01105af:	83 ec 0c             	sub    $0xc,%esp
f01105b2:	ff 75 d8             	pushl  -0x28(%ebp)
f01105b5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105bb:	50                   	push   %eax
f01105bc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105bf:	50                   	push   %eax
f01105c0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105c3:	50                   	push   %eax
f01105c4:	68 64 a1 86 f0       	push   $0xf086a164
f01105c9:	e8 55 10 00 00       	call   f0111623 <check_list_data>
f01105ce:	83 c4 20             	add    $0x20,%esp
f01105d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105d4:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105d8:	74 17                	je     f01105f1 <test_alloc_block_NF+0x440>
f01105da:	83 ec 04             	sub    $0x4,%esp
f01105dd:	68 c8 89 13 f0       	push   $0xf01389c8
f01105e2:	68 0f 02 00 00       	push   $0x20f
f01105e7:	68 14 7f 13 f0       	push   $0xf0137f14
f01105ec:	e8 14 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01105f1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01105f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105fa:	74 17                	je     f0110613 <test_alloc_block_NF+0x462>
f01105fc:	83 ec 04             	sub    $0x4,%esp
f01105ff:	68 14 8a 13 f0       	push   $0xf0138a14
f0110604:	68 10 02 00 00       	push   $0x210
f0110609:	68 14 7f 13 f0       	push   $0xf0137f14
f011060e:	e8 f2 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f0110613:	83 ec 0c             	sub    $0xc,%esp
f0110616:	68 00 00 08 00       	push   $0x80000
f011061b:	e8 5d 26 02 00       	call   f0132c7d <alloc_block_NF>
f0110620:	83 c4 10             	add    $0x10,%esp
f0110623:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110626:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011062a:	74 1a                	je     f0110646 <test_alloc_block_NF+0x495>
f011062c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011062f:	8b 40 0c             	mov    0xc(%eax),%eax
f0110632:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110637:	75 0d                	jne    f0110646 <test_alloc_block_NF+0x495>
f0110639:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011063c:	8b 40 08             	mov    0x8(%eax),%eax
f011063f:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f0110644:	74 17                	je     f011065d <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110646:	83 ec 04             	sub    $0x4,%esp
f0110649:	68 20 89 13 f0       	push   $0xf0138920
f011064e:	68 19 02 00 00       	push   $0x219
f0110653:	68 14 7f 13 f0       	push   $0xf0137f14
f0110658:	e8 a8 fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011065d:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110662:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110665:	4a                   	dec    %edx
f0110666:	39 d0                	cmp    %edx,%eax
f0110668:	75 13                	jne    f011067d <test_alloc_block_NF+0x4cc>
f011066a:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011066f:	83 f8 06             	cmp    $0x6,%eax
f0110672:	75 09                	jne    f011067d <test_alloc_block_NF+0x4cc>
f0110674:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110679:	85 c0                	test   %eax,%eax
f011067b:	74 17                	je     f0110694 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011067d:	83 ec 04             	sub    $0x4,%esp
f0110680:	68 64 89 13 f0       	push   $0xf0138964
f0110685:	68 1d 02 00 00       	push   $0x21d
f011068a:	68 14 7f 13 f0       	push   $0xf0137f14
f011068f:	e8 71 fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110694:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011069b:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011069e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f01106a5:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f01106ac:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01106b3:	83 ec 0c             	sub    $0xc,%esp
f01106b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01106b9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01106bf:	50                   	push   %eax
f01106c0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106c3:	50                   	push   %eax
f01106c4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01106c7:	50                   	push   %eax
f01106c8:	68 64 a1 86 f0       	push   $0xf086a164
f01106cd:	e8 51 0f 00 00       	call   f0111623 <check_list_data>
f01106d2:	83 c4 20             	add    $0x20,%esp
f01106d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01106d8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01106dc:	74 17                	je     f01106f5 <test_alloc_block_NF+0x544>
f01106de:	83 ec 04             	sub    $0x4,%esp
f01106e1:	68 c8 89 13 f0       	push   $0xf01389c8
f01106e6:	68 25 02 00 00       	push   $0x225
f01106eb:	68 14 7f 13 f0       	push   $0xf0137f14
f01106f0:	e8 10 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01106f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01106fb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01106fe:	74 17                	je     f0110717 <test_alloc_block_NF+0x566>
f0110700:	83 ec 04             	sub    $0x4,%esp
f0110703:	68 14 8a 13 f0       	push   $0xf0138a14
f0110708:	68 26 02 00 00       	push   $0x226
f011070d:	68 14 7f 13 f0       	push   $0xf0137f14
f0110712:	e8 ee fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f0110717:	83 ec 0c             	sub    $0xc,%esp
f011071a:	68 00 fc 07 00       	push   $0x7fc00
f011071f:	e8 59 25 02 00       	call   f0132c7d <alloc_block_NF>
f0110724:	83 c4 10             	add    $0x10,%esp
f0110727:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f011072a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011072e:	74 1a                	je     f011074a <test_alloc_block_NF+0x599>
f0110730:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110733:	8b 40 0c             	mov    0xc(%eax),%eax
f0110736:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f011073b:	75 0d                	jne    f011074a <test_alloc_block_NF+0x599>
f011073d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110740:	8b 40 08             	mov    0x8(%eax),%eax
f0110743:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110748:	74 17                	je     f0110761 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011074a:	83 ec 04             	sub    $0x4,%esp
f011074d:	68 20 89 13 f0       	push   $0xf0138920
f0110752:	68 2f 02 00 00       	push   $0x22f
f0110757:	68 14 7f 13 f0       	push   $0xf0137f14
f011075c:	e8 a4 fa fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110761:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110766:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110769:	83 ea 02             	sub    $0x2,%edx
f011076c:	39 d0                	cmp    %edx,%eax
f011076e:	75 13                	jne    f0110783 <test_alloc_block_NF+0x5d2>
f0110770:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110775:	83 f8 06             	cmp    $0x6,%eax
f0110778:	75 09                	jne    f0110783 <test_alloc_block_NF+0x5d2>
f011077a:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f011077f:	85 c0                	test   %eax,%eax
f0110781:	74 17                	je     f011079a <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110783:	83 ec 04             	sub    $0x4,%esp
f0110786:	68 64 89 13 f0       	push   $0xf0138964
f011078b:	68 33 02 00 00       	push   $0x233
f0110790:	68 14 7f 13 f0       	push   $0xf0137f14
f0110795:	e8 6b fa fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011079a:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01107a1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01107a4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f01107ab:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f01107b2:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01107b9:	83 ec 0c             	sub    $0xc,%esp
f01107bc:	ff 75 d8             	pushl  -0x28(%ebp)
f01107bf:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01107c5:	50                   	push   %eax
f01107c6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107c9:	50                   	push   %eax
f01107ca:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01107cd:	50                   	push   %eax
f01107ce:	68 64 a1 86 f0       	push   $0xf086a164
f01107d3:	e8 4b 0e 00 00       	call   f0111623 <check_list_data>
f01107d8:	83 c4 20             	add    $0x20,%esp
f01107db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01107de:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01107e2:	74 17                	je     f01107fb <test_alloc_block_NF+0x64a>
f01107e4:	83 ec 04             	sub    $0x4,%esp
f01107e7:	68 c8 89 13 f0       	push   $0xf01389c8
f01107ec:	68 3b 02 00 00       	push   $0x23b
f01107f1:	68 14 7f 13 f0       	push   $0xf0137f14
f01107f6:	e8 0a fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01107fb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110801:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110804:	74 17                	je     f011081d <test_alloc_block_NF+0x66c>
f0110806:	83 ec 04             	sub    $0x4,%esp
f0110809:	68 14 8a 13 f0       	push   $0xf0138a14
f011080e:	68 3c 02 00 00       	push   $0x23c
f0110813:	68 14 7f 13 f0       	push   $0xf0137f14
f0110818:	e8 e8 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f011081d:	83 ec 0c             	sub    $0xc,%esp
f0110820:	68 00 0c 00 00       	push   $0xc00
f0110825:	e8 53 24 02 00       	call   f0132c7d <alloc_block_NF>
f011082a:	83 c4 10             	add    $0x10,%esp
f011082d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f0110830:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110834:	74 17                	je     f011084d <test_alloc_block_NF+0x69c>
f0110836:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110839:	8b 40 0c             	mov    0xc(%eax),%eax
f011083c:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110841:	75 0a                	jne    f011084d <test_alloc_block_NF+0x69c>
f0110843:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110846:	8b 40 08             	mov    0x8(%eax),%eax
f0110849:	85 c0                	test   %eax,%eax
f011084b:	74 17                	je     f0110864 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011084d:	83 ec 04             	sub    $0x4,%esp
f0110850:	68 20 89 13 f0       	push   $0xf0138920
f0110855:	68 45 02 00 00       	push   $0x245
f011085a:	68 14 7f 13 f0       	push   $0xf0137f14
f011085f:	e8 a1 f9 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110864:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110869:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011086c:	83 ea 02             	sub    $0x2,%edx
f011086f:	39 d0                	cmp    %edx,%eax
f0110871:	75 13                	jne    f0110886 <test_alloc_block_NF+0x6d5>
f0110873:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110878:	83 f8 05             	cmp    $0x5,%eax
f011087b:	75 09                	jne    f0110886 <test_alloc_block_NF+0x6d5>
f011087d:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110882:	85 c0                	test   %eax,%eax
f0110884:	74 17                	je     f011089d <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110886:	83 ec 04             	sub    $0x4,%esp
f0110889:	68 64 89 13 f0       	push   $0xf0138964
f011088e:	68 49 02 00 00       	push   $0x249
f0110893:	68 14 7f 13 f0       	push   $0xf0137f14
f0110898:	e8 68 f9 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011089d:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01108a4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01108a7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01108ae:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01108b5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01108bc:	83 ec 0c             	sub    $0xc,%esp
f01108bf:	ff 75 d8             	pushl  -0x28(%ebp)
f01108c2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01108c8:	50                   	push   %eax
f01108c9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108cc:	50                   	push   %eax
f01108cd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01108d0:	50                   	push   %eax
f01108d1:	68 64 a1 86 f0       	push   $0xf086a164
f01108d6:	e8 48 0d 00 00       	call   f0111623 <check_list_data>
f01108db:	83 c4 20             	add    $0x20,%esp
f01108de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01108e1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01108e5:	74 17                	je     f01108fe <test_alloc_block_NF+0x74d>
f01108e7:	83 ec 04             	sub    $0x4,%esp
f01108ea:	68 c8 89 13 f0       	push   $0xf01389c8
f01108ef:	68 51 02 00 00       	push   $0x251
f01108f4:	68 14 7f 13 f0       	push   $0xf0137f14
f01108f9:	e8 07 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01108fe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110904:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110907:	74 17                	je     f0110920 <test_alloc_block_NF+0x76f>
f0110909:	83 ec 04             	sub    $0x4,%esp
f011090c:	68 14 8a 13 f0       	push   $0xf0138a14
f0110911:	68 52 02 00 00       	push   $0x252
f0110916:	68 14 7f 13 f0       	push   $0xf0137f14
f011091b:	e8 e5 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f0110920:	83 ec 0c             	sub    $0xc,%esp
f0110923:	68 00 04 00 00       	push   $0x400
f0110928:	e8 50 23 02 00       	call   f0132c7d <alloc_block_NF>
f011092d:	83 c4 10             	add    $0x10,%esp
f0110930:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110933:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110937:	74 1a                	je     f0110953 <test_alloc_block_NF+0x7a2>
f0110939:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011093c:	8b 40 0c             	mov    0xc(%eax),%eax
f011093f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110944:	75 0d                	jne    f0110953 <test_alloc_block_NF+0x7a2>
f0110946:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110949:	8b 40 08             	mov    0x8(%eax),%eax
f011094c:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110951:	74 17                	je     f011096a <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110953:	83 ec 04             	sub    $0x4,%esp
f0110956:	68 20 89 13 f0       	push   $0xf0138920
f011095b:	68 5b 02 00 00       	push   $0x25b
f0110960:	68 14 7f 13 f0       	push   $0xf0137f14
f0110965:	e8 9b f8 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011096a:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f011096f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110972:	83 ea 03             	sub    $0x3,%edx
f0110975:	39 d0                	cmp    %edx,%eax
f0110977:	75 13                	jne    f011098c <test_alloc_block_NF+0x7db>
f0110979:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011097e:	83 f8 05             	cmp    $0x5,%eax
f0110981:	75 09                	jne    f011098c <test_alloc_block_NF+0x7db>
f0110983:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110988:	85 c0                	test   %eax,%eax
f011098a:	74 17                	je     f01109a3 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011098c:	83 ec 04             	sub    $0x4,%esp
f011098f:	68 64 89 13 f0       	push   $0xf0138964
f0110994:	68 5f 02 00 00       	push   $0x25f
f0110999:	68 14 7f 13 f0       	push   $0xf0137f14
f011099e:	e8 62 f8 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01109a3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01109aa:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01109ad:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01109b4:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01109bb:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01109c2:	83 ec 0c             	sub    $0xc,%esp
f01109c5:	ff 75 d8             	pushl  -0x28(%ebp)
f01109c8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01109ce:	50                   	push   %eax
f01109cf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109d2:	50                   	push   %eax
f01109d3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01109d6:	50                   	push   %eax
f01109d7:	68 64 a1 86 f0       	push   $0xf086a164
f01109dc:	e8 42 0c 00 00       	call   f0111623 <check_list_data>
f01109e1:	83 c4 20             	add    $0x20,%esp
f01109e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01109e7:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01109eb:	74 17                	je     f0110a04 <test_alloc_block_NF+0x853>
f01109ed:	83 ec 04             	sub    $0x4,%esp
f01109f0:	68 c8 89 13 f0       	push   $0xf01389c8
f01109f5:	68 67 02 00 00       	push   $0x267
f01109fa:	68 14 7f 13 f0       	push   $0xf0137f14
f01109ff:	e8 01 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110a04:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110a0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a0d:	74 17                	je     f0110a26 <test_alloc_block_NF+0x875>
f0110a0f:	83 ec 04             	sub    $0x4,%esp
f0110a12:	68 14 8a 13 f0       	push   $0xf0138a14
f0110a17:	68 68 02 00 00       	push   $0x268
f0110a1c:	68 14 7f 13 f0       	push   $0xf0137f14
f0110a21:	e8 df f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110a26:	83 ec 0c             	sub    $0xc,%esp
f0110a29:	68 60 8a 13 f0       	push   $0xf0138a60
f0110a2e:	e8 db 02 ff ff       	call   f0100d0e <cprintf>
f0110a33:	83 c4 10             	add    $0x10,%esp

}
f0110a36:	90                   	nop
f0110a37:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110a3a:	5b                   	pop    %ebx
f0110a3b:	5e                   	pop    %esi
f0110a3c:	5f                   	pop    %edi
f0110a3d:	5d                   	pop    %ebp
f0110a3e:	c3                   	ret    

f0110a3f <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110a3f:	55                   	push   %ebp
f0110a40:	89 e5                	mov    %esp,%ebp
f0110a42:	57                   	push   %edi
f0110a43:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110a49:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110a50:	83 ec 0c             	sub    $0xc,%esp
f0110a53:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a56:	e8 e4 1a 02 00       	call   f013253f <initialize_MemBlocksList>
f0110a5b:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110a5e:	c7 05 c8 a0 86 f0 00 	movl   $0x0,0xf086a0c8
f0110a65:	00 00 00 
f0110a68:	c7 05 cc a0 86 f0 00 	movl   $0x0,0xf086a0cc
f0110a6f:	00 00 00 
f0110a72:	c7 05 d4 a0 86 f0 00 	movl   $0x0,0xf086a0d4
f0110a79:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110a7c:	c7 05 64 a1 86 f0 00 	movl   $0x0,0xf086a164
f0110a83:	00 00 00 
f0110a86:	c7 05 68 a1 86 f0 00 	movl   $0x0,0xf086a168
f0110a8d:	00 00 00 
f0110a90:	c7 05 70 a1 86 f0 00 	movl   $0x0,0xf086a170
f0110a97:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110a9a:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110a9d:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110aa2:	b8 00 00 00 00       	mov    $0x0,%eax
f0110aa7:	89 d7                	mov    %edx,%edi
f0110aa9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110aab:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110aae:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110ab3:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ab8:	89 d7                	mov    %edx,%edi
f0110aba:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110abc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110ac3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110aca:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ad4:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110adb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110adc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110adf:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110ae6:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aea:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110aee:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110af4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110af8:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110afb:	83 ec 0c             	sub    $0xc,%esp
f0110afe:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110b01:	50                   	push   %eax
f0110b02:	e8 75 23 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0110b07:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110b0a:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110b0f:	85 c0                	test   %eax,%eax
f0110b11:	75 14                	jne    f0110b27 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b13:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110b18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b1b:	75 0a                	jne    f0110b27 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b1d:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110b22:	83 f8 01             	cmp    $0x1,%eax
f0110b25:	74 17                	je     f0110b3e <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110b27:	83 ec 04             	sub    $0x4,%esp
f0110b2a:	68 c0 8a 13 f0       	push   $0xf0138ac0
f0110b2f:	68 88 02 00 00       	push   $0x288
f0110b34:	68 14 7f 13 f0       	push   $0xf0137f14
f0110b39:	e8 c7 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110b3e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110b45:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b4c:	83 ec 0c             	sub    $0xc,%esp
f0110b4f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b52:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b55:	50                   	push   %eax
f0110b56:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b59:	50                   	push   %eax
f0110b5a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b5d:	50                   	push   %eax
f0110b5e:	68 64 a1 86 f0       	push   $0xf086a164
f0110b63:	e8 bb 0a 00 00       	call   f0111623 <check_list_data>
f0110b68:	83 c4 20             	add    $0x20,%esp
f0110b6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b6e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b72:	74 17                	je     f0110b8b <test_insert_sorted_with_merge_freeList+0x14c>
f0110b74:	83 ec 04             	sub    $0x4,%esp
f0110b77:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0110b7c:	68 8e 02 00 00       	push   $0x28e
f0110b81:	68 14 7f 13 f0       	push   $0xf0137f14
f0110b86:	e8 7a f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b8b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b91:	74 17                	je     f0110baa <test_insert_sorted_with_merge_freeList+0x16b>
f0110b93:	83 ec 04             	sub    $0x4,%esp
f0110b96:	68 80 8b 13 f0       	push   $0xf0138b80
f0110b9b:	68 8f 02 00 00       	push   $0x28f
f0110ba0:	68 14 7f 13 f0       	push   $0xf0137f14
f0110ba5:	e8 5b f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110baa:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110bb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bb4:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110bbb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bbf:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110bc6:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bca:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bce:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bd7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bdb:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110bde:	83 ec 0c             	sub    $0xc,%esp
f0110be1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110be7:	50                   	push   %eax
f0110be8:	e8 8f 22 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0110bed:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110bf0:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110bf5:	85 c0                	test   %eax,%eax
f0110bf7:	75 14                	jne    f0110c0d <test_insert_sorted_with_merge_freeList+0x1ce>
f0110bf9:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110bfe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110c01:	75 0a                	jne    f0110c0d <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c03:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110c08:	83 f8 02             	cmp    $0x2,%eax
f0110c0b:	74 17                	je     f0110c24 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c0d:	83 ec 04             	sub    $0x4,%esp
f0110c10:	68 c0 8a 13 f0       	push   $0xf0138ac0
f0110c15:	68 9e 02 00 00       	push   $0x29e
f0110c1a:	68 14 7f 13 f0       	push   $0xf0137f14
f0110c1f:	e8 e1 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c24:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110c2b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c32:	83 ec 0c             	sub    $0xc,%esp
f0110c35:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c38:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c3b:	50                   	push   %eax
f0110c3c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c3f:	50                   	push   %eax
f0110c40:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c43:	50                   	push   %eax
f0110c44:	68 64 a1 86 f0       	push   $0xf086a164
f0110c49:	e8 d5 09 00 00       	call   f0111623 <check_list_data>
f0110c4e:	83 c4 20             	add    $0x20,%esp
f0110c51:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c54:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c58:	74 17                	je     f0110c71 <test_insert_sorted_with_merge_freeList+0x232>
f0110c5a:	83 ec 04             	sub    $0x4,%esp
f0110c5d:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0110c62:	68 a4 02 00 00       	push   $0x2a4
f0110c67:	68 14 7f 13 f0       	push   $0xf0137f14
f0110c6c:	e8 94 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c71:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c74:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c77:	74 17                	je     f0110c90 <test_insert_sorted_with_merge_freeList+0x251>
f0110c79:	83 ec 04             	sub    $0x4,%esp
f0110c7c:	68 80 8b 13 f0       	push   $0xf0138b80
f0110c81:	68 a5 02 00 00       	push   $0x2a5
f0110c86:	68 14 7f 13 f0       	push   $0xf0137f14
f0110c8b:	e8 75 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110c90:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110c97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c9a:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110ca1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ca5:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110cac:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110cad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cb0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110cb4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cbd:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cc1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110cc7:	83 ec 0c             	sub    $0xc,%esp
f0110cca:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110cd0:	50                   	push   %eax
f0110cd1:	e8 a6 21 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0110cd6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110cd9:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110cde:	85 c0                	test   %eax,%eax
f0110ce0:	75 14                	jne    f0110cf6 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110ce2:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110ce7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110cea:	75 0a                	jne    f0110cf6 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110cec:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110cf1:	83 f8 03             	cmp    $0x3,%eax
f0110cf4:	74 17                	je     f0110d0d <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110cf6:	83 ec 04             	sub    $0x4,%esp
f0110cf9:	68 c0 8a 13 f0       	push   $0xf0138ac0
f0110cfe:	68 b4 02 00 00       	push   $0x2b4
f0110d03:	68 14 7f 13 f0       	push   $0xf0137f14
f0110d08:	e8 f8 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d0d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110d14:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d1b:	83 ec 0c             	sub    $0xc,%esp
f0110d1e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d21:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d24:	50                   	push   %eax
f0110d25:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d28:	50                   	push   %eax
f0110d29:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d2c:	50                   	push   %eax
f0110d2d:	68 64 a1 86 f0       	push   $0xf086a164
f0110d32:	e8 ec 08 00 00       	call   f0111623 <check_list_data>
f0110d37:	83 c4 20             	add    $0x20,%esp
f0110d3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d3d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d41:	74 17                	je     f0110d5a <test_insert_sorted_with_merge_freeList+0x31b>
f0110d43:	83 ec 04             	sub    $0x4,%esp
f0110d46:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0110d4b:	68 ba 02 00 00       	push   $0x2ba
f0110d50:	68 14 7f 13 f0       	push   $0xf0137f14
f0110d55:	e8 ab f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d5a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d5d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d60:	74 17                	je     f0110d79 <test_insert_sorted_with_merge_freeList+0x33a>
f0110d62:	83 ec 04             	sub    $0x4,%esp
f0110d65:	68 80 8b 13 f0       	push   $0xf0138b80
f0110d6a:	68 bb 02 00 00       	push   $0x2bb
f0110d6f:	68 14 7f 13 f0       	push   $0xf0137f14
f0110d74:	e8 8c f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110d79:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d83:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110d8a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110d8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d8e:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110d95:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d96:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d99:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d9d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110da6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110daa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110db0:	83 ec 0c             	sub    $0xc,%esp
f0110db3:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110db9:	50                   	push   %eax
f0110dba:	e8 bd 20 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0110dbf:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110dc2:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110dc7:	85 c0                	test   %eax,%eax
f0110dc9:	75 14                	jne    f0110ddf <test_insert_sorted_with_merge_freeList+0x3a0>
f0110dcb:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110dd0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110dd3:	75 0a                	jne    f0110ddf <test_insert_sorted_with_merge_freeList+0x3a0>
f0110dd5:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110dda:	83 f8 04             	cmp    $0x4,%eax
f0110ddd:	74 17                	je     f0110df6 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ddf:	83 ec 04             	sub    $0x4,%esp
f0110de2:	68 c0 8a 13 f0       	push   $0xf0138ac0
f0110de7:	68 ca 02 00 00       	push   $0x2ca
f0110dec:	68 14 7f 13 f0       	push   $0xf0137f14
f0110df1:	e8 0f f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110df6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110dfd:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e04:	83 ec 0c             	sub    $0xc,%esp
f0110e07:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e0a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e0d:	50                   	push   %eax
f0110e0e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e11:	50                   	push   %eax
f0110e12:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e15:	50                   	push   %eax
f0110e16:	68 64 a1 86 f0       	push   $0xf086a164
f0110e1b:	e8 03 08 00 00       	call   f0111623 <check_list_data>
f0110e20:	83 c4 20             	add    $0x20,%esp
f0110e23:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e26:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e2a:	74 17                	je     f0110e43 <test_insert_sorted_with_merge_freeList+0x404>
f0110e2c:	83 ec 04             	sub    $0x4,%esp
f0110e2f:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0110e34:	68 d0 02 00 00       	push   $0x2d0
f0110e39:	68 14 7f 13 f0       	push   $0xf0137f14
f0110e3e:	e8 c2 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e43:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e49:	74 17                	je     f0110e62 <test_insert_sorted_with_merge_freeList+0x423>
f0110e4b:	83 ec 04             	sub    $0x4,%esp
f0110e4e:	68 80 8b 13 f0       	push   $0xf0138b80
f0110e53:	68 d1 02 00 00       	push   $0x2d1
f0110e58:	68 14 7f 13 f0       	push   $0xf0137f14
f0110e5d:	e8 a3 f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110e62:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110e69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e6c:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110e73:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e77:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110e7e:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110e7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e82:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110e86:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110e8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e8f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e93:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110e99:	83 ec 0c             	sub    $0xc,%esp
f0110e9c:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110ea2:	50                   	push   %eax
f0110ea3:	e8 d4 1f 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0110ea8:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110eab:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0110eb0:	85 c0                	test   %eax,%eax
f0110eb2:	75 17                	jne    f0110ecb <test_insert_sorted_with_merge_freeList+0x48c>
f0110eb4:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0110eb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110ebc:	42                   	inc    %edx
f0110ebd:	39 d0                	cmp    %edx,%eax
f0110ebf:	75 0a                	jne    f0110ecb <test_insert_sorted_with_merge_freeList+0x48c>
f0110ec1:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0110ec6:	83 f8 04             	cmp    $0x4,%eax
f0110ec9:	74 17                	je     f0110ee2 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ecb:	83 ec 04             	sub    $0x4,%esp
f0110ece:	68 c0 8a 13 f0       	push   $0xf0138ac0
f0110ed3:	68 e3 02 00 00       	push   $0x2e3
f0110ed8:	68 14 7f 13 f0       	push   $0xf0137f14
f0110edd:	e8 23 f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110ee2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110ee9:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110ef0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ef3:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110ef6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ef9:	48                   	dec    %eax
f0110efa:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110efe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f01:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f05:	01 c8                	add    %ecx,%eax
f0110f07:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f0e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f15:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f19:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110f20:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110f21:	83 ec 0c             	sub    $0xc,%esp
f0110f24:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f27:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f2a:	50                   	push   %eax
f0110f2b:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f2e:	50                   	push   %eax
f0110f2f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f32:	50                   	push   %eax
f0110f33:	68 64 a1 86 f0       	push   $0xf086a164
f0110f38:	e8 e6 06 00 00       	call   f0111623 <check_list_data>
f0110f3d:	83 c4 20             	add    $0x20,%esp
f0110f40:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110f43:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f47:	74 17                	je     f0110f60 <test_insert_sorted_with_merge_freeList+0x521>
f0110f49:	83 ec 04             	sub    $0x4,%esp
f0110f4c:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0110f51:	68 ec 02 00 00       	push   $0x2ec
f0110f56:	68 14 7f 13 f0       	push   $0xf0137f14
f0110f5b:	e8 a5 f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110f60:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110f63:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110f66:	74 17                	je     f0110f7f <test_insert_sorted_with_merge_freeList+0x540>
f0110f68:	83 ec 04             	sub    $0x4,%esp
f0110f6b:	68 80 8b 13 f0       	push   $0xf0138b80
f0110f70:	68 ed 02 00 00       	push   $0x2ed
f0110f75:	68 14 7f 13 f0       	push   $0xf0137f14
f0110f7a:	e8 86 f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110f7f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110f86:	83 ec 0c             	sub    $0xc,%esp
f0110f89:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f8c:	50                   	push   %eax
f0110f8d:	e8 5d 07 00 00       	call   f01116ef <check_avaliable_list_data>
f0110f92:	83 c4 10             	add    $0x10,%esp
f0110f95:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110f9b:	8d 50 01             	lea    0x1(%eax),%edx
f0110f9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fa1:	39 c2                	cmp    %eax,%edx
f0110fa3:	74 17                	je     f0110fbc <test_insert_sorted_with_merge_freeList+0x57d>
f0110fa5:	83 ec 04             	sub    $0x4,%esp
f0110fa8:	68 d4 8b 13 f0       	push   $0xf0138bd4
f0110fad:	68 f2 02 00 00       	push   $0x2f2
f0110fb2:	68 14 7f 13 f0       	push   $0xf0137f14
f0110fb7:	e8 49 f2 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110fbc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fc0:	74 17                	je     f0110fd9 <test_insert_sorted_with_merge_freeList+0x59a>
f0110fc2:	83 ec 04             	sub    $0x4,%esp
f0110fc5:	68 2c 8c 13 f0       	push   $0xf0138c2c
f0110fca:	68 f3 02 00 00       	push   $0x2f3
f0110fcf:	68 14 7f 13 f0       	push   $0xf0137f14
f0110fd4:	e8 2c f2 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110fd9:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110fe0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fe3:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110fea:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110feb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fee:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110ff5:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110ff6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ff9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ffd:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0111003:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111006:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011100a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0111010:	83 ec 0c             	sub    $0xc,%esp
f0111013:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0111019:	50                   	push   %eax
f011101a:	e8 5d 1e 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f011101f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111022:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0111027:	85 c0                	test   %eax,%eax
f0111029:	75 19                	jne    f0111044 <test_insert_sorted_with_merge_freeList+0x605>
f011102b:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0111030:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111033:	83 c2 02             	add    $0x2,%edx
f0111036:	39 d0                	cmp    %edx,%eax
f0111038:	75 0a                	jne    f0111044 <test_insert_sorted_with_merge_freeList+0x605>
f011103a:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f011103f:	83 f8 04             	cmp    $0x4,%eax
f0111042:	74 17                	je     f011105b <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111044:	83 ec 04             	sub    $0x4,%esp
f0111047:	68 c0 8a 13 f0       	push   $0xf0138ac0
f011104c:	68 05 03 00 00       	push   $0x305
f0111051:	68 14 7f 13 f0       	push   $0xf0137f14
f0111056:	e8 aa f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011105b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111062:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0111069:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011106c:	8d 50 ff             	lea    -0x1(%eax),%edx
f011106f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111072:	48                   	dec    %eax
f0111073:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111077:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011107a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011107e:	01 c8                	add    %ecx,%eax
f0111080:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111087:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011108e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011108f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111092:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111099:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011109a:	83 ec 0c             	sub    $0xc,%esp
f011109d:	ff 75 f0             	pushl  -0x10(%ebp)
f01110a0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01110a3:	50                   	push   %eax
f01110a4:	8d 45 98             	lea    -0x68(%ebp),%eax
f01110a7:	50                   	push   %eax
f01110a8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01110ab:	50                   	push   %eax
f01110ac:	68 64 a1 86 f0       	push   $0xf086a164
f01110b1:	e8 6d 05 00 00       	call   f0111623 <check_list_data>
f01110b6:	83 c4 20             	add    $0x20,%esp
f01110b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01110bc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110c0:	74 17                	je     f01110d9 <test_insert_sorted_with_merge_freeList+0x69a>
f01110c2:	83 ec 04             	sub    $0x4,%esp
f01110c5:	68 2c 8b 13 f0       	push   $0xf0138b2c
f01110ca:	68 0e 03 00 00       	push   $0x30e
f01110cf:	68 14 7f 13 f0       	push   $0xf0137f14
f01110d4:	e8 2c f1 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01110d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01110dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01110df:	74 17                	je     f01110f8 <test_insert_sorted_with_merge_freeList+0x6b9>
f01110e1:	83 ec 04             	sub    $0x4,%esp
f01110e4:	68 80 8b 13 f0       	push   $0xf0138b80
f01110e9:	68 0f 03 00 00       	push   $0x30f
f01110ee:	68 14 7f 13 f0       	push   $0xf0137f14
f01110f3:	e8 0d f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01110f8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01110ff:	83 ec 0c             	sub    $0xc,%esp
f0111102:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111105:	50                   	push   %eax
f0111106:	e8 e4 05 00 00       	call   f01116ef <check_avaliable_list_data>
f011110b:	83 c4 10             	add    $0x10,%esp
f011110e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111111:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111114:	8d 50 02             	lea    0x2(%eax),%edx
f0111117:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011111a:	39 c2                	cmp    %eax,%edx
f011111c:	74 17                	je     f0111135 <test_insert_sorted_with_merge_freeList+0x6f6>
f011111e:	83 ec 04             	sub    $0x4,%esp
f0111121:	68 d4 8b 13 f0       	push   $0xf0138bd4
f0111126:	68 14 03 00 00       	push   $0x314
f011112b:	68 14 7f 13 f0       	push   $0xf0137f14
f0111130:	e8 d0 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111135:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111139:	74 17                	je     f0111152 <test_insert_sorted_with_merge_freeList+0x713>
f011113b:	83 ec 04             	sub    $0x4,%esp
f011113e:	68 2c 8c 13 f0       	push   $0xf0138c2c
f0111143:	68 15 03 00 00       	push   $0x315
f0111148:	68 14 7f 13 f0       	push   $0xf0137f14
f011114d:	e8 b3 f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0111152:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111159:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011115c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111163:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0111164:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111167:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011116e:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011116f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111172:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111176:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f011117c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011117f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111183:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0111189:	83 ec 0c             	sub    $0xc,%esp
f011118c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0111192:	50                   	push   %eax
f0111193:	e8 e4 1c 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0111198:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011119b:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01111a0:	85 c0                	test   %eax,%eax
f01111a2:	75 19                	jne    f01111bd <test_insert_sorted_with_merge_freeList+0x77e>
f01111a4:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01111a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01111ac:	83 c2 03             	add    $0x3,%edx
f01111af:	39 d0                	cmp    %edx,%eax
f01111b1:	75 0a                	jne    f01111bd <test_insert_sorted_with_merge_freeList+0x77e>
f01111b3:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f01111b8:	83 f8 04             	cmp    $0x4,%eax
f01111bb:	74 17                	je     f01111d4 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01111bd:	83 ec 04             	sub    $0x4,%esp
f01111c0:	68 c0 8a 13 f0       	push   $0xf0138ac0
f01111c5:	68 28 03 00 00       	push   $0x328
f01111ca:	68 14 7f 13 f0       	push   $0xf0137f14
f01111cf:	e8 31 f0 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01111d4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01111db:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01111e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111e5:	8d 50 01             	lea    0x1(%eax),%edx
f01111e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111eb:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01111ef:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01111f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111f6:	8d 50 01             	lea    0x1(%eax),%edx
f01111f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111fc:	40                   	inc    %eax
f01111fd:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111201:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111204:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111208:	01 c8                	add    %ecx,%eax
f011120a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011120e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111211:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111218:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111219:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011121c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111223:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111224:	83 ec 0c             	sub    $0xc,%esp
f0111227:	ff 75 f0             	pushl  -0x10(%ebp)
f011122a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011122d:	50                   	push   %eax
f011122e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111231:	50                   	push   %eax
f0111232:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111235:	50                   	push   %eax
f0111236:	68 64 a1 86 f0       	push   $0xf086a164
f011123b:	e8 e3 03 00 00       	call   f0111623 <check_list_data>
f0111240:	83 c4 20             	add    $0x20,%esp
f0111243:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111246:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011124a:	74 17                	je     f0111263 <test_insert_sorted_with_merge_freeList+0x824>
f011124c:	83 ec 04             	sub    $0x4,%esp
f011124f:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0111254:	68 32 03 00 00       	push   $0x332
f0111259:	68 14 7f 13 f0       	push   $0xf0137f14
f011125e:	e8 a2 ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111263:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111266:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111269:	74 17                	je     f0111282 <test_insert_sorted_with_merge_freeList+0x843>
f011126b:	83 ec 04             	sub    $0x4,%esp
f011126e:	68 80 8b 13 f0       	push   $0xf0138b80
f0111273:	68 33 03 00 00       	push   $0x333
f0111278:	68 14 7f 13 f0       	push   $0xf0137f14
f011127d:	e8 83 ef fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111282:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111289:	83 ec 0c             	sub    $0xc,%esp
f011128c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011128f:	50                   	push   %eax
f0111290:	e8 5a 04 00 00       	call   f01116ef <check_avaliable_list_data>
f0111295:	83 c4 10             	add    $0x10,%esp
f0111298:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011129b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011129e:	8d 50 03             	lea    0x3(%eax),%edx
f01112a1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112a4:	39 c2                	cmp    %eax,%edx
f01112a6:	74 17                	je     f01112bf <test_insert_sorted_with_merge_freeList+0x880>
f01112a8:	83 ec 04             	sub    $0x4,%esp
f01112ab:	68 d4 8b 13 f0       	push   $0xf0138bd4
f01112b0:	68 38 03 00 00       	push   $0x338
f01112b5:	68 14 7f 13 f0       	push   $0xf0137f14
f01112ba:	e8 46 ef fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01112bf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112c3:	74 17                	je     f01112dc <test_insert_sorted_with_merge_freeList+0x89d>
f01112c5:	83 ec 04             	sub    $0x4,%esp
f01112c8:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01112cd:	68 39 03 00 00       	push   $0x339
f01112d2:	68 14 7f 13 f0       	push   $0xf0137f14
f01112d7:	e8 29 ef fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01112dc:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f01112e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112e6:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f01112ed:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f01112ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112f1:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f01112f8:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01112f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112fc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111300:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0111306:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111309:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011130d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0111313:	83 ec 0c             	sub    $0xc,%esp
f0111316:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011131c:	50                   	push   %eax
f011131d:	e8 5a 1b 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f0111322:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111325:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f011132a:	85 c0                	test   %eax,%eax
f011132c:	75 19                	jne    f0111347 <test_insert_sorted_with_merge_freeList+0x908>
f011132e:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0111333:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111336:	83 c2 04             	add    $0x4,%edx
f0111339:	39 d0                	cmp    %edx,%eax
f011133b:	75 0a                	jne    f0111347 <test_insert_sorted_with_merge_freeList+0x908>
f011133d:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0111342:	83 f8 04             	cmp    $0x4,%eax
f0111345:	74 17                	je     f011135e <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111347:	83 ec 04             	sub    $0x4,%esp
f011134a:	68 c0 8a 13 f0       	push   $0xf0138ac0
f011134f:	68 4c 03 00 00       	push   $0x34c
f0111354:	68 14 7f 13 f0       	push   $0xf0137f14
f0111359:	e8 a7 ee fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011135e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111365:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f011136c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011136f:	8d 50 01             	lea    0x1(%eax),%edx
f0111372:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111375:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111379:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011137d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111380:	8d 50 01             	lea    0x1(%eax),%edx
f0111383:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111386:	40                   	inc    %eax
f0111387:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011138b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011138e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111392:	01 c8                	add    %ecx,%eax
f0111394:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111398:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011139b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01113a2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01113a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113a6:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01113ad:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01113ae:	83 ec 0c             	sub    $0xc,%esp
f01113b1:	ff 75 f0             	pushl  -0x10(%ebp)
f01113b4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01113b7:	50                   	push   %eax
f01113b8:	8d 45 98             	lea    -0x68(%ebp),%eax
f01113bb:	50                   	push   %eax
f01113bc:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01113bf:	50                   	push   %eax
f01113c0:	68 64 a1 86 f0       	push   $0xf086a164
f01113c5:	e8 59 02 00 00       	call   f0111623 <check_list_data>
f01113ca:	83 c4 20             	add    $0x20,%esp
f01113cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01113d0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01113d4:	74 17                	je     f01113ed <test_insert_sorted_with_merge_freeList+0x9ae>
f01113d6:	83 ec 04             	sub    $0x4,%esp
f01113d9:	68 2c 8b 13 f0       	push   $0xf0138b2c
f01113de:	68 56 03 00 00       	push   $0x356
f01113e3:	68 14 7f 13 f0       	push   $0xf0137f14
f01113e8:	e8 18 ee fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01113ed:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01113f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01113f3:	74 17                	je     f011140c <test_insert_sorted_with_merge_freeList+0x9cd>
f01113f5:	83 ec 04             	sub    $0x4,%esp
f01113f8:	68 80 8b 13 f0       	push   $0xf0138b80
f01113fd:	68 57 03 00 00       	push   $0x357
f0111402:	68 14 7f 13 f0       	push   $0xf0137f14
f0111407:	e8 f9 ed fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011140c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111413:	83 ec 0c             	sub    $0xc,%esp
f0111416:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111419:	50                   	push   %eax
f011141a:	e8 d0 02 00 00       	call   f01116ef <check_avaliable_list_data>
f011141f:	83 c4 10             	add    $0x10,%esp
f0111422:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111425:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111428:	8d 50 04             	lea    0x4(%eax),%edx
f011142b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011142e:	39 c2                	cmp    %eax,%edx
f0111430:	74 17                	je     f0111449 <test_insert_sorted_with_merge_freeList+0xa0a>
f0111432:	83 ec 04             	sub    $0x4,%esp
f0111435:	68 d4 8b 13 f0       	push   $0xf0138bd4
f011143a:	68 5c 03 00 00       	push   $0x35c
f011143f:	68 14 7f 13 f0       	push   $0xf0137f14
f0111444:	e8 bc ed fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111449:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011144d:	74 17                	je     f0111466 <test_insert_sorted_with_merge_freeList+0xa27>
f011144f:	83 ec 04             	sub    $0x4,%esp
f0111452:	68 2c 8c 13 f0       	push   $0xf0138c2c
f0111457:	68 5d 03 00 00       	push   $0x35d
f011145c:	68 14 7f 13 f0       	push   $0xf0137f14
f0111461:	e8 9f ed fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111466:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f011146d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111470:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111477:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111478:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011147b:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0111482:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111483:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111486:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011148a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0111490:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111493:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111497:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f011149d:	83 ec 0c             	sub    $0xc,%esp
f01114a0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01114a6:	50                   	push   %eax
f01114a7:	e8 d0 19 02 00       	call   f0132e7c <insert_sorted_with_merge_freeList>
f01114ac:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01114af:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01114b4:	85 c0                	test   %eax,%eax
f01114b6:	75 19                	jne    f01114d1 <test_insert_sorted_with_merge_freeList+0xa92>
f01114b8:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01114bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01114c0:	83 c2 06             	add    $0x6,%edx
f01114c3:	39 d0                	cmp    %edx,%eax
f01114c5:	75 0a                	jne    f01114d1 <test_insert_sorted_with_merge_freeList+0xa92>
f01114c7:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f01114cc:	83 f8 03             	cmp    $0x3,%eax
f01114cf:	74 17                	je     f01114e8 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01114d1:	83 ec 04             	sub    $0x4,%esp
f01114d4:	68 c0 8a 13 f0       	push   $0xf0138ac0
f01114d9:	68 70 03 00 00       	push   $0x370
f01114de:	68 14 7f 13 f0       	push   $0xf0137f14
f01114e3:	e8 1d ed fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01114e8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01114ef:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f01114f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114f9:	48                   	dec    %eax
f01114fa:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111501:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0111502:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111505:	8d 50 ff             	lea    -0x1(%eax),%edx
f0111508:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011150b:	48                   	dec    %eax
f011150c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111510:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111513:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111517:	01 c1                	add    %eax,%ecx
f0111519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011151c:	40                   	inc    %eax
f011151d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111521:	01 c8                	add    %ecx,%eax
f0111523:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111527:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011152a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111531:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111532:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111535:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011153c:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f011153d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111540:	40                   	inc    %eax
f0111541:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111548:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111549:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011154c:	40                   	inc    %eax
f011154d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111554:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111555:	83 ec 0c             	sub    $0xc,%esp
f0111558:	ff 75 f0             	pushl  -0x10(%ebp)
f011155b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011155e:	50                   	push   %eax
f011155f:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111562:	50                   	push   %eax
f0111563:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111566:	50                   	push   %eax
f0111567:	68 64 a1 86 f0       	push   $0xf086a164
f011156c:	e8 b2 00 00 00       	call   f0111623 <check_list_data>
f0111571:	83 c4 20             	add    $0x20,%esp
f0111574:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111577:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011157b:	74 17                	je     f0111594 <test_insert_sorted_with_merge_freeList+0xb55>
f011157d:	83 ec 04             	sub    $0x4,%esp
f0111580:	68 2c 8b 13 f0       	push   $0xf0138b2c
f0111585:	68 7c 03 00 00       	push   $0x37c
f011158a:	68 14 7f 13 f0       	push   $0xf0137f14
f011158f:	e8 71 ec fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111594:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111597:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011159a:	74 17                	je     f01115b3 <test_insert_sorted_with_merge_freeList+0xb74>
f011159c:	83 ec 04             	sub    $0x4,%esp
f011159f:	68 80 8b 13 f0       	push   $0xf0138b80
f01115a4:	68 7d 03 00 00       	push   $0x37d
f01115a9:	68 14 7f 13 f0       	push   $0xf0137f14
f01115ae:	e8 52 ec fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01115b3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01115ba:	83 ec 0c             	sub    $0xc,%esp
f01115bd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01115c0:	50                   	push   %eax
f01115c1:	e8 29 01 00 00       	call   f01116ef <check_avaliable_list_data>
f01115c6:	83 c4 10             	add    $0x10,%esp
f01115c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01115cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115cf:	8d 50 06             	lea    0x6(%eax),%edx
f01115d2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01115d5:	39 c2                	cmp    %eax,%edx
f01115d7:	74 17                	je     f01115f0 <test_insert_sorted_with_merge_freeList+0xbb1>
f01115d9:	83 ec 04             	sub    $0x4,%esp
f01115dc:	68 d4 8b 13 f0       	push   $0xf0138bd4
f01115e1:	68 82 03 00 00       	push   $0x382
f01115e6:	68 14 7f 13 f0       	push   $0xf0137f14
f01115eb:	e8 15 ec fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01115f0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115f4:	74 17                	je     f011160d <test_insert_sorted_with_merge_freeList+0xbce>
f01115f6:	83 ec 04             	sub    $0x4,%esp
f01115f9:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01115fe:	68 83 03 00 00       	push   $0x383
f0111603:	68 14 7f 13 f0       	push   $0xf0137f14
f0111608:	e8 f8 eb fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f011160d:	83 ec 0c             	sub    $0xc,%esp
f0111610:	68 88 8c 13 f0       	push   $0xf0138c88
f0111615:	e8 f4 f6 fe ff       	call   f0100d0e <cprintf>
f011161a:	83 c4 10             	add    $0x10,%esp

}
f011161d:	90                   	nop
f011161e:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0111621:	c9                   	leave  
f0111622:	c3                   	ret    

f0111623 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0111623:	55                   	push   %ebp
f0111624:	89 e5                	mov    %esp,%ebp
f0111626:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111629:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0111630:	8b 45 14             	mov    0x14(%ebp),%eax
f0111633:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111639:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0111640:	8b 45 08             	mov    0x8(%ebp),%eax
f0111643:	8b 00                	mov    (%eax),%eax
f0111645:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111648:	eb 6e                	jmp    f01116b8 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f011164a:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f011164d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111650:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111657:	8b 45 10             	mov    0x10(%ebp),%eax
f011165a:	01 d0                	add    %edx,%eax
f011165c:	8b 00                	mov    (%eax),%eax
f011165e:	85 c0                	test   %eax,%eax
f0111660:	74 e8                	je     f011164a <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0111662:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111665:	8b 50 08             	mov    0x8(%eax),%edx
f0111668:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011166b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111675:	01 c8                	add    %ecx,%eax
f0111677:	8b 00                	mov    (%eax),%eax
f0111679:	39 c2                	cmp    %eax,%edx
f011167b:	75 1b                	jne    f0111698 <check_list_data+0x75>
f011167d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111680:	8b 50 0c             	mov    0xc(%eax),%edx
f0111683:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111686:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011168d:	8b 45 10             	mov    0x10(%ebp),%eax
f0111690:	01 c8                	add    %ecx,%eax
f0111692:	8b 00                	mov    (%eax),%eax
f0111694:	39 c2                	cmp    %eax,%edx
f0111696:	74 07                	je     f011169f <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0111698:	b8 00 00 00 00       	mov    $0x0,%eax
f011169d:	eb 4e                	jmp    f01116ed <check_list_data+0xca>
		}
		(*size)++;
f011169f:	8b 45 14             	mov    0x14(%ebp),%eax
f01116a2:	8b 00                	mov    (%eax),%eax
f01116a4:	8d 50 01             	lea    0x1(%eax),%edx
f01116a7:	8b 45 14             	mov    0x14(%ebp),%eax
f01116aa:	89 10                	mov    %edx,(%eax)
		i++;
f01116ac:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01116af:	8b 45 08             	mov    0x8(%ebp),%eax
f01116b2:	8b 40 08             	mov    0x8(%eax),%eax
f01116b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01116b8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01116bc:	74 07                	je     f01116c5 <check_list_data+0xa2>
f01116be:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116c1:	8b 00                	mov    (%eax),%eax
f01116c3:	eb 05                	jmp    f01116ca <check_list_data+0xa7>
f01116c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01116ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01116cd:	89 42 08             	mov    %eax,0x8(%edx)
f01116d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01116d3:	8b 40 08             	mov    0x8(%eax),%eax
f01116d6:	85 c0                	test   %eax,%eax
f01116d8:	0f 85 6f ff ff ff    	jne    f011164d <check_list_data+0x2a>
f01116de:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01116e2:	0f 85 65 ff ff ff    	jne    f011164d <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01116e8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01116ed:	c9                   	leave  
f01116ee:	c3                   	ret    

f01116ef <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01116ef:	55                   	push   %ebp
f01116f0:	89 e5                	mov    %esp,%ebp
f01116f2:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01116f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01116fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01116ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111705:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f011170a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011170d:	eb 30                	jmp    f011173f <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f011170f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111712:	8b 40 08             	mov    0x8(%eax),%eax
f0111715:	85 c0                	test   %eax,%eax
f0111717:	75 0a                	jne    f0111723 <check_avaliable_list_data+0x34>
f0111719:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011171c:	8b 40 0c             	mov    0xc(%eax),%eax
f011171f:	85 c0                	test   %eax,%eax
f0111721:	74 07                	je     f011172a <check_avaliable_list_data+0x3b>
		{
			return 0;
f0111723:	b8 00 00 00 00       	mov    $0x0,%eax
f0111728:	eb 40                	jmp    f011176a <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f011172a:	8b 45 08             	mov    0x8(%ebp),%eax
f011172d:	8b 00                	mov    (%eax),%eax
f011172f:	8d 50 01             	lea    0x1(%eax),%edx
f0111732:	8b 45 08             	mov    0x8(%ebp),%eax
f0111735:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111737:	a1 a0 a1 86 f0       	mov    0xf086a1a0,%eax
f011173c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011173f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111743:	74 07                	je     f011174c <check_avaliable_list_data+0x5d>
f0111745:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111748:	8b 00                	mov    (%eax),%eax
f011174a:	eb 05                	jmp    f0111751 <check_avaliable_list_data+0x62>
f011174c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111751:	a3 a0 a1 86 f0       	mov    %eax,0xf086a1a0
f0111756:	a1 a0 a1 86 f0       	mov    0xf086a1a0,%eax
f011175b:	85 c0                	test   %eax,%eax
f011175d:	75 b0                	jne    f011170f <check_avaliable_list_data+0x20>
f011175f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111763:	75 aa                	jne    f011170f <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111765:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011176a:	c9                   	leave  
f011176b:	c3                   	ret    

f011176c <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011176c:	55                   	push   %ebp
f011176d:	89 e5                	mov    %esp,%ebp
f011176f:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0111772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111779:	8b 45 08             	mov    0x8(%ebp),%eax
f011177c:	8b 00                	mov    (%eax),%eax
f011177e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111781:	eb 27                	jmp    f01117aa <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0111783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111786:	8b 50 0c             	mov    0xc(%eax),%edx
f0111789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011178c:	8b 40 08             	mov    0x8(%eax),%eax
f011178f:	83 ec 04             	sub    $0x4,%esp
f0111792:	52                   	push   %edx
f0111793:	50                   	push   %eax
f0111794:	68 d8 7f 13 f0       	push   $0xf0137fd8
f0111799:	e8 70 f5 fe ff       	call   f0100d0e <cprintf>
f011179e:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01117a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01117a4:	8b 40 08             	mov    0x8(%eax),%eax
f01117a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01117aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01117ae:	74 07                	je     f01117b7 <show_list_content+0x4b>
f01117b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117b3:	8b 00                	mov    (%eax),%eax
f01117b5:	eb 05                	jmp    f01117bc <show_list_content+0x50>
f01117b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01117bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01117bf:	89 42 08             	mov    %eax,0x8(%edx)
f01117c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01117c5:	8b 40 08             	mov    0x8(%eax),%eax
f01117c8:	85 c0                	test   %eax,%eax
f01117ca:	75 b7                	jne    f0111783 <show_list_content+0x17>
f01117cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01117d0:	75 b1                	jne    f0111783 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01117d2:	90                   	nop
f01117d3:	c9                   	leave  
f01117d4:	c3                   	ret    

f01117d5 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01117d5:	55                   	push   %ebp
f01117d6:	89 e5                	mov    %esp,%ebp
f01117d8:	57                   	push   %edi
f01117d9:	56                   	push   %esi
f01117da:	53                   	push   %ebx
f01117db:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01117e1:	83 ec 0c             	sub    $0xc,%esp
f01117e4:	68 dc 8c 13 f0       	push   $0xf0138cdc
f01117e9:	e8 20 f5 fe ff       	call   f0100d0e <cprintf>
f01117ee:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01117f1:	83 ec 0c             	sub    $0xc,%esp
f01117f4:	68 00 8d 13 f0       	push   $0xf0138d00
f01117f9:	e8 10 f5 fe ff       	call   f0100d0e <cprintf>
f01117fe:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111801:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111808:	83 ec 0c             	sub    $0xc,%esp
f011180b:	68 1c 8d 13 f0       	push   $0xf0138d1c
f0111810:	e8 f9 f4 fe ff       	call   f0100d0e <cprintf>
f0111815:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111818:	8d 45 80             	lea    -0x80(%ebp),%eax
f011181b:	bb d6 8d 13 f0       	mov    $0xf0138dd6,%ebx
f0111820:	ba 03 00 00 00       	mov    $0x3,%edx
f0111825:	89 c7                	mov    %eax,%edi
f0111827:	89 de                	mov    %ebx,%esi
f0111829:	89 d1                	mov    %edx,%ecx
f011182b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011182d:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111830:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111835:	b8 00 00 00 00       	mov    $0x0,%eax
f011183a:	89 d7                	mov    %edx,%edi
f011183c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f011183e:	83 ec 0c             	sub    $0xc,%esp
f0111841:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111844:	50                   	push   %eax
f0111845:	e8 26 f5 fe ff       	call   f0100d70 <execute_command>
f011184a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011184d:	83 ec 0c             	sub    $0xc,%esp
f0111850:	68 4a 8d 13 f0       	push   $0xf0138d4a
f0111855:	e8 b4 f4 fe ff       	call   f0100d0e <cprintf>
f011185a:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f011185d:	83 ec 0c             	sub    $0xc,%esp
f0111860:	68 60 8d 13 f0       	push   $0xf0138d60
f0111865:	e8 a4 f4 fe ff       	call   f0100d0e <cprintf>
f011186a:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f011186d:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111874:	65 00 00 
f0111877:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011187d:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111882:	b8 00 00 00 00       	mov    $0x0,%eax
f0111887:	89 d7                	mov    %edx,%edi
f0111889:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f011188b:	83 ec 0c             	sub    $0xc,%esp
f011188e:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111894:	50                   	push   %eax
f0111895:	e8 d6 f4 fe ff       	call   f0100d70 <execute_command>
f011189a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011189d:	83 ec 0c             	sub    $0xc,%esp
f01118a0:	68 4a 8d 13 f0       	push   $0xf0138d4a
f01118a5:	e8 64 f4 fe ff       	call   f0100d0e <cprintf>
f01118aa:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01118ad:	83 ec 0c             	sub    $0xc,%esp
f01118b0:	68 88 8d 13 f0       	push   $0xf0138d88
f01118b5:	e8 54 f4 fe ff       	call   f0100d0e <cprintf>
f01118ba:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01118bd:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01118c4:	75 00 00 
f01118c7:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01118cd:	b9 18 00 00 00       	mov    $0x18,%ecx
f01118d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01118d7:	89 d7                	mov    %edx,%edi
f01118d9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01118db:	83 ec 0c             	sub    $0xc,%esp
f01118de:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01118e4:	50                   	push   %eax
f01118e5:	e8 86 f4 fe ff       	call   f0100d70 <execute_command>
f01118ea:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01118ed:	83 ec 0c             	sub    $0xc,%esp
f01118f0:	68 4a 8d 13 f0       	push   $0xf0138d4a
f01118f5:	e8 14 f4 fe ff       	call   f0100d0e <cprintf>
f01118fa:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01118fd:	83 ec 0c             	sub    $0xc,%esp
f0111900:	68 b0 8d 13 f0       	push   $0xf0138db0
f0111905:	e8 04 f4 fe ff       	call   f0100d0e <cprintf>
f011190a:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011190d:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111914:	6d 6d 00 
f0111917:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f011191d:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111922:	b8 00 00 00 00       	mov    $0x0,%eax
f0111927:	89 d7                	mov    %edx,%edi
f0111929:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f011192b:	83 ec 0c             	sub    $0xc,%esp
f011192e:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111934:	50                   	push   %eax
f0111935:	e8 36 f4 fe ff       	call   f0100d70 <execute_command>
f011193a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011193d:	83 ec 0c             	sub    $0xc,%esp
f0111940:	68 4a 8d 13 f0       	push   $0xf0138d4a
f0111945:	e8 c4 f3 fe ff       	call   f0100d0e <cprintf>
f011194a:	83 c4 10             	add    $0x10,%esp
	return 0;
f011194d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111952:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111955:	5b                   	pop    %ebx
f0111956:	5e                   	pop    %esi
f0111957:	5f                   	pop    %edi
f0111958:	5d                   	pop    %ebp
f0111959:	c3                   	ret    

f011195a <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011195a:	55                   	push   %ebp
f011195b:	89 e5                	mov    %esp,%ebp
f011195d:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111960:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111967:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011196e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111975:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f011197a:	ff 75 ec             	pushl  -0x14(%ebp)
f011197d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111980:	ff 75 f4             	pushl  -0xc(%ebp)
f0111983:	50                   	push   %eax
f0111984:	e8 0a 63 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111989:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011198c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111991:	ff 75 ec             	pushl  -0x14(%ebp)
f0111994:	ff 75 f0             	pushl  -0x10(%ebp)
f0111997:	ff 75 f4             	pushl  -0xc(%ebp)
f011199a:	50                   	push   %eax
f011199b:	e8 9e 4e 00 00       	call   f011683e <CP>
f01119a0:	83 c4 10             	add    $0x10,%esp
f01119a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01119a6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01119aa:	74 14                	je     f01119c0 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01119ac:	83 ec 04             	sub    $0x4,%esp
f01119af:	68 3c 8e 13 f0       	push   $0xf0138e3c
f01119b4:	6a 5a                	push   $0x5a
f01119b6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01119bb:	e8 45 e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01119c0:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01119c7:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01119ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119d5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01119da:	ff 75 ec             	pushl  -0x14(%ebp)
f01119dd:	ff 75 f0             	pushl  -0x10(%ebp)
f01119e0:	ff 75 f4             	pushl  -0xc(%ebp)
f01119e3:	50                   	push   %eax
f01119e4:	e8 aa 62 ff ff       	call   f0107c93 <pt_set_page_permissions>
f01119e9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119ec:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01119f1:	ff 75 ec             	pushl  -0x14(%ebp)
f01119f4:	ff 75 f0             	pushl  -0x10(%ebp)
f01119f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01119fa:	50                   	push   %eax
f01119fb:	e8 3e 4e 00 00       	call   f011683e <CP>
f0111a00:	83 c4 10             	add    $0x10,%esp
f0111a03:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a06:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a0a:	74 14                	je     f0111a20 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111a0c:	83 ec 04             	sub    $0x4,%esp
f0111a0f:	68 7c 8e 13 f0       	push   $0xf0138e7c
f0111a14:	6a 66                	push   $0x66
f0111a16:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111a1b:	e8 e5 e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111a20:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111a27:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111a2e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a35:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a40:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a43:	50                   	push   %eax
f0111a44:	e8 4a 62 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111a49:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a4c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111a51:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a54:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a57:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a5a:	50                   	push   %eax
f0111a5b:	e8 de 4d 00 00       	call   f011683e <CP>
f0111a60:	83 c4 10             	add    $0x10,%esp
f0111a63:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a66:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a6a:	74 14                	je     f0111a80 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111a6c:	83 ec 04             	sub    $0x4,%esp
f0111a6f:	68 a0 8e 13 f0       	push   $0xf0138ea0
f0111a74:	6a 71                	push   $0x71
f0111a76:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111a7b:	e8 85 e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111a80:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111a87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111a8e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a95:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111a9a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a9d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111aa0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aa3:	50                   	push   %eax
f0111aa4:	e8 ea 61 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111aa9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111aac:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111ab1:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ab4:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ab7:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aba:	50                   	push   %eax
f0111abb:	e8 7e 4d 00 00       	call   f011683e <CP>
f0111ac0:	83 c4 10             	add    $0x10,%esp
f0111ac3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ac6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111aca:	74 14                	je     f0111ae0 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111acc:	83 ec 04             	sub    $0x4,%esp
f0111acf:	68 c4 8e 13 f0       	push   $0xf0138ec4
f0111ad4:	6a 7d                	push   $0x7d
f0111ad6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111adb:	e8 25 e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111ae0:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111ae7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111aee:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111af5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111afa:	ff 75 ec             	pushl  -0x14(%ebp)
f0111afd:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b00:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b03:	50                   	push   %eax
f0111b04:	e8 8a 61 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111b09:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b0c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111b11:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b14:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b17:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b1a:	50                   	push   %eax
f0111b1b:	e8 1e 4d 00 00       	call   f011683e <CP>
f0111b20:	83 c4 10             	add    $0x10,%esp
f0111b23:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b26:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b2a:	74 17                	je     f0111b43 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111b2c:	83 ec 04             	sub    $0x4,%esp
f0111b2f:	68 e8 8e 13 f0       	push   $0xf0138ee8
f0111b34:	68 89 00 00 00       	push   $0x89
f0111b39:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111b3e:	e8 c2 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111b43:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111b4a:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111b51:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b58:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111b5d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b60:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b63:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b66:	50                   	push   %eax
f0111b67:	e8 27 61 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111b6c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b6f:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111b74:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b77:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b7d:	50                   	push   %eax
f0111b7e:	e8 bb 4c 00 00       	call   f011683e <CP>
f0111b83:	83 c4 10             	add    $0x10,%esp
f0111b86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b89:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b8d:	74 17                	je     f0111ba6 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111b8f:	83 ec 04             	sub    $0x4,%esp
f0111b92:	68 0c 8f 13 f0       	push   $0xf0138f0c
f0111b97:	68 95 00 00 00       	push   $0x95
f0111b9c:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111ba1:	e8 5f e6 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111ba6:	83 ec 0c             	sub    $0xc,%esp
f0111ba9:	68 38 8f 13 f0       	push   $0xf0138f38
f0111bae:	e8 5b f1 fe ff       	call   f0100d0e <cprintf>
f0111bb3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111bb6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111bbb:	c9                   	leave  
f0111bbc:	c3                   	ret    

f0111bbd <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111bbd:	55                   	push   %ebp
f0111bbe:	89 e5                	mov    %esp,%ebp
f0111bc0:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111bc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111bca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111bd1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111bd8:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111bdd:	ff 75 ec             	pushl  -0x14(%ebp)
f0111be0:	ff 75 f0             	pushl  -0x10(%ebp)
f0111be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111be6:	50                   	push   %eax
f0111be7:	e8 a7 60 ff ff       	call   f0107c93 <pt_set_page_permissions>
f0111bec:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111bef:	83 ec 04             	sub    $0x4,%esp
f0111bf2:	68 88 8f 13 f0       	push   $0xf0138f88
f0111bf7:	68 a2 00 00 00       	push   $0xa2
f0111bfc:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111c01:	e8 ff e5 fe ff       	call   f0100205 <_panic>

f0111c06 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111c06:	55                   	push   %ebp
f0111c07:	89 e5                	mov    %esp,%ebp
f0111c09:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111c0c:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c13:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111c18:	83 ec 08             	sub    $0x8,%esp
f0111c1b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c1e:	50                   	push   %eax
f0111c1f:	e8 24 61 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0111c24:	83 c4 10             	add    $0x10,%esp
f0111c27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111c2a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111c2e:	74 17                	je     f0111c47 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111c30:	83 ec 04             	sub    $0x4,%esp
f0111c33:	68 24 90 13 f0       	push   $0xf0139024
f0111c38:	68 b0 00 00 00       	push   $0xb0
f0111c3d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111c42:	e8 be e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111c47:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c4e:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111c53:	83 ec 08             	sub    $0x8,%esp
f0111c56:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c59:	50                   	push   %eax
f0111c5a:	e8 e9 60 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0111c5f:	83 c4 10             	add    $0x10,%esp
f0111c62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111c65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111c69:	74 17                	je     f0111c82 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111c6b:	83 ec 04             	sub    $0x4,%esp
f0111c6e:	68 48 90 13 f0       	push   $0xf0139048
f0111c73:	68 b8 00 00 00       	push   $0xb8
f0111c78:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111c7d:	e8 83 e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111c82:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c89:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111c8e:	83 ec 08             	sub    $0x8,%esp
f0111c91:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c94:	50                   	push   %eax
f0111c95:	e8 ae 60 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0111c9a:	83 c4 10             	add    $0x10,%esp
f0111c9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111ca0:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111ca4:	74 17                	je     f0111cbd <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111ca6:	83 ec 04             	sub    $0x4,%esp
f0111ca9:	68 6c 90 13 f0       	push   $0xf013906c
f0111cae:	68 c0 00 00 00       	push   $0xc0
f0111cb3:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111cb8:	e8 48 e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111cbd:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cc4:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111cc9:	83 ec 08             	sub    $0x8,%esp
f0111ccc:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ccf:	50                   	push   %eax
f0111cd0:	e8 73 60 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0111cd5:	83 c4 10             	add    $0x10,%esp
f0111cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111cdb:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111cdf:	74 17                	je     f0111cf8 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111ce1:	83 ec 04             	sub    $0x4,%esp
f0111ce4:	68 90 90 13 f0       	push   $0xf0139090
f0111ce9:	68 c7 00 00 00       	push   $0xc7
f0111cee:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111cf3:	e8 0d e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111cf8:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cff:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111d04:	83 ec 08             	sub    $0x8,%esp
f0111d07:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d0a:	50                   	push   %eax
f0111d0b:	e8 38 60 ff ff       	call   f0107d48 <pt_get_page_permissions>
f0111d10:	83 c4 10             	add    $0x10,%esp
f0111d13:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111d16:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111d1a:	74 17                	je     f0111d33 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111d1c:	83 ec 04             	sub    $0x4,%esp
f0111d1f:	68 b4 90 13 f0       	push   $0xf01390b4
f0111d24:	68 ce 00 00 00       	push   $0xce
f0111d29:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111d2e:	e8 d2 e4 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111d33:	83 ec 0c             	sub    $0xc,%esp
f0111d36:	68 d8 90 13 f0       	push   $0xf01390d8
f0111d3b:	e8 ce ef fe ff       	call   f0100d0e <cprintf>
f0111d40:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111d43:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d48:	c9                   	leave  
f0111d49:	c3                   	ret    

f0111d4a <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111d4a:	55                   	push   %ebp
f0111d4b:	89 e5                	mov    %esp,%ebp
f0111d4d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111d50:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111d57:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111d5c:	83 ec 08             	sub    $0x8,%esp
f0111d5f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d62:	50                   	push   %eax
f0111d63:	e8 3e 60 ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f0111d68:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111d6b:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111d70:	83 ec 08             	sub    $0x8,%esp
f0111d73:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d76:	50                   	push   %eax
f0111d77:	e8 1e 4a 00 00       	call   f011679a <CE>
f0111d7c:	83 c4 10             	add    $0x10,%esp
f0111d7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111d82:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111d86:	74 17                	je     f0111d9f <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111d88:	83 ec 04             	sub    $0x4,%esp
f0111d8b:	68 20 91 13 f0       	push   $0xf0139120
f0111d90:	68 de 00 00 00       	push   $0xde
f0111d95:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111d9a:	e8 66 e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111d9f:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111da6:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111dab:	83 ec 08             	sub    $0x8,%esp
f0111dae:	ff 75 f4             	pushl  -0xc(%ebp)
f0111db1:	50                   	push   %eax
f0111db2:	e8 ef 5f ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f0111db7:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111dba:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111dbf:	83 ec 08             	sub    $0x8,%esp
f0111dc2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dc5:	50                   	push   %eax
f0111dc6:	e8 cf 49 00 00       	call   f011679a <CE>
f0111dcb:	83 c4 10             	add    $0x10,%esp
f0111dce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111dd1:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111dd5:	74 17                	je     f0111dee <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111dd7:	83 ec 04             	sub    $0x4,%esp
f0111dda:	68 4c 91 13 f0       	push   $0xf013914c
f0111ddf:	68 e6 00 00 00       	push   $0xe6
f0111de4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111de9:	e8 17 e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111dee:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111df5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111dfa:	83 ec 08             	sub    $0x8,%esp
f0111dfd:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e00:	50                   	push   %eax
f0111e01:	e8 a0 5f ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f0111e06:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e09:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111e0e:	83 ec 08             	sub    $0x8,%esp
f0111e11:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e14:	50                   	push   %eax
f0111e15:	e8 80 49 00 00       	call   f011679a <CE>
f0111e1a:	83 c4 10             	add    $0x10,%esp
f0111e1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e20:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e24:	74 17                	je     f0111e3d <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111e26:	83 ec 04             	sub    $0x4,%esp
f0111e29:	68 78 91 13 f0       	push   $0xf0139178
f0111e2e:	68 ee 00 00 00       	push   $0xee
f0111e33:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111e38:	e8 c8 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111e3d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e44:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111e49:	83 ec 08             	sub    $0x8,%esp
f0111e4c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e4f:	50                   	push   %eax
f0111e50:	e8 51 5f ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f0111e55:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e58:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111e5d:	83 ec 08             	sub    $0x8,%esp
f0111e60:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e63:	50                   	push   %eax
f0111e64:	e8 31 49 00 00       	call   f011679a <CE>
f0111e69:	83 c4 10             	add    $0x10,%esp
f0111e6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e6f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e73:	74 17                	je     f0111e8c <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111e75:	83 ec 04             	sub    $0x4,%esp
f0111e78:	68 a4 91 13 f0       	push   $0xf01391a4
f0111e7d:	68 f6 00 00 00       	push   $0xf6
f0111e82:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111e87:	e8 79 e3 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111e8c:	83 ec 0c             	sub    $0xc,%esp
f0111e8f:	68 d0 91 13 f0       	push   $0xf01391d0
f0111e94:	e8 75 ee fe ff       	call   f0100d0e <cprintf>
f0111e99:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111e9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ea1:	c9                   	leave  
f0111ea2:	c3                   	ret    

f0111ea3 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111ea3:	55                   	push   %ebp
f0111ea4:	89 e5                	mov    %esp,%ebp
f0111ea6:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111ea9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111eb0:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111eb5:	83 ec 08             	sub    $0x8,%esp
f0111eb8:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ebb:	50                   	push   %eax
f0111ebc:	e8 e5 5e ff ff       	call   f0107da6 <pt_clear_page_table_entry>
f0111ec1:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111ec4:	83 ec 04             	sub    $0x4,%esp
f0111ec7:	68 1c 92 13 f0       	push   $0xf013921c
f0111ecc:	68 01 01 00 00       	push   $0x101
f0111ed1:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111ed6:	e8 2a e3 fe ff       	call   f0100205 <_panic>

f0111edb <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111edb:	55                   	push   %ebp
f0111edc:	89 e5                	mov    %esp,%ebp
f0111ede:	57                   	push   %edi
f0111edf:	56                   	push   %esi
f0111ee0:	53                   	push   %ebx
f0111ee1:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111ee7:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111eee:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111ef5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111efa:	83 ec 0c             	sub    $0xc,%esp
f0111efd:	50                   	push   %eax
f0111efe:	e8 79 49 00 00       	call   f011687c <ClearUserSpace>
f0111f03:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111f06:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111f0d:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111f12:	83 ec 08             	sub    $0x8,%esp
f0111f15:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f18:	50                   	push   %eax
f0111f19:	e8 0e 5f ff ff       	call   f0107e2c <virtual_to_physical>
f0111f1e:	83 c4 10             	add    $0x10,%esp
f0111f21:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111f24:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111f28:	74 17                	je     f0111f41 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111f2a:	83 ec 04             	sub    $0x4,%esp
f0111f2d:	68 b4 92 13 f0       	push   $0xf01392b4
f0111f32:	68 16 01 00 00       	push   $0x116
f0111f37:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111f3c:	e8 c4 e2 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111f41:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111f48:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111f4d:	83 ec 08             	sub    $0x8,%esp
f0111f50:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f53:	50                   	push   %eax
f0111f54:	e8 d3 5e ff ff       	call   f0107e2c <virtual_to_physical>
f0111f59:	83 c4 10             	add    $0x10,%esp
f0111f5c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111f5f:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111f64:	83 ec 08             	sub    $0x8,%esp
f0111f67:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f6a:	50                   	push   %eax
f0111f6b:	e8 0b 48 00 00       	call   f011677b <CA>
f0111f70:	83 c4 10             	add    $0x10,%esp
f0111f73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111f76:	74 17                	je     f0111f8f <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111f78:	83 ec 04             	sub    $0x4,%esp
f0111f7b:	68 ec 92 13 f0       	push   $0xf01392ec
f0111f80:	68 1f 01 00 00       	push   $0x11f
f0111f85:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0111f8a:	e8 76 e2 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111f8f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111f95:	bb b8 94 13 f0       	mov    $0xf01394b8,%ebx
f0111f9a:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111f9f:	89 c7                	mov    %eax,%edi
f0111fa1:	89 de                	mov    %ebx,%esi
f0111fa3:	89 d1                	mov    %edx,%ecx
f0111fa5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fa7:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111faa:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111faf:	b0 00                	mov    $0x0,%al
f0111fb1:	89 d7                	mov    %edx,%edi
f0111fb3:	f3 aa                	rep stos %al,%es:(%edi)
f0111fb5:	83 ec 0c             	sub    $0xc,%esp
f0111fb8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111fbe:	50                   	push   %eax
f0111fbf:	e8 ac ed fe ff       	call   f0100d70 <execute_command>
f0111fc4:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111fc7:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111fce:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111fd3:	83 ec 08             	sub    $0x8,%esp
f0111fd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0111fd9:	50                   	push   %eax
f0111fda:	e8 4d 5e ff ff       	call   f0107e2c <virtual_to_physical>
f0111fdf:	83 c4 10             	add    $0x10,%esp
f0111fe2:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111fe5:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0111fea:	83 ec 08             	sub    $0x8,%esp
f0111fed:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ff0:	50                   	push   %eax
f0111ff1:	e8 85 47 00 00       	call   f011677b <CA>
f0111ff6:	83 c4 10             	add    $0x10,%esp
f0111ff9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ffc:	74 17                	je     f0112015 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111ffe:	83 ec 04             	sub    $0x4,%esp
f0112001:	68 24 93 13 f0       	push   $0xf0139324
f0112006:	68 28 01 00 00       	push   $0x128
f011200b:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112010:	e8 f0 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0112015:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011201b:	bb 1c 95 13 f0       	mov    $0xf013951c,%ebx
f0112020:	ba 0d 00 00 00       	mov    $0xd,%edx
f0112025:	89 c7                	mov    %eax,%edi
f0112027:	89 de                	mov    %ebx,%esi
f0112029:	89 d1                	mov    %edx,%ecx
f011202b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011202d:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0112033:	b9 57 00 00 00       	mov    $0x57,%ecx
f0112038:	b0 00                	mov    $0x0,%al
f011203a:	89 d7                	mov    %edx,%edi
f011203c:	f3 aa                	rep stos %al,%es:(%edi)
f011203e:	83 ec 0c             	sub    $0xc,%esp
f0112041:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0112047:	50                   	push   %eax
f0112048:	e8 23 ed fe ff       	call   f0100d70 <execute_command>
f011204d:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0112050:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112057:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f011205c:	83 ec 08             	sub    $0x8,%esp
f011205f:	ff 75 dc             	pushl  -0x24(%ebp)
f0112062:	50                   	push   %eax
f0112063:	e8 c4 5d ff ff       	call   f0107e2c <virtual_to_physical>
f0112068:	83 c4 10             	add    $0x10,%esp
f011206b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011206e:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0112073:	83 ec 08             	sub    $0x8,%esp
f0112076:	ff 75 dc             	pushl  -0x24(%ebp)
f0112079:	50                   	push   %eax
f011207a:	e8 fc 46 00 00       	call   f011677b <CA>
f011207f:	83 c4 10             	add    $0x10,%esp
f0112082:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112085:	74 17                	je     f011209e <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0112087:	83 ec 04             	sub    $0x4,%esp
f011208a:	68 5c 93 13 f0       	push   $0xf013935c
f011208f:	68 31 01 00 00       	push   $0x131
f0112094:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112099:	e8 67 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f011209e:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01120a4:	bb 80 95 13 f0       	mov    $0xf0139580,%ebx
f01120a9:	ba 0d 00 00 00       	mov    $0xd,%edx
f01120ae:	89 c7                	mov    %eax,%edi
f01120b0:	89 de                	mov    %ebx,%esi
f01120b2:	89 d1                	mov    %edx,%ecx
f01120b4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120b6:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01120bc:	b9 57 00 00 00       	mov    $0x57,%ecx
f01120c1:	b0 00                	mov    $0x0,%al
f01120c3:	89 d7                	mov    %edx,%edi
f01120c5:	f3 aa                	rep stos %al,%es:(%edi)
f01120c7:	83 ec 0c             	sub    $0xc,%esp
f01120ca:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01120d0:	50                   	push   %eax
f01120d1:	e8 9a ec fe ff       	call   f0100d70 <execute_command>
f01120d6:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01120d9:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01120e0:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01120e5:	83 ec 08             	sub    $0x8,%esp
f01120e8:	ff 75 dc             	pushl  -0x24(%ebp)
f01120eb:	50                   	push   %eax
f01120ec:	e8 3b 5d ff ff       	call   f0107e2c <virtual_to_physical>
f01120f1:	83 c4 10             	add    $0x10,%esp
f01120f4:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01120f7:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01120fc:	83 ec 08             	sub    $0x8,%esp
f01120ff:	ff 75 dc             	pushl  -0x24(%ebp)
f0112102:	50                   	push   %eax
f0112103:	e8 73 46 00 00       	call   f011677b <CA>
f0112108:	83 c4 10             	add    $0x10,%esp
f011210b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011210e:	74 17                	je     f0112127 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0112110:	83 ec 04             	sub    $0x4,%esp
f0112113:	68 94 93 13 f0       	push   $0xf0139394
f0112118:	68 3a 01 00 00       	push   $0x13a
f011211d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112122:	e8 de e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0112127:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011212e:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0112133:	83 ec 08             	sub    $0x8,%esp
f0112136:	ff 75 dc             	pushl  -0x24(%ebp)
f0112139:	50                   	push   %eax
f011213a:	e8 ed 5c ff ff       	call   f0107e2c <virtual_to_physical>
f011213f:	83 c4 10             	add    $0x10,%esp
f0112142:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112145:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f011214a:	83 ec 08             	sub    $0x8,%esp
f011214d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112150:	50                   	push   %eax
f0112151:	e8 25 46 00 00       	call   f011677b <CA>
f0112156:	83 c4 10             	add    $0x10,%esp
f0112159:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011215c:	74 17                	je     f0112175 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f011215e:	83 ec 04             	sub    $0x4,%esp
f0112161:	68 cc 93 13 f0       	push   $0xf01393cc
f0112166:	68 42 01 00 00       	push   $0x142
f011216b:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112170:	e8 90 e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0112175:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011217c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0112181:	83 ec 08             	sub    $0x8,%esp
f0112184:	ff 75 dc             	pushl  -0x24(%ebp)
f0112187:	50                   	push   %eax
f0112188:	e8 9f 5c ff ff       	call   f0107e2c <virtual_to_physical>
f011218d:	83 c4 10             	add    $0x10,%esp
f0112190:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112193:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0112198:	83 ec 08             	sub    $0x8,%esp
f011219b:	ff 75 dc             	pushl  -0x24(%ebp)
f011219e:	50                   	push   %eax
f011219f:	e8 d7 45 00 00       	call   f011677b <CA>
f01121a4:	83 c4 10             	add    $0x10,%esp
f01121a7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01121aa:	74 17                	je     f01121c3 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01121ac:	83 ec 04             	sub    $0x4,%esp
f01121af:	68 04 94 13 f0       	push   $0xf0139404
f01121b4:	68 4a 01 00 00       	push   $0x14a
f01121b9:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01121be:	e8 42 e0 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01121c3:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01121c9:	bb e4 95 13 f0       	mov    $0xf01395e4,%ebx
f01121ce:	ba 0e 00 00 00       	mov    $0xe,%edx
f01121d3:	89 c7                	mov    %eax,%edi
f01121d5:	89 de                	mov    %ebx,%esi
f01121d7:	89 d1                	mov    %edx,%ecx
f01121d9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121db:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01121e1:	b9 56 00 00 00       	mov    $0x56,%ecx
f01121e6:	b0 00                	mov    $0x0,%al
f01121e8:	89 d7                	mov    %edx,%edi
f01121ea:	f3 aa                	rep stos %al,%es:(%edi)
f01121ec:	83 ec 0c             	sub    $0xc,%esp
f01121ef:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01121f5:	50                   	push   %eax
f01121f6:	e8 75 eb fe ff       	call   f0100d70 <execute_command>
f01121fb:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f01121fe:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112205:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f011220a:	83 ec 08             	sub    $0x8,%esp
f011220d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112210:	50                   	push   %eax
f0112211:	e8 16 5c ff ff       	call   f0107e2c <virtual_to_physical>
f0112216:	83 c4 10             	add    $0x10,%esp
f0112219:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011221c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0112221:	83 ec 08             	sub    $0x8,%esp
f0112224:	ff 75 dc             	pushl  -0x24(%ebp)
f0112227:	50                   	push   %eax
f0112228:	e8 4e 45 00 00       	call   f011677b <CA>
f011222d:	83 c4 10             	add    $0x10,%esp
f0112230:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112233:	74 17                	je     f011224c <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0112235:	83 ec 04             	sub    $0x4,%esp
f0112238:	68 3c 94 13 f0       	push   $0xf013943c
f011223d:	68 53 01 00 00       	push   $0x153
f0112242:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112247:	e8 b9 df fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f011224c:	83 ec 0c             	sub    $0xc,%esp
f011224f:	68 74 94 13 f0       	push   $0xf0139474
f0112254:	e8 b5 ea fe ff       	call   f0100d0e <cprintf>
f0112259:	83 c4 10             	add    $0x10,%esp

	return 0;
f011225c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112261:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112264:	5b                   	pop    %ebx
f0112265:	5e                   	pop    %esi
f0112266:	5f                   	pop    %edi
f0112267:	5d                   	pop    %ebp
f0112268:	c3                   	ret    

f0112269 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112269:	55                   	push   %ebp
f011226a:	89 e5                	mov    %esp,%ebp
f011226c:	57                   	push   %edi
f011226d:	56                   	push   %esi
f011226e:	53                   	push   %ebx
f011226f:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112275:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011227b:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f0112280:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112285:	89 c7                	mov    %eax,%edi
f0112287:	89 de                	mov    %ebx,%esi
f0112289:	89 d1                	mov    %edx,%ecx
f011228b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011228d:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112293:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112298:	b0 00                	mov    $0x0,%al
f011229a:	89 d7                	mov    %edx,%edi
f011229c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011229e:	6a 00                	push   $0x0
f01122a0:	6a 0a                	push   $0xa
f01122a2:	6a 14                	push   $0x14
f01122a4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01122aa:	50                   	push   %eax
f01122ab:	e8 70 70 ff ff       	call   f0109320 <env_create>
f01122b0:	83 c4 10             	add    $0x10,%esp
f01122b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01122b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122b9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01122bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01122bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122c2:	8b 40 60             	mov    0x60(%eax),%eax
f01122c5:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01122c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01122cb:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01122ce:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01122d5:	75 70 20 
f01122d8:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01122df:	00 00 00 
f01122e2:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01122e8:	b9 03 00 00 00       	mov    $0x3,%ecx
f01122ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01122f2:	89 d7                	mov    %edx,%edi
f01122f4:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01122f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122f9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01122fc:	83 ec 08             	sub    $0x8,%esp
f01122ff:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112305:	52                   	push   %edx
f0112306:	50                   	push   %eax
f0112307:	e8 6f fb 01 00       	call   f0131e7b <ltostr>
f011230c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011230f:	83 ec 04             	sub    $0x4,%esp
f0112312:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112318:	50                   	push   %eax
f0112319:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011231f:	50                   	push   %eax
f0112320:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112326:	50                   	push   %eax
f0112327:	e8 47 fc 01 00       	call   f0131f73 <strcconcat>
f011232c:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011232f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112336:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011233d:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112344:	83 ec 0c             	sub    $0xc,%esp
f0112347:	ff 75 d4             	pushl  -0x2c(%ebp)
f011234a:	e8 2d 45 00 00       	call   f011687c <ClearUserSpace>
f011234f:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112352:	83 ec 04             	sub    $0x4,%esp
f0112355:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011235b:	50                   	push   %eax
f011235c:	68 48 96 13 f0       	push   $0xf0139648
f0112361:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112367:	50                   	push   %eax
f0112368:	e8 06 fc 01 00       	call   f0131f73 <strcconcat>
f011236d:	83 c4 10             	add    $0x10,%esp
f0112370:	83 ec 0c             	sub    $0xc,%esp
f0112373:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112379:	50                   	push   %eax
f011237a:	e8 f1 e9 fe ff       	call   f0100d70 <execute_command>
f011237f:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112382:	83 ec 04             	sub    $0x4,%esp
f0112385:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011238b:	50                   	push   %eax
f011238c:	68 53 96 13 f0       	push   $0xf0139653
f0112391:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112397:	50                   	push   %eax
f0112398:	e8 d6 fb 01 00       	call   f0131f73 <strcconcat>
f011239d:	83 c4 10             	add    $0x10,%esp
f01123a0:	83 ec 0c             	sub    $0xc,%esp
f01123a3:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123a9:	50                   	push   %eax
f01123aa:	e8 c1 e9 fe ff       	call   f0100d70 <execute_command>
f01123af:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01123b2:	83 ec 04             	sub    $0x4,%esp
f01123b5:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01123bb:	50                   	push   %eax
f01123bc:	68 5e 96 13 f0       	push   $0xf013965e
f01123c1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123c7:	50                   	push   %eax
f01123c8:	e8 a6 fb 01 00       	call   f0131f73 <strcconcat>
f01123cd:	83 c4 10             	add    $0x10,%esp
f01123d0:	83 ec 0c             	sub    $0xc,%esp
f01123d3:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01123d9:	50                   	push   %eax
f01123da:	e8 91 e9 fe ff       	call   f0100d70 <execute_command>
f01123df:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01123e2:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01123e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01123ec:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01123ef:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01123f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01123f9:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01123fc:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112403:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112406:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112409:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011240c:	83 ec 08             	sub    $0x8,%esp
f011240f:	50                   	push   %eax
f0112410:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112413:	e8 45 44 00 00       	call   f011685d <GP>
f0112418:	83 c4 10             	add    $0x10,%esp
f011241b:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011241e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112425:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011242c:	e8 28 ac ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112431:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112434:	83 ec 0c             	sub    $0xc,%esp
f0112437:	68 6c 96 13 f0       	push   $0xf013966c
f011243c:	e8 cd e8 fe ff       	call   f0100d0e <cprintf>
f0112441:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112444:	6a 03                	push   $0x3
f0112446:	68 00 00 90 02       	push   $0x2900000
f011244b:	68 00 00 80 02       	push   $0x2800000
f0112450:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112453:	e8 07 64 ff ff       	call   f010885f <cut_paste_pages>
f0112458:	83 c4 10             	add    $0x10,%esp
f011245b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011245e:	e8 f6 ab ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112463:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112466:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011246d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112471:	75 08                	jne    f011247b <test_cut_paste_pages+0x212>
f0112473:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112476:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112479:	74 2b                	je     f01124a6 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011247b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011247e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112481:	83 ec 0c             	sub    $0xc,%esp
f0112484:	50                   	push   %eax
f0112485:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112488:	68 9c 96 13 f0       	push   $0xf013969c
f011248d:	68 91 01 00 00       	push   $0x191
f0112492:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112497:	e8 77 df fe ff       	call   f0100413 <_warn>
f011249c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011249f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01124a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124aa:	74 04                	je     f01124b0 <test_cut_paste_pages+0x247>
f01124ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01124b0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01124b7:	83 ec 08             	sub    $0x8,%esp
f01124ba:	6a 00                	push   $0x0
f01124bc:	6a 01                	push   $0x1
f01124be:	6a 00                	push   $0x0
f01124c0:	68 ff 0f 00 00       	push   $0xfff
f01124c5:	ff 75 bc             	pushl  -0x44(%ebp)
f01124c8:	6a 01                	push   $0x1
f01124ca:	68 00 30 00 00       	push   $0x3000
f01124cf:	68 00 00 90 02       	push   $0x2900000
f01124d4:	68 00 00 80 02       	push   $0x2800000
f01124d9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124dc:	e8 cf 43 00 00       	call   f01168b0 <CCP>
f01124e1:	83 c4 30             	add    $0x30,%esp
f01124e4:	83 f8 01             	cmp    $0x1,%eax
f01124e7:	74 21                	je     f011250a <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01124e9:	83 ec 04             	sub    $0x4,%esp
f01124ec:	68 f0 96 13 f0       	push   $0xf01396f0
f01124f1:	68 99 01 00 00       	push   $0x199
f01124f6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01124fb:	e8 13 df fe ff       	call   f0100413 <_warn>
f0112500:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112503:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011250a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011250e:	74 04                	je     f0112514 <test_cut_paste_pages+0x2ab>
f0112510:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112514:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011251b:	83 ec 04             	sub    $0x4,%esp
f011251e:	6a 00                	push   $0x0
f0112520:	68 00 00 90 02       	push   $0x2900000
f0112525:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112528:	e8 5f 41 00 00       	call   f011668c <CB>
f011252d:	83 c4 10             	add    $0x10,%esp
f0112530:	85 c0                	test   %eax,%eax
f0112532:	0f 84 f6 00 00 00    	je     f011262e <test_cut_paste_pages+0x3c5>
f0112538:	83 ec 04             	sub    $0x4,%esp
f011253b:	6a 00                	push   $0x0
f011253d:	68 00 10 90 02       	push   $0x2901000
f0112542:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112545:	e8 42 41 00 00       	call   f011668c <CB>
f011254a:	83 c4 10             	add    $0x10,%esp
f011254d:	85 c0                	test   %eax,%eax
f011254f:	0f 84 d9 00 00 00    	je     f011262e <test_cut_paste_pages+0x3c5>
f0112555:	83 ec 04             	sub    $0x4,%esp
f0112558:	6a 00                	push   $0x0
f011255a:	68 00 20 90 02       	push   $0x2902000
f011255f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112562:	e8 25 41 00 00       	call   f011668c <CB>
f0112567:	83 c4 10             	add    $0x10,%esp
f011256a:	85 c0                	test   %eax,%eax
f011256c:	0f 84 bc 00 00 00    	je     f011262e <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0112572:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112579:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112580:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112587:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011258a:	8a 00                	mov    (%eax),%al
f011258c:	3c 61                	cmp    $0x61,%al
f011258e:	75 12                	jne    f01125a2 <test_cut_paste_pages+0x339>
f0112590:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112593:	8a 00                	mov    (%eax),%al
f0112595:	3c 62                	cmp    $0x62,%al
f0112597:	75 09                	jne    f01125a2 <test_cut_paste_pages+0x339>
f0112599:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011259c:	8a 00                	mov    (%eax),%al
f011259e:	3c 63                	cmp    $0x63,%al
f01125a0:	74 21                	je     f01125c3 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01125a2:	83 ec 04             	sub    $0x4,%esp
f01125a5:	68 3c 97 13 f0       	push   $0xf013973c
f01125aa:	68 a6 01 00 00       	push   $0x1a6
f01125af:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01125b4:	e8 5a de fe ff       	call   f0100413 <_warn>
f01125b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01125c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125c7:	74 04                	je     f01125cd <test_cut_paste_pages+0x364>
f01125c9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01125d4:	83 ec 04             	sub    $0x4,%esp
f01125d7:	6a 01                	push   $0x1
f01125d9:	68 00 10 90 02       	push   $0x2901000
f01125de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125e1:	e8 a6 40 00 00       	call   f011668c <CB>
f01125e6:	83 c4 10             	add    $0x10,%esp
f01125e9:	85 c0                	test   %eax,%eax
f01125eb:	74 41                	je     f011262e <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01125ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125f0:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01125f3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125f6:	8a 00                	mov    (%eax),%al
f01125f8:	3c 79                	cmp    $0x79,%al
f01125fa:	74 21                	je     f011261d <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01125fc:	83 ec 04             	sub    $0x4,%esp
f01125ff:	68 3c 97 13 f0       	push   $0xf013973c
f0112604:	68 b1 01 00 00       	push   $0x1b1
f0112609:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011260e:	e8 00 de fe ff       	call   f0100413 <_warn>
f0112613:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112616:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011261d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112621:	74 04                	je     f0112627 <test_cut_paste_pages+0x3be>
f0112623:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112627:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011262e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112631:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112634:	6a 02                	push   $0x2
f0112636:	68 00 f0 bf 02       	push   $0x2bff000
f011263b:	68 00 10 90 02       	push   $0x2901000
f0112640:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112643:	e8 17 62 ff ff       	call   f010885f <cut_paste_pages>
f0112648:	83 c4 10             	add    $0x10,%esp
f011264b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011264e:	e8 06 aa ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112653:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112656:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011265a:	75 0b                	jne    f0112667 <test_cut_paste_pages+0x3fe>
f011265c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011265f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112662:	83 f8 01             	cmp    $0x1,%eax
f0112665:	74 2b                	je     f0112692 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112667:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011266a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011266d:	83 ec 0c             	sub    $0xc,%esp
f0112670:	50                   	push   %eax
f0112671:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112674:	68 9c 96 13 f0       	push   $0xf013969c
f0112679:	68 c2 01 00 00       	push   $0x1c2
f011267e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112683:	e8 8b dd fe ff       	call   f0100413 <_warn>
f0112688:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011268b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112692:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112696:	74 04                	je     f011269c <test_cut_paste_pages+0x433>
f0112698:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011269c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01126a3:	83 ec 08             	sub    $0x8,%esp
f01126a6:	6a 00                	push   $0x0
f01126a8:	6a 01                	push   $0x1
f01126aa:	6a 00                	push   $0x0
f01126ac:	68 ff 0f 00 00       	push   $0xfff
f01126b1:	ff 75 bc             	pushl  -0x44(%ebp)
f01126b4:	6a 01                	push   $0x1
f01126b6:	68 00 20 00 00       	push   $0x2000
f01126bb:	68 00 f0 bf 02       	push   $0x2bff000
f01126c0:	68 00 10 90 02       	push   $0x2901000
f01126c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126c8:	e8 e3 41 00 00       	call   f01168b0 <CCP>
f01126cd:	83 c4 30             	add    $0x30,%esp
f01126d0:	83 f8 01             	cmp    $0x1,%eax
f01126d3:	74 21                	je     f01126f6 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01126d5:	83 ec 04             	sub    $0x4,%esp
f01126d8:	68 f0 96 13 f0       	push   $0xf01396f0
f01126dd:	68 ca 01 00 00       	push   $0x1ca
f01126e2:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01126e7:	e8 27 dd fe ff       	call   f0100413 <_warn>
f01126ec:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01126ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01126f6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126fa:	74 04                	je     f0112700 <test_cut_paste_pages+0x497>
f01126fc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112700:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112707:	83 ec 04             	sub    $0x4,%esp
f011270a:	6a 00                	push   $0x0
f011270c:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112711:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112714:	e8 73 3f 00 00       	call   f011668c <CB>
f0112719:	83 c4 10             	add    $0x10,%esp
f011271c:	85 c0                	test   %eax,%eax
f011271e:	74 6b                	je     f011278b <test_cut_paste_pages+0x522>
f0112720:	83 ec 04             	sub    $0x4,%esp
f0112723:	6a 00                	push   $0x0
f0112725:	68 ff 0f c0 02       	push   $0x2c00fff
f011272a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011272d:	e8 5a 3f 00 00       	call   f011668c <CB>
f0112732:	83 c4 10             	add    $0x10,%esp
f0112735:	85 c0                	test   %eax,%eax
f0112737:	74 52                	je     f011278b <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112739:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112740:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112747:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011274a:	8a 00                	mov    (%eax),%al
f011274c:	3c 79                	cmp    $0x79,%al
f011274e:	75 09                	jne    f0112759 <test_cut_paste_pages+0x4f0>
f0112750:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112753:	8a 00                	mov    (%eax),%al
f0112755:	3c 63                	cmp    $0x63,%al
f0112757:	74 21                	je     f011277a <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112759:	83 ec 04             	sub    $0x4,%esp
f011275c:	68 3c 97 13 f0       	push   $0xf013973c
f0112761:	68 d6 01 00 00       	push   $0x1d6
f0112766:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011276b:	e8 a3 dc fe ff       	call   f0100413 <_warn>
f0112770:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112773:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011277a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011277e:	74 04                	je     f0112784 <test_cut_paste_pages+0x51b>
f0112780:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112784:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011278b:	83 ec 0c             	sub    $0xc,%esp
f011278e:	68 75 97 13 f0       	push   $0xf0139775
f0112793:	e8 76 e5 fe ff       	call   f0100d0e <cprintf>
f0112798:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011279b:	83 ec 0c             	sub    $0xc,%esp
f011279e:	68 84 97 13 f0       	push   $0xf0139784
f01127a3:	e8 66 e5 fe ff       	call   f0100d0e <cprintf>
f01127a8:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01127ab:	83 ec 04             	sub    $0x4,%esp
f01127ae:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01127b4:	50                   	push   %eax
f01127b5:	68 ad 97 13 f0       	push   $0xf01397ad
f01127ba:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01127c0:	50                   	push   %eax
f01127c1:	e8 ad f7 01 00       	call   f0131f73 <strcconcat>
f01127c6:	83 c4 10             	add    $0x10,%esp
f01127c9:	83 ec 0c             	sub    $0xc,%esp
f01127cc:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01127d2:	50                   	push   %eax
f01127d3:	e8 98 e5 fe ff       	call   f0100d70 <execute_command>
f01127d8:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01127db:	83 ec 04             	sub    $0x4,%esp
f01127de:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01127e4:	50                   	push   %eax
f01127e5:	68 b8 97 13 f0       	push   $0xf01397b8
f01127ea:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01127f0:	50                   	push   %eax
f01127f1:	e8 7d f7 01 00       	call   f0131f73 <strcconcat>
f01127f6:	83 c4 10             	add    $0x10,%esp
f01127f9:	83 ec 0c             	sub    $0xc,%esp
f01127fc:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112802:	50                   	push   %eax
f0112803:	e8 68 e5 fe ff       	call   f0100d70 <execute_command>
f0112808:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011280b:	83 ec 04             	sub    $0x4,%esp
f011280e:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112814:	50                   	push   %eax
f0112815:	68 c3 97 13 f0       	push   $0xf01397c3
f011281a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112820:	50                   	push   %eax
f0112821:	e8 4d f7 01 00       	call   f0131f73 <strcconcat>
f0112826:	83 c4 10             	add    $0x10,%esp
f0112829:	83 ec 0c             	sub    $0xc,%esp
f011282c:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112832:	50                   	push   %eax
f0112833:	e8 38 e5 fe ff       	call   f0100d70 <execute_command>
f0112838:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011283b:	83 ec 04             	sub    $0x4,%esp
f011283e:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112844:	50                   	push   %eax
f0112845:	68 ce 97 13 f0       	push   $0xf01397ce
f011284a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112850:	50                   	push   %eax
f0112851:	e8 1d f7 01 00       	call   f0131f73 <strcconcat>
f0112856:	83 c4 10             	add    $0x10,%esp
f0112859:	83 ec 0c             	sub    $0xc,%esp
f011285c:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112862:	50                   	push   %eax
f0112863:	e8 08 e5 fe ff       	call   f0100d70 <execute_command>
f0112868:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011286b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112872:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112875:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112878:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011287f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112882:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112885:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011288c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011288f:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112892:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112899:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011289c:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f011289f:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01128a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128a9:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01128ac:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01128b3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128b6:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01128b9:	83 ec 08             	sub    $0x8,%esp
f01128bc:	68 00 00 c0 01       	push   $0x1c00000
f01128c1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128c4:	e8 94 3f 00 00       	call   f011685d <GP>
f01128c9:	83 c4 10             	add    $0x10,%esp
f01128cc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01128cf:	83 ec 08             	sub    $0x8,%esp
f01128d2:	68 00 00 40 01       	push   $0x1400000
f01128d7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128da:	e8 7e 3f 00 00       	call   f011685d <GP>
f01128df:	83 c4 10             	add    $0x10,%esp
f01128e2:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01128e5:	e8 6f a7 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01128ea:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01128ed:	6a 01                	push   $0x1
f01128ef:	68 00 00 40 01       	push   $0x1400000
f01128f4:	68 00 00 c0 01       	push   $0x1c00000
f01128f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128fc:	e8 5e 5f ff ff       	call   f010885f <cut_paste_pages>
f0112901:	83 c4 10             	add    $0x10,%esp
f0112904:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112907:	e8 4d a7 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011290c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011290f:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112913:	75 08                	jne    f011291d <test_cut_paste_pages+0x6b4>
f0112915:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112918:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011291b:	74 2b                	je     f0112948 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011291d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112920:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112923:	83 ec 0c             	sub    $0xc,%esp
f0112926:	50                   	push   %eax
f0112927:	ff 75 b4             	pushl  -0x4c(%ebp)
f011292a:	68 dc 97 13 f0       	push   $0xf01397dc
f011292f:	68 f9 01 00 00       	push   $0x1f9
f0112934:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112939:	e8 d5 da fe ff       	call   f0100413 <_warn>
f011293e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112941:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112948:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011294c:	74 04                	je     f0112952 <test_cut_paste_pages+0x6e9>
f011294e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112952:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112959:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112960:	83 ec 08             	sub    $0x8,%esp
f0112963:	6a 00                	push   $0x0
f0112965:	68 ff 0f 00 00       	push   $0xfff
f011296a:	ff 75 a4             	pushl  -0x5c(%ebp)
f011296d:	68 ff 0f 00 00       	push   $0xfff
f0112972:	ff 75 a0             	pushl  -0x60(%ebp)
f0112975:	6a 01                	push   $0x1
f0112977:	68 00 10 00 00       	push   $0x1000
f011297c:	68 00 00 40 01       	push   $0x1400000
f0112981:	68 00 00 c0 01       	push   $0x1c00000
f0112986:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112989:	e8 22 3f 00 00       	call   f01168b0 <CCP>
f011298e:	83 c4 30             	add    $0x30,%esp
f0112991:	83 f8 01             	cmp    $0x1,%eax
f0112994:	74 28                	je     f01129be <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112996:	83 ec 04             	sub    $0x4,%esp
f0112999:	68 f0 96 13 f0       	push   $0xf01396f0
f011299e:	68 02 02 00 00       	push   $0x202
f01129a3:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01129a8:	e8 66 da fe ff       	call   f0100413 <_warn>
f01129ad:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01129b0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01129b7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01129be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129c2:	74 04                	je     f01129c8 <test_cut_paste_pages+0x75f>
f01129c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01129c8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01129cf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01129d3:	0f 84 92 00 00 00    	je     f0112a6b <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01129d9:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01129e0:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01129e7:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01129ee:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01129f5:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01129fc:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a03:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a06:	8a 00                	mov    (%eax),%al
f0112a08:	3c 61                	cmp    $0x61,%al
f0112a0a:	75 2d                	jne    f0112a39 <test_cut_paste_pages+0x7d0>
f0112a0c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a0f:	8a 00                	mov    (%eax),%al
f0112a11:	3c 78                	cmp    $0x78,%al
f0112a13:	75 24                	jne    f0112a39 <test_cut_paste_pages+0x7d0>
f0112a15:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a18:	8a 00                	mov    (%eax),%al
f0112a1a:	3c 62                	cmp    $0x62,%al
f0112a1c:	75 1b                	jne    f0112a39 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a1e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a21:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a23:	3c 79                	cmp    $0x79,%al
f0112a25:	75 12                	jne    f0112a39 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a27:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a2a:	8a 00                	mov    (%eax),%al
f0112a2c:	3c 63                	cmp    $0x63,%al
f0112a2e:	75 09                	jne    f0112a39 <test_cut_paste_pages+0x7d0>
f0112a30:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112a33:	8a 00                	mov    (%eax),%al
f0112a35:	3c 7a                	cmp    $0x7a,%al
f0112a37:	74 21                	je     f0112a5a <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112a39:	83 ec 04             	sub    $0x4,%esp
f0112a3c:	68 3c 97 13 f0       	push   $0xf013973c
f0112a41:	68 14 02 00 00       	push   $0x214
f0112a46:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112a4b:	e8 c3 d9 fe ff       	call   f0100413 <_warn>
f0112a50:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a53:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a5a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a5e:	74 04                	je     f0112a64 <test_cut_paste_pages+0x7fb>
f0112a60:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a64:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112a6b:	e8 e9 a5 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112a70:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112a73:	6a 03                	push   $0x3
f0112a75:	68 00 f0 bf 01       	push   $0x1bff000
f0112a7a:	68 00 00 40 01       	push   $0x1400000
f0112a7f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a82:	e8 d8 5d ff ff       	call   f010885f <cut_paste_pages>
f0112a87:	83 c4 10             	add    $0x10,%esp
f0112a8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112a8d:	e8 c7 a5 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112a92:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112a95:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112a99:	75 08                	jne    f0112aa3 <test_cut_paste_pages+0x83a>
f0112a9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a9e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112aa1:	74 2b                	je     f0112ace <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112aa3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112aa6:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112aa9:	83 ec 0c             	sub    $0xc,%esp
f0112aac:	50                   	push   %eax
f0112aad:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112ab0:	68 dc 97 13 f0       	push   $0xf01397dc
f0112ab5:	68 23 02 00 00       	push   $0x223
f0112aba:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112abf:	e8 4f d9 fe ff       	call   f0100413 <_warn>
f0112ac4:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112ac7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112ace:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ad2:	74 04                	je     f0112ad8 <test_cut_paste_pages+0x86f>
f0112ad4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112ad8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112adf:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112ae6:	83 ec 04             	sub    $0x4,%esp
f0112ae9:	6a 00                	push   $0x0
f0112aeb:	68 00 00 40 01       	push   $0x1400000
f0112af0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112af3:	e8 94 3b 00 00       	call   f011668c <CB>
f0112af8:	83 c4 10             	add    $0x10,%esp
f0112afb:	83 f8 01             	cmp    $0x1,%eax
f0112afe:	0f 85 80 00 00 00    	jne    f0112b84 <test_cut_paste_pages+0x91b>
f0112b04:	83 ec 04             	sub    $0x4,%esp
f0112b07:	6a 00                	push   $0x0
f0112b09:	68 00 10 40 01       	push   $0x1401000
f0112b0e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b11:	e8 76 3b 00 00       	call   f011668c <CB>
f0112b16:	83 c4 10             	add    $0x10,%esp
f0112b19:	83 f8 01             	cmp    $0x1,%eax
f0112b1c:	75 66                	jne    f0112b84 <test_cut_paste_pages+0x91b>
f0112b1e:	83 ec 04             	sub    $0x4,%esp
f0112b21:	6a 00                	push   $0x0
f0112b23:	68 00 20 40 01       	push   $0x1402000
f0112b28:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b2b:	e8 5c 3b 00 00       	call   f011668c <CB>
f0112b30:	83 c4 10             	add    $0x10,%esp
f0112b33:	83 f8 01             	cmp    $0x1,%eax
f0112b36:	75 4c                	jne    f0112b84 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b38:	83 ec 04             	sub    $0x4,%esp
f0112b3b:	6a 00                	push   $0x0
f0112b3d:	68 00 f0 bf 01       	push   $0x1bff000
f0112b42:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b45:	e8 42 3b 00 00       	call   f011668c <CB>
f0112b4a:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b4d:	85 c0                	test   %eax,%eax
f0112b4f:	75 33                	jne    f0112b84 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b51:	83 ec 04             	sub    $0x4,%esp
f0112b54:	6a 00                	push   $0x0
f0112b56:	68 00 00 c0 01       	push   $0x1c00000
f0112b5b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b5e:	e8 29 3b 00 00       	call   f011668c <CB>
f0112b63:	83 c4 10             	add    $0x10,%esp
f0112b66:	83 f8 01             	cmp    $0x1,%eax
f0112b69:	75 19                	jne    f0112b84 <test_cut_paste_pages+0x91b>
f0112b6b:	83 ec 04             	sub    $0x4,%esp
f0112b6e:	6a 00                	push   $0x0
f0112b70:	68 00 10 c0 01       	push   $0x1c01000
f0112b75:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b78:	e8 0f 3b 00 00       	call   f011668c <CB>
f0112b7d:	83 c4 10             	add    $0x10,%esp
f0112b80:	85 c0                	test   %eax,%eax
f0112b82:	74 28                	je     f0112bac <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112b84:	83 ec 04             	sub    $0x4,%esp
f0112b87:	68 3c 98 13 f0       	push   $0xf013983c
f0112b8c:	68 2c 02 00 00       	push   $0x22c
f0112b91:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112b96:	e8 78 d8 fe ff       	call   f0100413 <_warn>
f0112b9b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112b9e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112ba5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112bac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112bb0:	74 04                	je     f0112bb6 <test_cut_paste_pages+0x94d>
f0112bb2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112bb6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112bbd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112bc1:	0f 84 99 00 00 00    	je     f0112c60 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112bc7:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112bce:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112bd5:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112bdc:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112be3:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112bea:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112bf1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112bf4:	8a 00                	mov    (%eax),%al
f0112bf6:	3c 61                	cmp    $0x61,%al
f0112bf8:	75 2d                	jne    f0112c27 <test_cut_paste_pages+0x9be>
f0112bfa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112bfd:	8a 00                	mov    (%eax),%al
f0112bff:	3c 78                	cmp    $0x78,%al
f0112c01:	75 24                	jne    f0112c27 <test_cut_paste_pages+0x9be>
f0112c03:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c06:	8a 00                	mov    (%eax),%al
f0112c08:	3c 62                	cmp    $0x62,%al
f0112c0a:	75 1b                	jne    f0112c27 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c0f:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c11:	3c 79                	cmp    $0x79,%al
f0112c13:	75 12                	jne    f0112c27 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c15:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c18:	8a 00                	mov    (%eax),%al
f0112c1a:	3c 63                	cmp    $0x63,%al
f0112c1c:	75 09                	jne    f0112c27 <test_cut_paste_pages+0x9be>
f0112c1e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c21:	8a 00                	mov    (%eax),%al
f0112c23:	3c 7a                	cmp    $0x7a,%al
f0112c25:	74 28                	je     f0112c4f <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112c27:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112c2e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112c35:	83 ec 04             	sub    $0x4,%esp
f0112c38:	68 3c 97 13 f0       	push   $0xf013973c
f0112c3d:	68 40 02 00 00       	push   $0x240
f0112c42:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0112c47:	e8 c7 d7 fe ff       	call   f0100413 <_warn>
f0112c4c:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112c4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c53:	74 04                	je     f0112c59 <test_cut_paste_pages+0x9f0>
f0112c55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112c60:	83 ec 0c             	sub    $0xc,%esp
f0112c63:	68 75 98 13 f0       	push   $0xf0139875
f0112c68:	e8 a1 e0 fe ff       	call   f0100d0e <cprintf>
f0112c6d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112c70:	83 ec 08             	sub    $0x8,%esp
f0112c73:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112c76:	68 84 98 13 f0       	push   $0xf0139884
f0112c7b:	e8 8e e0 fe ff       	call   f0100d0e <cprintf>
f0112c80:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112c83:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112c87:	75 10                	jne    f0112c99 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112c89:	83 ec 0c             	sub    $0xc,%esp
f0112c8c:	68 b8 98 13 f0       	push   $0xf01398b8
f0112c91:	e8 78 e0 fe ff       	call   f0100d0e <cprintf>
f0112c96:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112c99:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f0112c9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ca1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ca4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112ca7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112cac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112caf:	5b                   	pop    %ebx
f0112cb0:	5e                   	pop    %esi
f0112cb1:	5f                   	pop    %edi
f0112cb2:	5d                   	pop    %ebp
f0112cb3:	c3                   	ret    

f0112cb4 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112cb4:	55                   	push   %ebp
f0112cb5:	89 e5                	mov    %esp,%ebp
f0112cb7:	57                   	push   %edi
f0112cb8:	56                   	push   %esi
f0112cb9:	53                   	push   %ebx
f0112cba:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112cc0:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112cc6:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f0112ccb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112cd0:	89 c7                	mov    %eax,%edi
f0112cd2:	89 de                	mov    %ebx,%esi
f0112cd4:	89 d1                	mov    %edx,%ecx
f0112cd6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cd8:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112cde:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112ce3:	b0 00                	mov    $0x0,%al
f0112ce5:	89 d7                	mov    %edx,%edi
f0112ce7:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112ce9:	6a 00                	push   $0x0
f0112ceb:	6a 0a                	push   $0xa
f0112ced:	6a 14                	push   $0x14
f0112cef:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112cf5:	50                   	push   %eax
f0112cf6:	e8 25 66 ff ff       	call   f0109320 <env_create>
f0112cfb:	83 c4 10             	add    $0x10,%esp
f0112cfe:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112d01:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d04:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112d07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112d0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d0d:	8b 40 60             	mov    0x60(%eax),%eax
f0112d10:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112d16:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112d1c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112d1f:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112d26:	75 70 20 
f0112d29:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112d30:	00 00 00 
f0112d33:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112d39:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112d3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0112d43:	89 d7                	mov    %edx,%edi
f0112d45:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112d47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d4a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112d4d:	83 ec 08             	sub    $0x8,%esp
f0112d50:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112d56:	52                   	push   %edx
f0112d57:	50                   	push   %eax
f0112d58:	e8 1e f1 01 00       	call   f0131e7b <ltostr>
f0112d5d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112d60:	83 ec 04             	sub    $0x4,%esp
f0112d63:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d69:	50                   	push   %eax
f0112d6a:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112d70:	50                   	push   %eax
f0112d71:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112d77:	50                   	push   %eax
f0112d78:	e8 f6 f1 01 00       	call   f0131f73 <strcconcat>
f0112d7d:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112d80:	83 ec 0c             	sub    $0xc,%esp
f0112d83:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d86:	e8 f1 3a 00 00       	call   f011687c <ClearUserSpace>
f0112d8b:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112d8e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112d95:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112d9c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112da3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112daa:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112db1:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112db8:	83 ec 0c             	sub    $0xc,%esp
f0112dbb:	68 2c 99 13 f0       	push   $0xf013992c
f0112dc0:	e8 49 df fe ff       	call   f0100d0e <cprintf>
f0112dc5:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112dc8:	83 ec 04             	sub    $0x4,%esp
f0112dcb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112dd1:	50                   	push   %eax
f0112dd2:	68 62 99 13 f0       	push   $0xf0139962
f0112dd7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ddd:	50                   	push   %eax
f0112dde:	e8 90 f1 01 00       	call   f0131f73 <strcconcat>
f0112de3:	83 c4 10             	add    $0x10,%esp
f0112de6:	83 ec 0c             	sub    $0xc,%esp
f0112de9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112def:	50                   	push   %eax
f0112df0:	e8 7b df fe ff       	call   f0100d70 <execute_command>
f0112df5:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112df8:	83 ec 04             	sub    $0x4,%esp
f0112dfb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e01:	50                   	push   %eax
f0112e02:	68 67 99 13 f0       	push   $0xf0139967
f0112e07:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e0d:	50                   	push   %eax
f0112e0e:	e8 60 f1 01 00       	call   f0131f73 <strcconcat>
f0112e13:	83 c4 10             	add    $0x10,%esp
f0112e16:	83 ec 0c             	sub    $0xc,%esp
f0112e19:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e1f:	50                   	push   %eax
f0112e20:	e8 4b df fe ff       	call   f0100d70 <execute_command>
f0112e25:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112e28:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e2e:	bb 6d 9c 13 f0       	mov    $0xf0139c6d,%ebx
f0112e33:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e38:	89 c7                	mov    %eax,%edi
f0112e3a:	89 de                	mov    %ebx,%esi
f0112e3c:	89 d1                	mov    %edx,%ecx
f0112e3e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e40:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112e46:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e4b:	b0 00                	mov    $0x0,%al
f0112e4d:	89 d7                	mov    %edx,%edi
f0112e4f:	f3 aa                	rep stos %al,%es:(%edi)
f0112e51:	83 ec 0c             	sub    $0xc,%esp
f0112e54:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e5a:	50                   	push   %eax
f0112e5b:	e8 10 df fe ff       	call   f0100d70 <execute_command>
f0112e60:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112e63:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112e69:	bb d1 9c 13 f0       	mov    $0xf0139cd1,%ebx
f0112e6e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e73:	89 c7                	mov    %eax,%edi
f0112e75:	89 de                	mov    %ebx,%esi
f0112e77:	89 d1                	mov    %edx,%ecx
f0112e79:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e7b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112e81:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e86:	b0 00                	mov    $0x0,%al
f0112e88:	89 d7                	mov    %edx,%edi
f0112e8a:	f3 aa                	rep stos %al,%es:(%edi)
f0112e8c:	83 ec 0c             	sub    $0xc,%esp
f0112e8f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112e95:	50                   	push   %eax
f0112e96:	e8 d5 de fe ff       	call   f0100d70 <execute_command>
f0112e9b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112e9e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ea4:	bb 35 9d 13 f0       	mov    $0xf0139d35,%ebx
f0112ea9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eae:	89 c7                	mov    %eax,%edi
f0112eb0:	89 de                	mov    %ebx,%esi
f0112eb2:	89 d1                	mov    %edx,%ecx
f0112eb4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eb6:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112ebc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ec1:	b0 00                	mov    $0x0,%al
f0112ec3:	89 d7                	mov    %edx,%edi
f0112ec5:	f3 aa                	rep stos %al,%es:(%edi)
f0112ec7:	83 ec 0c             	sub    $0xc,%esp
f0112eca:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ed0:	50                   	push   %eax
f0112ed1:	e8 9a de fe ff       	call   f0100d70 <execute_command>
f0112ed6:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112ed9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112edf:	bb 99 9d 13 f0       	mov    $0xf0139d99,%ebx
f0112ee4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ee9:	89 c7                	mov    %eax,%edi
f0112eeb:	89 de                	mov    %ebx,%esi
f0112eed:	89 d1                	mov    %edx,%ecx
f0112eef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ef1:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112ef7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112efc:	b0 00                	mov    $0x0,%al
f0112efe:	89 d7                	mov    %edx,%edi
f0112f00:	f3 aa                	rep stos %al,%es:(%edi)
f0112f02:	83 ec 0c             	sub    $0xc,%esp
f0112f05:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f0b:	50                   	push   %eax
f0112f0c:	e8 5f de fe ff       	call   f0100d70 <execute_command>
f0112f11:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112f14:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f1a:	bb fd 9d 13 f0       	mov    $0xf0139dfd,%ebx
f0112f1f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f24:	89 c7                	mov    %eax,%edi
f0112f26:	89 de                	mov    %ebx,%esi
f0112f28:	89 d1                	mov    %edx,%ecx
f0112f2a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f2c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112f32:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f37:	b0 00                	mov    $0x0,%al
f0112f39:	89 d7                	mov    %edx,%edi
f0112f3b:	f3 aa                	rep stos %al,%es:(%edi)
f0112f3d:	83 ec 0c             	sub    $0xc,%esp
f0112f40:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f46:	50                   	push   %eax
f0112f47:	e8 24 de fe ff       	call   f0100d70 <execute_command>
f0112f4c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112f4f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112f55:	bb 61 9e 13 f0       	mov    $0xf0139e61,%ebx
f0112f5a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f5f:	89 c7                	mov    %eax,%edi
f0112f61:	89 de                	mov    %ebx,%esi
f0112f63:	89 d1                	mov    %edx,%ecx
f0112f65:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f67:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112f6d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f72:	b0 00                	mov    $0x0,%al
f0112f74:	89 d7                	mov    %edx,%edi
f0112f76:	f3 aa                	rep stos %al,%es:(%edi)
f0112f78:	83 ec 0c             	sub    $0xc,%esp
f0112f7b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112f81:	50                   	push   %eax
f0112f82:	e8 e9 dd fe ff       	call   f0100d70 <execute_command>
f0112f87:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112f8a:	83 ec 04             	sub    $0x4,%esp
f0112f8d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112f93:	50                   	push   %eax
f0112f94:	68 6f 99 13 f0       	push   $0xf013996f
f0112f99:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f9f:	50                   	push   %eax
f0112fa0:	e8 ce ef 01 00       	call   f0131f73 <strcconcat>
f0112fa5:	83 c4 10             	add    $0x10,%esp
f0112fa8:	83 ec 0c             	sub    $0xc,%esp
f0112fab:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fb1:	50                   	push   %eax
f0112fb2:	e8 b9 dd fe ff       	call   f0100d70 <execute_command>
f0112fb7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112fba:	83 ec 04             	sub    $0x4,%esp
f0112fbd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fc3:	50                   	push   %eax
f0112fc4:	68 79 99 13 f0       	push   $0xf0139979
f0112fc9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fcf:	50                   	push   %eax
f0112fd0:	e8 9e ef 01 00       	call   f0131f73 <strcconcat>
f0112fd5:	83 c4 10             	add    $0x10,%esp
f0112fd8:	83 ec 0c             	sub    $0xc,%esp
f0112fdb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fe1:	50                   	push   %eax
f0112fe2:	e8 89 dd fe ff       	call   f0100d70 <execute_command>
f0112fe7:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112fea:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112ff0:	bb c5 9e 13 f0       	mov    $0xf0139ec5,%ebx
f0112ff5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ffa:	89 c7                	mov    %eax,%edi
f0112ffc:	89 de                	mov    %ebx,%esi
f0112ffe:	89 d1                	mov    %edx,%ecx
f0113000:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113002:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113008:	b9 55 00 00 00       	mov    $0x55,%ecx
f011300d:	b0 00                	mov    $0x0,%al
f011300f:	89 d7                	mov    %edx,%edi
f0113011:	f3 aa                	rep stos %al,%es:(%edi)
f0113013:	83 ec 0c             	sub    $0xc,%esp
f0113016:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011301c:	50                   	push   %eax
f011301d:	e8 4e dd fe ff       	call   f0100d70 <execute_command>
f0113022:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0113025:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011302b:	bb 29 9f 13 f0       	mov    $0xf0139f29,%ebx
f0113030:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113035:	89 c7                	mov    %eax,%edi
f0113037:	89 de                	mov    %ebx,%esi
f0113039:	89 d1                	mov    %edx,%ecx
f011303b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011303d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113043:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113048:	b0 00                	mov    $0x0,%al
f011304a:	89 d7                	mov    %edx,%edi
f011304c:	f3 aa                	rep stos %al,%es:(%edi)
f011304e:	83 ec 0c             	sub    $0xc,%esp
f0113051:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113057:	50                   	push   %eax
f0113058:	e8 13 dd fe ff       	call   f0100d70 <execute_command>
f011305d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113060:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113066:	bb 8d 9f 13 f0       	mov    $0xf0139f8d,%ebx
f011306b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113070:	89 c7                	mov    %eax,%edi
f0113072:	89 de                	mov    %ebx,%esi
f0113074:	89 d1                	mov    %edx,%ecx
f0113076:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113078:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011307e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113083:	b0 00                	mov    $0x0,%al
f0113085:	89 d7                	mov    %edx,%edi
f0113087:	f3 aa                	rep stos %al,%es:(%edi)
f0113089:	83 ec 0c             	sub    $0xc,%esp
f011308c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113092:	50                   	push   %eax
f0113093:	e8 d8 dc fe ff       	call   f0100d70 <execute_command>
f0113098:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f011309b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01130a2:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01130a9:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01130b0:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01130b7:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01130be:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01130c5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01130cc:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01130d3:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01130da:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01130e1:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01130e8:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01130ef:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01130f2:	8a 00                	mov    (%eax),%al
f01130f4:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f01130fa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01130fd:	8a 00                	mov    (%eax),%al
f01130ff:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113105:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113108:	8a 00                	mov    (%eax),%al
f011310a:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113110:	e8 44 9f ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113115:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113118:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011311b:	89 d0                	mov    %edx,%eax
f011311d:	01 c0                	add    %eax,%eax
f011311f:	01 d0                	add    %edx,%eax
f0113121:	01 c0                	add    %eax,%eax
f0113123:	50                   	push   %eax
f0113124:	68 00 00 10 00       	push   $0x100000
f0113129:	6a 00                	push   $0x0
f011312b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011312e:	e8 dc 58 ff ff       	call   f0108a0f <copy_paste_chunk>
f0113133:	83 c4 10             	add    $0x10,%esp
f0113136:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113139:	e8 1b 9f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011313e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113141:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113148:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011314c:	75 08                	jne    f0113156 <test_copy_paste_chunk+0x4a2>
f011314e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113151:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113154:	74 2b                	je     f0113181 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113156:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113159:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011315c:	83 ec 0c             	sub    $0xc,%esp
f011315f:	50                   	push   %eax
f0113160:	ff 75 88             	pushl  -0x78(%ebp)
f0113163:	68 88 99 13 f0       	push   $0xf0139988
f0113168:	68 93 02 00 00       	push   $0x293
f011316d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113172:	e8 9c d2 fe ff       	call   f0100413 <_warn>
f0113177:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011317a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113181:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113185:	74 04                	je     f011318b <test_copy_paste_chunk+0x4d7>
f0113187:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011318b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0113192:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113195:	8a 00                	mov    (%eax),%al
f0113197:	3c 61                	cmp    $0x61,%al
f0113199:	75 75                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f011319b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011319e:	8a 00                	mov    (%eax),%al
f01131a0:	3c 78                	cmp    $0x78,%al
f01131a2:	75 6c                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01131a7:	8a 00                	mov    (%eax),%al
f01131a9:	3c 62                	cmp    $0x62,%al
f01131ab:	75 63                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01131b0:	8a 00                	mov    (%eax),%al
f01131b2:	3c 79                	cmp    $0x79,%al
f01131b4:	75 5a                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01131b9:	8a 00                	mov    (%eax),%al
f01131bb:	3c 63                	cmp    $0x63,%al
f01131bd:	75 51                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01131c2:	8a 00                	mov    (%eax),%al
f01131c4:	3c 7a                	cmp    $0x7a,%al
f01131c6:	75 48                	jne    f0113210 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01131c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01131cb:	8a 00                	mov    (%eax),%al
f01131cd:	3c 64                	cmp    $0x64,%al
f01131cf:	75 3f                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131d1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01131d4:	8a 10                	mov    (%eax),%dl
f01131d6:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01131dc:	38 c2                	cmp    %al,%dl
f01131de:	75 30                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131e0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01131e3:	8a 00                	mov    (%eax),%al
f01131e5:	3c 65                	cmp    $0x65,%al
f01131e7:	75 27                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131e9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01131ec:	8a 10                	mov    (%eax),%dl
f01131ee:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01131f4:	38 c2                	cmp    %al,%dl
f01131f6:	75 18                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f01131f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01131fb:	8a 00                	mov    (%eax),%al
f01131fd:	3c 66                	cmp    $0x66,%al
f01131ff:	75 0f                	jne    f0113210 <test_copy_paste_chunk+0x55c>
f0113201:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113204:	8a 10                	mov    (%eax),%dl
f0113206:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011320c:	38 c2                	cmp    %al,%dl
f011320e:	74 21                	je     f0113231 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113210:	83 ec 04             	sub    $0x4,%esp
f0113213:	68 ec 99 13 f0       	push   $0xf01399ec
f0113218:	68 9c 02 00 00       	push   $0x29c
f011321d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113222:	e8 ec d1 fe ff       	call   f0100413 <_warn>
f0113227:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011322a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113231:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113235:	74 04                	je     f011323b <test_copy_paste_chunk+0x587>
f0113237:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011323b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113242:	83 ec 0c             	sub    $0xc,%esp
f0113245:	68 26 9a 13 f0       	push   $0xf0139a26
f011324a:	e8 bf da fe ff       	call   f0100d0e <cprintf>
f011324f:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113252:	83 ec 0c             	sub    $0xc,%esp
f0113255:	68 38 9a 13 f0       	push   $0xf0139a38
f011325a:	e8 af da fe ff       	call   f0100d0e <cprintf>
f011325f:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113262:	83 ec 04             	sub    $0x4,%esp
f0113265:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011326b:	50                   	push   %eax
f011326c:	68 6e 9a 13 f0       	push   $0xf0139a6e
f0113271:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113277:	50                   	push   %eax
f0113278:	e8 f6 ec 01 00       	call   f0131f73 <strcconcat>
f011327d:	83 c4 10             	add    $0x10,%esp
f0113280:	83 ec 0c             	sub    $0xc,%esp
f0113283:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113289:	50                   	push   %eax
f011328a:	e8 e1 da fe ff       	call   f0100d70 <execute_command>
f011328f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0113292:	83 ec 04             	sub    $0x4,%esp
f0113295:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011329b:	50                   	push   %eax
f011329c:	68 78 9a 13 f0       	push   $0xf0139a78
f01132a1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01132a7:	50                   	push   %eax
f01132a8:	e8 c6 ec 01 00       	call   f0131f73 <strcconcat>
f01132ad:	83 c4 10             	add    $0x10,%esp
f01132b0:	83 ec 0c             	sub    $0xc,%esp
f01132b3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132b9:	50                   	push   %eax
f01132ba:	e8 b1 da fe ff       	call   f0100d70 <execute_command>
f01132bf:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01132c2:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01132c8:	bb f1 9f 13 f0       	mov    $0xf0139ff1,%ebx
f01132cd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132d2:	89 c7                	mov    %eax,%edi
f01132d4:	89 de                	mov    %ebx,%esi
f01132d6:	89 d1                	mov    %edx,%ecx
f01132d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132da:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01132e0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132e5:	b0 00                	mov    $0x0,%al
f01132e7:	89 d7                	mov    %edx,%edi
f01132e9:	f3 aa                	rep stos %al,%es:(%edi)
f01132eb:	83 ec 0c             	sub    $0xc,%esp
f01132ee:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01132f4:	50                   	push   %eax
f01132f5:	e8 76 da fe ff       	call   f0100d70 <execute_command>
f01132fa:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01132fd:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113303:	bb 55 a0 13 f0       	mov    $0xf013a055,%ebx
f0113308:	ba 0f 00 00 00       	mov    $0xf,%edx
f011330d:	89 c7                	mov    %eax,%edi
f011330f:	89 de                	mov    %ebx,%esi
f0113311:	89 d1                	mov    %edx,%ecx
f0113313:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113315:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011331b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113320:	b0 00                	mov    $0x0,%al
f0113322:	89 d7                	mov    %edx,%edi
f0113324:	f3 aa                	rep stos %al,%es:(%edi)
f0113326:	83 ec 0c             	sub    $0xc,%esp
f0113329:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011332f:	50                   	push   %eax
f0113330:	e8 3b da fe ff       	call   f0100d70 <execute_command>
f0113335:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113338:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011333e:	bb b9 a0 13 f0       	mov    $0xf013a0b9,%ebx
f0113343:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113348:	89 c7                	mov    %eax,%edi
f011334a:	89 de                	mov    %ebx,%esi
f011334c:	89 d1                	mov    %edx,%ecx
f011334e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113350:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113356:	b9 55 00 00 00       	mov    $0x55,%ecx
f011335b:	b0 00                	mov    $0x0,%al
f011335d:	89 d7                	mov    %edx,%edi
f011335f:	f3 aa                	rep stos %al,%es:(%edi)
f0113361:	83 ec 0c             	sub    $0xc,%esp
f0113364:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011336a:	50                   	push   %eax
f011336b:	e8 00 da fe ff       	call   f0100d70 <execute_command>
f0113370:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0113373:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113379:	bb 1d a1 13 f0       	mov    $0xf013a11d,%ebx
f011337e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113383:	89 c7                	mov    %eax,%edi
f0113385:	89 de                	mov    %ebx,%esi
f0113387:	89 d1                	mov    %edx,%ecx
f0113389:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011338b:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113391:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113396:	b0 00                	mov    $0x0,%al
f0113398:	89 d7                	mov    %edx,%edi
f011339a:	f3 aa                	rep stos %al,%es:(%edi)
f011339c:	83 ec 0c             	sub    $0xc,%esp
f011339f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01133a5:	50                   	push   %eax
f01133a6:	e8 c5 d9 fe ff       	call   f0100d70 <execute_command>
f01133ab:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01133ae:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01133b4:	bb 81 a1 13 f0       	mov    $0xf013a181,%ebx
f01133b9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133be:	89 c7                	mov    %eax,%edi
f01133c0:	89 de                	mov    %ebx,%esi
f01133c2:	89 d1                	mov    %edx,%ecx
f01133c4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133c6:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01133cc:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133d1:	b0 00                	mov    $0x0,%al
f01133d3:	89 d7                	mov    %edx,%edi
f01133d5:	f3 aa                	rep stos %al,%es:(%edi)
f01133d7:	83 ec 0c             	sub    $0xc,%esp
f01133da:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01133e0:	50                   	push   %eax
f01133e1:	e8 8a d9 fe ff       	call   f0100d70 <execute_command>
f01133e6:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01133e9:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01133ef:	bb e5 a1 13 f0       	mov    $0xf013a1e5,%ebx
f01133f4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133f9:	89 c7                	mov    %eax,%edi
f01133fb:	89 de                	mov    %ebx,%esi
f01133fd:	89 d1                	mov    %edx,%ecx
f01133ff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113401:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113407:	b9 55 00 00 00       	mov    $0x55,%ecx
f011340c:	b0 00                	mov    $0x0,%al
f011340e:	89 d7                	mov    %edx,%edi
f0113410:	f3 aa                	rep stos %al,%es:(%edi)
f0113412:	83 ec 0c             	sub    $0xc,%esp
f0113415:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011341b:	50                   	push   %eax
f011341c:	e8 4f d9 fe ff       	call   f0100d70 <execute_command>
f0113421:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113424:	83 ec 04             	sub    $0x4,%esp
f0113427:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011342d:	50                   	push   %eax
f011342e:	68 82 9a 13 f0       	push   $0xf0139a82
f0113433:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113439:	50                   	push   %eax
f011343a:	e8 34 eb 01 00       	call   f0131f73 <strcconcat>
f011343f:	83 c4 10             	add    $0x10,%esp
f0113442:	83 ec 0c             	sub    $0xc,%esp
f0113445:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011344b:	50                   	push   %eax
f011344c:	e8 1f d9 fe ff       	call   f0100d70 <execute_command>
f0113451:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113454:	83 ec 04             	sub    $0x4,%esp
f0113457:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011345d:	50                   	push   %eax
f011345e:	68 8c 9a 13 f0       	push   $0xf0139a8c
f0113463:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113469:	50                   	push   %eax
f011346a:	e8 04 eb 01 00       	call   f0131f73 <strcconcat>
f011346f:	83 c4 10             	add    $0x10,%esp
f0113472:	83 ec 0c             	sub    $0xc,%esp
f0113475:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011347b:	50                   	push   %eax
f011347c:	e8 ef d8 fe ff       	call   f0100d70 <execute_command>
f0113481:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0113484:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011348a:	bb 49 a2 13 f0       	mov    $0xf013a249,%ebx
f011348f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113494:	89 c7                	mov    %eax,%edi
f0113496:	89 de                	mov    %ebx,%esi
f0113498:	89 d1                	mov    %edx,%ecx
f011349a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011349c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01134a2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134a7:	b0 00                	mov    $0x0,%al
f01134a9:	89 d7                	mov    %edx,%edi
f01134ab:	f3 aa                	rep stos %al,%es:(%edi)
f01134ad:	83 ec 0c             	sub    $0xc,%esp
f01134b0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01134b6:	50                   	push   %eax
f01134b7:	e8 b4 d8 fe ff       	call   f0100d70 <execute_command>
f01134bc:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01134bf:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01134c5:	bb ad a2 13 f0       	mov    $0xf013a2ad,%ebx
f01134ca:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134cf:	89 c7                	mov    %eax,%edi
f01134d1:	89 de                	mov    %ebx,%esi
f01134d3:	89 d1                	mov    %edx,%ecx
f01134d5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134d7:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01134dd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134e2:	b0 00                	mov    $0x0,%al
f01134e4:	89 d7                	mov    %edx,%edi
f01134e6:	f3 aa                	rep stos %al,%es:(%edi)
f01134e8:	83 ec 0c             	sub    $0xc,%esp
f01134eb:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01134f1:	50                   	push   %eax
f01134f2:	e8 79 d8 fe ff       	call   f0100d70 <execute_command>
f01134f7:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01134fa:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113500:	bb 11 a3 13 f0       	mov    $0xf013a311,%ebx
f0113505:	ba 0f 00 00 00       	mov    $0xf,%edx
f011350a:	89 c7                	mov    %eax,%edi
f011350c:	89 de                	mov    %ebx,%esi
f011350e:	89 d1                	mov    %edx,%ecx
f0113510:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113512:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113518:	b9 55 00 00 00       	mov    $0x55,%ecx
f011351d:	b0 00                	mov    $0x0,%al
f011351f:	89 d7                	mov    %edx,%edi
f0113521:	f3 aa                	rep stos %al,%es:(%edi)
f0113523:	83 ec 0c             	sub    $0xc,%esp
f0113526:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011352c:	50                   	push   %eax
f011352d:	e8 3e d8 fe ff       	call   f0100d70 <execute_command>
f0113532:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113535:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011353c:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113543:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f011354a:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113551:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113558:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011355f:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113566:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011356d:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0113574:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f011357b:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113582:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113589:	8b 45 90             	mov    -0x70(%ebp),%eax
f011358c:	8a 00                	mov    (%eax),%al
f011358e:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113594:	e8 c0 9a ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113599:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f011359c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011359f:	89 d0                	mov    %edx,%eax
f01135a1:	01 c0                	add    %eax,%eax
f01135a3:	01 d0                	add    %edx,%eax
f01135a5:	01 c0                	add    %eax,%eax
f01135a7:	50                   	push   %eax
f01135a8:	68 00 00 40 00       	push   $0x400000
f01135ad:	68 00 00 20 00       	push   $0x200000
f01135b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01135b5:	e8 55 54 ff ff       	call   f0108a0f <copy_paste_chunk>
f01135ba:	83 c4 10             	add    $0x10,%esp
f01135bd:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01135c0:	e8 94 9a ff ff       	call   f010d059 <sys_calculate_free_frames>
f01135c5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01135c8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01135cf:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01135d3:	75 08                	jne    f01135dd <test_copy_paste_chunk+0x929>
f01135d5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01135d8:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01135db:	74 2b                	je     f0113608 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01135dd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01135e0:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01135e3:	83 ec 0c             	sub    $0xc,%esp
f01135e6:	50                   	push   %eax
f01135e7:	ff 75 80             	pushl  -0x80(%ebp)
f01135ea:	68 98 9a 13 f0       	push   $0xf0139a98
f01135ef:	68 cc 02 00 00       	push   $0x2cc
f01135f4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01135f9:	e8 15 ce fe ff       	call   f0100413 <_warn>
f01135fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113601:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113608:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011360c:	74 04                	je     f0113612 <test_copy_paste_chunk+0x95e>
f011360e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113612:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113619:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113620:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113623:	83 ec 08             	sub    $0x8,%esp
f0113626:	6a 01                	push   $0x1
f0113628:	6a 07                	push   $0x7
f011362a:	6a 07                	push   $0x7
f011362c:	6a 07                	push   $0x7
f011362e:	6a 07                	push   $0x7
f0113630:	6a 01                	push   $0x1
f0113632:	68 00 20 00 00       	push   $0x2000
f0113637:	68 00 00 40 00       	push   $0x400000
f011363c:	68 00 00 20 00       	push   $0x200000
f0113641:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113644:	e8 67 32 00 00       	call   f01168b0 <CCP>
f0113649:	83 c4 30             	add    $0x30,%esp
f011364c:	83 f8 01             	cmp    $0x1,%eax
f011364f:	74 2b                	je     f011367c <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113651:	83 ec 04             	sub    $0x4,%esp
f0113654:	68 ec 9a 13 f0       	push   $0xf0139aec
f0113659:	68 d5 02 00 00       	push   $0x2d5
f011365e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113663:	e8 ab cd fe ff       	call   f0100413 <_warn>
f0113668:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011366b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113672:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113679:	00 00 00 
		}
		if (correct) eval += 5 ;
f011367c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113680:	74 04                	je     f0113686 <test_copy_paste_chunk+0x9d2>
f0113682:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113686:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f011368d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113690:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0113693:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113696:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113699:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011369c:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f011369f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136a2:	8a 00                	mov    (%eax),%al
f01136a4:	3c 61                	cmp    $0x61,%al
f01136a6:	75 69                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136ab:	8a 00                	mov    (%eax),%al
f01136ad:	3c 61                	cmp    $0x61,%al
f01136af:	75 60                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136b4:	8a 00                	mov    (%eax),%al
f01136b6:	3c 79                	cmp    $0x79,%al
f01136b8:	75 57                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136ba:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01136bd:	8a 00                	mov    (%eax),%al
f01136bf:	3c 62                	cmp    $0x62,%al
f01136c1:	75 4e                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01136c6:	8a 00                	mov    (%eax),%al
f01136c8:	3c 63                	cmp    $0x63,%al
f01136ca:	75 45                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136cf:	8a 00                	mov    (%eax),%al
f01136d1:	3c 7a                	cmp    $0x7a,%al
f01136d3:	75 3c                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01136d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01136d8:	8a 00                	mov    (%eax),%al
f01136da:	3c 77                	cmp    $0x77,%al
f01136dc:	75 33                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01136e1:	8a 00                	mov    (%eax),%al
f01136e3:	3c 64                	cmp    $0x64,%al
f01136e5:	75 2a                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01136ea:	8a 00                	mov    (%eax),%al
f01136ec:	3c 65                	cmp    $0x65,%al
f01136ee:	75 21                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01136f3:	8a 00                	mov    (%eax),%al
f01136f5:	3c 65                	cmp    $0x65,%al
f01136f7:	75 18                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f01136f9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01136fc:	8a 00                	mov    (%eax),%al
f01136fe:	3c 66                	cmp    $0x66,%al
f0113700:	75 0f                	jne    f0113711 <test_copy_paste_chunk+0xa5d>
f0113702:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113705:	8a 10                	mov    (%eax),%dl
f0113707:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011370d:	38 c2                	cmp    %al,%dl
f011370f:	74 21                	je     f0113732 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113711:	83 ec 04             	sub    $0x4,%esp
f0113714:	68 ec 99 13 f0       	push   $0xf01399ec
f0113719:	68 e3 02 00 00       	push   $0x2e3
f011371e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113723:	e8 eb cc fe ff       	call   f0100413 <_warn>
f0113728:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011372b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113732:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113736:	74 04                	je     f011373c <test_copy_paste_chunk+0xa88>
f0113738:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011373c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113743:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113746:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113749:	e8 0b 99 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011374e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113751:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113754:	89 c2                	mov    %eax,%edx
f0113756:	01 d2                	add    %edx,%edx
f0113758:	01 d0                	add    %edx,%eax
f011375a:	50                   	push   %eax
f011375b:	68 00 08 20 00       	push   $0x200800
f0113760:	68 00 08 40 00       	push   $0x400800
f0113765:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113768:	e8 a2 52 ff ff       	call   f0108a0f <copy_paste_chunk>
f011376d:	83 c4 10             	add    $0x10,%esp
f0113770:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113773:	e8 e1 98 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113778:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011377b:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011377f:	75 08                	jne    f0113789 <test_copy_paste_chunk+0xad5>
f0113781:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113784:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113787:	74 2b                	je     f01137b4 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113789:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011378c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011378f:	83 ec 0c             	sub    $0xc,%esp
f0113792:	50                   	push   %eax
f0113793:	ff 75 80             	pushl  -0x80(%ebp)
f0113796:	68 98 9a 13 f0       	push   $0xf0139a98
f011379b:	68 f3 02 00 00       	push   $0x2f3
f01137a0:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01137a5:	e8 69 cc fe ff       	call   f0100413 <_warn>
f01137aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01137b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137b8:	74 04                	je     f01137be <test_copy_paste_chunk+0xb0a>
f01137ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01137c5:	83 ec 08             	sub    $0x8,%esp
f01137c8:	6a 01                	push   $0x1
f01137ca:	6a 07                	push   $0x7
f01137cc:	6a 07                	push   $0x7
f01137ce:	6a 07                	push   $0x7
f01137d0:	6a 07                	push   $0x7
f01137d2:	6a 01                	push   $0x1
f01137d4:	68 00 20 00 00       	push   $0x2000
f01137d9:	68 00 00 20 00       	push   $0x200000
f01137de:	68 00 00 40 00       	push   $0x400000
f01137e3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137e6:	e8 c5 30 00 00       	call   f01168b0 <CCP>
f01137eb:	83 c4 30             	add    $0x30,%esp
f01137ee:	83 f8 01             	cmp    $0x1,%eax
f01137f1:	74 21                	je     f0113814 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01137f3:	83 ec 04             	sub    $0x4,%esp
f01137f6:	68 38 9b 13 f0       	push   $0xf0139b38
f01137fb:	68 fb 02 00 00       	push   $0x2fb
f0113800:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113805:	e8 09 cc fe ff       	call   f0100413 <_warn>
f011380a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011380d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113814:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113818:	74 04                	je     f011381e <test_copy_paste_chunk+0xb6a>
f011381a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011381e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113825:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113828:	8a 00                	mov    (%eax),%al
f011382a:	3c 61                	cmp    $0x61,%al
f011382c:	75 69                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f011382e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113831:	8a 00                	mov    (%eax),%al
f0113833:	3c 61                	cmp    $0x61,%al
f0113835:	75 60                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113837:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011383a:	8a 00                	mov    (%eax),%al
f011383c:	3c 79                	cmp    $0x79,%al
f011383e:	75 57                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113840:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113843:	8a 00                	mov    (%eax),%al
f0113845:	3c 62                	cmp    $0x62,%al
f0113847:	75 4e                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113849:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011384c:	8a 00                	mov    (%eax),%al
f011384e:	3c 7a                	cmp    $0x7a,%al
f0113850:	75 45                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113852:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113855:	8a 00                	mov    (%eax),%al
f0113857:	3c 7a                	cmp    $0x7a,%al
f0113859:	75 3c                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011385b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011385e:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113860:	3c 64                	cmp    $0x64,%al
f0113862:	75 33                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113864:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113867:	8a 00                	mov    (%eax),%al
f0113869:	3c 64                	cmp    $0x64,%al
f011386b:	75 2a                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f011386d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113870:	8a 00                	mov    (%eax),%al
f0113872:	3c 65                	cmp    $0x65,%al
f0113874:	75 21                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113876:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113879:	8a 00                	mov    (%eax),%al
f011387b:	3c 78                	cmp    $0x78,%al
f011387d:	75 18                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f011387f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113882:	8a 00                	mov    (%eax),%al
f0113884:	3c 66                	cmp    $0x66,%al
f0113886:	75 0f                	jne    f0113897 <test_copy_paste_chunk+0xbe3>
f0113888:	8b 45 90             	mov    -0x70(%ebp),%eax
f011388b:	8a 10                	mov    (%eax),%dl
f011388d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113893:	38 c2                	cmp    %al,%dl
f0113895:	74 21                	je     f01138b8 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113897:	83 ec 04             	sub    $0x4,%esp
f011389a:	68 ec 99 13 f0       	push   $0xf01399ec
f011389f:	68 04 03 00 00       	push   $0x304
f01138a4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01138a9:	e8 65 cb fe ff       	call   f0100413 <_warn>
f01138ae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01138b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138bc:	74 04                	je     f01138c2 <test_copy_paste_chunk+0xc0e>
f01138be:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138c2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01138c9:	83 ec 0c             	sub    $0xc,%esp
f01138cc:	68 83 9b 13 f0       	push   $0xf0139b83
f01138d1:	e8 38 d4 fe ff       	call   f0100d0e <cprintf>
f01138d6:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01138d9:	83 ec 0c             	sub    $0xc,%esp
f01138dc:	68 94 9b 13 f0       	push   $0xf0139b94
f01138e1:	e8 28 d4 fe ff       	call   f0100d0e <cprintf>
f01138e6:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01138e9:	83 ec 04             	sub    $0x4,%esp
f01138ec:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01138f2:	50                   	push   %eax
f01138f3:	68 c8 9b 13 f0       	push   $0xf0139bc8
f01138f8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01138fe:	50                   	push   %eax
f01138ff:	e8 6f e6 01 00       	call   f0131f73 <strcconcat>
f0113904:	83 c4 10             	add    $0x10,%esp
f0113907:	83 ec 0c             	sub    $0xc,%esp
f011390a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113910:	50                   	push   %eax
f0113911:	e8 5a d4 fe ff       	call   f0100d70 <execute_command>
f0113916:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113919:	83 ec 04             	sub    $0x4,%esp
f011391c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113922:	50                   	push   %eax
f0113923:	68 d2 9b 13 f0       	push   $0xf0139bd2
f0113928:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011392e:	50                   	push   %eax
f011392f:	e8 3f e6 01 00       	call   f0131f73 <strcconcat>
f0113934:	83 c4 10             	add    $0x10,%esp
f0113937:	83 ec 0c             	sub    $0xc,%esp
f011393a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113940:	50                   	push   %eax
f0113941:	e8 2a d4 fe ff       	call   f0100d70 <execute_command>
f0113946:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113949:	83 ec 04             	sub    $0x4,%esp
f011394c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113952:	50                   	push   %eax
f0113953:	68 dc 9b 13 f0       	push   $0xf0139bdc
f0113958:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011395e:	50                   	push   %eax
f011395f:	e8 0f e6 01 00       	call   f0131f73 <strcconcat>
f0113964:	83 c4 10             	add    $0x10,%esp
f0113967:	83 ec 0c             	sub    $0xc,%esp
f011396a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113970:	50                   	push   %eax
f0113971:	e8 fa d3 fe ff       	call   f0100d70 <execute_command>
f0113976:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113979:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011397f:	bb 75 a3 13 f0       	mov    $0xf013a375,%ebx
f0113984:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113989:	89 c7                	mov    %eax,%edi
f011398b:	89 de                	mov    %ebx,%esi
f011398d:	89 d1                	mov    %edx,%ecx
f011398f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113991:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113997:	b9 55 00 00 00       	mov    $0x55,%ecx
f011399c:	b0 00                	mov    $0x0,%al
f011399e:	89 d7                	mov    %edx,%edi
f01139a0:	f3 aa                	rep stos %al,%es:(%edi)
f01139a2:	83 ec 0c             	sub    $0xc,%esp
f01139a5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01139ab:	50                   	push   %eax
f01139ac:	e8 bf d3 fe ff       	call   f0100d70 <execute_command>
f01139b1:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01139b4:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01139ba:	bb d9 a3 13 f0       	mov    $0xf013a3d9,%ebx
f01139bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139c4:	89 c7                	mov    %eax,%edi
f01139c6:	89 de                	mov    %ebx,%esi
f01139c8:	89 d1                	mov    %edx,%ecx
f01139ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139cc:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01139d2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01139d7:	b0 00                	mov    $0x0,%al
f01139d9:	89 d7                	mov    %edx,%edi
f01139db:	f3 aa                	rep stos %al,%es:(%edi)
f01139dd:	83 ec 0c             	sub    $0xc,%esp
f01139e0:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01139e6:	50                   	push   %eax
f01139e7:	e8 84 d3 fe ff       	call   f0100d70 <execute_command>
f01139ec:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01139ef:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01139f5:	bb 3d a4 13 f0       	mov    $0xf013a43d,%ebx
f01139fa:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139ff:	89 c7                	mov    %eax,%edi
f0113a01:	89 de                	mov    %ebx,%esi
f0113a03:	89 d1                	mov    %edx,%ecx
f0113a05:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a07:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113a0d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a12:	b0 00                	mov    $0x0,%al
f0113a14:	89 d7                	mov    %edx,%edi
f0113a16:	f3 aa                	rep stos %al,%es:(%edi)
f0113a18:	83 ec 0c             	sub    $0xc,%esp
f0113a1b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a21:	50                   	push   %eax
f0113a22:	e8 49 d3 fe ff       	call   f0100d70 <execute_command>
f0113a27:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a2a:	e8 2a 96 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113a2f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113a32:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a35:	89 d0                	mov    %edx,%eax
f0113a37:	01 c0                	add    %eax,%eax
f0113a39:	01 d0                	add    %edx,%eax
f0113a3b:	c1 e0 02             	shl    $0x2,%eax
f0113a3e:	50                   	push   %eax
f0113a3f:	68 00 00 90 00       	push   $0x900000
f0113a44:	68 00 00 80 00       	push   $0x800000
f0113a49:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113a4c:	e8 be 4f ff ff       	call   f0108a0f <copy_paste_chunk>
f0113a51:	83 c4 10             	add    $0x10,%esp
f0113a54:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a5a:	e8 fa 95 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113a5f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113a62:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113a69:	75 0b                	jne    f0113a76 <test_copy_paste_chunk+0xdc2>
f0113a6b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a6e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113a71:	83 f8 03             	cmp    $0x3,%eax
f0113a74:	74 2e                	je     f0113aa4 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113a76:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a79:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113a7c:	83 ec 0c             	sub    $0xc,%esp
f0113a7f:	50                   	push   %eax
f0113a80:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113a86:	68 98 9a 13 f0       	push   $0xf0139a98
f0113a8b:	68 22 03 00 00       	push   $0x322
f0113a90:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113a95:	e8 79 c9 fe ff       	call   f0100413 <_warn>
f0113a9a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a9d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113aa4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113aa8:	74 04                	je     f0113aae <test_copy_paste_chunk+0xdfa>
f0113aaa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113aae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113ab5:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113abc:	83 ec 08             	sub    $0x8,%esp
f0113abf:	6a 01                	push   $0x1
f0113ac1:	6a 07                	push   $0x7
f0113ac3:	6a 07                	push   $0x7
f0113ac5:	6a 07                	push   $0x7
f0113ac7:	6a 07                	push   $0x7
f0113ac9:	6a 01                	push   $0x1
f0113acb:	68 00 30 00 00       	push   $0x3000
f0113ad0:	68 00 00 90 00       	push   $0x900000
f0113ad5:	68 00 00 80 00       	push   $0x800000
f0113ada:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113add:	e8 ce 2d 00 00       	call   f01168b0 <CCP>
f0113ae2:	83 c4 30             	add    $0x30,%esp
f0113ae5:	83 f8 01             	cmp    $0x1,%eax
f0113ae8:	74 28                	je     f0113b12 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113aea:	83 ec 04             	sub    $0x4,%esp
f0113aed:	68 38 9b 13 f0       	push   $0xf0139b38
f0113af2:	68 2b 03 00 00       	push   $0x32b
f0113af7:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113afc:	e8 12 c9 fe ff       	call   f0100413 <_warn>
f0113b01:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b04:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113b0b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113b12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b16:	74 04                	je     f0113b1c <test_copy_paste_chunk+0xe68>
f0113b18:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b1c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113b23:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113b27:	0f 84 9e 00 00 00    	je     f0113bcb <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113b2d:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113b34:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113b3b:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113b42:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113b49:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113b50:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113b57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b5a:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113b5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113b60:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113b63:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b66:	8a 00                	mov    (%eax),%al
f0113b68:	3c 61                	cmp    $0x61,%al
f0113b6a:	75 2d                	jne    f0113b99 <test_copy_paste_chunk+0xee5>
f0113b6c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b6f:	8a 00                	mov    (%eax),%al
f0113b71:	3c 61                	cmp    $0x61,%al
f0113b73:	75 24                	jne    f0113b99 <test_copy_paste_chunk+0xee5>
f0113b75:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b78:	8a 00                	mov    (%eax),%al
f0113b7a:	3c 79                	cmp    $0x79,%al
f0113b7c:	75 1b                	jne    f0113b99 <test_copy_paste_chunk+0xee5>
f0113b7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113b81:	8a 00                	mov    (%eax),%al
f0113b83:	3c 62                	cmp    $0x62,%al
f0113b85:	75 12                	jne    f0113b99 <test_copy_paste_chunk+0xee5>
f0113b87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113b8a:	8a 00                	mov    (%eax),%al
f0113b8c:	3c 63                	cmp    $0x63,%al
f0113b8e:	75 09                	jne    f0113b99 <test_copy_paste_chunk+0xee5>
f0113b90:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113b93:	8a 00                	mov    (%eax),%al
f0113b95:	3c 7a                	cmp    $0x7a,%al
f0113b97:	74 21                	je     f0113bba <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113b99:	83 ec 04             	sub    $0x4,%esp
f0113b9c:	68 ec 99 13 f0       	push   $0xf01399ec
f0113ba1:	68 3d 03 00 00       	push   $0x33d
f0113ba6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113bab:	e8 63 c8 fe ff       	call   f0100413 <_warn>
f0113bb0:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113bb3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113bba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bbe:	74 04                	je     f0113bc4 <test_copy_paste_chunk+0xf10>
f0113bc0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113bc4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113bcb:	e8 89 94 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113bd0:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113bd3:	6a 00                	push   $0x0
f0113bd5:	6a 02                	push   $0x2
f0113bd7:	68 00 10 90 00       	push   $0x901000
f0113bdc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113bdf:	e8 59 2b 00 00       	call   f011673d <SB>
f0113be4:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113be7:	6a 00                	push   $0x0
f0113be9:	6a 02                	push   $0x2
f0113beb:	68 00 20 90 00       	push   $0x902000
f0113bf0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113bf3:	e8 45 2b 00 00       	call   f011673d <SB>
f0113bf8:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113bfb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113bfe:	c1 e0 03             	shl    $0x3,%eax
f0113c01:	50                   	push   %eax
f0113c02:	68 00 f0 bf 00       	push   $0xbff000
f0113c07:	68 00 10 90 00       	push   $0x901000
f0113c0c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c0f:	e8 fb 4d ff ff       	call   f0108a0f <copy_paste_chunk>
f0113c14:	83 c4 10             	add    $0x10,%esp
f0113c17:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c1d:	e8 37 94 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113c22:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113c25:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113c2c:	75 0b                	jne    f0113c39 <test_copy_paste_chunk+0xf85>
f0113c2e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c31:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c34:	83 f8 03             	cmp    $0x3,%eax
f0113c37:	74 2e                	je     f0113c67 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113c39:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c3c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c3f:	83 ec 0c             	sub    $0xc,%esp
f0113c42:	50                   	push   %eax
f0113c43:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113c49:	68 98 9a 13 f0       	push   $0xf0139a98
f0113c4e:	68 4d 03 00 00       	push   $0x34d
f0113c53:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113c58:	e8 b6 c7 fe ff       	call   f0100413 <_warn>
f0113c5d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c60:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113c67:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c6b:	74 04                	je     f0113c71 <test_copy_paste_chunk+0xfbd>
f0113c6d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c71:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113c78:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113c7f:	83 ec 08             	sub    $0x8,%esp
f0113c82:	6a 01                	push   $0x1
f0113c84:	6a 07                	push   $0x7
f0113c86:	6a 03                	push   $0x3
f0113c88:	6a 07                	push   $0x7
f0113c8a:	6a 03                	push   $0x3
f0113c8c:	6a 01                	push   $0x1
f0113c8e:	68 00 20 00 00       	push   $0x2000
f0113c93:	68 00 f0 bf 00       	push   $0xbff000
f0113c98:	68 00 10 90 00       	push   $0x901000
f0113c9d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ca0:	e8 0b 2c 00 00       	call   f01168b0 <CCP>
f0113ca5:	83 c4 30             	add    $0x30,%esp
f0113ca8:	83 f8 01             	cmp    $0x1,%eax
f0113cab:	74 28                	je     f0113cd5 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113cad:	83 ec 04             	sub    $0x4,%esp
f0113cb0:	68 38 9b 13 f0       	push   $0xf0139b38
f0113cb5:	68 56 03 00 00       	push   $0x356
f0113cba:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113cbf:	e8 4f c7 fe ff       	call   f0100413 <_warn>
f0113cc4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113cc7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113cce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113cd5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113cd9:	74 04                	je     f0113cdf <test_copy_paste_chunk+0x102b>
f0113cdb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113cdf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113ce6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113cea:	74 72                	je     f0113d5e <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113cec:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113cf3:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113cfa:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113d01:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113d08:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d0b:	8a 00                	mov    (%eax),%al
f0113d0d:	3c 62                	cmp    $0x62,%al
f0113d0f:	75 1b                	jne    f0113d2c <test_copy_paste_chunk+0x1078>
f0113d11:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d14:	8a 00                	mov    (%eax),%al
f0113d16:	3c 62                	cmp    $0x62,%al
f0113d18:	75 12                	jne    f0113d2c <test_copy_paste_chunk+0x1078>
f0113d1a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d1d:	8a 00                	mov    (%eax),%al
f0113d1f:	3c 7a                	cmp    $0x7a,%al
f0113d21:	75 09                	jne    f0113d2c <test_copy_paste_chunk+0x1078>
f0113d23:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d26:	8a 00                	mov    (%eax),%al
f0113d28:	3c 7a                	cmp    $0x7a,%al
f0113d2a:	74 21                	je     f0113d4d <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113d2c:	83 ec 04             	sub    $0x4,%esp
f0113d2f:	68 ec 99 13 f0       	push   $0xf01399ec
f0113d34:	68 62 03 00 00       	push   $0x362
f0113d39:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113d3e:	e8 d0 c6 fe ff       	call   f0100413 <_warn>
f0113d43:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113d46:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113d4d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d51:	74 04                	je     f0113d57 <test_copy_paste_chunk+0x10a3>
f0113d53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113d57:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113d5e:	83 ec 0c             	sub    $0xc,%esp
f0113d61:	68 e6 9b 13 f0       	push   $0xf0139be6
f0113d66:	e8 a3 cf fe ff       	call   f0100d0e <cprintf>
f0113d6b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113d6e:	83 ec 08             	sub    $0x8,%esp
f0113d71:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113d74:	68 f8 9b 13 f0       	push   $0xf0139bf8
f0113d79:	e8 90 cf fe ff       	call   f0100d0e <cprintf>
f0113d7e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113d81:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113d85:	75 10                	jne    f0113d97 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113d87:	83 ec 0c             	sub    $0xc,%esp
f0113d8a:	68 2c 9c 13 f0       	push   $0xf0139c2c
f0113d8f:	e8 7a cf fe ff       	call   f0100d0e <cprintf>
f0113d94:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113d97:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f0113d9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113d9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113da2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113da5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113daa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113dad:	5b                   	pop    %ebx
f0113dae:	5e                   	pop    %esi
f0113daf:	5f                   	pop    %edi
f0113db0:	5d                   	pop    %ebp
f0113db1:	c3                   	ret    

f0113db2 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113db2:	55                   	push   %ebp
f0113db3:	89 e5                	mov    %esp,%ebp
f0113db5:	57                   	push   %edi
f0113db6:	56                   	push   %esi
f0113db7:	53                   	push   %ebx
f0113db8:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113dbe:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113dc4:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f0113dc9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113dce:	89 c7                	mov    %eax,%edi
f0113dd0:	89 de                	mov    %ebx,%esi
f0113dd2:	89 d1                	mov    %edx,%ecx
f0113dd4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113dd6:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113ddc:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113de1:	b0 00                	mov    $0x0,%al
f0113de3:	89 d7                	mov    %edx,%edi
f0113de5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113de7:	6a 00                	push   $0x0
f0113de9:	6a 0a                	push   $0xa
f0113deb:	6a 14                	push   $0x14
f0113ded:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113df3:	50                   	push   %eax
f0113df4:	e8 27 55 ff ff       	call   f0109320 <env_create>
f0113df9:	83 c4 10             	add    $0x10,%esp
f0113dfc:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113dff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e02:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113e05:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113e08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e0b:	8b 40 60             	mov    0x60(%eax),%eax
f0113e0e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113e11:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113e14:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113e17:	83 ec 0c             	sub    $0xc,%esp
f0113e1a:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e1d:	e8 5a 2a 00 00       	call   f011687c <ClearUserSpace>
f0113e22:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113e25:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113e2c:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113e33:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113e3a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113e3e:	83 ec 0c             	sub    $0xc,%esp
f0113e41:	68 a4 a4 13 f0       	push   $0xf013a4a4
f0113e46:	e8 c3 ce fe ff       	call   f0100d0e <cprintf>
f0113e4b:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113e4e:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113e55:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113e5c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e5f:	8a 00                	mov    (%eax),%al
f0113e61:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113e67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e6a:	8a 00                	mov    (%eax),%al
f0113e6c:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e72:	e8 e2 91 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113e77:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113e7a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e7d:	89 d0                	mov    %edx,%eax
f0113e7f:	01 c0                	add    %eax,%eax
f0113e81:	01 d0                	add    %edx,%eax
f0113e83:	01 c0                	add    %eax,%eax
f0113e85:	83 ec 0c             	sub    $0xc,%esp
f0113e88:	6a 02                	push   $0x2
f0113e8a:	50                   	push   %eax
f0113e8b:	68 00 40 10 f0       	push   $0xf0104000
f0113e90:	68 00 00 10 f0       	push   $0xf0100000
f0113e95:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e98:	e8 66 4d ff ff       	call   f0108c03 <share_chunk>
f0113e9d:	83 c4 20             	add    $0x20,%esp
f0113ea0:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ea3:	e8 b1 91 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113ea8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113eab:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113eaf:	75 08                	jne    f0113eb9 <test_share_chunk+0x107>
f0113eb1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113eb4:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113eb7:	74 28                	je     f0113ee1 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113eb9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ebc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ebf:	83 ec 0c             	sub    $0xc,%esp
f0113ec2:	50                   	push   %eax
f0113ec3:	ff 75 b0             	pushl  -0x50(%ebp)
f0113ec6:	68 d0 a4 13 f0       	push   $0xf013a4d0
f0113ecb:	68 9e 03 00 00       	push   $0x39e
f0113ed0:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113ed5:	e8 39 c5 fe ff       	call   f0100413 <_warn>
f0113eda:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113edd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113ee1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ee5:	74 04                	je     f0113eeb <test_share_chunk+0x139>
f0113ee7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113eeb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113eef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ef2:	c1 e0 03             	shl    $0x3,%eax
f0113ef5:	83 ec 08             	sub    $0x8,%esp
f0113ef8:	68 fd 00 00 00       	push   $0xfd
f0113efd:	6a 07                	push   $0x7
f0113eff:	6a 03                	push   $0x3
f0113f01:	6a 07                	push   $0x7
f0113f03:	6a 03                	push   $0x3
f0113f05:	6a 01                	push   $0x1
f0113f07:	50                   	push   %eax
f0113f08:	68 00 40 10 f0       	push   $0xf0104000
f0113f0d:	68 00 00 10 f0       	push   $0xf0100000
f0113f12:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f15:	e8 96 29 00 00       	call   f01168b0 <CCP>
f0113f1a:	83 c4 30             	add    $0x30,%esp
f0113f1d:	85 c0                	test   %eax,%eax
f0113f1f:	75 1e                	jne    f0113f3f <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f21:	83 ec 04             	sub    $0x4,%esp
f0113f24:	68 2c a5 13 f0       	push   $0xf013a52c
f0113f29:	68 a6 03 00 00       	push   $0x3a6
f0113f2e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113f33:	e8 db c4 fe ff       	call   f0100413 <_warn>
f0113f38:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f3b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f3f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f43:	74 04                	je     f0113f49 <test_share_chunk+0x197>
f0113f45:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113f49:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f4c:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113f4f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f52:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113f55:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f58:	8a 00                	mov    (%eax),%al
f0113f5a:	3c 41                	cmp    $0x41,%al
f0113f5c:	75 09                	jne    f0113f67 <test_share_chunk+0x1b5>
f0113f5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f61:	8a 00                	mov    (%eax),%al
f0113f63:	3c 42                	cmp    $0x42,%al
f0113f65:	74 1e                	je     f0113f85 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f67:	83 ec 04             	sub    $0x4,%esp
f0113f6a:	68 74 a5 13 f0       	push   $0xf013a574
f0113f6f:	68 b0 03 00 00       	push   $0x3b0
f0113f74:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0113f79:	e8 95 c4 fe ff       	call   f0100413 <_warn>
f0113f7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f89:	74 04                	je     f0113f8f <test_share_chunk+0x1dd>
f0113f8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113f93:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113f99:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f9c:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113f9e:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113fa4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fa7:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113fa9:	83 ec 0c             	sub    $0xc,%esp
f0113fac:	68 a9 a5 13 f0       	push   $0xf013a5a9
f0113fb1:	e8 58 cd fe ff       	call   f0100d0e <cprintf>
f0113fb6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113fb9:	83 ec 0c             	sub    $0xc,%esp
f0113fbc:	68 b8 a5 13 f0       	push   $0xf013a5b8
f0113fc1:	e8 48 cd fe ff       	call   f0100d0e <cprintf>
f0113fc6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113fc9:	e8 8b 90 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113fce:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113fd1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fd4:	c1 e0 05             	shl    $0x5,%eax
f0113fd7:	83 ec 0c             	sub    $0xc,%esp
f0113fda:	68 02 0e 00 00       	push   $0xe02
f0113fdf:	50                   	push   %eax
f0113fe0:	68 00 00 00 40       	push   $0x40000000
f0113fe5:	68 00 00 00 f0       	push   $0xf0000000
f0113fea:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fed:	e8 11 4c ff ff       	call   f0108c03 <share_chunk>
f0113ff2:	83 c4 20             	add    $0x20,%esp
f0113ff5:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ff8:	e8 5c 90 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113ffd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0114000:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114004:	75 1f                	jne    f0114025 <test_share_chunk+0x273>
f0114006:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114009:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011400c:	89 c1                	mov    %eax,%ecx
f011400e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114011:	c1 e0 05             	shl    $0x5,%eax
f0114014:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114017:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011401e:	99                   	cltd   
f011401f:	f7 fb                	idiv   %ebx
f0114021:	39 c1                	cmp    %eax,%ecx
f0114023:	74 28                	je     f011404d <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114025:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114028:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011402b:	83 ec 0c             	sub    $0xc,%esp
f011402e:	50                   	push   %eax
f011402f:	ff 75 a8             	pushl  -0x58(%ebp)
f0114032:	68 f4 a5 13 f0       	push   $0xf013a5f4
f0114037:	68 c8 03 00 00       	push   $0x3c8
f011403c:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114041:	e8 cd c3 fe ff       	call   f0100413 <_warn>
f0114046:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114049:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011404d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114051:	74 04                	je     f0114057 <test_share_chunk+0x2a5>
f0114053:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114057:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011405b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114062:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114065:	c1 e0 05             	shl    $0x5,%eax
f0114068:	83 ec 08             	sub    $0x8,%esp
f011406b:	6a 02                	push   $0x2
f011406d:	6a 07                	push   $0x7
f011406f:	6a 03                	push   $0x3
f0114071:	68 07 0e 00 00       	push   $0xe07
f0114076:	68 03 0e 00 00       	push   $0xe03
f011407b:	6a ff                	push   $0xffffffff
f011407d:	50                   	push   %eax
f011407e:	68 00 00 00 40       	push   $0x40000000
f0114083:	68 00 00 00 f0       	push   $0xf0000000
f0114088:	ff 75 cc             	pushl  -0x34(%ebp)
f011408b:	e8 20 28 00 00       	call   f01168b0 <CCP>
f0114090:	83 c4 30             	add    $0x30,%esp
f0114093:	85 c0                	test   %eax,%eax
f0114095:	75 25                	jne    f01140bc <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114097:	83 ec 04             	sub    $0x4,%esp
f011409a:	68 2c a5 13 f0       	push   $0xf013a52c
f011409f:	68 d1 03 00 00       	push   $0x3d1
f01140a4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01140a9:	e8 65 c3 fe ff       	call   f0100413 <_warn>
f01140ae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140b5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01140bc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140bf:	89 d0                	mov    %edx,%eax
f01140c1:	01 c0                	add    %eax,%eax
f01140c3:	01 d0                	add    %edx,%eax
f01140c5:	c1 e0 02             	shl    $0x2,%eax
f01140c8:	83 ec 08             	sub    $0x8,%esp
f01140cb:	6a 02                	push   $0x2
f01140cd:	6a 07                	push   $0x7
f01140cf:	6a 03                	push   $0x3
f01140d1:	68 07 0e 00 00       	push   $0xe07
f01140d6:	68 03 0e 00 00       	push   $0xe03
f01140db:	6a 02                	push   $0x2
f01140dd:	50                   	push   %eax
f01140de:	68 00 00 00 40       	push   $0x40000000
f01140e3:	68 00 00 00 f0       	push   $0xf0000000
f01140e8:	ff 75 cc             	pushl  -0x34(%ebp)
f01140eb:	e8 c0 27 00 00       	call   f01168b0 <CCP>
f01140f0:	83 c4 30             	add    $0x30,%esp
f01140f3:	85 c0                	test   %eax,%eax
f01140f5:	75 1e                	jne    f0114115 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140f7:	83 ec 04             	sub    $0x4,%esp
f01140fa:	68 2c a5 13 f0       	push   $0xf013a52c
f01140ff:	68 d8 03 00 00       	push   $0x3d8
f0114104:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114109:	e8 05 c3 fe ff       	call   f0100413 <_warn>
f011410e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114111:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114115:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114119:	74 04                	je     f011411f <test_share_chunk+0x36d>
f011411b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011411f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0114123:	b8 c0 a2 86 f0       	mov    $0xf086a2c0,%eax
f0114128:	05 00 00 00 10       	add    $0x10000000,%eax
f011412d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114130:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114133:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114138:	83 ec 08             	sub    $0x8,%esp
f011413b:	6a 02                	push   $0x2
f011413d:	6a 07                	push   $0x7
f011413f:	6a 03                	push   $0x3
f0114141:	68 07 0e 00 00       	push   $0xe07
f0114146:	68 03 0e 00 00       	push   $0xe03
f011414b:	6a 02                	push   $0x2
f011414d:	50                   	push   %eax
f011414e:	68 00 00 0a 40       	push   $0x400a0000
f0114153:	68 00 00 0a f0       	push   $0xf00a0000
f0114158:	ff 75 cc             	pushl  -0x34(%ebp)
f011415b:	e8 50 27 00 00       	call   f01168b0 <CCP>
f0114160:	83 c4 30             	add    $0x30,%esp
f0114163:	85 c0                	test   %eax,%eax
f0114165:	75 1e                	jne    f0114185 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114167:	83 ec 04             	sub    $0x4,%esp
f011416a:	68 2c a5 13 f0       	push   $0xf013a52c
f011416f:	68 e2 03 00 00       	push   $0x3e2
f0114174:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114179:	e8 95 c2 fe ff       	call   f0100413 <_warn>
f011417e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114181:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114185:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114189:	74 04                	je     f011418f <test_share_chunk+0x3dd>
f011418b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011418f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114193:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114197:	0f 84 a4 00 00 00    	je     f0114241 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011419d:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01141a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141a7:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01141aa:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01141b1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141b4:	8a 00                	mov    (%eax),%al
f01141b6:	3c 41                	cmp    $0x41,%al
f01141b8:	75 09                	jne    f01141c3 <test_share_chunk+0x411>
f01141ba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141bd:	8a 00                	mov    (%eax),%al
f01141bf:	3c 41                	cmp    $0x41,%al
f01141c1:	74 1e                	je     f01141e1 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01141c3:	83 ec 04             	sub    $0x4,%esp
f01141c6:	68 74 a5 13 f0       	push   $0xf013a574
f01141cb:	68 ef 03 00 00       	push   $0x3ef
f01141d0:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01141d5:	e8 39 c2 fe ff       	call   f0100413 <_warn>
f01141da:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01141dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01141e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141e5:	74 04                	je     f01141eb <test_share_chunk+0x439>
f01141e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01141eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01141ef:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f01141f6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141f9:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f01141fc:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114203:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114206:	8a 00                	mov    (%eax),%al
f0114208:	3c 43                	cmp    $0x43,%al
f011420a:	75 09                	jne    f0114215 <test_share_chunk+0x463>
f011420c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011420f:	8a 00                	mov    (%eax),%al
f0114211:	3c 43                	cmp    $0x43,%al
f0114213:	74 1e                	je     f0114233 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114215:	83 ec 04             	sub    $0x4,%esp
f0114218:	68 74 a5 13 f0       	push   $0xf013a574
f011421d:	68 fa 03 00 00       	push   $0x3fa
f0114222:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114227:	e8 e7 c1 fe ff       	call   f0100413 <_warn>
f011422c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011422f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114233:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114237:	74 04                	je     f011423d <test_share_chunk+0x48b>
f0114239:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011423d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114241:	83 ec 0c             	sub    $0xc,%esp
f0114244:	68 83 9b 13 f0       	push   $0xf0139b83
f0114249:	e8 c0 ca fe ff       	call   f0100d0e <cprintf>
f011424e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114251:	83 ec 0c             	sub    $0xc,%esp
f0114254:	68 44 a6 13 f0       	push   $0xf013a644
f0114259:	e8 b0 ca fe ff       	call   f0100d0e <cprintf>
f011425e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114261:	e8 f3 8d ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114266:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114269:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011426c:	89 d0                	mov    %edx,%eax
f011426e:	c1 e0 03             	shl    $0x3,%eax
f0114271:	01 d0                	add    %edx,%eax
f0114273:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011427a:	01 d0                	add    %edx,%eax
f011427c:	c1 e0 03             	shl    $0x3,%eax
f011427f:	83 ec 0c             	sub    $0xc,%esp
f0114282:	6a 06                	push   $0x6
f0114284:	50                   	push   %eax
f0114285:	6a 00                	push   $0x0
f0114287:	68 00 00 00 40       	push   $0x40000000
f011428c:	ff 75 cc             	pushl  -0x34(%ebp)
f011428f:	e8 6f 49 ff ff       	call   f0108c03 <share_chunk>
f0114294:	83 c4 20             	add    $0x20,%esp
f0114297:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011429a:	e8 ba 8d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011429f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01142a2:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01142a6:	75 0b                	jne    f01142b3 <test_share_chunk+0x501>
f01142a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142ab:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142ae:	83 f8 01             	cmp    $0x1,%eax
f01142b1:	74 28                	je     f01142db <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01142b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142b6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142b9:	83 ec 0c             	sub    $0xc,%esp
f01142bc:	50                   	push   %eax
f01142bd:	ff 75 a0             	pushl  -0x60(%ebp)
f01142c0:	68 f4 a5 13 f0       	push   $0xf013a5f4
f01142c5:	68 10 04 00 00       	push   $0x410
f01142ca:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01142cf:	e8 3f c1 fe ff       	call   f0100413 <_warn>
f01142d4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142df:	74 04                	je     f01142e5 <test_share_chunk+0x533>
f01142e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01142e9:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01142f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142f3:	05 00 80 02 00       	add    $0x28000,%eax
f01142f8:	c1 e0 02             	shl    $0x2,%eax
f01142fb:	83 ec 08             	sub    $0x8,%esp
f01142fe:	6a 02                	push   $0x2
f0114300:	6a 07                	push   $0x7
f0114302:	6a 03                	push   $0x3
f0114304:	6a 07                	push   $0x7
f0114306:	6a 07                	push   $0x7
f0114308:	6a ff                	push   $0xffffffff
f011430a:	50                   	push   %eax
f011430b:	6a 00                	push   $0x0
f011430d:	68 00 00 00 40       	push   $0x40000000
f0114312:	ff 75 cc             	pushl  -0x34(%ebp)
f0114315:	e8 96 25 00 00       	call   f01168b0 <CCP>
f011431a:	83 c4 30             	add    $0x30,%esp
f011431d:	85 c0                	test   %eax,%eax
f011431f:	75 25                	jne    f0114346 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114321:	83 ec 04             	sub    $0x4,%esp
f0114324:	68 2c a5 13 f0       	push   $0xf013a52c
f0114329:	68 19 04 00 00       	push   $0x419
f011432e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114333:	e8 db c0 fe ff       	call   f0100413 <_warn>
f0114338:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011433b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011433f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114346:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114349:	89 d0                	mov    %edx,%eax
f011434b:	01 c0                	add    %eax,%eax
f011434d:	01 d0                	add    %edx,%eax
f011434f:	c1 e0 02             	shl    $0x2,%eax
f0114352:	83 ec 08             	sub    $0x8,%esp
f0114355:	6a 02                	push   $0x2
f0114357:	6a 07                	push   $0x7
f0114359:	6a 03                	push   $0x3
f011435b:	6a 07                	push   $0x7
f011435d:	6a 07                	push   $0x7
f011435f:	6a 03                	push   $0x3
f0114361:	50                   	push   %eax
f0114362:	6a 00                	push   $0x0
f0114364:	68 00 00 00 40       	push   $0x40000000
f0114369:	ff 75 cc             	pushl  -0x34(%ebp)
f011436c:	e8 3f 25 00 00       	call   f01168b0 <CCP>
f0114371:	83 c4 30             	add    $0x30,%esp
f0114374:	85 c0                	test   %eax,%eax
f0114376:	75 1e                	jne    f0114396 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114378:	83 ec 04             	sub    $0x4,%esp
f011437b:	68 2c a5 13 f0       	push   $0xf013a52c
f0114380:	68 20 04 00 00       	push   $0x420
f0114385:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011438a:	e8 84 c0 fe ff       	call   f0100413 <_warn>
f011438f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114392:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114396:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011439a:	74 04                	je     f01143a0 <test_share_chunk+0x5ee>
f011439c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143a7:	89 d0                	mov    %edx,%eax
f01143a9:	01 c0                	add    %eax,%eax
f01143ab:	01 d0                	add    %edx,%eax
f01143ad:	c1 e0 02             	shl    $0x2,%eax
f01143b0:	f7 d8                	neg    %eax
f01143b2:	05 00 00 0a 00       	add    $0xa0000,%eax
f01143b7:	83 ec 08             	sub    $0x8,%esp
f01143ba:	6a 02                	push   $0x2
f01143bc:	6a 07                	push   $0x7
f01143be:	6a 03                	push   $0x3
f01143c0:	6a 07                	push   $0x7
f01143c2:	6a 07                	push   $0x7
f01143c4:	6a 02                	push   $0x2
f01143c6:	50                   	push   %eax
f01143c7:	68 00 30 00 00       	push   $0x3000
f01143cc:	68 00 30 00 40       	push   $0x40003000
f01143d1:	ff 75 cc             	pushl  -0x34(%ebp)
f01143d4:	e8 d7 24 00 00       	call   f01168b0 <CCP>
f01143d9:	83 c4 30             	add    $0x30,%esp
f01143dc:	85 c0                	test   %eax,%eax
f01143de:	75 1e                	jne    f01143fe <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143e0:	83 ec 04             	sub    $0x4,%esp
f01143e3:	68 2c a5 13 f0       	push   $0xf013a52c
f01143e8:	68 28 04 00 00       	push   $0x428
f01143ed:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01143f2:	e8 1c c0 fe ff       	call   f0100413 <_warn>
f01143f7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114402:	74 04                	je     f0114408 <test_share_chunk+0x656>
f0114404:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114408:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011440c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011440f:	c1 e0 02             	shl    $0x2,%eax
f0114412:	83 ec 08             	sub    $0x8,%esp
f0114415:	6a 02                	push   $0x2
f0114417:	6a 07                	push   $0x7
f0114419:	6a 03                	push   $0x3
f011441b:	6a 07                	push   $0x7
f011441d:	6a 07                	push   $0x7
f011441f:	6a 03                	push   $0x3
f0114421:	50                   	push   %eax
f0114422:	68 00 00 0a 00       	push   $0xa0000
f0114427:	68 00 00 0a 40       	push   $0x400a0000
f011442c:	ff 75 cc             	pushl  -0x34(%ebp)
f011442f:	e8 7c 24 00 00       	call   f01168b0 <CCP>
f0114434:	83 c4 30             	add    $0x30,%esp
f0114437:	85 c0                	test   %eax,%eax
f0114439:	75 1e                	jne    f0114459 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011443b:	83 ec 04             	sub    $0x4,%esp
f011443e:	68 2c a5 13 f0       	push   $0xf013a52c
f0114443:	68 30 04 00 00       	push   $0x430
f0114448:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011444d:	e8 c1 bf fe ff       	call   f0100413 <_warn>
f0114452:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114455:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114459:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011445d:	74 04                	je     f0114463 <test_share_chunk+0x6b1>
f011445f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114463:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114467:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011446b:	0f 84 92 00 00 00    	je     f0114503 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0114471:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114478:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011447f:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114486:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011448d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114490:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114493:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f011449a:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144a4:	8a 00                	mov    (%eax),%al
f01144a6:	3c 41                	cmp    $0x41,%al
f01144a8:	75 2d                	jne    f01144d7 <test_share_chunk+0x725>
f01144aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01144ad:	8a 00                	mov    (%eax),%al
f01144af:	3c 41                	cmp    $0x41,%al
f01144b1:	75 24                	jne    f01144d7 <test_share_chunk+0x725>
f01144b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01144b6:	8a 00                	mov    (%eax),%al
f01144b8:	3c 41                	cmp    $0x41,%al
f01144ba:	75 1b                	jne    f01144d7 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01144bf:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144c1:	3c 44                	cmp    $0x44,%al
f01144c3:	75 12                	jne    f01144d7 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01144c8:	8a 00                	mov    (%eax),%al
f01144ca:	3c 44                	cmp    $0x44,%al
f01144cc:	75 09                	jne    f01144d7 <test_share_chunk+0x725>
f01144ce:	8b 45 90             	mov    -0x70(%ebp),%eax
f01144d1:	8a 00                	mov    (%eax),%al
f01144d3:	3c 44                	cmp    $0x44,%al
f01144d5:	74 1e                	je     f01144f5 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01144d7:	83 ec 04             	sub    $0x4,%esp
f01144da:	68 74 a5 13 f0       	push   $0xf013a574
f01144df:	68 42 04 00 00       	push   $0x442
f01144e4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01144e9:	e8 25 bf fe ff       	call   f0100413 <_warn>
f01144ee:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01144f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01144f5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144f9:	74 04                	je     f01144ff <test_share_chunk+0x74d>
f01144fb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01144ff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114503:	83 ec 0c             	sub    $0xc,%esp
f0114506:	68 e6 9b 13 f0       	push   $0xf0139be6
f011450b:	e8 fe c7 fe ff       	call   f0100d0e <cprintf>
f0114510:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114513:	83 ec 0c             	sub    $0xc,%esp
f0114516:	68 80 a6 13 f0       	push   $0xf013a680
f011451b:	e8 ee c7 fe ff       	call   f0100d0e <cprintf>
f0114520:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114523:	e8 31 8b ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114528:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011452b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011452e:	89 d0                	mov    %edx,%eax
f0114530:	01 c0                	add    %eax,%eax
f0114532:	01 d0                	add    %edx,%eax
f0114534:	01 c0                	add    %eax,%eax
f0114536:	01 d0                	add    %edx,%eax
f0114538:	83 ec 0c             	sub    $0xc,%esp
f011453b:	6a 04                	push   $0x4
f011453d:	50                   	push   %eax
f011453e:	68 00 fc 3f 00       	push   $0x3ffc00
f0114543:	68 00 fc 09 00       	push   $0x9fc00
f0114548:	ff 75 cc             	pushl  -0x34(%ebp)
f011454b:	e8 b3 46 ff ff       	call   f0108c03 <share_chunk>
f0114550:	83 c4 20             	add    $0x20,%esp
f0114553:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114556:	e8 fe 8a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011455b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011455e:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114562:	75 0b                	jne    f011456f <test_share_chunk+0x7bd>
f0114564:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114567:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011456a:	83 f8 01             	cmp    $0x1,%eax
f011456d:	74 28                	je     f0114597 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011456f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114572:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114575:	83 ec 0c             	sub    $0xc,%esp
f0114578:	50                   	push   %eax
f0114579:	ff 75 8c             	pushl  -0x74(%ebp)
f011457c:	68 f4 a5 13 f0       	push   $0xf013a5f4
f0114581:	68 58 04 00 00       	push   $0x458
f0114586:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011458b:	e8 83 be fe ff       	call   f0100413 <_warn>
f0114590:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114593:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114597:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011459b:	74 04                	je     f01145a1 <test_share_chunk+0x7ef>
f011459d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145a1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145a5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01145ac:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145af:	89 d0                	mov    %edx,%eax
f01145b1:	01 c0                	add    %eax,%eax
f01145b3:	01 d0                	add    %edx,%eax
f01145b5:	c1 e0 02             	shl    $0x2,%eax
f01145b8:	83 ec 08             	sub    $0x8,%esp
f01145bb:	6a 02                	push   $0x2
f01145bd:	6a 07                	push   $0x7
f01145bf:	6a 07                	push   $0x7
f01145c1:	6a 07                	push   $0x7
f01145c3:	6a 05                	push   $0x5
f01145c5:	6a ff                	push   $0xffffffff
f01145c7:	50                   	push   %eax
f01145c8:	68 00 f0 3f 00       	push   $0x3ff000
f01145cd:	68 00 f0 09 00       	push   $0x9f000
f01145d2:	ff 75 cc             	pushl  -0x34(%ebp)
f01145d5:	e8 d6 22 00 00       	call   f01168b0 <CCP>
f01145da:	83 c4 30             	add    $0x30,%esp
f01145dd:	85 c0                	test   %eax,%eax
f01145df:	75 25                	jne    f0114606 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01145e1:	83 ec 04             	sub    $0x4,%esp
f01145e4:	68 2c a5 13 f0       	push   $0xf013a52c
f01145e9:	68 61 04 00 00       	push   $0x461
f01145ee:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01145f3:	e8 1b be fe ff       	call   f0100413 <_warn>
f01145f8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01145ff:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114606:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011460a:	74 04                	je     f0114610 <test_share_chunk+0x85e>
f011460c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114610:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114614:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114617:	c1 e0 02             	shl    $0x2,%eax
f011461a:	83 ec 08             	sub    $0x8,%esp
f011461d:	6a 02                	push   $0x2
f011461f:	6a 07                	push   $0x7
f0114621:	6a 07                	push   $0x7
f0114623:	6a 07                	push   $0x7
f0114625:	6a 05                	push   $0x5
f0114627:	6a 03                	push   $0x3
f0114629:	50                   	push   %eax
f011462a:	68 00 f0 3f 00       	push   $0x3ff000
f011462f:	68 00 f0 09 00       	push   $0x9f000
f0114634:	ff 75 cc             	pushl  -0x34(%ebp)
f0114637:	e8 74 22 00 00       	call   f01168b0 <CCP>
f011463c:	83 c4 30             	add    $0x30,%esp
f011463f:	85 c0                	test   %eax,%eax
f0114641:	75 1e                	jne    f0114661 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114643:	83 ec 04             	sub    $0x4,%esp
f0114646:	68 2c a5 13 f0       	push   $0xf013a52c
f011464b:	68 6a 04 00 00       	push   $0x46a
f0114650:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114655:	e8 b9 bd fe ff       	call   f0100413 <_warn>
f011465a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011465d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114661:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114665:	74 04                	je     f011466b <test_share_chunk+0x8b9>
f0114667:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011466b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011466f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114672:	c1 e0 03             	shl    $0x3,%eax
f0114675:	83 ec 08             	sub    $0x8,%esp
f0114678:	6a 02                	push   $0x2
f011467a:	6a 07                	push   $0x7
f011467c:	6a 07                	push   $0x7
f011467e:	6a 07                	push   $0x7
f0114680:	6a 05                	push   $0x5
f0114682:	6a 04                	push   $0x4
f0114684:	50                   	push   %eax
f0114685:	68 00 00 40 00       	push   $0x400000
f011468a:	68 00 00 0a 00       	push   $0xa0000
f011468f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114692:	e8 19 22 00 00       	call   f01168b0 <CCP>
f0114697:	83 c4 30             	add    $0x30,%esp
f011469a:	85 c0                	test   %eax,%eax
f011469c:	75 1e                	jne    f01146bc <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011469e:	83 ec 04             	sub    $0x4,%esp
f01146a1:	68 2c a5 13 f0       	push   $0xf013a52c
f01146a6:	68 72 04 00 00       	push   $0x472
f01146ab:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01146b0:	e8 5e bd fe ff       	call   f0100413 <_warn>
f01146b5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146b8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146bc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146c0:	74 04                	je     f01146c6 <test_share_chunk+0x914>
f01146c2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146c6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01146ca:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01146ce:	0f 84 b2 00 00 00    	je     f0114786 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01146d4:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01146db:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01146e2:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01146e9:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01146f0:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01146f7:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01146fe:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114705:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011470c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011470f:	8a 00                	mov    (%eax),%al
f0114711:	3c 44                	cmp    $0x44,%al
f0114713:	75 45                	jne    f011475a <test_share_chunk+0x9a8>
f0114715:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114718:	8a 00                	mov    (%eax),%al
f011471a:	3c 44                	cmp    $0x44,%al
f011471c:	75 3c                	jne    f011475a <test_share_chunk+0x9a8>
f011471e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114721:	8a 00                	mov    (%eax),%al
f0114723:	3c 44                	cmp    $0x44,%al
f0114725:	75 33                	jne    f011475a <test_share_chunk+0x9a8>
f0114727:	8b 45 98             	mov    -0x68(%ebp),%eax
f011472a:	8a 00                	mov    (%eax),%al
f011472c:	3c 44                	cmp    $0x44,%al
f011472e:	75 2a                	jne    f011475a <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114730:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114733:	8a 10                	mov    (%eax),%dl
f0114735:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114738:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011473a:	38 c2                	cmp    %al,%dl
f011473c:	75 1c                	jne    f011475a <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011473e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114741:	8a 10                	mov    (%eax),%dl
f0114743:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114746:	8a 00                	mov    (%eax),%al
f0114748:	38 c2                	cmp    %al,%dl
f011474a:	75 0e                	jne    f011475a <test_share_chunk+0x9a8>
f011474c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011474f:	8a 10                	mov    (%eax),%dl
f0114751:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114754:	8a 00                	mov    (%eax),%al
f0114756:	38 c2                	cmp    %al,%dl
f0114758:	74 1e                	je     f0114778 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011475a:	83 ec 04             	sub    $0x4,%esp
f011475d:	68 74 a5 13 f0       	push   $0xf013a574
f0114762:	68 87 04 00 00       	push   $0x487
f0114767:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011476c:	e8 a2 bc fe ff       	call   f0100413 <_warn>
f0114771:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114774:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114778:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011477c:	74 04                	je     f0114782 <test_share_chunk+0x9d0>
f011477e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114782:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114786:	83 ec 0c             	sub    $0xc,%esp
f0114789:	68 b8 a6 13 f0       	push   $0xf013a6b8
f011478e:	e8 7b c5 fe ff       	call   f0100d0e <cprintf>
f0114793:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114796:	83 ec 08             	sub    $0x8,%esp
f0114799:	ff 75 e4             	pushl  -0x1c(%ebp)
f011479c:	68 c8 a6 13 f0       	push   $0xf013a6c8
f01147a1:	e8 68 c5 fe ff       	call   f0100d0e <cprintf>
f01147a6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01147a9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01147ad:	75 10                	jne    f01147bf <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01147af:	83 ec 0c             	sub    $0xc,%esp
f01147b2:	68 f8 a6 13 f0       	push   $0xf013a6f8
f01147b7:	e8 52 c5 fe ff       	call   f0100d0e <cprintf>
f01147bc:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01147bf:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f01147c4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01147c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147ca:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01147cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01147d2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01147d5:	5b                   	pop    %ebx
f01147d6:	5e                   	pop    %esi
f01147d7:	5f                   	pop    %edi
f01147d8:	5d                   	pop    %ebp
f01147d9:	c3                   	ret    

f01147da <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01147da:	55                   	push   %ebp
f01147db:	89 e5                	mov    %esp,%ebp
f01147dd:	57                   	push   %edi
f01147de:	56                   	push   %esi
f01147df:	53                   	push   %ebx
f01147e0:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01147e6:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01147ec:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f01147f1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01147f6:	89 c7                	mov    %eax,%edi
f01147f8:	89 de                	mov    %ebx,%esi
f01147fa:	89 d1                	mov    %edx,%ecx
f01147fc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01147fe:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114804:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114809:	b0 00                	mov    $0x0,%al
f011480b:	89 d7                	mov    %edx,%edi
f011480d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011480f:	6a 00                	push   $0x0
f0114811:	6a 0a                	push   $0xa
f0114813:	6a 14                	push   $0x14
f0114815:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011481b:	50                   	push   %eax
f011481c:	e8 ff 4a ff ff       	call   f0109320 <env_create>
f0114821:	83 c4 10             	add    $0x10,%esp
f0114824:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114827:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011482a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011482d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0114830:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114833:	8b 40 60             	mov    0x60(%eax),%eax
f0114836:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114839:	8b 45 90             	mov    -0x70(%ebp),%eax
f011483c:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011483f:	83 ec 0c             	sub    $0xc,%esp
f0114842:	ff 75 d0             	pushl  -0x30(%ebp)
f0114845:	e8 32 20 00 00       	call   f011687c <ClearUserSpace>
f011484a:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011484d:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114854:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f011485b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114862:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114866:	83 ec 0c             	sub    $0xc,%esp
f0114869:	68 34 a7 13 f0       	push   $0xf013a734
f011486e:	e8 9b c4 fe ff       	call   f0100d0e <cprintf>
f0114873:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114876:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011487d:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0114884:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114887:	8a 00                	mov    (%eax),%al
f0114889:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011488f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114892:	8a 00                	mov    (%eax),%al
f0114894:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011489a:	83 ec 08             	sub    $0x8,%esp
f011489d:	68 00 f0 bf ef       	push   $0xefbff000
f01148a2:	ff 75 d0             	pushl  -0x30(%ebp)
f01148a5:	e8 b3 1f 00 00       	call   f011685d <GP>
f01148aa:	83 c4 10             	add    $0x10,%esp
f01148ad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01148b0:	e8 a4 87 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01148b5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01148b8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148bb:	c1 e0 02             	shl    $0x2,%eax
f01148be:	6a 02                	push   $0x2
f01148c0:	50                   	push   %eax
f01148c1:	68 00 f0 bf ef       	push   $0xefbff000
f01148c6:	ff 75 d0             	pushl  -0x30(%ebp)
f01148c9:	e8 ca 44 ff ff       	call   f0108d98 <allocate_chunk>
f01148ce:	83 c4 10             	add    $0x10,%esp
f01148d1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01148d4:	e8 80 87 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01148d9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01148dc:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01148e0:	75 08                	jne    f01148ea <test_allocate_chunk+0x110>
f01148e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148e5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01148e8:	74 2a                	je     f0114914 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01148ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148ed:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148f0:	83 ec 08             	sub    $0x8,%esp
f01148f3:	6a 00                	push   $0x0
f01148f5:	50                   	push   %eax
f01148f6:	ff 75 b0             	pushl  -0x50(%ebp)
f01148f9:	68 60 a7 13 f0       	push   $0xf013a760
f01148fe:	68 c3 04 00 00       	push   $0x4c3
f0114903:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114908:	e8 06 bb fe ff       	call   f0100413 <_warn>
f011490d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114910:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114914:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114918:	74 04                	je     f011491e <test_allocate_chunk+0x144>
f011491a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011491e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114922:	e8 32 87 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114927:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f011492a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011492d:	01 c0                	add    %eax,%eax
f011492f:	89 c1                	mov    %eax,%ecx
f0114931:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114934:	89 d0                	mov    %edx,%eax
f0114936:	c1 e0 02             	shl    $0x2,%eax
f0114939:	01 d0                	add    %edx,%eax
f011493b:	f7 d8                	neg    %eax
f011493d:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114942:	6a 02                	push   $0x2
f0114944:	51                   	push   %ecx
f0114945:	50                   	push   %eax
f0114946:	ff 75 d0             	pushl  -0x30(%ebp)
f0114949:	e8 4a 44 ff ff       	call   f0108d98 <allocate_chunk>
f011494e:	83 c4 10             	add    $0x10,%esp
f0114951:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114954:	e8 00 87 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114959:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011495c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114960:	75 08                	jne    f011496a <test_allocate_chunk+0x190>
f0114962:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114965:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114968:	74 2a                	je     f0114994 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011496a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011496d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114970:	83 ec 08             	sub    $0x8,%esp
f0114973:	6a 00                	push   $0x0
f0114975:	50                   	push   %eax
f0114976:	ff 75 b0             	pushl  -0x50(%ebp)
f0114979:	68 60 a7 13 f0       	push   $0xf013a760
f011497e:	68 d1 04 00 00       	push   $0x4d1
f0114983:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114988:	e8 86 ba fe ff       	call   f0100413 <_warn>
f011498d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114990:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114994:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114998:	74 04                	je     f011499e <test_allocate_chunk+0x1c4>
f011499a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011499e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01149a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149a5:	c1 e0 02             	shl    $0x2,%eax
f01149a8:	83 ec 08             	sub    $0x8,%esp
f01149ab:	6a 03                	push   $0x3
f01149ad:	6a 00                	push   $0x0
f01149af:	6a 00                	push   $0x0
f01149b1:	68 ff 0f 00 00       	push   $0xfff
f01149b6:	ff 75 b8             	pushl  -0x48(%ebp)
f01149b9:	6a 01                	push   $0x1
f01149bb:	50                   	push   %eax
f01149bc:	68 00 f0 bf ef       	push   $0xefbff000
f01149c1:	6a 00                	push   $0x0
f01149c3:	ff 75 d0             	pushl  -0x30(%ebp)
f01149c6:	e8 e5 1e 00 00       	call   f01168b0 <CCP>
f01149cb:	83 c4 30             	add    $0x30,%esp
f01149ce:	85 c0                	test   %eax,%eax
f01149d0:	75 1e                	jne    f01149f0 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01149d2:	83 ec 04             	sub    $0x4,%esp
f01149d5:	68 c8 a7 13 f0       	push   $0xf013a7c8
f01149da:	68 d9 04 00 00       	push   $0x4d9
f01149df:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01149e4:	e8 2a ba fe ff       	call   f0100413 <_warn>
f01149e9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01149ec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149f0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149f4:	74 04                	je     f01149fa <test_allocate_chunk+0x220>
f01149f6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149fa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01149fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a01:	8a 10                	mov    (%eax),%dl
f0114a03:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114a09:	38 c2                	cmp    %al,%dl
f0114a0b:	75 0f                	jne    f0114a1c <test_allocate_chunk+0x242>
f0114a0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114a10:	8a 10                	mov    (%eax),%dl
f0114a12:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114a18:	38 c2                	cmp    %al,%dl
f0114a1a:	74 1e                	je     f0114a3a <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114a1c:	83 ec 04             	sub    $0x4,%esp
f0114a1f:	68 14 a8 13 f0       	push   $0xf013a814
f0114a24:	68 e1 04 00 00       	push   $0x4e1
f0114a29:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114a2e:	e8 e0 b9 fe ff       	call   f0100413 <_warn>
f0114a33:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a36:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a3a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a3e:	74 04                	je     f0114a44 <test_allocate_chunk+0x26a>
f0114a40:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a44:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114a48:	83 ec 0c             	sub    $0xc,%esp
f0114a4b:	68 a9 a5 13 f0       	push   $0xf013a5a9
f0114a50:	e8 b9 c2 fe ff       	call   f0100d0e <cprintf>
f0114a55:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114a58:	83 ec 0c             	sub    $0xc,%esp
f0114a5b:	68 4c a8 13 f0       	push   $0xf013a84c
f0114a60:	e8 a9 c2 fe ff       	call   f0100d0e <cprintf>
f0114a65:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a68:	e8 ec 85 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114a6d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114a70:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a73:	c1 e0 05             	shl    $0x5,%eax
f0114a76:	68 02 0e 00 00       	push   $0xe02
f0114a7b:	50                   	push   %eax
f0114a7c:	6a 00                	push   $0x0
f0114a7e:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a81:	e8 12 43 ff ff       	call   f0108d98 <allocate_chunk>
f0114a86:	83 c4 10             	add    $0x10,%esp
f0114a89:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a8c:	e8 c8 85 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114a91:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114a94:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114a98:	75 36                	jne    f0114ad0 <test_allocate_chunk+0x2f6>
f0114a9a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a9d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114aa0:	89 c1                	mov    %eax,%ecx
f0114aa2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aa5:	c1 e0 05             	shl    $0x5,%eax
f0114aa8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114aab:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ab2:	99                   	cltd   
f0114ab3:	f7 fe                	idiv   %esi
f0114ab5:	89 c3                	mov    %eax,%ebx
f0114ab7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aba:	c1 e0 05             	shl    $0x5,%eax
f0114abd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ac0:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ac7:	99                   	cltd   
f0114ac8:	f7 fe                	idiv   %esi
f0114aca:	01 d8                	add    %ebx,%eax
f0114acc:	39 c1                	cmp    %eax,%ecx
f0114ace:	74 54                	je     f0114b24 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114ad0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ad3:	c1 e0 05             	shl    $0x5,%eax
f0114ad6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ad9:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114ae0:	99                   	cltd   
f0114ae1:	f7 ff                	idiv   %edi
f0114ae3:	89 c1                	mov    %eax,%ecx
f0114ae5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ae8:	c1 e0 05             	shl    $0x5,%eax
f0114aeb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114aee:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114af5:	99                   	cltd   
f0114af6:	f7 fe                	idiv   %esi
f0114af8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114afb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114afe:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b01:	83 ec 08             	sub    $0x8,%esp
f0114b04:	52                   	push   %edx
f0114b05:	50                   	push   %eax
f0114b06:	ff 75 a8             	pushl  -0x58(%ebp)
f0114b09:	68 8c a8 13 f0       	push   $0xf013a88c
f0114b0e:	68 f6 04 00 00       	push   $0x4f6
f0114b13:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114b18:	e8 f6 b8 fe ff       	call   f0100413 <_warn>
f0114b1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b20:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b24:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b28:	74 04                	je     f0114b2e <test_allocate_chunk+0x354>
f0114b2a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b2e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b32:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114b39:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b3c:	c1 e0 05             	shl    $0x5,%eax
f0114b3f:	83 ec 08             	sub    $0x8,%esp
f0114b42:	6a 03                	push   $0x3
f0114b44:	6a 00                	push   $0x0
f0114b46:	6a 00                	push   $0x0
f0114b48:	68 07 0e 00 00       	push   $0xe07
f0114b4d:	68 03 0e 00 00       	push   $0xe03
f0114b52:	6a 01                	push   $0x1
f0114b54:	50                   	push   %eax
f0114b55:	6a 00                	push   $0x0
f0114b57:	6a 00                	push   $0x0
f0114b59:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b5c:	e8 4f 1d 00 00       	call   f01168b0 <CCP>
f0114b61:	83 c4 30             	add    $0x30,%esp
f0114b64:	85 c0                	test   %eax,%eax
f0114b66:	75 25                	jne    f0114b8d <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b68:	83 ec 04             	sub    $0x4,%esp
f0114b6b:	68 c8 a7 13 f0       	push   $0xf013a7c8
f0114b70:	68 ff 04 00 00       	push   $0x4ff
f0114b75:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114b7a:	e8 94 b8 fe ff       	call   f0100413 <_warn>
f0114b7f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b82:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114b86:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114b8d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b91:	74 04                	je     f0114b97 <test_allocate_chunk+0x3bd>
f0114b93:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b97:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114b9b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114b9f:	74 5a                	je     f0114bfb <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114ba1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114ba4:	01 c0                	add    %eax,%eax
f0114ba6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114ba9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bac:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114baf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114bb2:	01 c0                	add    %eax,%eax
f0114bb4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114bb7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bba:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114bbd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bc0:	8a 00                	mov    (%eax),%al
f0114bc2:	3c 4b                	cmp    $0x4b,%al
f0114bc4:	75 09                	jne    f0114bcf <test_allocate_chunk+0x3f5>
f0114bc6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bc9:	8a 00                	mov    (%eax),%al
f0114bcb:	3c 4d                	cmp    $0x4d,%al
f0114bcd:	74 1e                	je     f0114bed <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114bcf:	83 ec 04             	sub    $0x4,%esp
f0114bd2:	68 14 a8 13 f0       	push   $0xf013a814
f0114bd7:	68 0d 05 00 00       	push   $0x50d
f0114bdc:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114be1:	e8 2d b8 fe ff       	call   f0100413 <_warn>
f0114be6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114be9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114bed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bf1:	74 04                	je     f0114bf7 <test_allocate_chunk+0x41d>
f0114bf3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114bf7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114bfb:	83 ec 0c             	sub    $0xc,%esp
f0114bfe:	68 83 9b 13 f0       	push   $0xf0139b83
f0114c03:	e8 06 c1 fe ff       	call   f0100d0e <cprintf>
f0114c08:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114c0b:	83 ec 0c             	sub    $0xc,%esp
f0114c0e:	68 ec a8 13 f0       	push   $0xf013a8ec
f0114c13:	e8 f6 c0 fe ff       	call   f0100d0e <cprintf>
f0114c18:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c1b:	e8 39 84 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114c20:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114c23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c26:	c1 e0 06             	shl    $0x6,%eax
f0114c29:	89 c2                	mov    %eax,%edx
f0114c2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c2e:	c1 e0 05             	shl    $0x5,%eax
f0114c31:	6a 00                	push   $0x0
f0114c33:	52                   	push   %edx
f0114c34:	50                   	push   %eax
f0114c35:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c38:	e8 5b 41 ff ff       	call   f0108d98 <allocate_chunk>
f0114c3d:	83 c4 10             	add    $0x10,%esp
f0114c40:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c43:	e8 11 84 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114c48:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114c4b:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114c4f:	75 36                	jne    f0114c87 <test_allocate_chunk+0x4ad>
f0114c51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c54:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c57:	89 c1                	mov    %eax,%ecx
f0114c59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c5c:	c1 e0 06             	shl    $0x6,%eax
f0114c5f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c62:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114c69:	99                   	cltd   
f0114c6a:	f7 ff                	idiv   %edi
f0114c6c:	89 c3                	mov    %eax,%ebx
f0114c6e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c71:	c1 e0 06             	shl    $0x6,%eax
f0114c74:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114c77:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c7e:	99                   	cltd   
f0114c7f:	f7 fe                	idiv   %esi
f0114c81:	01 d8                	add    %ebx,%eax
f0114c83:	39 c1                	cmp    %eax,%ecx
f0114c85:	74 54                	je     f0114cdb <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114c87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c8a:	c1 e0 06             	shl    $0x6,%eax
f0114c8d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c90:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114c97:	99                   	cltd   
f0114c98:	f7 fb                	idiv   %ebx
f0114c9a:	89 c1                	mov    %eax,%ecx
f0114c9c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c9f:	c1 e0 06             	shl    $0x6,%eax
f0114ca2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ca5:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114cac:	99                   	cltd   
f0114cad:	f7 ff                	idiv   %edi
f0114caf:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114cb2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cb5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cb8:	83 ec 08             	sub    $0x8,%esp
f0114cbb:	52                   	push   %edx
f0114cbc:	50                   	push   %eax
f0114cbd:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114cc0:	68 8c a8 13 f0       	push   $0xf013a88c
f0114cc5:	68 23 05 00 00       	push   $0x523
f0114cca:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114ccf:	e8 3f b7 fe ff       	call   f0100413 <_warn>
f0114cd4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114cdb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cdf:	74 04                	je     f0114ce5 <test_allocate_chunk+0x50b>
f0114ce1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ce5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114ce9:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114cf0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cf3:	c1 e0 06             	shl    $0x6,%eax
f0114cf6:	89 c2                	mov    %eax,%edx
f0114cf8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cfb:	c1 e0 05             	shl    $0x5,%eax
f0114cfe:	83 ec 08             	sub    $0x8,%esp
f0114d01:	6a 03                	push   $0x3
f0114d03:	6a 00                	push   $0x0
f0114d05:	6a 00                	push   $0x0
f0114d07:	68 07 0e 00 00       	push   $0xe07
f0114d0c:	6a 01                	push   $0x1
f0114d0e:	6a 01                	push   $0x1
f0114d10:	52                   	push   %edx
f0114d11:	50                   	push   %eax
f0114d12:	6a 00                	push   $0x0
f0114d14:	ff 75 d0             	pushl  -0x30(%ebp)
f0114d17:	e8 94 1b 00 00       	call   f01168b0 <CCP>
f0114d1c:	83 c4 30             	add    $0x30,%esp
f0114d1f:	85 c0                	test   %eax,%eax
f0114d21:	75 25                	jne    f0114d48 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d23:	83 ec 04             	sub    $0x4,%esp
f0114d26:	68 c8 a7 13 f0       	push   $0xf013a7c8
f0114d2b:	68 2c 05 00 00       	push   $0x52c
f0114d30:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114d35:	e8 d9 b6 fe ff       	call   f0100413 <_warn>
f0114d3a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d3d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114d41:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114d48:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d4c:	74 04                	je     f0114d52 <test_allocate_chunk+0x578>
f0114d4e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d52:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114d56:	83 ec 0c             	sub    $0xc,%esp
f0114d59:	68 e6 9b 13 f0       	push   $0xf0139be6
f0114d5e:	e8 ab bf fe ff       	call   f0100d0e <cprintf>
f0114d63:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114d66:	83 ec 0c             	sub    $0xc,%esp
f0114d69:	68 2c a9 13 f0       	push   $0xf013a92c
f0114d6e:	e8 9b bf fe ff       	call   f0100d0e <cprintf>
f0114d73:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d76:	e8 de 82 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114d7b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114d7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d81:	c1 e0 06             	shl    $0x6,%eax
f0114d84:	68 06 0e 00 00       	push   $0xe06
f0114d89:	50                   	push   %eax
f0114d8a:	68 00 00 00 80       	push   $0x80000000
f0114d8f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114d92:	e8 01 40 ff ff       	call   f0108d98 <allocate_chunk>
f0114d97:	83 c4 10             	add    $0x10,%esp
f0114d9a:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d9d:	e8 b7 82 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114da2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114da5:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114da9:	75 36                	jne    f0114de1 <test_allocate_chunk+0x607>
f0114dab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dae:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114db1:	89 c1                	mov    %eax,%ecx
f0114db3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114db6:	c1 e0 06             	shl    $0x6,%eax
f0114db9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114dbc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114dc3:	99                   	cltd   
f0114dc4:	f7 fb                	idiv   %ebx
f0114dc6:	89 c3                	mov    %eax,%ebx
f0114dc8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114dcb:	c1 e0 06             	shl    $0x6,%eax
f0114dce:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dd1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114dd8:	99                   	cltd   
f0114dd9:	f7 fe                	idiv   %esi
f0114ddb:	01 d8                	add    %ebx,%eax
f0114ddd:	39 c1                	cmp    %eax,%ecx
f0114ddf:	74 54                	je     f0114e35 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114de1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114de4:	c1 e0 06             	shl    $0x6,%eax
f0114de7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114dea:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114df1:	99                   	cltd   
f0114df2:	f7 ff                	idiv   %edi
f0114df4:	89 c1                	mov    %eax,%ecx
f0114df6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114df9:	c1 e0 06             	shl    $0x6,%eax
f0114dfc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dff:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e06:	99                   	cltd   
f0114e07:	f7 fb                	idiv   %ebx
f0114e09:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e0f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e12:	83 ec 08             	sub    $0x8,%esp
f0114e15:	52                   	push   %edx
f0114e16:	50                   	push   %eax
f0114e17:	ff 75 9c             	pushl  -0x64(%ebp)
f0114e1a:	68 8c a8 13 f0       	push   $0xf013a88c
f0114e1f:	68 42 05 00 00       	push   $0x542
f0114e24:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114e29:	e8 e5 b5 fe ff       	call   f0100413 <_warn>
f0114e2e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e31:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e35:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e39:	74 04                	je     f0114e3f <test_allocate_chunk+0x665>
f0114e3b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e3f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114e43:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e4a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e4d:	c1 e0 06             	shl    $0x6,%eax
f0114e50:	83 ec 08             	sub    $0x8,%esp
f0114e53:	6a 03                	push   $0x3
f0114e55:	6a 00                	push   $0x0
f0114e57:	6a 00                	push   $0x0
f0114e59:	68 07 0e 00 00       	push   $0xe07
f0114e5e:	68 07 0e 00 00       	push   $0xe07
f0114e63:	6a 01                	push   $0x1
f0114e65:	50                   	push   %eax
f0114e66:	68 00 00 00 80       	push   $0x80000000
f0114e6b:	6a 00                	push   $0x0
f0114e6d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114e70:	e8 3b 1a 00 00       	call   f01168b0 <CCP>
f0114e75:	83 c4 30             	add    $0x30,%esp
f0114e78:	85 c0                	test   %eax,%eax
f0114e7a:	75 25                	jne    f0114ea1 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e7c:	83 ec 04             	sub    $0x4,%esp
f0114e7f:	68 c8 a7 13 f0       	push   $0xf013a7c8
f0114e84:	68 4b 05 00 00       	push   $0x54b
f0114e89:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114e8e:	e8 80 b5 fe ff       	call   f0100413 <_warn>
f0114e93:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e96:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114e9a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114ea1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ea5:	74 04                	je     f0114eab <test_allocate_chunk+0x6d1>
f0114ea7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114eab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114eaf:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114eb3:	74 6f                	je     f0114f24 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114eb5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114eb8:	01 c0                	add    %eax,%eax
f0114eba:	05 00 00 00 80       	add    $0x80000000,%eax
f0114ebf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114ec2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ec5:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114ec8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ecb:	89 d0                	mov    %edx,%eax
f0114ecd:	c1 e0 02             	shl    $0x2,%eax
f0114ed0:	01 d0                	add    %edx,%eax
f0114ed2:	01 c0                	add    %eax,%eax
f0114ed4:	01 d0                	add    %edx,%eax
f0114ed6:	01 c0                	add    %eax,%eax
f0114ed8:	05 00 00 00 80       	add    $0x80000000,%eax
f0114edd:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114ee0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ee3:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114ee6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ee9:	8a 00                	mov    (%eax),%al
f0114eeb:	3c 4b                	cmp    $0x4b,%al
f0114eed:	75 09                	jne    f0114ef8 <test_allocate_chunk+0x71e>
f0114eef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ef2:	8a 00                	mov    (%eax),%al
f0114ef4:	3c 4d                	cmp    $0x4d,%al
f0114ef6:	74 1e                	je     f0114f16 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114ef8:	83 ec 04             	sub    $0x4,%esp
f0114efb:	68 14 a8 13 f0       	push   $0xf013a814
f0114f00:	68 59 05 00 00       	push   $0x559
f0114f05:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114f0a:	e8 04 b5 fe ff       	call   f0100413 <_warn>
f0114f0f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114f12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114f16:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f1a:	74 04                	je     f0114f20 <test_allocate_chunk+0x746>
f0114f1c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114f20:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114f24:	83 ec 0c             	sub    $0xc,%esp
f0114f27:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0114f2c:	e8 dd bd fe ff       	call   f0100d0e <cprintf>
f0114f31:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114f34:	83 ec 0c             	sub    $0xc,%esp
f0114f37:	68 68 a9 13 f0       	push   $0xf013a968
f0114f3c:	e8 cd bd fe ff       	call   f0100d0e <cprintf>
f0114f41:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114f44:	e8 10 81 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114f49:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114f4c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114f4f:	89 d0                	mov    %edx,%eax
f0114f51:	01 c0                	add    %eax,%eax
f0114f53:	01 d0                	add    %edx,%eax
f0114f55:	01 c0                	add    %eax,%eax
f0114f57:	01 d0                	add    %edx,%eax
f0114f59:	68 04 0e 00 00       	push   $0xe04
f0114f5e:	50                   	push   %eax
f0114f5f:	68 00 fc 3f 40       	push   $0x403ffc00
f0114f64:	ff 75 d0             	pushl  -0x30(%ebp)
f0114f67:	e8 2c 3e ff ff       	call   f0108d98 <allocate_chunk>
f0114f6c:	83 c4 10             	add    $0x10,%esp
f0114f6f:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114f72:	e8 e2 80 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114f77:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114f7a:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114f7e:	75 0b                	jne    f0114f8b <test_allocate_chunk+0x7b1>
f0114f80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f83:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f86:	83 f8 05             	cmp    $0x5,%eax
f0114f89:	74 2a                	je     f0114fb5 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114f8b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f8e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f91:	83 ec 08             	sub    $0x8,%esp
f0114f94:	6a 05                	push   $0x5
f0114f96:	50                   	push   %eax
f0114f97:	ff 75 98             	pushl  -0x68(%ebp)
f0114f9a:	68 8c a8 13 f0       	push   $0xf013a88c
f0114f9f:	68 70 05 00 00       	push   $0x570
f0114fa4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0114fa9:	e8 65 b4 fe ff       	call   f0100413 <_warn>
f0114fae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fb1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114fb5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fb9:	74 04                	je     f0114fbf <test_allocate_chunk+0x7e5>
f0114fbb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fbf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114fc3:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114fca:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114fcd:	89 d0                	mov    %edx,%eax
f0114fcf:	01 c0                	add    %eax,%eax
f0114fd1:	01 d0                	add    %edx,%eax
f0114fd3:	c1 e0 02             	shl    $0x2,%eax
f0114fd6:	83 ec 08             	sub    $0x8,%esp
f0114fd9:	6a 03                	push   $0x3
f0114fdb:	6a 00                	push   $0x0
f0114fdd:	6a 00                	push   $0x0
f0114fdf:	68 07 0e 00 00       	push   $0xe07
f0114fe4:	68 05 0e 00 00       	push   $0xe05
f0114fe9:	6a 01                	push   $0x1
f0114feb:	50                   	push   %eax
f0114fec:	68 00 f0 3f 40       	push   $0x403ff000
f0114ff1:	6a 00                	push   $0x0
f0114ff3:	ff 75 d0             	pushl  -0x30(%ebp)
f0114ff6:	e8 b5 18 00 00       	call   f01168b0 <CCP>
f0114ffb:	83 c4 30             	add    $0x30,%esp
f0114ffe:	85 c0                	test   %eax,%eax
f0115000:	75 25                	jne    f0115027 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115002:	83 ec 04             	sub    $0x4,%esp
f0115005:	68 c8 a7 13 f0       	push   $0xf013a7c8
f011500a:	68 79 05 00 00       	push   $0x579
f011500f:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115014:	e8 fa b3 fe ff       	call   f0100413 <_warn>
f0115019:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011501c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115020:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115027:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011502b:	74 04                	je     f0115031 <test_allocate_chunk+0x857>
f011502d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115031:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115035:	83 ec 0c             	sub    $0xc,%esp
f0115038:	68 9f a9 13 f0       	push   $0xf013a99f
f011503d:	e8 cc bc fe ff       	call   f0100d0e <cprintf>
f0115042:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115045:	83 ec 08             	sub    $0x8,%esp
f0115048:	ff 75 e4             	pushl  -0x1c(%ebp)
f011504b:	68 b0 a9 13 f0       	push   $0xf013a9b0
f0115050:	e8 b9 bc fe ff       	call   f0100d0e <cprintf>
f0115055:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115058:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011505c:	75 10                	jne    f011506e <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011505e:	83 ec 0c             	sub    $0xc,%esp
f0115061:	68 e4 a9 13 f0       	push   $0xf013a9e4
f0115066:	e8 a3 bc fe ff       	call   f0100d0e <cprintf>
f011506b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011506e:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f0115073:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0115076:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115079:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011507c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115081:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115084:	5b                   	pop    %ebx
f0115085:	5e                   	pop    %esi
f0115086:	5f                   	pop    %edi
f0115087:	5d                   	pop    %ebp
f0115088:	c3                   	ret    

f0115089 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0115089:	55                   	push   %ebp
f011508a:	89 e5                	mov    %esp,%ebp
f011508c:	57                   	push   %edi
f011508d:	56                   	push   %esi
f011508e:	53                   	push   %ebx
f011508f:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115095:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115098:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f011509d:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150a2:	89 c7                	mov    %eax,%edi
f01150a4:	89 de                	mov    %ebx,%esi
f01150a6:	89 d1                	mov    %edx,%ecx
f01150a8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150aa:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01150ad:	b9 23 00 00 00       	mov    $0x23,%ecx
f01150b2:	b0 00                	mov    $0x0,%al
f01150b4:	89 d7                	mov    %edx,%edi
f01150b6:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01150b8:	6a 00                	push   $0x0
f01150ba:	6a 0a                	push   $0xa
f01150bc:	6a 14                	push   $0x14
f01150be:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01150c1:	50                   	push   %eax
f01150c2:	e8 59 42 ff ff       	call   f0109320 <env_create>
f01150c7:	83 c4 10             	add    $0x10,%esp
f01150ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01150cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150d0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01150d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01150d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150d9:	8b 40 60             	mov    0x60(%eax),%eax
f01150dc:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01150df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150e2:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01150e5:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01150ec:	75 70 20 
f01150ef:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01150f6:	00 00 00 
f01150f9:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01150fc:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115101:	b8 00 00 00 00       	mov    $0x0,%eax
f0115106:	89 d7                	mov    %edx,%edi
f0115108:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011510a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011510d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115110:	83 ec 08             	sub    $0x8,%esp
f0115113:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115119:	52                   	push   %edx
f011511a:	50                   	push   %eax
f011511b:	e8 5b cd 01 00       	call   f0131e7b <ltostr>
f0115120:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115123:	83 ec 04             	sub    $0x4,%esp
f0115126:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011512c:	50                   	push   %eax
f011512d:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115133:	50                   	push   %eax
f0115134:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011513a:	50                   	push   %eax
f011513b:	e8 33 ce 01 00       	call   f0131f73 <strcconcat>
f0115140:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115143:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011514a:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115151:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115158:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011515f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115163:	83 ec 0c             	sub    $0xc,%esp
f0115166:	ff 75 d8             	pushl  -0x28(%ebp)
f0115169:	e8 0e 17 00 00       	call   f011687c <ClearUserSpace>
f011516e:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115171:	83 ec 0c             	sub    $0xc,%esp
f0115174:	68 24 aa 13 f0       	push   $0xf013aa24
f0115179:	e8 90 bb fe ff       	call   f0100d0e <cprintf>
f011517e:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115181:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115184:	c1 e0 03             	shl    $0x3,%eax
f0115187:	83 ec 04             	sub    $0x4,%esp
f011518a:	50                   	push   %eax
f011518b:	6a 00                	push   $0x0
f011518d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115190:	e8 67 3e ff ff       	call   f0108ffc <calculate_required_frames>
f0115195:	83 c4 10             	add    $0x10,%esp
f0115198:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011519b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011519f:	74 23                	je     f01151c4 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01151a1:	83 ec 0c             	sub    $0xc,%esp
f01151a4:	6a 03                	push   $0x3
f01151a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01151a9:	68 58 aa 13 f0       	push   $0xf013aa58
f01151ae:	68 b2 05 00 00       	push   $0x5b2
f01151b3:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01151b8:	e8 56 b2 fe ff       	call   f0100413 <_warn>
f01151bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151c8:	74 04                	je     f01151ce <test_calculate_required_frames+0x145>
f01151ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01151d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151d5:	c1 e0 02             	shl    $0x2,%eax
f01151d8:	83 ec 04             	sub    $0x4,%esp
f01151db:	50                   	push   %eax
f01151dc:	6a 00                	push   $0x0
f01151de:	ff 75 d8             	pushl  -0x28(%ebp)
f01151e1:	e8 16 3e ff ff       	call   f0108ffc <calculate_required_frames>
f01151e6:	83 c4 10             	add    $0x10,%esp
f01151e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f01151ec:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f01151f3:	74 26                	je     f011521b <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01151f5:	83 ec 0c             	sub    $0xc,%esp
f01151f8:	68 01 04 00 00       	push   $0x401
f01151fd:	ff 75 c8             	pushl  -0x38(%ebp)
f0115200:	68 58 aa 13 f0       	push   $0xf013aa58
f0115205:	68 bc 05 00 00       	push   $0x5bc
f011520a:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011520f:	e8 ff b1 fe ff       	call   f0100413 <_warn>
f0115214:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115217:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011521b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011521f:	74 04                	je     f0115225 <test_calculate_required_frames+0x19c>
f0115221:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115225:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115229:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011522c:	c1 e0 0a             	shl    $0xa,%eax
f011522f:	83 ec 04             	sub    $0x4,%esp
f0115232:	50                   	push   %eax
f0115233:	6a 00                	push   $0x0
f0115235:	ff 75 d8             	pushl  -0x28(%ebp)
f0115238:	e8 bf 3d ff ff       	call   f0108ffc <calculate_required_frames>
f011523d:	83 c4 10             	add    $0x10,%esp
f0115240:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115243:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115246:	c1 e0 0a             	shl    $0xa,%eax
f0115249:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011524c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115253:	99                   	cltd   
f0115254:	f7 fb                	idiv   %ebx
f0115256:	89 c1                	mov    %eax,%ecx
f0115258:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011525b:	c1 e0 0a             	shl    $0xa,%eax
f011525e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115261:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115268:	99                   	cltd   
f0115269:	f7 fe                	idiv   %esi
f011526b:	01 c8                	add    %ecx,%eax
f011526d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115270:	74 4c                	je     f01152be <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115272:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115275:	c1 e0 0a             	shl    $0xa,%eax
f0115278:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011527b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115282:	99                   	cltd   
f0115283:	f7 fb                	idiv   %ebx
f0115285:	89 c1                	mov    %eax,%ecx
f0115287:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011528a:	c1 e0 0a             	shl    $0xa,%eax
f011528d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115290:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115297:	99                   	cltd   
f0115298:	f7 fe                	idiv   %esi
f011529a:	01 c8                	add    %ecx,%eax
f011529c:	83 ec 0c             	sub    $0xc,%esp
f011529f:	50                   	push   %eax
f01152a0:	ff 75 c8             	pushl  -0x38(%ebp)
f01152a3:	68 58 aa 13 f0       	push   $0xf013aa58
f01152a8:	68 c6 05 00 00       	push   $0x5c6
f01152ad:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01152b2:	e8 5c b1 fe ff       	call   f0100413 <_warn>
f01152b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152c2:	74 04                	je     f01152c8 <test_calculate_required_frames+0x23f>
f01152c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01152cc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152cf:	89 d0                	mov    %edx,%eax
f01152d1:	01 c0                	add    %eax,%eax
f01152d3:	01 d0                	add    %edx,%eax
f01152d5:	01 c0                	add    %eax,%eax
f01152d7:	83 ec 04             	sub    $0x4,%esp
f01152da:	50                   	push   %eax
f01152db:	68 00 10 00 00       	push   $0x1000
f01152e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01152e3:	e8 14 3d ff ff       	call   f0108ffc <calculate_required_frames>
f01152e8:	83 c4 10             	add    $0x10,%esp
f01152eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01152ee:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01152f2:	74 23                	je     f0115317 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01152f4:	83 ec 0c             	sub    $0xc,%esp
f01152f7:	6a 03                	push   $0x3
f01152f9:	ff 75 c8             	pushl  -0x38(%ebp)
f01152fc:	68 58 aa 13 f0       	push   $0xf013aa58
f0115301:	68 d2 05 00 00       	push   $0x5d2
f0115306:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011530b:	e8 03 b1 fe ff       	call   f0100413 <_warn>
f0115310:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115313:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115317:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011531b:	74 04                	je     f0115321 <test_calculate_required_frames+0x298>
f011531d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115321:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115325:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115328:	89 c2                	mov    %eax,%edx
f011532a:	01 d2                	add    %edx,%edx
f011532c:	01 d0                	add    %edx,%eax
f011532e:	83 ec 04             	sub    $0x4,%esp
f0115331:	50                   	push   %eax
f0115332:	68 00 18 00 00       	push   $0x1800
f0115337:	ff 75 d8             	pushl  -0x28(%ebp)
f011533a:	e8 bd 3c ff ff       	call   f0108ffc <calculate_required_frames>
f011533f:	83 c4 10             	add    $0x10,%esp
f0115342:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115345:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115349:	74 23                	je     f011536e <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011534b:	83 ec 0c             	sub    $0xc,%esp
f011534e:	6a 03                	push   $0x3
f0115350:	ff 75 c8             	pushl  -0x38(%ebp)
f0115353:	68 58 aa 13 f0       	push   $0xf013aa58
f0115358:	68 dc 05 00 00       	push   $0x5dc
f011535d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115362:	e8 ac b0 fe ff       	call   f0100413 <_warn>
f0115367:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011536a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011536e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115372:	74 04                	je     f0115378 <test_calculate_required_frames+0x2ef>
f0115374:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115378:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011537c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011537f:	89 d0                	mov    %edx,%eax
f0115381:	c1 e0 02             	shl    $0x2,%eax
f0115384:	01 d0                	add    %edx,%eax
f0115386:	01 c0                	add    %eax,%eax
f0115388:	83 ec 04             	sub    $0x4,%esp
f011538b:	50                   	push   %eax
f011538c:	68 00 00 40 00       	push   $0x400000
f0115391:	ff 75 d8             	pushl  -0x28(%ebp)
f0115394:	e8 63 3c ff ff       	call   f0108ffc <calculate_required_frames>
f0115399:	83 c4 10             	add    $0x10,%esp
f011539c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011539f:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01153a6:	74 26                	je     f01153ce <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01153a8:	83 ec 0c             	sub    $0xc,%esp
f01153ab:	68 03 0a 00 00       	push   $0xa03
f01153b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01153b3:	68 58 aa 13 f0       	push   $0xf013aa58
f01153b8:	68 e6 05 00 00       	push   $0x5e6
f01153bd:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01153c2:	e8 4c b0 fe ff       	call   f0100413 <_warn>
f01153c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153d2:	74 04                	je     f01153d8 <test_calculate_required_frames+0x34f>
f01153d4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01153dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153df:	01 c0                	add    %eax,%eax
f01153e1:	83 ec 04             	sub    $0x4,%esp
f01153e4:	50                   	push   %eax
f01153e5:	68 00 00 70 00       	push   $0x700000
f01153ea:	ff 75 d8             	pushl  -0x28(%ebp)
f01153ed:	e8 0a 3c ff ff       	call   f0108ffc <calculate_required_frames>
f01153f2:	83 c4 10             	add    $0x10,%esp
f01153f5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01153f8:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01153ff:	74 26                	je     f0115427 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115401:	83 ec 0c             	sub    $0xc,%esp
f0115404:	68 02 02 00 00       	push   $0x202
f0115409:	ff 75 c8             	pushl  -0x38(%ebp)
f011540c:	68 58 aa 13 f0       	push   $0xf013aa58
f0115411:	68 f2 05 00 00       	push   $0x5f2
f0115416:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011541b:	e8 f3 af fe ff       	call   f0100413 <_warn>
f0115420:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115423:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115427:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011542b:	74 04                	je     f0115431 <test_calculate_required_frames+0x3a8>
f011542d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115431:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115435:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115438:	83 ec 04             	sub    $0x4,%esp
f011543b:	50                   	push   %eax
f011543c:	68 ff ff 3f 00       	push   $0x3fffff
f0115441:	ff 75 d8             	pushl  -0x28(%ebp)
f0115444:	e8 b3 3b ff ff       	call   f0108ffc <calculate_required_frames>
f0115449:	83 c4 10             	add    $0x10,%esp
f011544c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011544f:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115453:	74 23                	je     f0115478 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115455:	83 ec 0c             	sub    $0xc,%esp
f0115458:	6a 04                	push   $0x4
f011545a:	ff 75 c8             	pushl  -0x38(%ebp)
f011545d:	68 58 aa 13 f0       	push   $0xf013aa58
f0115462:	68 fc 05 00 00       	push   $0x5fc
f0115467:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011546c:	e8 a2 af fe ff       	call   f0100413 <_warn>
f0115471:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115474:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115478:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011547c:	74 04                	je     f0115482 <test_calculate_required_frames+0x3f9>
f011547e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115482:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115486:	83 ec 0c             	sub    $0xc,%esp
f0115489:	68 a9 a5 13 f0       	push   $0xf013a5a9
f011548e:	e8 7b b8 fe ff       	call   f0100d0e <cprintf>
f0115493:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115496:	83 ec 0c             	sub    $0xc,%esp
f0115499:	68 b0 aa 13 f0       	push   $0xf013aab0
f011549e:	e8 6b b8 fe ff       	call   f0100d0e <cprintf>
f01154a3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01154a6:	83 ec 04             	sub    $0x4,%esp
f01154a9:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154af:	50                   	push   %eax
f01154b0:	68 62 99 13 f0       	push   $0xf0139962
f01154b5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154bb:	50                   	push   %eax
f01154bc:	e8 b2 ca 01 00       	call   f0131f73 <strcconcat>
f01154c1:	83 c4 10             	add    $0x10,%esp
f01154c4:	83 ec 0c             	sub    $0xc,%esp
f01154c7:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154cd:	50                   	push   %eax
f01154ce:	e8 9d b8 fe ff       	call   f0100d70 <execute_command>
f01154d3:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01154d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154d9:	c1 e0 03             	shl    $0x3,%eax
f01154dc:	83 ec 04             	sub    $0x4,%esp
f01154df:	50                   	push   %eax
f01154e0:	6a 00                	push   $0x0
f01154e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01154e5:	e8 12 3b ff ff       	call   f0108ffc <calculate_required_frames>
f01154ea:	83 c4 10             	add    $0x10,%esp
f01154ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01154f0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01154f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01154fa:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01154fd:	74 24                	je     f0115523 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01154ff:	83 ec 0c             	sub    $0xc,%esp
f0115502:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115505:	ff 75 c8             	pushl  -0x38(%ebp)
f0115508:	68 58 aa 13 f0       	push   $0xf013aa58
f011550d:	68 10 06 00 00       	push   $0x610
f0115512:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115517:	e8 f7 ae fe ff       	call   f0100413 <_warn>
f011551c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011551f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115523:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115527:	74 04                	je     f011552d <test_calculate_required_frames+0x4a4>
f0115529:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011552d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115531:	83 ec 04             	sub    $0x4,%esp
f0115534:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011553a:	50                   	push   %eax
f011553b:	68 6f 99 13 f0       	push   $0xf013996f
f0115540:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115546:	50                   	push   %eax
f0115547:	e8 27 ca 01 00       	call   f0131f73 <strcconcat>
f011554c:	83 c4 10             	add    $0x10,%esp
f011554f:	83 ec 0c             	sub    $0xc,%esp
f0115552:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115558:	50                   	push   %eax
f0115559:	e8 12 b8 fe ff       	call   f0100d70 <execute_command>
f011555e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115561:	83 ec 04             	sub    $0x4,%esp
f0115564:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011556a:	50                   	push   %eax
f011556b:	68 e4 aa 13 f0       	push   $0xf013aae4
f0115570:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115576:	50                   	push   %eax
f0115577:	e8 f7 c9 01 00       	call   f0131f73 <strcconcat>
f011557c:	83 c4 10             	add    $0x10,%esp
f011557f:	83 ec 0c             	sub    $0xc,%esp
f0115582:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115588:	50                   	push   %eax
f0115589:	e8 e2 b7 fe ff       	call   f0100d70 <execute_command>
f011558e:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115591:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115594:	c1 e0 03             	shl    $0x3,%eax
f0115597:	83 ec 04             	sub    $0x4,%esp
f011559a:	50                   	push   %eax
f011559b:	6a 00                	push   $0x0
f011559d:	ff 75 d8             	pushl  -0x28(%ebp)
f01155a0:	e8 57 3a ff ff       	call   f0108ffc <calculate_required_frames>
f01155a5:	83 c4 10             	add    $0x10,%esp
f01155a8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01155ab:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01155b2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155b5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155b8:	74 24                	je     f01155de <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155ba:	83 ec 0c             	sub    $0xc,%esp
f01155bd:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155c0:	ff 75 c8             	pushl  -0x38(%ebp)
f01155c3:	68 58 aa 13 f0       	push   $0xf013aa58
f01155c8:	68 1e 06 00 00       	push   $0x61e
f01155cd:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01155d2:	e8 3c ae fe ff       	call   f0100413 <_warn>
f01155d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155e2:	74 04                	je     f01155e8 <test_calculate_required_frames+0x55f>
f01155e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01155ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155ef:	c1 e0 0a             	shl    $0xa,%eax
f01155f2:	83 ec 04             	sub    $0x4,%esp
f01155f5:	50                   	push   %eax
f01155f6:	6a 00                	push   $0x0
f01155f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01155fb:	e8 fc 39 ff ff       	call   f0108ffc <calculate_required_frames>
f0115600:	83 c4 10             	add    $0x10,%esp
f0115603:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115606:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115609:	c1 e0 0a             	shl    $0xa,%eax
f011560c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011560f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115616:	99                   	cltd   
f0115617:	f7 fb                	idiv   %ebx
f0115619:	89 c1                	mov    %eax,%ecx
f011561b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011561e:	c1 e0 0a             	shl    $0xa,%eax
f0115621:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115624:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011562b:	99                   	cltd   
f011562c:	f7 fe                	idiv   %esi
f011562e:	01 c8                	add    %ecx,%eax
f0115630:	83 e8 05             	sub    $0x5,%eax
f0115633:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115636:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115639:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011563c:	74 24                	je     f0115662 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011563e:	83 ec 0c             	sub    $0xc,%esp
f0115641:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115644:	ff 75 c8             	pushl  -0x38(%ebp)
f0115647:	68 58 aa 13 f0       	push   $0xf013aa58
f011564c:	68 29 06 00 00       	push   $0x629
f0115651:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115656:	e8 b8 ad fe ff       	call   f0100413 <_warn>
f011565b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011565e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115662:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115666:	74 04                	je     f011566c <test_calculate_required_frames+0x5e3>
f0115668:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011566c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115670:	83 ec 04             	sub    $0x4,%esp
f0115673:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115679:	50                   	push   %eax
f011567a:	68 f0 aa 13 f0       	push   $0xf013aaf0
f011567f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115685:	50                   	push   %eax
f0115686:	e8 e8 c8 01 00       	call   f0131f73 <strcconcat>
f011568b:	83 c4 10             	add    $0x10,%esp
f011568e:	83 ec 0c             	sub    $0xc,%esp
f0115691:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115697:	50                   	push   %eax
f0115698:	e8 d3 b6 fe ff       	call   f0100d70 <execute_command>
f011569d:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01156a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156a3:	89 c2                	mov    %eax,%edx
f01156a5:	01 d2                	add    %edx,%edx
f01156a7:	01 d0                	add    %edx,%eax
f01156a9:	83 ec 04             	sub    $0x4,%esp
f01156ac:	50                   	push   %eax
f01156ad:	68 00 18 00 00       	push   $0x1800
f01156b2:	ff 75 d8             	pushl  -0x28(%ebp)
f01156b5:	e8 42 39 ff ff       	call   f0108ffc <calculate_required_frames>
f01156ba:	83 c4 10             	add    $0x10,%esp
f01156bd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01156c0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01156c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156ca:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156cd:	74 24                	je     f01156f3 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156cf:	83 ec 0c             	sub    $0xc,%esp
f01156d2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156d5:	ff 75 c8             	pushl  -0x38(%ebp)
f01156d8:	68 58 aa 13 f0       	push   $0xf013aa58
f01156dd:	68 38 06 00 00       	push   $0x638
f01156e2:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01156e7:	e8 27 ad fe ff       	call   f0100413 <_warn>
f01156ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01156f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156f7:	74 04                	je     f01156fd <test_calculate_required_frames+0x674>
f01156f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115701:	83 ec 04             	sub    $0x4,%esp
f0115704:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011570a:	50                   	push   %eax
f011570b:	68 c8 9b 13 f0       	push   $0xf0139bc8
f0115710:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115716:	50                   	push   %eax
f0115717:	e8 57 c8 01 00       	call   f0131f73 <strcconcat>
f011571c:	83 c4 10             	add    $0x10,%esp
f011571f:	83 ec 0c             	sub    $0xc,%esp
f0115722:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115728:	50                   	push   %eax
f0115729:	e8 42 b6 fe ff       	call   f0100d70 <execute_command>
f011572e:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115731:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115734:	89 d0                	mov    %edx,%eax
f0115736:	c1 e0 02             	shl    $0x2,%eax
f0115739:	01 d0                	add    %edx,%eax
f011573b:	01 c0                	add    %eax,%eax
f011573d:	83 ec 04             	sub    $0x4,%esp
f0115740:	50                   	push   %eax
f0115741:	68 00 00 40 00       	push   $0x400000
f0115746:	ff 75 d8             	pushl  -0x28(%ebp)
f0115749:	e8 ae 38 ff ff       	call   f0108ffc <calculate_required_frames>
f011574e:	83 c4 10             	add    $0x10,%esp
f0115751:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115754:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011575b:	74 26                	je     f0115783 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011575d:	83 ec 0c             	sub    $0xc,%esp
f0115760:	68 03 0a 00 00       	push   $0xa03
f0115765:	ff 75 c8             	pushl  -0x38(%ebp)
f0115768:	68 58 aa 13 f0       	push   $0xf013aa58
f011576d:	68 44 06 00 00       	push   $0x644
f0115772:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115777:	e8 97 ac fe ff       	call   f0100413 <_warn>
f011577c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011577f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115783:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115787:	74 04                	je     f011578d <test_calculate_required_frames+0x704>
f0115789:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011578d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115791:	83 ec 04             	sub    $0x4,%esp
f0115794:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011579a:	50                   	push   %eax
f011579b:	68 d2 9b 13 f0       	push   $0xf0139bd2
f01157a0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157a6:	50                   	push   %eax
f01157a7:	e8 c7 c7 01 00       	call   f0131f73 <strcconcat>
f01157ac:	83 c4 10             	add    $0x10,%esp
f01157af:	83 ec 0c             	sub    $0xc,%esp
f01157b2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157b8:	50                   	push   %eax
f01157b9:	e8 b2 b5 fe ff       	call   f0100d70 <execute_command>
f01157be:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01157c1:	83 ec 04             	sub    $0x4,%esp
f01157c4:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157ca:	50                   	push   %eax
f01157cb:	68 f8 aa 13 f0       	push   $0xf013aaf8
f01157d0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157d6:	50                   	push   %eax
f01157d7:	e8 97 c7 01 00       	call   f0131f73 <strcconcat>
f01157dc:	83 c4 10             	add    $0x10,%esp
f01157df:	83 ec 0c             	sub    $0xc,%esp
f01157e2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157e8:	50                   	push   %eax
f01157e9:	e8 82 b5 fe ff       	call   f0100d70 <execute_command>
f01157ee:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01157f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01157f4:	01 c0                	add    %eax,%eax
f01157f6:	83 ec 04             	sub    $0x4,%esp
f01157f9:	50                   	push   %eax
f01157fa:	68 00 00 70 00       	push   $0x700000
f01157ff:	ff 75 d8             	pushl  -0x28(%ebp)
f0115802:	e8 f5 37 ff ff       	call   f0108ffc <calculate_required_frames>
f0115807:	83 c4 10             	add    $0x10,%esp
f011580a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011580d:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115814:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115817:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011581a:	74 24                	je     f0115840 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011581c:	83 ec 0c             	sub    $0xc,%esp
f011581f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115822:	ff 75 c8             	pushl  -0x38(%ebp)
f0115825:	68 58 aa 13 f0       	push   $0xf013aa58
f011582a:	68 54 06 00 00       	push   $0x654
f011582f:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115834:	e8 da ab fe ff       	call   f0100413 <_warn>
f0115839:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011583c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115840:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115844:	74 04                	je     f011584a <test_calculate_required_frames+0x7c1>
f0115846:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011584a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011584e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115851:	83 ec 04             	sub    $0x4,%esp
f0115854:	50                   	push   %eax
f0115855:	68 ff ff 3f 00       	push   $0x3fffff
f011585a:	ff 75 d8             	pushl  -0x28(%ebp)
f011585d:	e8 9a 37 ff ff       	call   f0108ffc <calculate_required_frames>
f0115862:	83 c4 10             	add    $0x10,%esp
f0115865:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115868:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011586f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115872:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115875:	74 24                	je     f011589b <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115877:	83 ec 0c             	sub    $0xc,%esp
f011587a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011587d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115880:	68 58 aa 13 f0       	push   $0xf013aa58
f0115885:	68 5f 06 00 00       	push   $0x65f
f011588a:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011588f:	e8 7f ab fe ff       	call   f0100413 <_warn>
f0115894:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115897:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011589b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011589f:	74 04                	je     f01158a5 <test_calculate_required_frames+0x81c>
f01158a1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01158a9:	83 ec 0c             	sub    $0xc,%esp
f01158ac:	68 83 9b 13 f0       	push   $0xf0139b83
f01158b1:	e8 58 b4 fe ff       	call   f0100d0e <cprintf>
f01158b6:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01158b9:	83 ec 08             	sub    $0x8,%esp
f01158bc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01158bf:	68 04 ab 13 f0       	push   $0xf013ab04
f01158c4:	e8 45 b4 fe ff       	call   f0100d0e <cprintf>
f01158c9:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01158cc:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01158d0:	75 10                	jne    f01158e2 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01158d2:	83 ec 0c             	sub    $0xc,%esp
f01158d5:	68 44 ab 13 f0       	push   $0xf013ab44
f01158da:	e8 2f b4 fe ff       	call   f0100d0e <cprintf>
f01158df:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01158e2:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f01158e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01158ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01158ed:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01158f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01158f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01158f8:	5b                   	pop    %ebx
f01158f9:	5e                   	pop    %esi
f01158fa:	5f                   	pop    %edi
f01158fb:	5d                   	pop    %ebp
f01158fc:	c3                   	ret    

f01158fd <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01158fd:	55                   	push   %ebp
f01158fe:	89 e5                	mov    %esp,%ebp
f0115900:	57                   	push   %edi
f0115901:	56                   	push   %esi
f0115902:	53                   	push   %ebx
f0115903:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115909:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011590c:	bb f8 98 13 f0       	mov    $0xf01398f8,%ebx
f0115911:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115916:	89 c7                	mov    %eax,%edi
f0115918:	89 de                	mov    %ebx,%esi
f011591a:	89 d1                	mov    %edx,%ecx
f011591c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011591e:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115921:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115926:	b0 00                	mov    $0x0,%al
f0115928:	89 d7                	mov    %edx,%edi
f011592a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011592c:	6a 00                	push   $0x0
f011592e:	6a 0a                	push   $0xa
f0115930:	6a 14                	push   $0x14
f0115932:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115935:	50                   	push   %eax
f0115936:	e8 e5 39 ff ff       	call   f0109320 <env_create>
f011593b:	83 c4 10             	add    $0x10,%esp
f011593e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115941:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115944:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115947:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011594a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011594d:	8b 40 60             	mov    0x60(%eax),%eax
f0115950:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115953:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115956:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115959:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115960:	75 70 20 
f0115963:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011596a:	00 00 00 
f011596d:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115970:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115975:	b8 00 00 00 00       	mov    $0x0,%eax
f011597a:	89 d7                	mov    %edx,%edi
f011597c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011597e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115981:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115984:	83 ec 08             	sub    $0x8,%esp
f0115987:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011598d:	52                   	push   %edx
f011598e:	50                   	push   %eax
f011598f:	e8 e7 c4 01 00       	call   f0131e7b <ltostr>
f0115994:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115997:	83 ec 04             	sub    $0x4,%esp
f011599a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01159a0:	50                   	push   %eax
f01159a1:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01159a7:	50                   	push   %eax
f01159a8:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01159ae:	50                   	push   %eax
f01159af:	e8 bf c5 01 00       	call   f0131f73 <strcconcat>
f01159b4:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01159b7:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01159be:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01159c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01159cc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01159d0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159d7:	00 00 00 
	uint32 num_tables = 0;
f01159da:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159e1:	00 00 00 
	ClearUserSpace(proc_directory);
f01159e4:	83 ec 0c             	sub    $0xc,%esp
f01159e7:	ff 75 d8             	pushl  -0x28(%ebp)
f01159ea:	e8 8d 0e 00 00       	call   f011687c <ClearUserSpace>
f01159ef:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01159f2:	83 ec 0c             	sub    $0xc,%esp
f01159f5:	68 24 aa 13 f0       	push   $0xf013aa24
f01159fa:	e8 0f b3 fe ff       	call   f0100d0e <cprintf>
f01159ff:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115a02:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a05:	c1 e0 03             	shl    $0x3,%eax
f0115a08:	89 c2                	mov    %eax,%edx
f0115a0a:	83 ec 0c             	sub    $0xc,%esp
f0115a0d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a13:	50                   	push   %eax
f0115a14:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a1a:	50                   	push   %eax
f0115a1b:	52                   	push   %edx
f0115a1c:	6a 00                	push   $0x0
f0115a1e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a21:	e8 d6 34 ff ff       	call   f0108efc <calculate_allocated_space>
f0115a26:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a29:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a2f:	85 c0                	test   %eax,%eax
f0115a31:	74 27                	je     f0115a5a <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a33:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a39:	83 ec 0c             	sub    $0xc,%esp
f0115a3c:	6a 00                	push   $0x0
f0115a3e:	50                   	push   %eax
f0115a3f:	68 90 ab 13 f0       	push   $0xf013ab90
f0115a44:	68 94 06 00 00       	push   $0x694
f0115a49:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115a4e:	e8 c0 a9 fe ff       	call   f0100413 <_warn>
f0115a53:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a56:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a5a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a60:	85 c0                	test   %eax,%eax
f0115a62:	74 27                	je     f0115a8b <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a64:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a6a:	83 ec 0c             	sub    $0xc,%esp
f0115a6d:	6a 00                	push   $0x0
f0115a6f:	50                   	push   %eax
f0115a70:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115a75:	68 99 06 00 00       	push   $0x699
f0115a7a:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115a7f:	e8 8f a9 fe ff       	call   f0100413 <_warn>
f0115a84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a8f:	74 04                	je     f0115a95 <test_calculate_allocated_space+0x198>
f0115a91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115a99:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115aa0:	00 00 00 
		num_pages = 0;
f0115aa3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115aaa:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115aad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ab0:	c1 e0 02             	shl    $0x2,%eax
f0115ab3:	89 c2                	mov    %eax,%edx
f0115ab5:	83 ec 0c             	sub    $0xc,%esp
f0115ab8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115abe:	50                   	push   %eax
f0115abf:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ac5:	50                   	push   %eax
f0115ac6:	52                   	push   %edx
f0115ac7:	6a 00                	push   $0x0
f0115ac9:	ff 75 d8             	pushl  -0x28(%ebp)
f0115acc:	e8 2b 34 ff ff       	call   f0108efc <calculate_allocated_space>
f0115ad1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ad4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ada:	85 c0                	test   %eax,%eax
f0115adc:	74 27                	je     f0115b05 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ade:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ae4:	83 ec 0c             	sub    $0xc,%esp
f0115ae7:	6a 00                	push   $0x0
f0115ae9:	50                   	push   %eax
f0115aea:	68 90 ab 13 f0       	push   $0xf013ab90
f0115aef:	68 a5 06 00 00       	push   $0x6a5
f0115af4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115af9:	e8 15 a9 fe ff       	call   f0100413 <_warn>
f0115afe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b01:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b05:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b0b:	85 c0                	test   %eax,%eax
f0115b0d:	74 27                	je     f0115b36 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b0f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b15:	83 ec 0c             	sub    $0xc,%esp
f0115b18:	6a 00                	push   $0x0
f0115b1a:	50                   	push   %eax
f0115b1b:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115b20:	68 aa 06 00 00       	push   $0x6aa
f0115b25:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115b2a:	e8 e4 a8 fe ff       	call   f0100413 <_warn>
f0115b2f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b32:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b36:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b3a:	74 04                	je     f0115b40 <test_calculate_allocated_space+0x243>
f0115b3c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b40:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115b44:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b4b:	00 00 00 
		num_pages = 0;
f0115b4e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b55:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115b58:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b5b:	c1 e0 0a             	shl    $0xa,%eax
f0115b5e:	89 c2                	mov    %eax,%edx
f0115b60:	83 ec 0c             	sub    $0xc,%esp
f0115b63:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b69:	50                   	push   %eax
f0115b6a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b70:	50                   	push   %eax
f0115b71:	52                   	push   %edx
f0115b72:	6a 00                	push   $0x0
f0115b74:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b77:	e8 80 33 ff ff       	call   f0108efc <calculate_allocated_space>
f0115b7c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b85:	85 c0                	test   %eax,%eax
f0115b87:	74 27                	je     f0115bb0 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b8f:	83 ec 0c             	sub    $0xc,%esp
f0115b92:	6a 00                	push   $0x0
f0115b94:	50                   	push   %eax
f0115b95:	68 90 ab 13 f0       	push   $0xf013ab90
f0115b9a:	68 b6 06 00 00       	push   $0x6b6
f0115b9f:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115ba4:	e8 6a a8 fe ff       	call   f0100413 <_warn>
f0115ba9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115bb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bb6:	85 c0                	test   %eax,%eax
f0115bb8:	74 27                	je     f0115be1 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bc0:	83 ec 0c             	sub    $0xc,%esp
f0115bc3:	6a 00                	push   $0x0
f0115bc5:	50                   	push   %eax
f0115bc6:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115bcb:	68 bb 06 00 00       	push   $0x6bb
f0115bd0:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115bd5:	e8 39 a8 fe ff       	call   f0100413 <_warn>
f0115bda:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bdd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115be1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115be5:	74 04                	je     f0115beb <test_calculate_allocated_space+0x2ee>
f0115be7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115beb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115bef:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bf6:	00 00 00 
		num_pages = 0;
f0115bf9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c00:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115c03:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115c06:	89 d0                	mov    %edx,%eax
f0115c08:	01 c0                	add    %eax,%eax
f0115c0a:	01 d0                	add    %edx,%eax
f0115c0c:	01 c0                	add    %eax,%eax
f0115c0e:	05 00 10 00 00       	add    $0x1000,%eax
f0115c13:	89 c2                	mov    %eax,%edx
f0115c15:	83 ec 0c             	sub    $0xc,%esp
f0115c18:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c1e:	50                   	push   %eax
f0115c1f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c25:	50                   	push   %eax
f0115c26:	52                   	push   %edx
f0115c27:	68 00 10 00 00       	push   $0x1000
f0115c2c:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c2f:	e8 c8 32 ff ff       	call   f0108efc <calculate_allocated_space>
f0115c34:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c37:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c3d:	85 c0                	test   %eax,%eax
f0115c3f:	74 27                	je     f0115c68 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c41:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c47:	83 ec 0c             	sub    $0xc,%esp
f0115c4a:	6a 00                	push   $0x0
f0115c4c:	50                   	push   %eax
f0115c4d:	68 90 ab 13 f0       	push   $0xf013ab90
f0115c52:	68 c8 06 00 00       	push   $0x6c8
f0115c57:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115c5c:	e8 b2 a7 fe ff       	call   f0100413 <_warn>
f0115c61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c68:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c6e:	85 c0                	test   %eax,%eax
f0115c70:	74 27                	je     f0115c99 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c78:	83 ec 0c             	sub    $0xc,%esp
f0115c7b:	6a 00                	push   $0x0
f0115c7d:	50                   	push   %eax
f0115c7e:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115c83:	68 cd 06 00 00       	push   $0x6cd
f0115c88:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115c8d:	e8 81 a7 fe ff       	call   f0100413 <_warn>
f0115c92:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c95:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c99:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c9d:	74 04                	je     f0115ca3 <test_calculate_allocated_space+0x3a6>
f0115c9f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ca3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115ca7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cae:	00 00 00 
		num_pages = 0;
f0115cb1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115cb8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115cbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115cbe:	89 c2                	mov    %eax,%edx
f0115cc0:	01 d2                	add    %edx,%edx
f0115cc2:	01 d0                	add    %edx,%eax
f0115cc4:	05 00 18 00 00       	add    $0x1800,%eax
f0115cc9:	89 c2                	mov    %eax,%edx
f0115ccb:	83 ec 0c             	sub    $0xc,%esp
f0115cce:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cd4:	50                   	push   %eax
f0115cd5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cdb:	50                   	push   %eax
f0115cdc:	52                   	push   %edx
f0115cdd:	68 00 18 00 00       	push   $0x1800
f0115ce2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ce5:	e8 12 32 ff ff       	call   f0108efc <calculate_allocated_space>
f0115cea:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ced:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cf3:	85 c0                	test   %eax,%eax
f0115cf5:	74 27                	je     f0115d1e <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cf7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cfd:	83 ec 0c             	sub    $0xc,%esp
f0115d00:	6a 00                	push   $0x0
f0115d02:	50                   	push   %eax
f0115d03:	68 90 ab 13 f0       	push   $0xf013ab90
f0115d08:	68 d9 06 00 00       	push   $0x6d9
f0115d0d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115d12:	e8 fc a6 fe ff       	call   f0100413 <_warn>
f0115d17:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d1a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d24:	85 c0                	test   %eax,%eax
f0115d26:	74 27                	je     f0115d4f <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d2e:	83 ec 0c             	sub    $0xc,%esp
f0115d31:	6a 00                	push   $0x0
f0115d33:	50                   	push   %eax
f0115d34:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115d39:	68 de 06 00 00       	push   $0x6de
f0115d3e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115d43:	e8 cb a6 fe ff       	call   f0100413 <_warn>
f0115d48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d4f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d53:	74 04                	je     f0115d59 <test_calculate_allocated_space+0x45c>
f0115d55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115d5d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d64:	00 00 00 
		num_pages = 0;
f0115d67:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d6e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115d71:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115d74:	89 d0                	mov    %edx,%eax
f0115d76:	c1 e0 02             	shl    $0x2,%eax
f0115d79:	01 d0                	add    %edx,%eax
f0115d7b:	01 c0                	add    %eax,%eax
f0115d7d:	05 00 00 40 00       	add    $0x400000,%eax
f0115d82:	89 c2                	mov    %eax,%edx
f0115d84:	83 ec 0c             	sub    $0xc,%esp
f0115d87:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d8d:	50                   	push   %eax
f0115d8e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d94:	50                   	push   %eax
f0115d95:	52                   	push   %edx
f0115d96:	68 00 00 40 00       	push   $0x400000
f0115d9b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d9e:	e8 59 31 ff ff       	call   f0108efc <calculate_allocated_space>
f0115da3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115da6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dac:	85 c0                	test   %eax,%eax
f0115dae:	74 27                	je     f0115dd7 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115db0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115db6:	83 ec 0c             	sub    $0xc,%esp
f0115db9:	6a 00                	push   $0x0
f0115dbb:	50                   	push   %eax
f0115dbc:	68 90 ab 13 f0       	push   $0xf013ab90
f0115dc1:	68 ea 06 00 00       	push   $0x6ea
f0115dc6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115dcb:	e8 43 a6 fe ff       	call   f0100413 <_warn>
f0115dd0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dd3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115dd7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ddd:	85 c0                	test   %eax,%eax
f0115ddf:	74 27                	je     f0115e08 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115de1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115de7:	83 ec 0c             	sub    $0xc,%esp
f0115dea:	6a 00                	push   $0x0
f0115dec:	50                   	push   %eax
f0115ded:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115df2:	68 ef 06 00 00       	push   $0x6ef
f0115df7:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115dfc:	e8 12 a6 fe ff       	call   f0100413 <_warn>
f0115e01:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e04:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e08:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e0c:	74 04                	je     f0115e12 <test_calculate_allocated_space+0x515>
f0115e0e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e12:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115e16:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e1d:	00 00 00 
		num_pages = 0;
f0115e20:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e27:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115e2a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e2d:	05 00 00 38 00       	add    $0x380000,%eax
f0115e32:	01 c0                	add    %eax,%eax
f0115e34:	89 c2                	mov    %eax,%edx
f0115e36:	83 ec 0c             	sub    $0xc,%esp
f0115e39:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e3f:	50                   	push   %eax
f0115e40:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e46:	50                   	push   %eax
f0115e47:	52                   	push   %edx
f0115e48:	68 00 00 70 00       	push   $0x700000
f0115e4d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e50:	e8 a7 30 ff ff       	call   f0108efc <calculate_allocated_space>
f0115e55:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e5e:	85 c0                	test   %eax,%eax
f0115e60:	74 27                	je     f0115e89 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e68:	83 ec 0c             	sub    $0xc,%esp
f0115e6b:	6a 00                	push   $0x0
f0115e6d:	50                   	push   %eax
f0115e6e:	68 90 ab 13 f0       	push   $0xf013ab90
f0115e73:	68 fc 06 00 00       	push   $0x6fc
f0115e78:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115e7d:	e8 91 a5 fe ff       	call   f0100413 <_warn>
f0115e82:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e85:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e89:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e8f:	85 c0                	test   %eax,%eax
f0115e91:	74 27                	je     f0115eba <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e93:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e99:	83 ec 0c             	sub    $0xc,%esp
f0115e9c:	6a 00                	push   $0x0
f0115e9e:	50                   	push   %eax
f0115e9f:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115ea4:	68 01 07 00 00       	push   $0x701
f0115ea9:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115eae:	e8 60 a5 fe ff       	call   f0100413 <_warn>
f0115eb3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eb6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115eba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ebe:	74 04                	je     f0115ec4 <test_calculate_allocated_space+0x5c7>
f0115ec0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ec4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115ec8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ecf:	00 00 00 
		num_pages = 0;
f0115ed2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ed9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115edc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115edf:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115ee4:	89 c2                	mov    %eax,%edx
f0115ee6:	83 ec 0c             	sub    $0xc,%esp
f0115ee9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115eef:	50                   	push   %eax
f0115ef0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ef6:	50                   	push   %eax
f0115ef7:	52                   	push   %edx
f0115ef8:	68 ff ff 3f 00       	push   $0x3fffff
f0115efd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f00:	e8 f7 2f ff ff       	call   f0108efc <calculate_allocated_space>
f0115f05:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f0e:	85 c0                	test   %eax,%eax
f0115f10:	74 27                	je     f0115f39 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f12:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f18:	83 ec 0c             	sub    $0xc,%esp
f0115f1b:	6a 00                	push   $0x0
f0115f1d:	50                   	push   %eax
f0115f1e:	68 90 ab 13 f0       	push   $0xf013ab90
f0115f23:	68 0d 07 00 00       	push   $0x70d
f0115f28:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115f2d:	e8 e1 a4 fe ff       	call   f0100413 <_warn>
f0115f32:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f3f:	85 c0                	test   %eax,%eax
f0115f41:	74 27                	je     f0115f6a <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f43:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f49:	83 ec 0c             	sub    $0xc,%esp
f0115f4c:	6a 00                	push   $0x0
f0115f4e:	50                   	push   %eax
f0115f4f:	68 f0 ab 13 f0       	push   $0xf013abf0
f0115f54:	68 12 07 00 00       	push   $0x712
f0115f59:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0115f5e:	e8 b0 a4 fe ff       	call   f0100413 <_warn>
f0115f63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115f6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f6e:	74 04                	je     f0115f74 <test_calculate_allocated_space+0x677>
f0115f70:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115f74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115f78:	83 ec 0c             	sub    $0xc,%esp
f0115f7b:	68 a9 a5 13 f0       	push   $0xf013a5a9
f0115f80:	e8 89 ad fe ff       	call   f0100d0e <cprintf>
f0115f85:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115f88:	83 ec 0c             	sub    $0xc,%esp
f0115f8b:	68 b0 aa 13 f0       	push   $0xf013aab0
f0115f90:	e8 79 ad fe ff       	call   f0100d0e <cprintf>
f0115f95:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115f98:	83 ec 04             	sub    $0x4,%esp
f0115f9b:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fa1:	50                   	push   %eax
f0115fa2:	68 62 99 13 f0       	push   $0xf0139962
f0115fa7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fad:	50                   	push   %eax
f0115fae:	e8 c0 bf 01 00       	call   f0131f73 <strcconcat>
f0115fb3:	83 c4 10             	add    $0x10,%esp
f0115fb6:	83 ec 0c             	sub    $0xc,%esp
f0115fb9:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fbf:	50                   	push   %eax
f0115fc0:	e8 ab ad fe ff       	call   f0100d70 <execute_command>
f0115fc5:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115fc8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fcf:	00 00 00 
		num_pages = 0;
f0115fd2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115fd9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115fdc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115fdf:	c1 e0 03             	shl    $0x3,%eax
f0115fe2:	89 c2                	mov    %eax,%edx
f0115fe4:	83 ec 0c             	sub    $0xc,%esp
f0115fe7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115fed:	50                   	push   %eax
f0115fee:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ff4:	50                   	push   %eax
f0115ff5:	52                   	push   %edx
f0115ff6:	6a 00                	push   $0x0
f0115ff8:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ffb:	e8 fc 2e ff ff       	call   f0108efc <calculate_allocated_space>
f0116000:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116003:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011600a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116011:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116017:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011601a:	74 28                	je     f0116044 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011601c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116022:	83 ec 0c             	sub    $0xc,%esp
f0116025:	ff 75 c8             	pushl  -0x38(%ebp)
f0116028:	50                   	push   %eax
f0116029:	68 90 ab 13 f0       	push   $0xf013ab90
f011602e:	68 29 07 00 00       	push   $0x729
f0116033:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116038:	e8 d6 a3 fe ff       	call   f0100413 <_warn>
f011603d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116040:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116044:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011604a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011604d:	74 28                	je     f0116077 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011604f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116055:	83 ec 0c             	sub    $0xc,%esp
f0116058:	ff 75 c4             	pushl  -0x3c(%ebp)
f011605b:	50                   	push   %eax
f011605c:	68 f0 ab 13 f0       	push   $0xf013abf0
f0116061:	68 2e 07 00 00       	push   $0x72e
f0116066:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011606b:	e8 a3 a3 fe ff       	call   f0100413 <_warn>
f0116070:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116073:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116077:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011607b:	74 04                	je     f0116081 <test_calculate_allocated_space+0x784>
f011607d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116081:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0116085:	83 ec 04             	sub    $0x4,%esp
f0116088:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011608e:	50                   	push   %eax
f011608f:	68 6f 99 13 f0       	push   $0xf013996f
f0116094:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011609a:	50                   	push   %eax
f011609b:	e8 d3 be 01 00       	call   f0131f73 <strcconcat>
f01160a0:	83 c4 10             	add    $0x10,%esp
f01160a3:	83 ec 0c             	sub    $0xc,%esp
f01160a6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160ac:	50                   	push   %eax
f01160ad:	e8 be ac fe ff       	call   f0100d70 <execute_command>
f01160b2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01160b5:	83 ec 04             	sub    $0x4,%esp
f01160b8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160be:	50                   	push   %eax
f01160bf:	68 e4 aa 13 f0       	push   $0xf013aae4
f01160c4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160ca:	50                   	push   %eax
f01160cb:	e8 a3 be 01 00       	call   f0131f73 <strcconcat>
f01160d0:	83 c4 10             	add    $0x10,%esp
f01160d3:	83 ec 0c             	sub    $0xc,%esp
f01160d6:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160dc:	50                   	push   %eax
f01160dd:	e8 8e ac fe ff       	call   f0100d70 <execute_command>
f01160e2:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01160e5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160ec:	00 00 00 
		num_pages = 0;
f01160ef:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160f6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01160f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01160fc:	c1 e0 03             	shl    $0x3,%eax
f01160ff:	89 c2                	mov    %eax,%edx
f0116101:	83 ec 0c             	sub    $0xc,%esp
f0116104:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011610a:	50                   	push   %eax
f011610b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116111:	50                   	push   %eax
f0116112:	52                   	push   %edx
f0116113:	6a 00                	push   $0x0
f0116115:	ff 75 d8             	pushl  -0x28(%ebp)
f0116118:	e8 df 2d ff ff       	call   f0108efc <calculate_allocated_space>
f011611d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116120:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116127:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011612e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116134:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116137:	74 28                	je     f0116161 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116139:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011613f:	83 ec 0c             	sub    $0xc,%esp
f0116142:	ff 75 c8             	pushl  -0x38(%ebp)
f0116145:	50                   	push   %eax
f0116146:	68 90 ab 13 f0       	push   $0xf013ab90
f011614b:	68 3f 07 00 00       	push   $0x73f
f0116150:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116155:	e8 b9 a2 fe ff       	call   f0100413 <_warn>
f011615a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011615d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116161:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116167:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011616a:	74 28                	je     f0116194 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011616c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116172:	83 ec 0c             	sub    $0xc,%esp
f0116175:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116178:	50                   	push   %eax
f0116179:	68 f0 ab 13 f0       	push   $0xf013abf0
f011617e:	68 44 07 00 00       	push   $0x744
f0116183:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116188:	e8 86 a2 fe ff       	call   f0100413 <_warn>
f011618d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116190:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116194:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116198:	74 04                	je     f011619e <test_calculate_allocated_space+0x8a1>
f011619a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011619e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01161a2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161a9:	00 00 00 
		num_pages = 0;
f01161ac:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161b3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01161b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01161b9:	c1 e0 0a             	shl    $0xa,%eax
f01161bc:	89 c2                	mov    %eax,%edx
f01161be:	83 ec 0c             	sub    $0xc,%esp
f01161c1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161c7:	50                   	push   %eax
f01161c8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161ce:	50                   	push   %eax
f01161cf:	52                   	push   %edx
f01161d0:	6a 00                	push   $0x0
f01161d2:	ff 75 d8             	pushl  -0x28(%ebp)
f01161d5:	e8 22 2d ff ff       	call   f0108efc <calculate_allocated_space>
f01161da:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01161dd:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01161e4:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161f1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161f4:	74 28                	je     f011621e <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161fc:	83 ec 0c             	sub    $0xc,%esp
f01161ff:	ff 75 c8             	pushl  -0x38(%ebp)
f0116202:	50                   	push   %eax
f0116203:	68 90 ab 13 f0       	push   $0xf013ab90
f0116208:	68 52 07 00 00       	push   $0x752
f011620d:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116212:	e8 fc a1 fe ff       	call   f0100413 <_warn>
f0116217:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011621a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011621e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116224:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116227:	74 28                	je     f0116251 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116229:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011622f:	83 ec 0c             	sub    $0xc,%esp
f0116232:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116235:	50                   	push   %eax
f0116236:	68 f0 ab 13 f0       	push   $0xf013abf0
f011623b:	68 57 07 00 00       	push   $0x757
f0116240:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116245:	e8 c9 a1 fe ff       	call   f0100413 <_warn>
f011624a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011624d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116251:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116255:	74 04                	je     f011625b <test_calculate_allocated_space+0x95e>
f0116257:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011625b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011625f:	83 ec 04             	sub    $0x4,%esp
f0116262:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116268:	50                   	push   %eax
f0116269:	68 f0 aa 13 f0       	push   $0xf013aaf0
f011626e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116274:	50                   	push   %eax
f0116275:	e8 f9 bc 01 00       	call   f0131f73 <strcconcat>
f011627a:	83 c4 10             	add    $0x10,%esp
f011627d:	83 ec 0c             	sub    $0xc,%esp
f0116280:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116286:	50                   	push   %eax
f0116287:	e8 e4 aa fe ff       	call   f0100d70 <execute_command>
f011628c:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011628f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116296:	00 00 00 
		num_pages = 0;
f0116299:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162a0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01162a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01162a6:	89 c2                	mov    %eax,%edx
f01162a8:	01 d2                	add    %edx,%edx
f01162aa:	01 d0                	add    %edx,%eax
f01162ac:	05 00 18 00 00       	add    $0x1800,%eax
f01162b1:	89 c2                	mov    %eax,%edx
f01162b3:	83 ec 0c             	sub    $0xc,%esp
f01162b6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162bc:	50                   	push   %eax
f01162bd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162c3:	50                   	push   %eax
f01162c4:	52                   	push   %edx
f01162c5:	68 00 18 00 00       	push   $0x1800
f01162ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01162cd:	e8 2a 2c ff ff       	call   f0108efc <calculate_allocated_space>
f01162d2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01162d5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01162dc:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162e9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162ec:	74 28                	je     f0116316 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162f4:	83 ec 0c             	sub    $0xc,%esp
f01162f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01162fa:	50                   	push   %eax
f01162fb:	68 90 ab 13 f0       	push   $0xf013ab90
f0116300:	68 68 07 00 00       	push   $0x768
f0116305:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011630a:	e8 04 a1 fe ff       	call   f0100413 <_warn>
f011630f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116312:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116316:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011631c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011631f:	74 28                	je     f0116349 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116321:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116327:	83 ec 0c             	sub    $0xc,%esp
f011632a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011632d:	50                   	push   %eax
f011632e:	68 f0 ab 13 f0       	push   $0xf013abf0
f0116333:	68 6d 07 00 00       	push   $0x76d
f0116338:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011633d:	e8 d1 a0 fe ff       	call   f0100413 <_warn>
f0116342:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116345:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116349:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011634d:	74 04                	je     f0116353 <test_calculate_allocated_space+0xa56>
f011634f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116353:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116357:	83 ec 04             	sub    $0x4,%esp
f011635a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116360:	50                   	push   %eax
f0116361:	68 c8 9b 13 f0       	push   $0xf0139bc8
f0116366:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011636c:	50                   	push   %eax
f011636d:	e8 01 bc 01 00       	call   f0131f73 <strcconcat>
f0116372:	83 c4 10             	add    $0x10,%esp
f0116375:	83 ec 0c             	sub    $0xc,%esp
f0116378:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011637e:	50                   	push   %eax
f011637f:	e8 ec a9 fe ff       	call   f0100d70 <execute_command>
f0116384:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116387:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011638e:	00 00 00 
		num_pages = 0;
f0116391:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116398:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011639b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011639e:	89 d0                	mov    %edx,%eax
f01163a0:	c1 e0 02             	shl    $0x2,%eax
f01163a3:	01 d0                	add    %edx,%eax
f01163a5:	01 c0                	add    %eax,%eax
f01163a7:	05 00 00 40 00       	add    $0x400000,%eax
f01163ac:	89 c2                	mov    %eax,%edx
f01163ae:	83 ec 0c             	sub    $0xc,%esp
f01163b1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163b7:	50                   	push   %eax
f01163b8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163be:	50                   	push   %eax
f01163bf:	52                   	push   %edx
f01163c0:	68 00 00 40 00       	push   $0x400000
f01163c5:	ff 75 d8             	pushl  -0x28(%ebp)
f01163c8:	e8 2f 2b ff ff       	call   f0108efc <calculate_allocated_space>
f01163cd:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01163d0:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01163d7:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01163de:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163e4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01163e7:	74 28                	je     f0116411 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01163e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163ef:	83 ec 0c             	sub    $0xc,%esp
f01163f2:	ff 75 c8             	pushl  -0x38(%ebp)
f01163f5:	50                   	push   %eax
f01163f6:	68 90 ab 13 f0       	push   $0xf013ab90
f01163fb:	68 7d 07 00 00       	push   $0x77d
f0116400:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116405:	e8 09 a0 fe ff       	call   f0100413 <_warn>
f011640a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011640d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116411:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116417:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011641a:	74 28                	je     f0116444 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011641c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116422:	83 ec 0c             	sub    $0xc,%esp
f0116425:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116428:	50                   	push   %eax
f0116429:	68 f0 ab 13 f0       	push   $0xf013abf0
f011642e:	68 82 07 00 00       	push   $0x782
f0116433:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116438:	e8 d6 9f fe ff       	call   f0100413 <_warn>
f011643d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116440:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116444:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116448:	74 04                	je     f011644e <test_calculate_allocated_space+0xb51>
f011644a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011644e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116452:	83 ec 04             	sub    $0x4,%esp
f0116455:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011645b:	50                   	push   %eax
f011645c:	68 d2 9b 13 f0       	push   $0xf0139bd2
f0116461:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116467:	50                   	push   %eax
f0116468:	e8 06 bb 01 00       	call   f0131f73 <strcconcat>
f011646d:	83 c4 10             	add    $0x10,%esp
f0116470:	83 ec 0c             	sub    $0xc,%esp
f0116473:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116479:	50                   	push   %eax
f011647a:	e8 f1 a8 fe ff       	call   f0100d70 <execute_command>
f011647f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116482:	83 ec 04             	sub    $0x4,%esp
f0116485:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011648b:	50                   	push   %eax
f011648c:	68 f8 aa 13 f0       	push   $0xf013aaf8
f0116491:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116497:	50                   	push   %eax
f0116498:	e8 d6 ba 01 00       	call   f0131f73 <strcconcat>
f011649d:	83 c4 10             	add    $0x10,%esp
f01164a0:	83 ec 0c             	sub    $0xc,%esp
f01164a3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164a9:	50                   	push   %eax
f01164aa:	e8 c1 a8 fe ff       	call   f0100d70 <execute_command>
f01164af:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01164b2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164b9:	00 00 00 
		num_pages = 0;
f01164bc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164c3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01164c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164c9:	05 00 00 38 00       	add    $0x380000,%eax
f01164ce:	01 c0                	add    %eax,%eax
f01164d0:	89 c2                	mov    %eax,%edx
f01164d2:	83 ec 0c             	sub    $0xc,%esp
f01164d5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164db:	50                   	push   %eax
f01164dc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164e2:	50                   	push   %eax
f01164e3:	52                   	push   %edx
f01164e4:	68 00 00 70 00       	push   $0x700000
f01164e9:	ff 75 d8             	pushl  -0x28(%ebp)
f01164ec:	e8 0b 2a ff ff       	call   f0108efc <calculate_allocated_space>
f01164f1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01164f4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01164fb:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116502:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116508:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011650b:	74 28                	je     f0116535 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011650d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116513:	83 ec 0c             	sub    $0xc,%esp
f0116516:	ff 75 c8             	pushl  -0x38(%ebp)
f0116519:	50                   	push   %eax
f011651a:	68 90 ab 13 f0       	push   $0xf013ab90
f011651f:	68 94 07 00 00       	push   $0x794
f0116524:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116529:	e8 e5 9e fe ff       	call   f0100413 <_warn>
f011652e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116531:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116535:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011653b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011653e:	74 28                	je     f0116568 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116540:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116546:	83 ec 0c             	sub    $0xc,%esp
f0116549:	ff 75 c4             	pushl  -0x3c(%ebp)
f011654c:	50                   	push   %eax
f011654d:	68 f0 ab 13 f0       	push   $0xf013abf0
f0116552:	68 99 07 00 00       	push   $0x799
f0116557:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011655c:	e8 b2 9e fe ff       	call   f0100413 <_warn>
f0116561:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116564:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116568:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011656c:	74 04                	je     f0116572 <test_calculate_allocated_space+0xc75>
f011656e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116572:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116576:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011657d:	00 00 00 
		num_pages = 0;
f0116580:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116587:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f011658a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011658d:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116592:	89 c2                	mov    %eax,%edx
f0116594:	83 ec 0c             	sub    $0xc,%esp
f0116597:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011659d:	50                   	push   %eax
f011659e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165a4:	50                   	push   %eax
f01165a5:	52                   	push   %edx
f01165a6:	68 ff ff 3f 00       	push   $0x3fffff
f01165ab:	ff 75 d8             	pushl  -0x28(%ebp)
f01165ae:	e8 49 29 ff ff       	call   f0108efc <calculate_allocated_space>
f01165b3:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01165b6:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01165bd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01165c4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165ca:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01165cd:	74 28                	je     f01165f7 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01165cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165d5:	83 ec 0c             	sub    $0xc,%esp
f01165d8:	ff 75 c8             	pushl  -0x38(%ebp)
f01165db:	50                   	push   %eax
f01165dc:	68 90 ab 13 f0       	push   $0xf013ab90
f01165e1:	68 a7 07 00 00       	push   $0x7a7
f01165e6:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01165eb:	e8 23 9e fe ff       	call   f0100413 <_warn>
f01165f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01165f7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165fd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116600:	74 28                	je     f011662a <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116602:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116608:	83 ec 0c             	sub    $0xc,%esp
f011660b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011660e:	50                   	push   %eax
f011660f:	68 f0 ab 13 f0       	push   $0xf013abf0
f0116614:	68 ac 07 00 00       	push   $0x7ac
f0116619:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011661e:	e8 f0 9d fe ff       	call   f0100413 <_warn>
f0116623:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116626:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011662a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011662e:	74 04                	je     f0116634 <test_calculate_allocated_space+0xd37>
f0116630:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116634:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116638:	83 ec 0c             	sub    $0xc,%esp
f011663b:	68 83 9b 13 f0       	push   $0xf0139b83
f0116640:	e8 c9 a6 fe ff       	call   f0100d0e <cprintf>
f0116645:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116648:	83 ec 08             	sub    $0x8,%esp
f011664b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011664e:	68 4c ac 13 f0       	push   $0xf013ac4c
f0116653:	e8 b6 a6 fe ff       	call   f0100d0e <cprintf>
f0116658:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011665b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011665f:	75 10                	jne    f0116671 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116661:	83 ec 0c             	sub    $0xc,%esp
f0116664:	68 8c ac 13 f0       	push   $0xf013ac8c
f0116669:	e8 a0 a6 fe ff       	call   f0100d0e <cprintf>
f011666e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116671:	a1 ac a1 86 f0       	mov    0xf086a1ac,%eax
f0116676:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116679:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011667c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011667f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116684:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116687:	5b                   	pop    %ebx
f0116688:	5e                   	pop    %esi
f0116689:	5f                   	pop    %edi
f011668a:	5d                   	pop    %ebp
f011668b:	c3                   	ret    

f011668c <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011668c:	55                   	push   %ebp
f011668d:	89 e5                	mov    %esp,%ebp
f011668f:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116692:	8b 45 10             	mov    0x10(%ebp),%eax
f0116695:	ba 01 00 00 00       	mov    $0x1,%edx
f011669a:	88 c1                	mov    %al,%cl
f011669c:	d3 e2                	shl    %cl,%edx
f011669e:	89 d0                	mov    %edx,%eax
f01166a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166a6:	c1 e8 16             	shr    $0x16,%eax
f01166a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01166b3:	01 d0                	add    %edx,%eax
f01166b5:	8b 00                	mov    (%eax),%eax
f01166b7:	83 e0 01             	and    $0x1,%eax
f01166ba:	85 c0                	test   %eax,%eax
f01166bc:	75 07                	jne    f01166c5 <CB+0x39>
f01166be:	b8 00 00 00 00       	mov    $0x0,%eax
f01166c3:	eb 76                	jmp    f011673b <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01166c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166c8:	c1 e8 16             	shr    $0x16,%eax
f01166cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01166d5:	01 d0                	add    %edx,%eax
f01166d7:	8b 00                	mov    (%eax),%eax
f01166d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01166de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01166e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01166e4:	c1 e8 0c             	shr    $0xc,%eax
f01166e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01166ea:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f01166ef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01166f2:	72 17                	jb     f011670b <CB+0x7f>
f01166f4:	ff 75 f0             	pushl  -0x10(%ebp)
f01166f7:	68 d8 ac 13 f0       	push   $0xf013acd8
f01166fc:	68 c7 07 00 00       	push   $0x7c7
f0116701:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116706:	e8 fa 9a fe ff       	call   f0100205 <_panic>
f011670b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011670e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116713:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116716:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116719:	c1 e8 0c             	shr    $0xc,%eax
f011671c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116721:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116728:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011672b:	01 d0                	add    %edx,%eax
f011672d:	8b 00                	mov    (%eax),%eax
f011672f:	23 45 f4             	and    -0xc(%ebp),%eax
f0116732:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116735:	0f 94 c0             	sete   %al
f0116738:	0f b6 c0             	movzbl %al,%eax
}
f011673b:	c9                   	leave  
f011673c:	c3                   	ret    

f011673d <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f011673d:	55                   	push   %ebp
f011673e:	89 e5                	mov    %esp,%ebp
f0116740:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116743:	68 07 ad 13 f0       	push   $0xf013ad07
f0116748:	68 16 ad 13 f0       	push   $0xf013ad16
f011674d:	68 cc 07 00 00       	push   $0x7cc
f0116752:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116757:	e8 a9 9a fe ff       	call   f0100205 <_panic>

f011675c <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011675c:	55                   	push   %ebp
f011675d:	89 e5                	mov    %esp,%ebp
f011675f:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116762:	68 07 ad 13 f0       	push   $0xf013ad07
f0116767:	68 16 ad 13 f0       	push   $0xf013ad16
f011676c:	68 d6 07 00 00       	push   $0x7d6
f0116771:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116776:	e8 8a 9a fe ff       	call   f0100205 <_panic>

f011677b <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f011677b:	55                   	push   %ebp
f011677c:	89 e5                	mov    %esp,%ebp
f011677e:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116781:	68 07 ad 13 f0       	push   $0xf013ad07
f0116786:	68 16 ad 13 f0       	push   $0xf013ad16
f011678b:	68 e5 07 00 00       	push   $0x7e5
f0116790:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116795:	e8 6b 9a fe ff       	call   f0100205 <_panic>

f011679a <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f011679a:	55                   	push   %ebp
f011679b:	89 e5                	mov    %esp,%ebp
f011679d:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01167a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167a3:	c1 e8 16             	shr    $0x16,%eax
f01167a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01167b0:	01 d0                	add    %edx,%eax
f01167b2:	8b 00                	mov    (%eax),%eax
f01167b4:	83 e0 01             	and    $0x1,%eax
f01167b7:	85 c0                	test   %eax,%eax
f01167b9:	75 07                	jne    f01167c2 <CE+0x28>
f01167bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01167c0:	eb 7a                	jmp    f011683c <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167c5:	c1 e8 16             	shr    $0x16,%eax
f01167c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01167d2:	01 d0                	add    %edx,%eax
f01167d4:	8b 00                	mov    (%eax),%eax
f01167d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167db:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01167de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167e1:	c1 e8 0c             	shr    $0xc,%eax
f01167e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01167e7:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f01167ec:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01167ef:	72 17                	jb     f0116808 <CE+0x6e>
f01167f1:	ff 75 f4             	pushl  -0xc(%ebp)
f01167f4:	68 d8 ac 13 f0       	push   $0xf013acd8
f01167f9:	68 ee 07 00 00       	push   $0x7ee
f01167fe:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116803:	e8 fd 99 fe ff       	call   f0100205 <_panic>
f0116808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011680b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116810:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116813:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116816:	c1 e8 0c             	shr    $0xc,%eax
f0116819:	25 ff 03 00 00       	and    $0x3ff,%eax
f011681e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116825:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116828:	01 d0                	add    %edx,%eax
f011682a:	8b 00                	mov    (%eax),%eax
f011682c:	85 c0                	test   %eax,%eax
f011682e:	74 07                	je     f0116837 <CE+0x9d>
f0116830:	b8 00 00 00 00       	mov    $0x0,%eax
f0116835:	eb 05                	jmp    f011683c <CE+0xa2>
	return 1;
f0116837:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011683c:	c9                   	leave  
f011683d:	c3                   	ret    

f011683e <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011683e:	55                   	push   %ebp
f011683f:	89 e5                	mov    %esp,%ebp
f0116841:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116844:	68 07 ad 13 f0       	push   $0xf013ad07
f0116849:	68 16 ad 13 f0       	push   $0xf013ad16
f011684e:	68 f5 07 00 00       	push   $0x7f5
f0116853:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116858:	e8 a8 99 fe ff       	call   f0100205 <_panic>

f011685d <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011685d:	55                   	push   %ebp
f011685e:	89 e5                	mov    %esp,%ebp
f0116860:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116863:	68 07 ad 13 f0       	push   $0xf013ad07
f0116868:	68 16 ad 13 f0       	push   $0xf013ad16
f011686d:	68 05 08 00 00       	push   $0x805
f0116872:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116877:	e8 89 99 fe ff       	call   f0100205 <_panic>

f011687c <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f011687c:	55                   	push   %ebp
f011687d:	89 e5                	mov    %esp,%ebp
f011687f:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116882:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116889:	eb 18                	jmp    f01168a3 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011688b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011688e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116895:	8b 45 08             	mov    0x8(%ebp),%eax
f0116898:	01 d0                	add    %edx,%eax
f011689a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01168a0:	ff 45 fc             	incl   -0x4(%ebp)
f01168a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01168a6:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01168ab:	76 de                	jbe    f011688b <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01168ad:	90                   	nop
f01168ae:	c9                   	leave  
f01168af:	c3                   	ret    

f01168b0 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01168b0:	55                   	push   %ebp
f01168b1:	89 e5                	mov    %esp,%ebp
f01168b3:	83 ec 38             	sub    $0x38,%esp
f01168b6:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01168b9:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01168bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168bf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01168c7:	8b 45 10             	mov    0x10(%ebp),%eax
f01168ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01168d2:	e9 ea 01 00 00       	jmp    f0116ac1 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01168d7:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01168db:	74 44                	je     f0116921 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01168dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01168e0:	83 ec 04             	sub    $0x4,%esp
f01168e3:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01168e6:	52                   	push   %edx
f01168e7:	50                   	push   %eax
f01168e8:	ff 75 08             	pushl  0x8(%ebp)
f01168eb:	e8 75 04 ff ff       	call   f0106d65 <get_frame_info>
f01168f0:	83 c4 10             	add    $0x10,%esp
f01168f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01168f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01168f9:	85 c0                	test   %eax,%eax
f01168fb:	75 24                	jne    f0116921 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01168fd:	83 ec 04             	sub    $0x4,%esp
f0116900:	68 2c ad 13 f0       	push   $0xf013ad2c
f0116905:	68 22 08 00 00       	push   $0x822
f011690a:	68 5e 8e 13 f0       	push   $0xf0138e5e
f011690f:	e8 ff 9a fe ff       	call   f0100413 <_warn>
f0116914:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116917:	b8 00 00 00 00       	mov    $0x0,%eax
f011691c:	e9 b6 01 00 00       	jmp    f0116ad7 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116921:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116924:	83 ec 04             	sub    $0x4,%esp
f0116927:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011692a:	52                   	push   %edx
f011692b:	50                   	push   %eax
f011692c:	ff 75 08             	pushl  0x8(%ebp)
f011692f:	e8 31 04 ff ff       	call   f0106d65 <get_frame_info>
f0116934:	83 c4 10             	add    $0x10,%esp
f0116937:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011693a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011693d:	85 c0                	test   %eax,%eax
f011693f:	75 24                	jne    f0116965 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116941:	83 ec 04             	sub    $0x4,%esp
f0116944:	68 58 ad 13 f0       	push   $0xf013ad58
f0116949:	68 29 08 00 00       	push   $0x829
f011694e:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116953:	e8 bb 9a fe ff       	call   f0100413 <_warn>
f0116958:	83 c4 10             	add    $0x10,%esp
			return 0;
f011695b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116960:	e9 72 01 00 00       	jmp    f0116ad7 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116965:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116969:	75 70                	jne    f01169db <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011696b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011696e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116971:	c1 ea 0c             	shr    $0xc,%edx
f0116974:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011697a:	c1 e2 02             	shl    $0x2,%edx
f011697d:	01 d0                	add    %edx,%eax
f011697f:	8b 00                	mov    (%eax),%eax
f0116981:	c1 e8 0c             	shr    $0xc,%eax
f0116984:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116987:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011698a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011698d:	c1 ea 0c             	shr    $0xc,%edx
f0116990:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116996:	c1 e2 02             	shl    $0x2,%edx
f0116999:	01 d0                	add    %edx,%eax
f011699b:	8b 00                	mov    (%eax),%eax
f011699d:	c1 e8 0c             	shr    $0xc,%eax
f01169a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01169a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169a6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01169a9:	74 30                	je     f01169db <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01169ab:	83 ec 04             	sub    $0x4,%esp
f01169ae:	ff 75 e4             	pushl  -0x1c(%ebp)
f01169b1:	ff 75 e8             	pushl  -0x18(%ebp)
f01169b4:	ff 75 f0             	pushl  -0x10(%ebp)
f01169b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01169ba:	68 84 ad 13 f0       	push   $0xf013ad84
f01169bf:	68 33 08 00 00       	push   $0x833
f01169c4:	68 5e 8e 13 f0       	push   $0xf0138e5e
f01169c9:	e8 45 9a fe ff       	call   f0100413 <_warn>
f01169ce:	83 c4 20             	add    $0x20,%esp
				return 0;
f01169d1:	b8 00 00 00 00       	mov    $0x0,%eax
f01169d6:	e9 fc 00 00 00       	jmp    f0116ad7 <CCP+0x227>
			}
		}
		if (ref != -1)
f01169db:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01169df:	74 52                	je     f0116a33 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01169e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01169e5:	74 0e                	je     f01169f5 <CCP+0x145>
f01169e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01169ea:	8b 40 08             	mov    0x8(%eax),%eax
f01169ed:	0f b7 c0             	movzwl %ax,%eax
f01169f0:	3b 45 18             	cmp    0x18(%ebp),%eax
f01169f3:	74 3e                	je     f0116a33 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01169f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01169f9:	74 0b                	je     f0116a06 <CCP+0x156>
f01169fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01169fe:	8b 40 08             	mov    0x8(%eax),%eax
f0116a01:	0f b7 c0             	movzwl %ax,%eax
f0116a04:	eb 05                	jmp    f0116a0b <CCP+0x15b>
f0116a06:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a0b:	83 ec 0c             	sub    $0xc,%esp
f0116a0e:	50                   	push   %eax
f0116a0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a12:	68 e0 ad 13 f0       	push   $0xf013ade0
f0116a17:	68 3b 08 00 00       	push   $0x83b
f0116a1c:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116a21:	e8 ed 99 fe ff       	call   f0100413 <_warn>
f0116a26:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a2e:	e9 a4 00 00 00       	jmp    f0116ad7 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116a33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a36:	ff 75 20             	pushl  0x20(%ebp)
f0116a39:	ff 75 1c             	pushl  0x1c(%ebp)
f0116a3c:	50                   	push   %eax
f0116a3d:	ff 75 08             	pushl  0x8(%ebp)
f0116a40:	e8 17 fd ff ff       	call   f011675c <CPs>
f0116a45:	83 c4 10             	add    $0x10,%esp
f0116a48:	85 c0                	test   %eax,%eax
f0116a4a:	7f 21                	jg     f0116a6d <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116a4c:	83 ec 04             	sub    $0x4,%esp
f0116a4f:	68 50 ae 13 f0       	push   $0xf013ae50
f0116a54:	68 41 08 00 00       	push   $0x841
f0116a59:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116a5e:	e8 b0 99 fe ff       	call   f0100413 <_warn>
f0116a63:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116a66:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a6b:	eb 6a                	jmp    f0116ad7 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116a6d:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116a71:	74 3a                	je     f0116aad <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a76:	ff 75 28             	pushl  0x28(%ebp)
f0116a79:	ff 75 24             	pushl  0x24(%ebp)
f0116a7c:	50                   	push   %eax
f0116a7d:	ff 75 08             	pushl  0x8(%ebp)
f0116a80:	e8 d7 fc ff ff       	call   f011675c <CPs>
f0116a85:	83 c4 10             	add    $0x10,%esp
f0116a88:	85 c0                	test   %eax,%eax
f0116a8a:	7f 21                	jg     f0116aad <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116a8c:	83 ec 04             	sub    $0x4,%esp
f0116a8f:	68 98 ae 13 f0       	push   $0xf013ae98
f0116a94:	68 48 08 00 00       	push   $0x848
f0116a99:	68 5e 8e 13 f0       	push   $0xf0138e5e
f0116a9e:	e8 70 99 fe ff       	call   f0100413 <_warn>
f0116aa3:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116aa6:	b8 00 00 00 00       	mov    $0x0,%eax
f0116aab:	eb 2a                	jmp    f0116ad7 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116aad:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ab1:	74 07                	je     f0116aba <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116ab3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116aba:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116ac1:	8b 55 10             	mov    0x10(%ebp),%edx
f0116ac4:	8b 45 14             	mov    0x14(%ebp),%eax
f0116ac7:	01 d0                	add    %edx,%eax
f0116ac9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116acc:	0f 87 05 fe ff ff    	ja     f01168d7 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116ad2:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116ad7:	c9                   	leave  
f0116ad8:	c3                   	ret    

f0116ad9 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116ad9:	55                   	push   %ebp
f0116ada:	89 e5                	mov    %esp,%ebp
f0116adc:	57                   	push   %edi
f0116add:	56                   	push   %esi
f0116ade:	53                   	push   %ebx
f0116adf:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116ae5:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0116aea:	84 c0                	test   %al,%al
f0116aec:	0f 84 b4 09 00 00    	je     f01174a6 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116af2:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116af9:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116aff:	bb 38 b1 13 f0       	mov    $0xf013b138,%ebx
f0116b04:	ba 04 00 00 00       	mov    $0x4,%edx
f0116b09:	89 c7                	mov    %eax,%edi
f0116b0b:	89 de                	mov    %ebx,%esi
f0116b0d:	89 d1                	mov    %edx,%ecx
f0116b0f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116b11:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116b17:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116b1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b21:	89 d7                	mov    %edx,%edi
f0116b23:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116b25:	83 ec 0c             	sub    $0xc,%esp
f0116b28:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b2e:	50                   	push   %eax
f0116b2f:	e8 3c a2 fe ff       	call   f0100d70 <execute_command>
f0116b34:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116b37:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b3d:	bb 9c b1 13 f0       	mov    $0xf013b19c,%ebx
f0116b42:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116b47:	89 c7                	mov    %eax,%edi
f0116b49:	89 de                	mov    %ebx,%esi
f0116b4b:	89 d1                	mov    %edx,%ecx
f0116b4d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116b4f:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116b55:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116b5a:	b0 00                	mov    $0x0,%al
f0116b5c:	89 d7                	mov    %edx,%edi
f0116b5e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116b60:	83 ec 0c             	sub    $0xc,%esp
f0116b63:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b69:	50                   	push   %eax
f0116b6a:	e8 01 a2 fe ff       	call   f0100d70 <execute_command>
f0116b6f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116b72:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116b78:	bb 00 b2 13 f0       	mov    $0xf013b200,%ebx
f0116b7d:	ba 17 00 00 00       	mov    $0x17,%edx
f0116b82:	89 c7                	mov    %eax,%edi
f0116b84:	89 de                	mov    %ebx,%esi
f0116b86:	89 d1                	mov    %edx,%ecx
f0116b88:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116b8a:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116b90:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116b95:	b0 00                	mov    $0x0,%al
f0116b97:	89 d7                	mov    %edx,%edi
f0116b99:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116b9b:	83 ec 0c             	sub    $0xc,%esp
f0116b9e:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116ba4:	50                   	push   %eax
f0116ba5:	e8 c6 a1 fe ff       	call   f0100d70 <execute_command>
f0116baa:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116bad:	83 ec 04             	sub    $0x4,%esp
f0116bb0:	6a 00                	push   $0x0
f0116bb2:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116bb5:	50                   	push   %eax
f0116bb6:	68 00 10 00 00       	push   $0x1000
f0116bbb:	e8 07 34 ff ff       	call   f0109fc7 <envid2env>
f0116bc0:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116bc3:	83 ec 04             	sub    $0x4,%esp
f0116bc6:	6a 00                	push   $0x0
f0116bc8:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116bcb:	50                   	push   %eax
f0116bcc:	68 01 10 00 00       	push   $0x1001
f0116bd1:	e8 f1 33 ff ff       	call   f0109fc7 <envid2env>
f0116bd6:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116bd9:	83 ec 04             	sub    $0x4,%esp
f0116bdc:	6a 00                	push   $0x0
f0116bde:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116be1:	50                   	push   %eax
f0116be2:	68 02 10 00 00       	push   $0x1002
f0116be7:	e8 db 33 ff ff       	call   f0109fc7 <envid2env>
f0116bec:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116bef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116bf2:	85 c0                	test   %eax,%eax
f0116bf4:	74 0e                	je     f0116c04 <test_priority_normal_and_higher+0x12b>
f0116bf6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bf9:	85 c0                	test   %eax,%eax
f0116bfb:	74 07                	je     f0116c04 <test_priority_normal_and_higher+0x12b>
f0116bfd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c00:	85 c0                	test   %eax,%eax
f0116c02:	75 14                	jne    f0116c18 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116c04:	83 ec 04             	sub    $0x4,%esp
f0116c07:	68 d8 ae 13 f0       	push   $0xf013aed8
f0116c0c:	6a 26                	push   $0x26
f0116c0e:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116c13:	e8 ed 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116c18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c1b:	8b 40 74             	mov    0x74(%eax),%eax
f0116c1e:	83 f8 14             	cmp    $0x14,%eax
f0116c21:	75 16                	jne    f0116c39 <test_priority_normal_and_higher+0x160>
f0116c23:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c26:	8b 40 74             	mov    0x74(%eax),%eax
f0116c29:	83 f8 0f             	cmp    $0xf,%eax
f0116c2c:	75 0b                	jne    f0116c39 <test_priority_normal_and_higher+0x160>
f0116c2e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c31:	8b 40 74             	mov    0x74(%eax),%eax
f0116c34:	83 f8 0a             	cmp    $0xa,%eax
f0116c37:	74 14                	je     f0116c4d <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116c39:	83 ec 04             	sub    $0x4,%esp
f0116c3c:	68 0c af 13 f0       	push   $0xf013af0c
f0116c41:	6a 29                	push   $0x29
f0116c43:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116c48:	e8 b8 95 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116c4d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116c54:	eb 44                	jmp    f0116c9a <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116c56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c59:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116c5f:	89 d0                	mov    %edx,%eax
f0116c61:	01 c0                	add    %eax,%eax
f0116c63:	01 d0                	add    %edx,%eax
f0116c65:	c1 e0 03             	shl    $0x3,%eax
f0116c68:	01 c8                	add    %ecx,%eax
f0116c6a:	8b 10                	mov    (%eax),%edx
f0116c6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116c6f:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116c76:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c79:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c7c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116c7f:	89 d0                	mov    %edx,%eax
f0116c81:	01 c0                	add    %eax,%eax
f0116c83:	01 d0                	add    %edx,%eax
f0116c85:	c1 e0 03             	shl    $0x3,%eax
f0116c88:	01 c8                	add    %ecx,%eax
f0116c8a:	8b 50 08             	mov    0x8(%eax),%edx
f0116c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116c90:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116c97:	ff 45 e4             	incl   -0x1c(%ebp)
f0116c9a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116c9e:	7e b6                	jle    f0116c56 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116ca0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116ca7:	eb 44                	jmp    f0116ced <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116ca9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cac:	8b 48 78             	mov    0x78(%eax),%ecx
f0116caf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116cb2:	89 d0                	mov    %edx,%eax
f0116cb4:	01 c0                	add    %eax,%eax
f0116cb6:	01 d0                	add    %edx,%eax
f0116cb8:	c1 e0 03             	shl    $0x3,%eax
f0116cbb:	01 c8                	add    %ecx,%eax
f0116cbd:	8b 10                	mov    (%eax),%edx
f0116cbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116cc2:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116cc9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ccc:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ccf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116cd2:	89 d0                	mov    %edx,%eax
f0116cd4:	01 c0                	add    %eax,%eax
f0116cd6:	01 d0                	add    %edx,%eax
f0116cd8:	c1 e0 03             	shl    $0x3,%eax
f0116cdb:	01 c8                	add    %ecx,%eax
f0116cdd:	8b 50 08             	mov    0x8(%eax),%edx
f0116ce0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116ce3:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116cea:	ff 45 e0             	incl   -0x20(%ebp)
f0116ced:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116cf1:	7e b6                	jle    f0116ca9 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116cf3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116cfa:	eb 44                	jmp    f0116d40 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116cfc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cff:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d02:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d05:	89 d0                	mov    %edx,%eax
f0116d07:	01 c0                	add    %eax,%eax
f0116d09:	01 d0                	add    %edx,%eax
f0116d0b:	c1 e0 03             	shl    $0x3,%eax
f0116d0e:	01 c8                	add    %ecx,%eax
f0116d10:	8b 10                	mov    (%eax),%edx
f0116d12:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d15:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d1c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d1f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d22:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d25:	89 d0                	mov    %edx,%eax
f0116d27:	01 c0                	add    %eax,%eax
f0116d29:	01 d0                	add    %edx,%eax
f0116d2b:	c1 e0 03             	shl    $0x3,%eax
f0116d2e:	01 c8                	add    %ecx,%eax
f0116d30:	8b 50 08             	mov    0x8(%eax),%edx
f0116d33:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d36:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d3d:	ff 45 dc             	incl   -0x24(%ebp)
f0116d40:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116d44:	7e b6                	jle    f0116cfc <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116d46:	e8 0e 63 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116d4b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116d4e:	e8 d4 cf fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116d53:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116d56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d59:	83 ec 08             	sub    $0x8,%esp
f0116d5c:	6a 03                	push   $0x3
f0116d5e:	50                   	push   %eax
f0116d5f:	e8 41 47 ff ff       	call   f010b4a5 <set_program_priority>
f0116d64:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116d67:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d6a:	83 ec 08             	sub    $0x8,%esp
f0116d6d:	6a 03                	push   $0x3
f0116d6f:	50                   	push   %eax
f0116d70:	e8 30 47 ff ff       	call   f010b4a5 <set_program_priority>
f0116d75:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116d78:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d7b:	83 ec 08             	sub    $0x8,%esp
f0116d7e:	6a 03                	push   $0x3
f0116d80:	50                   	push   %eax
f0116d81:	e8 1f 47 ff ff       	call   f010b4a5 <set_program_priority>
f0116d86:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d89:	e8 99 cf fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116d8e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116d91:	74 14                	je     f0116da7 <test_priority_normal_and_higher+0x2ce>
f0116d93:	83 ec 04             	sub    $0x4,%esp
f0116d96:	68 58 af 13 f0       	push   $0xf013af58
f0116d9b:	6a 45                	push   $0x45
f0116d9d:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116da2:	e8 5e 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116da7:	e8 ad 62 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116dac:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116daf:	74 14                	je     f0116dc5 <test_priority_normal_and_higher+0x2ec>
f0116db1:	83 ec 04             	sub    $0x4,%esp
f0116db4:	68 58 af 13 f0       	push   $0xf013af58
f0116db9:	6a 46                	push   $0x46
f0116dbb:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116dc0:	e8 40 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116dc5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116dc8:	8b 40 74             	mov    0x74(%eax),%eax
f0116dcb:	83 f8 14             	cmp    $0x14,%eax
f0116dce:	75 16                	jne    f0116de6 <test_priority_normal_and_higher+0x30d>
f0116dd0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116dd3:	8b 40 74             	mov    0x74(%eax),%eax
f0116dd6:	83 f8 0f             	cmp    $0xf,%eax
f0116dd9:	75 0b                	jne    f0116de6 <test_priority_normal_and_higher+0x30d>
f0116ddb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116dde:	8b 40 74             	mov    0x74(%eax),%eax
f0116de1:	83 f8 0a             	cmp    $0xa,%eax
f0116de4:	74 14                	je     f0116dfa <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116de6:	83 ec 04             	sub    $0x4,%esp
f0116de9:	68 84 af 13 f0       	push   $0xf013af84
f0116dee:	6a 49                	push   $0x49
f0116df0:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116df5:	e8 0b 94 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116dfa:	e8 5a 62 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116dff:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e02:	e8 20 cf fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116e07:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116e0a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e0d:	83 ec 08             	sub    $0x8,%esp
f0116e10:	6a 04                	push   $0x4
f0116e12:	50                   	push   %eax
f0116e13:	e8 8d 46 ff ff       	call   f010b4a5 <set_program_priority>
f0116e18:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116e1b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e1e:	83 ec 08             	sub    $0x8,%esp
f0116e21:	6a 04                	push   $0x4
f0116e23:	50                   	push   %eax
f0116e24:	e8 7c 46 ff ff       	call   f010b4a5 <set_program_priority>
f0116e29:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116e2c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e2f:	83 ec 08             	sub    $0x8,%esp
f0116e32:	6a 04                	push   $0x4
f0116e34:	50                   	push   %eax
f0116e35:	e8 6b 46 ff ff       	call   f010b4a5 <set_program_priority>
f0116e3a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e3d:	e8 e5 ce fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116e42:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e45:	74 14                	je     f0116e5b <test_priority_normal_and_higher+0x382>
f0116e47:	83 ec 04             	sub    $0x4,%esp
f0116e4a:	68 58 af 13 f0       	push   $0xf013af58
f0116e4f:	6a 53                	push   $0x53
f0116e51:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116e56:	e8 aa 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116e5b:	e8 f9 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116e60:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e63:	74 14                	je     f0116e79 <test_priority_normal_and_higher+0x3a0>
f0116e65:	83 ec 04             	sub    $0x4,%esp
f0116e68:	68 d8 af 13 f0       	push   $0xf013afd8
f0116e6d:	6a 54                	push   $0x54
f0116e6f:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116e74:	e8 8c 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116e79:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e7c:	8b 40 74             	mov    0x74(%eax),%eax
f0116e7f:	83 f8 14             	cmp    $0x14,%eax
f0116e82:	75 16                	jne    f0116e9a <test_priority_normal_and_higher+0x3c1>
f0116e84:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e87:	8b 40 74             	mov    0x74(%eax),%eax
f0116e8a:	83 f8 0f             	cmp    $0xf,%eax
f0116e8d:	75 0b                	jne    f0116e9a <test_priority_normal_and_higher+0x3c1>
f0116e8f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e92:	8b 40 74             	mov    0x74(%eax),%eax
f0116e95:	83 f8 14             	cmp    $0x14,%eax
f0116e98:	74 14                	je     f0116eae <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116e9a:	83 ec 04             	sub    $0x4,%esp
f0116e9d:	68 08 b0 13 f0       	push   $0xf013b008
f0116ea2:	6a 57                	push   $0x57
f0116ea4:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116ea9:	e8 57 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116eae:	e8 a6 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116eb3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116eb6:	e8 6c ce fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116ebb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116ebe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ec1:	83 ec 08             	sub    $0x8,%esp
f0116ec4:	6a 04                	push   $0x4
f0116ec6:	50                   	push   %eax
f0116ec7:	e8 d9 45 ff ff       	call   f010b4a5 <set_program_priority>
f0116ecc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ecf:	e8 53 ce fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116ed4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ed7:	74 14                	je     f0116eed <test_priority_normal_and_higher+0x414>
f0116ed9:	83 ec 04             	sub    $0x4,%esp
f0116edc:	68 58 af 13 f0       	push   $0xf013af58
f0116ee1:	6a 5f                	push   $0x5f
f0116ee3:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116ee8:	e8 18 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116eed:	e8 67 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116ef2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ef5:	74 14                	je     f0116f0b <test_priority_normal_and_higher+0x432>
f0116ef7:	83 ec 04             	sub    $0x4,%esp
f0116efa:	68 58 af 13 f0       	push   $0xf013af58
f0116eff:	6a 60                	push   $0x60
f0116f01:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116f06:	e8 fa 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f0b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f0e:	8b 40 74             	mov    0x74(%eax),%eax
f0116f11:	83 f8 14             	cmp    $0x14,%eax
f0116f14:	75 16                	jne    f0116f2c <test_priority_normal_and_higher+0x453>
f0116f16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f19:	8b 40 74             	mov    0x74(%eax),%eax
f0116f1c:	83 f8 0f             	cmp    $0xf,%eax
f0116f1f:	75 0b                	jne    f0116f2c <test_priority_normal_and_higher+0x453>
f0116f21:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f24:	8b 40 74             	mov    0x74(%eax),%eax
f0116f27:	83 f8 14             	cmp    $0x14,%eax
f0116f2a:	74 14                	je     f0116f40 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116f2c:	83 ec 04             	sub    $0x4,%esp
f0116f2f:	68 50 b0 13 f0       	push   $0xf013b050
f0116f34:	6a 63                	push   $0x63
f0116f36:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116f3b:	e8 c5 92 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f40:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116f47:	eb 1b                	jmp    f0116f64 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116f49:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f4c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f4f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116f52:	89 d0                	mov    %edx,%eax
f0116f54:	01 c0                	add    %eax,%eax
f0116f56:	01 d0                	add    %edx,%eax
f0116f58:	c1 e0 03             	shl    $0x3,%eax
f0116f5b:	01 c8                	add    %ecx,%eax
f0116f5d:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f61:	ff 45 d8             	incl   -0x28(%ebp)
f0116f64:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116f68:	7e df                	jle    f0116f49 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116f6a:	e8 ea 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116f6f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f72:	e8 b0 cd fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116f77:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116f7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f7d:	83 ec 08             	sub    $0x8,%esp
f0116f80:	6a 04                	push   $0x4
f0116f82:	50                   	push   %eax
f0116f83:	e8 1d 45 ff ff       	call   f010b4a5 <set_program_priority>
f0116f88:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f8b:	e8 97 cd fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0116f90:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f93:	74 14                	je     f0116fa9 <test_priority_normal_and_higher+0x4d0>
f0116f95:	83 ec 04             	sub    $0x4,%esp
f0116f98:	68 58 af 13 f0       	push   $0xf013af58
f0116f9d:	6a 70                	push   $0x70
f0116f9f:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116fa4:	e8 5c 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116fa9:	e8 ab 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116fae:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116fb1:	74 14                	je     f0116fc7 <test_priority_normal_and_higher+0x4ee>
f0116fb3:	83 ec 04             	sub    $0x4,%esp
f0116fb6:	68 58 af 13 f0       	push   $0xf013af58
f0116fbb:	6a 71                	push   $0x71
f0116fbd:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116fc2:	e8 3e 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116fc7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fca:	8b 40 74             	mov    0x74(%eax),%eax
f0116fcd:	83 f8 14             	cmp    $0x14,%eax
f0116fd0:	75 16                	jne    f0116fe8 <test_priority_normal_and_higher+0x50f>
f0116fd2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fd5:	8b 40 74             	mov    0x74(%eax),%eax
f0116fd8:	83 f8 0f             	cmp    $0xf,%eax
f0116fdb:	75 0b                	jne    f0116fe8 <test_priority_normal_and_higher+0x50f>
f0116fdd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fe0:	8b 40 74             	mov    0x74(%eax),%eax
f0116fe3:	83 f8 14             	cmp    $0x14,%eax
f0116fe6:	74 14                	je     f0116ffc <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116fe8:	83 ec 04             	sub    $0x4,%esp
f0116feb:	68 50 b0 13 f0       	push   $0xf013b050
f0116ff0:	6a 74                	push   $0x74
f0116ff2:	68 f1 ae 13 f0       	push   $0xf013aef1
f0116ff7:	e8 09 92 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116ffc:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117003:	eb 1b                	jmp    f0117020 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117005:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117008:	8b 48 78             	mov    0x78(%eax),%ecx
f011700b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011700e:	89 d0                	mov    %edx,%eax
f0117010:	01 c0                	add    %eax,%eax
f0117012:	01 d0                	add    %edx,%eax
f0117014:	c1 e0 03             	shl    $0x3,%eax
f0117017:	01 c8                	add    %ecx,%eax
f0117019:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011701d:	ff 45 d4             	incl   -0x2c(%ebp)
f0117020:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117024:	7e df                	jle    f0117005 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117026:	e8 2e 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011702b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011702e:	e8 f4 cc fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117033:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117036:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117039:	83 ec 08             	sub    $0x8,%esp
f011703c:	6a 05                	push   $0x5
f011703e:	50                   	push   %eax
f011703f:	e8 61 44 ff ff       	call   f010b4a5 <set_program_priority>
f0117044:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117047:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011704a:	83 ec 08             	sub    $0x8,%esp
f011704d:	6a 05                	push   $0x5
f011704f:	50                   	push   %eax
f0117050:	e8 50 44 ff ff       	call   f010b4a5 <set_program_priority>
f0117055:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117058:	e8 ca cc fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011705d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117060:	74 14                	je     f0117076 <test_priority_normal_and_higher+0x59d>
f0117062:	83 ec 04             	sub    $0x4,%esp
f0117065:	68 58 af 13 f0       	push   $0xf013af58
f011706a:	6a 7f                	push   $0x7f
f011706c:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117071:	e8 8f 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117076:	e8 de 5f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011707b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011707e:	74 17                	je     f0117097 <test_priority_normal_and_higher+0x5be>
f0117080:	83 ec 04             	sub    $0x4,%esp
f0117083:	68 58 af 13 f0       	push   $0xf013af58
f0117088:	68 80 00 00 00       	push   $0x80
f011708d:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117092:	e8 6e 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117097:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011709a:	8b 40 74             	mov    0x74(%eax),%eax
f011709d:	83 f8 14             	cmp    $0x14,%eax
f01170a0:	75 16                	jne    f01170b8 <test_priority_normal_and_higher+0x5df>
f01170a2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170a5:	8b 40 74             	mov    0x74(%eax),%eax
f01170a8:	83 f8 1e             	cmp    $0x1e,%eax
f01170ab:	75 0b                	jne    f01170b8 <test_priority_normal_and_higher+0x5df>
f01170ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170b0:	8b 40 74             	mov    0x74(%eax),%eax
f01170b3:	83 f8 28             	cmp    $0x28,%eax
f01170b6:	74 17                	je     f01170cf <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01170b8:	83 ec 04             	sub    $0x4,%esp
f01170bb:	68 8c b0 13 f0       	push   $0xf013b08c
f01170c0:	68 83 00 00 00       	push   $0x83
f01170c5:	68 f1 ae 13 f0       	push   $0xf013aef1
f01170ca:	e8 36 91 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f01170cf:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01170d6:	eb 1b                	jmp    f01170f3 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01170d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170db:	8b 48 78             	mov    0x78(%eax),%ecx
f01170de:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01170e1:	89 d0                	mov    %edx,%eax
f01170e3:	01 c0                	add    %eax,%eax
f01170e5:	01 d0                	add    %edx,%eax
f01170e7:	c1 e0 03             	shl    $0x3,%eax
f01170ea:	01 c8                	add    %ecx,%eax
f01170ec:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01170f0:	ff 45 d0             	incl   -0x30(%ebp)
f01170f3:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01170f7:	7e df                	jle    f01170d8 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01170f9:	e8 5b 5f ff ff       	call   f010d059 <sys_calculate_free_frames>
f01170fe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117101:	e8 21 cc fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117106:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117109:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011710c:	83 ec 08             	sub    $0x8,%esp
f011710f:	6a 05                	push   $0x5
f0117111:	50                   	push   %eax
f0117112:	e8 8e 43 ff ff       	call   f010b4a5 <set_program_priority>
f0117117:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011711a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011711d:	83 ec 08             	sub    $0x8,%esp
f0117120:	6a 04                	push   $0x4
f0117122:	50                   	push   %eax
f0117123:	e8 7d 43 ff ff       	call   f010b4a5 <set_program_priority>
f0117128:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011712b:	e8 f7 cb fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117130:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117133:	74 17                	je     f011714c <test_priority_normal_and_higher+0x673>
f0117135:	83 ec 04             	sub    $0x4,%esp
f0117138:	68 58 af 13 f0       	push   $0xf013af58
f011713d:	68 8e 00 00 00       	push   $0x8e
f0117142:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117147:	e8 b9 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011714c:	e8 08 5f ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117151:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117154:	74 17                	je     f011716d <test_priority_normal_and_higher+0x694>
f0117156:	83 ec 04             	sub    $0x4,%esp
f0117159:	68 58 af 13 f0       	push   $0xf013af58
f011715e:	68 8f 00 00 00       	push   $0x8f
f0117163:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117168:	e8 98 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011716d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117170:	8b 40 74             	mov    0x74(%eax),%eax
f0117173:	83 f8 14             	cmp    $0x14,%eax
f0117176:	75 16                	jne    f011718e <test_priority_normal_and_higher+0x6b5>
f0117178:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011717b:	8b 40 74             	mov    0x74(%eax),%eax
f011717e:	83 f8 1e             	cmp    $0x1e,%eax
f0117181:	75 0b                	jne    f011718e <test_priority_normal_and_higher+0x6b5>
f0117183:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117186:	8b 40 74             	mov    0x74(%eax),%eax
f0117189:	83 f8 28             	cmp    $0x28,%eax
f011718c:	74 17                	je     f01171a5 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f011718e:	83 ec 04             	sub    $0x4,%esp
f0117191:	68 8c b0 13 f0       	push   $0xf013b08c
f0117196:	68 92 00 00 00       	push   $0x92
f011719b:	68 f1 ae 13 f0       	push   $0xf013aef1
f01171a0:	e8 60 90 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01171a5:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01171ac:	eb 1b                	jmp    f01171c9 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01171ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171b1:	8b 48 78             	mov    0x78(%eax),%ecx
f01171b4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01171b7:	89 d0                	mov    %edx,%eax
f01171b9:	01 c0                	add    %eax,%eax
f01171bb:	01 d0                	add    %edx,%eax
f01171bd:	c1 e0 03             	shl    $0x3,%eax
f01171c0:	01 c8                	add    %ecx,%eax
f01171c2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01171c6:	ff 45 cc             	incl   -0x34(%ebp)
f01171c9:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01171cd:	7e df                	jle    f01171ae <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01171cf:	e8 85 5e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01171d4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01171d7:	e8 4b cb fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01171dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01171df:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171e2:	83 ec 08             	sub    $0x8,%esp
f01171e5:	6a 05                	push   $0x5
f01171e7:	50                   	push   %eax
f01171e8:	e8 b8 42 ff ff       	call   f010b4a5 <set_program_priority>
f01171ed:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01171f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171f3:	83 ec 08             	sub    $0x8,%esp
f01171f6:	6a 04                	push   $0x4
f01171f8:	50                   	push   %eax
f01171f9:	e8 a7 42 ff ff       	call   f010b4a5 <set_program_priority>
f01171fe:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117201:	e8 21 cb fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117206:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117209:	74 17                	je     f0117222 <test_priority_normal_and_higher+0x749>
f011720b:	83 ec 04             	sub    $0x4,%esp
f011720e:	68 58 af 13 f0       	push   $0xf013af58
f0117213:	68 9d 00 00 00       	push   $0x9d
f0117218:	68 f1 ae 13 f0       	push   $0xf013aef1
f011721d:	e8 e3 8f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117222:	e8 32 5e ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117227:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011722a:	74 17                	je     f0117243 <test_priority_normal_and_higher+0x76a>
f011722c:	83 ec 04             	sub    $0x4,%esp
f011722f:	68 58 af 13 f0       	push   $0xf013af58
f0117234:	68 9e 00 00 00       	push   $0x9e
f0117239:	68 f1 ae 13 f0       	push   $0xf013aef1
f011723e:	e8 c2 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117243:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117246:	8b 40 74             	mov    0x74(%eax),%eax
f0117249:	83 f8 14             	cmp    $0x14,%eax
f011724c:	75 16                	jne    f0117264 <test_priority_normal_and_higher+0x78b>
f011724e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117251:	8b 40 74             	mov    0x74(%eax),%eax
f0117254:	83 f8 3c             	cmp    $0x3c,%eax
f0117257:	75 0b                	jne    f0117264 <test_priority_normal_and_higher+0x78b>
f0117259:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011725c:	8b 40 74             	mov    0x74(%eax),%eax
f011725f:	83 f8 28             	cmp    $0x28,%eax
f0117262:	74 17                	je     f011727b <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0117264:	83 ec 04             	sub    $0x4,%esp
f0117267:	68 8c b0 13 f0       	push   $0xf013b08c
f011726c:	68 a1 00 00 00       	push   $0xa1
f0117271:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117276:	e8 8a 8f fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f011727b:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117282:	eb 1b                	jmp    f011729f <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117284:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117287:	8b 48 78             	mov    0x78(%eax),%ecx
f011728a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011728d:	89 d0                	mov    %edx,%eax
f011728f:	01 c0                	add    %eax,%eax
f0117291:	01 d0                	add    %edx,%eax
f0117293:	c1 e0 03             	shl    $0x3,%eax
f0117296:	01 c8                	add    %ecx,%eax
f0117298:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011729c:	ff 45 c8             	incl   -0x38(%ebp)
f011729f:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01172a3:	7e df                	jle    f0117284 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172a5:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01172ac:	eb 1b                	jmp    f01172c9 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01172ae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172b1:	8b 48 78             	mov    0x78(%eax),%ecx
f01172b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01172b7:	89 d0                	mov    %edx,%eax
f01172b9:	01 c0                	add    %eax,%eax
f01172bb:	01 d0                	add    %edx,%eax
f01172bd:	c1 e0 03             	shl    $0x3,%eax
f01172c0:	01 c8                	add    %ecx,%eax
f01172c2:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172c6:	ff 45 c4             	incl   -0x3c(%ebp)
f01172c9:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01172cd:	7e df                	jle    f01172ae <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01172cf:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01172d6:	eb 7a                	jmp    f0117352 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01172d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01172db:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01172e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172e5:	8b 58 78             	mov    0x78(%eax),%ebx
f01172e8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01172eb:	89 d0                	mov    %edx,%eax
f01172ed:	01 c0                	add    %eax,%eax
f01172ef:	01 d0                	add    %edx,%eax
f01172f1:	c1 e0 03             	shl    $0x3,%eax
f01172f4:	01 d8                	add    %ebx,%eax
f01172f6:	8b 00                	mov    (%eax),%eax
f01172f8:	39 c1                	cmp    %eax,%ecx
f01172fa:	74 17                	je     f0117313 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f01172fc:	83 ec 04             	sub    $0x4,%esp
f01172ff:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117304:	68 af 00 00 00       	push   $0xaf
f0117309:	68 f1 ae 13 f0       	push   $0xf013aef1
f011730e:	e8 f2 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117313:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117316:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011731d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117320:	8b 58 78             	mov    0x78(%eax),%ebx
f0117323:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117326:	89 d0                	mov    %edx,%eax
f0117328:	01 c0                	add    %eax,%eax
f011732a:	01 d0                	add    %edx,%eax
f011732c:	c1 e0 03             	shl    $0x3,%eax
f011732f:	01 d8                	add    %ebx,%eax
f0117331:	8b 40 08             	mov    0x8(%eax),%eax
f0117334:	39 c1                	cmp    %eax,%ecx
f0117336:	74 17                	je     f011734f <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0117338:	83 ec 04             	sub    $0x4,%esp
f011733b:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117340:	68 b2 00 00 00       	push   $0xb2
f0117345:	68 f1 ae 13 f0       	push   $0xf013aef1
f011734a:	e8 b6 8e fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011734f:	ff 45 c0             	incl   -0x40(%ebp)
f0117352:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117356:	7e 80                	jle    f01172d8 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117358:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011735f:	eb 7a                	jmp    f01173db <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117361:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117364:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011736b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011736e:	8b 58 78             	mov    0x78(%eax),%ebx
f0117371:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117374:	89 d0                	mov    %edx,%eax
f0117376:	01 c0                	add    %eax,%eax
f0117378:	01 d0                	add    %edx,%eax
f011737a:	c1 e0 03             	shl    $0x3,%eax
f011737d:	01 d8                	add    %ebx,%eax
f011737f:	8b 00                	mov    (%eax),%eax
f0117381:	39 c1                	cmp    %eax,%ecx
f0117383:	74 17                	je     f011739c <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0117385:	83 ec 04             	sub    $0x4,%esp
f0117388:	68 c8 b0 13 f0       	push   $0xf013b0c8
f011738d:	68 b8 00 00 00       	push   $0xb8
f0117392:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117397:	e8 69 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011739c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011739f:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01173a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173a9:	8b 58 78             	mov    0x78(%eax),%ebx
f01173ac:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01173af:	89 d0                	mov    %edx,%eax
f01173b1:	01 c0                	add    %eax,%eax
f01173b3:	01 d0                	add    %edx,%eax
f01173b5:	c1 e0 03             	shl    $0x3,%eax
f01173b8:	01 d8                	add    %ebx,%eax
f01173ba:	8b 40 08             	mov    0x8(%eax),%eax
f01173bd:	39 c1                	cmp    %eax,%ecx
f01173bf:	74 17                	je     f01173d8 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01173c1:	83 ec 04             	sub    $0x4,%esp
f01173c4:	68 c8 b0 13 f0       	push   $0xf013b0c8
f01173c9:	68 bb 00 00 00       	push   $0xbb
f01173ce:	68 f1 ae 13 f0       	push   $0xf013aef1
f01173d3:	e8 2d 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01173d8:	ff 45 bc             	incl   -0x44(%ebp)
f01173db:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01173df:	7e 80                	jle    f0117361 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01173e1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01173e8:	eb 7a                	jmp    f0117464 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01173ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01173ed:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01173f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173f7:	8b 58 78             	mov    0x78(%eax),%ebx
f01173fa:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01173fd:	89 d0                	mov    %edx,%eax
f01173ff:	01 c0                	add    %eax,%eax
f0117401:	01 d0                	add    %edx,%eax
f0117403:	c1 e0 03             	shl    $0x3,%eax
f0117406:	01 d8                	add    %ebx,%eax
f0117408:	8b 00                	mov    (%eax),%eax
f011740a:	39 c1                	cmp    %eax,%ecx
f011740c:	74 17                	je     f0117425 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f011740e:	83 ec 04             	sub    $0x4,%esp
f0117411:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117416:	68 c1 00 00 00       	push   $0xc1
f011741b:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117420:	e8 e0 8d fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117425:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117428:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011742f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117432:	8b 58 78             	mov    0x78(%eax),%ebx
f0117435:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117438:	89 d0                	mov    %edx,%eax
f011743a:	01 c0                	add    %eax,%eax
f011743c:	01 d0                	add    %edx,%eax
f011743e:	c1 e0 03             	shl    $0x3,%eax
f0117441:	01 d8                	add    %ebx,%eax
f0117443:	8b 40 08             	mov    0x8(%eax),%eax
f0117446:	39 c1                	cmp    %eax,%ecx
f0117448:	74 17                	je     f0117461 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f011744a:	83 ec 04             	sub    $0x4,%esp
f011744d:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117452:	68 c4 00 00 00       	push   $0xc4
f0117457:	68 f1 ae 13 f0       	push   $0xf013aef1
f011745c:	e8 a4 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117461:	ff 45 b8             	incl   -0x48(%ebp)
f0117464:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117468:	7e 80                	jle    f01173ea <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011746a:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117471:	75 6e 61 
f0117474:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011747b:	6c 00 00 
f011747e:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117484:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117489:	b8 00 00 00 00       	mov    $0x0,%eax
f011748e:	89 d7                	mov    %edx,%edi
f0117490:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117492:	83 ec 0c             	sub    $0xc,%esp
f0117495:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011749b:	50                   	push   %eax
f011749c:	e8 cf 98 fe ff       	call   f0100d70 <execute_command>
f01174a1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01174a4:	eb 10                	jmp    f01174b6 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01174a6:	83 ec 0c             	sub    $0xc,%esp
f01174a9:	68 fc b0 13 f0       	push   $0xf013b0fc
f01174ae:	e8 5b 98 fe ff       	call   f0100d0e <cprintf>
f01174b3:	83 c4 10             	add    $0x10,%esp
	}
}
f01174b6:	90                   	nop
f01174b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01174ba:	5b                   	pop    %ebx
f01174bb:	5e                   	pop    %esi
f01174bc:	5f                   	pop    %edi
f01174bd:	5d                   	pop    %ebp
f01174be:	c3                   	ret    

f01174bf <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01174bf:	55                   	push   %ebp
f01174c0:	89 e5                	mov    %esp,%ebp
f01174c2:	57                   	push   %edi
f01174c3:	56                   	push   %esi
f01174c4:	53                   	push   %ebx
f01174c5:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01174cb:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01174d0:	84 c0                	test   %al,%al
f01174d2:	0f 84 be 09 00 00    	je     f0117e96 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01174d8:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01174df:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01174e5:	bb 38 b1 13 f0       	mov    $0xf013b138,%ebx
f01174ea:	ba 04 00 00 00       	mov    $0x4,%edx
f01174ef:	89 c7                	mov    %eax,%edi
f01174f1:	89 de                	mov    %ebx,%esi
f01174f3:	89 d1                	mov    %edx,%ecx
f01174f5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01174f7:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01174fd:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117502:	b8 00 00 00 00       	mov    $0x0,%eax
f0117507:	89 d7                	mov    %edx,%edi
f0117509:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011750b:	83 ec 0c             	sub    $0xc,%esp
f011750e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117514:	50                   	push   %eax
f0117515:	e8 56 98 fe ff       	call   f0100d70 <execute_command>
f011751a:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011751d:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117523:	bb f4 b3 13 f0       	mov    $0xf013b3f4,%ebx
f0117528:	ba 0d 00 00 00       	mov    $0xd,%edx
f011752d:	89 c7                	mov    %eax,%edi
f011752f:	89 de                	mov    %ebx,%esi
f0117531:	89 d1                	mov    %edx,%ecx
f0117533:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117535:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011753b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117540:	b0 00                	mov    $0x0,%al
f0117542:	89 d7                	mov    %edx,%edi
f0117544:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117546:	83 ec 0c             	sub    $0xc,%esp
f0117549:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011754f:	50                   	push   %eax
f0117550:	e8 1b 98 fe ff       	call   f0100d70 <execute_command>
f0117555:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117558:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011755e:	bb 58 b4 13 f0       	mov    $0xf013b458,%ebx
f0117563:	ba 17 00 00 00       	mov    $0x17,%edx
f0117568:	89 c7                	mov    %eax,%edi
f011756a:	89 de                	mov    %ebx,%esi
f011756c:	89 d1                	mov    %edx,%ecx
f011756e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117570:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117576:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011757b:	b0 00                	mov    $0x0,%al
f011757d:	89 d7                	mov    %edx,%edi
f011757f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117581:	83 ec 0c             	sub    $0xc,%esp
f0117584:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011758a:	50                   	push   %eax
f011758b:	e8 e0 97 fe ff       	call   f0100d70 <execute_command>
f0117590:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117593:	83 ec 04             	sub    $0x4,%esp
f0117596:	6a 00                	push   $0x0
f0117598:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011759b:	50                   	push   %eax
f011759c:	68 00 10 00 00       	push   $0x1000
f01175a1:	e8 21 2a ff ff       	call   f0109fc7 <envid2env>
f01175a6:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01175a9:	83 ec 04             	sub    $0x4,%esp
f01175ac:	6a 00                	push   $0x0
f01175ae:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01175b1:	50                   	push   %eax
f01175b2:	68 01 10 00 00       	push   $0x1001
f01175b7:	e8 0b 2a ff ff       	call   f0109fc7 <envid2env>
f01175bc:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01175bf:	83 ec 04             	sub    $0x4,%esp
f01175c2:	6a 00                	push   $0x0
f01175c4:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01175c7:	50                   	push   %eax
f01175c8:	68 02 10 00 00       	push   $0x1002
f01175cd:	e8 f5 29 ff ff       	call   f0109fc7 <envid2env>
f01175d2:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01175d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175d8:	85 c0                	test   %eax,%eax
f01175da:	74 0e                	je     f01175ea <test_priority_normal_and_lower+0x12b>
f01175dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175df:	85 c0                	test   %eax,%eax
f01175e1:	74 07                	je     f01175ea <test_priority_normal_and_lower+0x12b>
f01175e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01175e6:	85 c0                	test   %eax,%eax
f01175e8:	75 17                	jne    f0117601 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01175ea:	83 ec 04             	sub    $0x4,%esp
f01175ed:	68 d8 ae 13 f0       	push   $0xf013aed8
f01175f2:	68 eb 00 00 00       	push   $0xeb
f01175f7:	68 f1 ae 13 f0       	push   $0xf013aef1
f01175fc:	e8 04 8c fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117601:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117604:	8b 40 74             	mov    0x74(%eax),%eax
f0117607:	83 f8 14             	cmp    $0x14,%eax
f011760a:	75 16                	jne    f0117622 <test_priority_normal_and_lower+0x163>
f011760c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011760f:	8b 40 74             	mov    0x74(%eax),%eax
f0117612:	83 f8 1e             	cmp    $0x1e,%eax
f0117615:	75 0b                	jne    f0117622 <test_priority_normal_and_lower+0x163>
f0117617:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011761a:	8b 40 74             	mov    0x74(%eax),%eax
f011761d:	83 f8 28             	cmp    $0x28,%eax
f0117620:	74 17                	je     f0117639 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0117622:	83 ec 04             	sub    $0x4,%esp
f0117625:	68 0c af 13 f0       	push   $0xf013af0c
f011762a:	68 ee 00 00 00       	push   $0xee
f011762f:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117634:	e8 cc 8b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117639:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117640:	eb 44                	jmp    f0117686 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117642:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117645:	8b 48 78             	mov    0x78(%eax),%ecx
f0117648:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011764b:	89 d0                	mov    %edx,%eax
f011764d:	01 c0                	add    %eax,%eax
f011764f:	01 d0                	add    %edx,%eax
f0117651:	c1 e0 03             	shl    $0x3,%eax
f0117654:	01 c8                	add    %ecx,%eax
f0117656:	8b 10                	mov    (%eax),%edx
f0117658:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011765b:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117662:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117665:	8b 48 78             	mov    0x78(%eax),%ecx
f0117668:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011766b:	89 d0                	mov    %edx,%eax
f011766d:	01 c0                	add    %eax,%eax
f011766f:	01 d0                	add    %edx,%eax
f0117671:	c1 e0 03             	shl    $0x3,%eax
f0117674:	01 c8                	add    %ecx,%eax
f0117676:	8b 50 08             	mov    0x8(%eax),%edx
f0117679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011767c:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117683:	ff 45 e4             	incl   -0x1c(%ebp)
f0117686:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011768a:	7e b6                	jle    f0117642 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011768c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117693:	eb 44                	jmp    f01176d9 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117695:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117698:	8b 48 78             	mov    0x78(%eax),%ecx
f011769b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011769e:	89 d0                	mov    %edx,%eax
f01176a0:	01 c0                	add    %eax,%eax
f01176a2:	01 d0                	add    %edx,%eax
f01176a4:	c1 e0 03             	shl    $0x3,%eax
f01176a7:	01 c8                	add    %ecx,%eax
f01176a9:	8b 10                	mov    (%eax),%edx
f01176ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176ae:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01176b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176b8:	8b 48 78             	mov    0x78(%eax),%ecx
f01176bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176be:	89 d0                	mov    %edx,%eax
f01176c0:	01 c0                	add    %eax,%eax
f01176c2:	01 d0                	add    %edx,%eax
f01176c4:	c1 e0 03             	shl    $0x3,%eax
f01176c7:	01 c8                	add    %ecx,%eax
f01176c9:	8b 50 08             	mov    0x8(%eax),%edx
f01176cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176cf:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01176d6:	ff 45 e0             	incl   -0x20(%ebp)
f01176d9:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01176dd:	7e b6                	jle    f0117695 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01176df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01176e6:	eb 44                	jmp    f011772c <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01176e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176eb:	8b 48 78             	mov    0x78(%eax),%ecx
f01176ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01176f1:	89 d0                	mov    %edx,%eax
f01176f3:	01 c0                	add    %eax,%eax
f01176f5:	01 d0                	add    %edx,%eax
f01176f7:	c1 e0 03             	shl    $0x3,%eax
f01176fa:	01 c8                	add    %ecx,%eax
f01176fc:	8b 10                	mov    (%eax),%edx
f01176fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117701:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117708:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011770b:	8b 48 78             	mov    0x78(%eax),%ecx
f011770e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117711:	89 d0                	mov    %edx,%eax
f0117713:	01 c0                	add    %eax,%eax
f0117715:	01 d0                	add    %edx,%eax
f0117717:	c1 e0 03             	shl    $0x3,%eax
f011771a:	01 c8                	add    %ecx,%eax
f011771c:	8b 50 08             	mov    0x8(%eax),%edx
f011771f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117722:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117729:	ff 45 dc             	incl   -0x24(%ebp)
f011772c:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117730:	7e b6                	jle    f01176e8 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117732:	e8 22 59 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117737:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011773a:	e8 e8 c5 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011773f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117742:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117745:	83 ec 08             	sub    $0x8,%esp
f0117748:	6a 03                	push   $0x3
f011774a:	50                   	push   %eax
f011774b:	e8 55 3d ff ff       	call   f010b4a5 <set_program_priority>
f0117750:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117753:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117756:	83 ec 08             	sub    $0x8,%esp
f0117759:	6a 03                	push   $0x3
f011775b:	50                   	push   %eax
f011775c:	e8 44 3d ff ff       	call   f010b4a5 <set_program_priority>
f0117761:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117764:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117767:	83 ec 08             	sub    $0x8,%esp
f011776a:	6a 03                	push   $0x3
f011776c:	50                   	push   %eax
f011776d:	e8 33 3d ff ff       	call   f010b4a5 <set_program_priority>
f0117772:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117775:	e8 ad c5 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011777a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011777d:	74 17                	je     f0117796 <test_priority_normal_and_lower+0x2d7>
f011777f:	83 ec 04             	sub    $0x4,%esp
f0117782:	68 58 af 13 f0       	push   $0xf013af58
f0117787:	68 0a 01 00 00       	push   $0x10a
f011778c:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117791:	e8 6f 8a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117796:	e8 be 58 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011779b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011779e:	74 17                	je     f01177b7 <test_priority_normal_and_lower+0x2f8>
f01177a0:	83 ec 04             	sub    $0x4,%esp
f01177a3:	68 58 af 13 f0       	push   $0xf013af58
f01177a8:	68 0b 01 00 00       	push   $0x10b
f01177ad:	68 f1 ae 13 f0       	push   $0xf013aef1
f01177b2:	e8 4e 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01177b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177ba:	8b 40 74             	mov    0x74(%eax),%eax
f01177bd:	83 f8 14             	cmp    $0x14,%eax
f01177c0:	75 16                	jne    f01177d8 <test_priority_normal_and_lower+0x319>
f01177c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177c5:	8b 40 74             	mov    0x74(%eax),%eax
f01177c8:	83 f8 1e             	cmp    $0x1e,%eax
f01177cb:	75 0b                	jne    f01177d8 <test_priority_normal_and_lower+0x319>
f01177cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177d0:	8b 40 74             	mov    0x74(%eax),%eax
f01177d3:	83 f8 28             	cmp    $0x28,%eax
f01177d6:	74 17                	je     f01177ef <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01177d8:	83 ec 04             	sub    $0x4,%esp
f01177db:	68 84 af 13 f0       	push   $0xf013af84
f01177e0:	68 0e 01 00 00       	push   $0x10e
f01177e5:	68 f1 ae 13 f0       	push   $0xf013aef1
f01177ea:	e8 16 8a fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01177ef:	e8 65 58 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01177f4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177f7:	e8 2b c5 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01177fc:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01177ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117802:	83 ec 08             	sub    $0x8,%esp
f0117805:	6a 02                	push   $0x2
f0117807:	50                   	push   %eax
f0117808:	e8 98 3c ff ff       	call   f010b4a5 <set_program_priority>
f011780d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117810:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117813:	83 ec 08             	sub    $0x8,%esp
f0117816:	6a 02                	push   $0x2
f0117818:	50                   	push   %eax
f0117819:	e8 87 3c ff ff       	call   f010b4a5 <set_program_priority>
f011781e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117821:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117824:	83 ec 08             	sub    $0x8,%esp
f0117827:	6a 02                	push   $0x2
f0117829:	50                   	push   %eax
f011782a:	e8 76 3c ff ff       	call   f010b4a5 <set_program_priority>
f011782f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117832:	e8 f0 c4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117837:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011783a:	74 17                	je     f0117853 <test_priority_normal_and_lower+0x394>
f011783c:	83 ec 04             	sub    $0x4,%esp
f011783f:	68 58 af 13 f0       	push   $0xf013af58
f0117844:	68 18 01 00 00       	push   $0x118
f0117849:	68 f1 ae 13 f0       	push   $0xf013aef1
f011784e:	e8 b2 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117853:	e8 01 58 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117858:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011785b:	74 21                	je     f011787e <test_priority_normal_and_lower+0x3bf>
f011785d:	e8 f7 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117862:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117865:	29 c2                	sub    %eax,%edx
f0117867:	89 d0                	mov    %edx,%eax
f0117869:	50                   	push   %eax
f011786a:	68 d8 af 13 f0       	push   $0xf013afd8
f011786f:	68 19 01 00 00       	push   $0x119
f0117874:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117879:	e8 87 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011787e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117881:	8b 40 74             	mov    0x74(%eax),%eax
f0117884:	83 f8 0a             	cmp    $0xa,%eax
f0117887:	75 16                	jne    f011789f <test_priority_normal_and_lower+0x3e0>
f0117889:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011788c:	8b 40 74             	mov    0x74(%eax),%eax
f011788f:	83 f8 0f             	cmp    $0xf,%eax
f0117892:	75 0b                	jne    f011789f <test_priority_normal_and_lower+0x3e0>
f0117894:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117897:	8b 40 74             	mov    0x74(%eax),%eax
f011789a:	83 f8 14             	cmp    $0x14,%eax
f011789d:	74 17                	je     f01178b6 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f011789f:	83 ec 04             	sub    $0x4,%esp
f01178a2:	68 08 b0 13 f0       	push   $0xf013b008
f01178a7:	68 1c 01 00 00       	push   $0x11c
f01178ac:	68 f1 ae 13 f0       	push   $0xf013aef1
f01178b1:	e8 4f 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01178b6:	e8 9e 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01178bb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178be:	e8 64 c4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01178c3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01178c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178c9:	83 ec 08             	sub    $0x8,%esp
f01178cc:	6a 02                	push   $0x2
f01178ce:	50                   	push   %eax
f01178cf:	e8 d1 3b ff ff       	call   f010b4a5 <set_program_priority>
f01178d4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01178d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178da:	83 ec 08             	sub    $0x8,%esp
f01178dd:	6a 02                	push   $0x2
f01178df:	50                   	push   %eax
f01178e0:	e8 c0 3b ff ff       	call   f010b4a5 <set_program_priority>
f01178e5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01178e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178eb:	83 ec 08             	sub    $0x8,%esp
f01178ee:	6a 02                	push   $0x2
f01178f0:	50                   	push   %eax
f01178f1:	e8 af 3b ff ff       	call   f010b4a5 <set_program_priority>
f01178f6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178f9:	e8 29 c4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01178fe:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117901:	74 17                	je     f011791a <test_priority_normal_and_lower+0x45b>
f0117903:	83 ec 04             	sub    $0x4,%esp
f0117906:	68 58 af 13 f0       	push   $0xf013af58
f011790b:	68 26 01 00 00       	push   $0x126
f0117910:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117915:	e8 eb 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011791a:	e8 3a 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011791f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117922:	74 21                	je     f0117945 <test_priority_normal_and_lower+0x486>
f0117924:	e8 30 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117929:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011792c:	29 c2                	sub    %eax,%edx
f011792e:	89 d0                	mov    %edx,%eax
f0117930:	50                   	push   %eax
f0117931:	68 d8 af 13 f0       	push   $0xf013afd8
f0117936:	68 27 01 00 00       	push   $0x127
f011793b:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117940:	e8 c0 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117945:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117948:	8b 40 74             	mov    0x74(%eax),%eax
f011794b:	83 f8 0a             	cmp    $0xa,%eax
f011794e:	75 16                	jne    f0117966 <test_priority_normal_and_lower+0x4a7>
f0117950:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117953:	8b 40 74             	mov    0x74(%eax),%eax
f0117956:	83 f8 0f             	cmp    $0xf,%eax
f0117959:	75 0b                	jne    f0117966 <test_priority_normal_and_lower+0x4a7>
f011795b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011795e:	8b 40 74             	mov    0x74(%eax),%eax
f0117961:	83 f8 0a             	cmp    $0xa,%eax
f0117964:	74 17                	je     f011797d <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117966:	83 ec 04             	sub    $0x4,%esp
f0117969:	68 08 b0 13 f0       	push   $0xf013b008
f011796e:	68 2a 01 00 00       	push   $0x12a
f0117973:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117978:	e8 88 88 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f011797d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117984:	eb 7a                	jmp    f0117a00 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117986:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117989:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117990:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117993:	8b 58 78             	mov    0x78(%eax),%ebx
f0117996:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117999:	89 d0                	mov    %edx,%eax
f011799b:	01 c0                	add    %eax,%eax
f011799d:	01 d0                	add    %edx,%eax
f011799f:	c1 e0 03             	shl    $0x3,%eax
f01179a2:	01 d8                	add    %ebx,%eax
f01179a4:	8b 00                	mov    (%eax),%eax
f01179a6:	39 c1                	cmp    %eax,%ecx
f01179a8:	74 17                	je     f01179c1 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01179aa:	83 ec 04             	sub    $0x4,%esp
f01179ad:	68 c8 b0 13 f0       	push   $0xf013b0c8
f01179b2:	68 2f 01 00 00       	push   $0x12f
f01179b7:	68 f1 ae 13 f0       	push   $0xf013aef1
f01179bc:	e8 44 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01179c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01179c4:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01179cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179ce:	8b 58 78             	mov    0x78(%eax),%ebx
f01179d1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01179d4:	89 d0                	mov    %edx,%eax
f01179d6:	01 c0                	add    %eax,%eax
f01179d8:	01 d0                	add    %edx,%eax
f01179da:	c1 e0 03             	shl    $0x3,%eax
f01179dd:	01 d8                	add    %ebx,%eax
f01179df:	8b 40 08             	mov    0x8(%eax),%eax
f01179e2:	39 c1                	cmp    %eax,%ecx
f01179e4:	74 17                	je     f01179fd <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f01179e6:	83 ec 04             	sub    $0x4,%esp
f01179e9:	68 c8 b0 13 f0       	push   $0xf013b0c8
f01179ee:	68 32 01 00 00       	push   $0x132
f01179f3:	68 f1 ae 13 f0       	push   $0xf013aef1
f01179f8:	e8 08 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01179fd:	ff 45 d8             	incl   -0x28(%ebp)
f0117a00:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117a04:	7e 80                	jle    f0117986 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a06:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117a0d:	eb 7a                	jmp    f0117a89 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a0f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a12:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117a19:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a1c:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a1f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a22:	89 d0                	mov    %edx,%eax
f0117a24:	01 c0                	add    %eax,%eax
f0117a26:	01 d0                	add    %edx,%eax
f0117a28:	c1 e0 03             	shl    $0x3,%eax
f0117a2b:	01 d8                	add    %ebx,%eax
f0117a2d:	8b 00                	mov    (%eax),%eax
f0117a2f:	39 c1                	cmp    %eax,%ecx
f0117a31:	74 17                	je     f0117a4a <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117a33:	83 ec 04             	sub    $0x4,%esp
f0117a36:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117a3b:	68 38 01 00 00       	push   $0x138
f0117a40:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117a45:	e8 bb 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a4d:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117a54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a57:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a5a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a5d:	89 d0                	mov    %edx,%eax
f0117a5f:	01 c0                	add    %eax,%eax
f0117a61:	01 d0                	add    %edx,%eax
f0117a63:	c1 e0 03             	shl    $0x3,%eax
f0117a66:	01 d8                	add    %ebx,%eax
f0117a68:	8b 40 08             	mov    0x8(%eax),%eax
f0117a6b:	39 c1                	cmp    %eax,%ecx
f0117a6d:	74 17                	je     f0117a86 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117a6f:	83 ec 04             	sub    $0x4,%esp
f0117a72:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117a77:	68 3b 01 00 00       	push   $0x13b
f0117a7c:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117a81:	e8 7f 87 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a86:	ff 45 d4             	incl   -0x2c(%ebp)
f0117a89:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117a8d:	7e 80                	jle    f0117a0f <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117a8f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117a96:	eb 7a                	jmp    f0117b12 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117a9b:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117aa2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117aa5:	8b 58 78             	mov    0x78(%eax),%ebx
f0117aa8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117aab:	89 d0                	mov    %edx,%eax
f0117aad:	01 c0                	add    %eax,%eax
f0117aaf:	01 d0                	add    %edx,%eax
f0117ab1:	c1 e0 03             	shl    $0x3,%eax
f0117ab4:	01 d8                	add    %ebx,%eax
f0117ab6:	8b 00                	mov    (%eax),%eax
f0117ab8:	39 c1                	cmp    %eax,%ecx
f0117aba:	74 17                	je     f0117ad3 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117abc:	83 ec 04             	sub    $0x4,%esp
f0117abf:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117ac4:	68 41 01 00 00       	push   $0x141
f0117ac9:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117ace:	e8 32 87 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117ad3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ad6:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117add:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ae0:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ae3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117ae6:	89 d0                	mov    %edx,%eax
f0117ae8:	01 c0                	add    %eax,%eax
f0117aea:	01 d0                	add    %edx,%eax
f0117aec:	c1 e0 03             	shl    $0x3,%eax
f0117aef:	01 d8                	add    %ebx,%eax
f0117af1:	8b 40 08             	mov    0x8(%eax),%eax
f0117af4:	39 c1                	cmp    %eax,%ecx
f0117af6:	74 17                	je     f0117b0f <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117af8:	83 ec 04             	sub    $0x4,%esp
f0117afb:	68 c8 b0 13 f0       	push   $0xf013b0c8
f0117b00:	68 44 01 00 00       	push   $0x144
f0117b05:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117b0a:	e8 f6 86 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b0f:	ff 45 d0             	incl   -0x30(%ebp)
f0117b12:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117b16:	7e 80                	jle    f0117a98 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117b18:	e8 3c 55 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117b1d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b20:	e8 02 c2 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117b25:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117b28:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b2b:	83 ec 08             	sub    $0x8,%esp
f0117b2e:	6a 01                	push   $0x1
f0117b30:	50                   	push   %eax
f0117b31:	e8 6f 39 ff ff       	call   f010b4a5 <set_program_priority>
f0117b36:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117b39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b3c:	83 ec 08             	sub    $0x8,%esp
f0117b3f:	6a 01                	push   $0x1
f0117b41:	50                   	push   %eax
f0117b42:	e8 5e 39 ff ff       	call   f010b4a5 <set_program_priority>
f0117b47:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117b4a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b4d:	83 ec 08             	sub    $0x8,%esp
f0117b50:	6a 01                	push   $0x1
f0117b52:	50                   	push   %eax
f0117b53:	e8 4d 39 ff ff       	call   f010b4a5 <set_program_priority>
f0117b58:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117b5b:	e8 c7 c1 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117b60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117b63:	74 17                	je     f0117b7c <test_priority_normal_and_lower+0x6bd>
f0117b65:	83 ec 04             	sub    $0x4,%esp
f0117b68:	68 58 af 13 f0       	push   $0xf013af58
f0117b6d:	68 4d 01 00 00       	push   $0x14d
f0117b72:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117b77:	e8 89 86 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117b7c:	e8 d8 54 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117b81:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117b84:	83 f8 0d             	cmp    $0xd,%eax
f0117b87:	74 17                	je     f0117ba0 <test_priority_normal_and_lower+0x6e1>
f0117b89:	83 ec 04             	sub    $0x4,%esp
f0117b8c:	68 64 b2 13 f0       	push   $0xf013b264
f0117b91:	68 4e 01 00 00       	push   $0x14e
f0117b96:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117b9b:	e8 65 86 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117ba0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ba3:	8b 40 74             	mov    0x74(%eax),%eax
f0117ba6:	83 f8 05             	cmp    $0x5,%eax
f0117ba9:	75 16                	jne    f0117bc1 <test_priority_normal_and_lower+0x702>
f0117bab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bae:	8b 40 74             	mov    0x74(%eax),%eax
f0117bb1:	83 f8 07             	cmp    $0x7,%eax
f0117bb4:	75 0b                	jne    f0117bc1 <test_priority_normal_and_lower+0x702>
f0117bb6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117bb9:	8b 40 74             	mov    0x74(%eax),%eax
f0117bbc:	83 f8 05             	cmp    $0x5,%eax
f0117bbf:	74 17                	je     f0117bd8 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117bc1:	83 ec 04             	sub    $0x4,%esp
f0117bc4:	68 ac b2 13 f0       	push   $0xf013b2ac
f0117bc9:	68 51 01 00 00       	push   $0x151
f0117bce:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117bd3:	e8 2d 86 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117bd8:	e8 7c 54 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117bdd:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117be0:	e8 42 c1 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117be5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117be8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117beb:	83 ec 08             	sub    $0x8,%esp
f0117bee:	6a 01                	push   $0x1
f0117bf0:	50                   	push   %eax
f0117bf1:	e8 af 38 ff ff       	call   f010b4a5 <set_program_priority>
f0117bf6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117bf9:	e8 29 c1 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117bfe:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c01:	74 17                	je     f0117c1a <test_priority_normal_and_lower+0x75b>
f0117c03:	83 ec 04             	sub    $0x4,%esp
f0117c06:	68 58 af 13 f0       	push   $0xf013af58
f0117c0b:	68 57 01 00 00       	push   $0x157
f0117c10:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117c15:	e8 eb 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117c1a:	e8 3a 54 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117c1f:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117c22:	83 f8 03             	cmp    $0x3,%eax
f0117c25:	74 17                	je     f0117c3e <test_priority_normal_and_lower+0x77f>
f0117c27:	83 ec 04             	sub    $0x4,%esp
f0117c2a:	68 58 af 13 f0       	push   $0xf013af58
f0117c2f:	68 58 01 00 00       	push   $0x158
f0117c34:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117c39:	e8 c7 85 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117c3e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c41:	8b 40 74             	mov    0x74(%eax),%eax
f0117c44:	83 f8 02             	cmp    $0x2,%eax
f0117c47:	75 16                	jne    f0117c5f <test_priority_normal_and_lower+0x7a0>
f0117c49:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c4c:	8b 40 74             	mov    0x74(%eax),%eax
f0117c4f:	83 f8 07             	cmp    $0x7,%eax
f0117c52:	75 0b                	jne    f0117c5f <test_priority_normal_and_lower+0x7a0>
f0117c54:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c57:	8b 40 74             	mov    0x74(%eax),%eax
f0117c5a:	83 f8 05             	cmp    $0x5,%eax
f0117c5d:	74 17                	je     f0117c76 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117c5f:	83 ec 04             	sub    $0x4,%esp
f0117c62:	68 8c b0 13 f0       	push   $0xf013b08c
f0117c67:	68 5b 01 00 00       	push   $0x15b
f0117c6c:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117c71:	e8 8f 85 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117c76:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117c7d:	e9 80 00 00 00       	jmp    f0117d02 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117c82:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117c85:	83 c0 08             	add    $0x8,%eax
f0117c88:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117c8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c92:	8b 58 78             	mov    0x78(%eax),%ebx
f0117c95:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117c98:	89 d0                	mov    %edx,%eax
f0117c9a:	01 c0                	add    %eax,%eax
f0117c9c:	01 d0                	add    %edx,%eax
f0117c9e:	c1 e0 03             	shl    $0x3,%eax
f0117ca1:	01 d8                	add    %ebx,%eax
f0117ca3:	8b 00                	mov    (%eax),%eax
f0117ca5:	39 c1                	cmp    %eax,%ecx
f0117ca7:	74 17                	je     f0117cc0 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117ca9:	83 ec 04             	sub    $0x4,%esp
f0117cac:	68 dc b2 13 f0       	push   $0xf013b2dc
f0117cb1:	68 60 01 00 00       	push   $0x160
f0117cb6:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117cbb:	e8 45 85 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117cc0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117cc3:	83 c0 08             	add    $0x8,%eax
f0117cc6:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117ccd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cd0:	8b 58 78             	mov    0x78(%eax),%ebx
f0117cd3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117cd6:	89 d0                	mov    %edx,%eax
f0117cd8:	01 c0                	add    %eax,%eax
f0117cda:	01 d0                	add    %edx,%eax
f0117cdc:	c1 e0 03             	shl    $0x3,%eax
f0117cdf:	01 d8                	add    %ebx,%eax
f0117ce1:	8b 40 08             	mov    0x8(%eax),%eax
f0117ce4:	39 c1                	cmp    %eax,%ecx
f0117ce6:	74 17                	je     f0117cff <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117ce8:	83 ec 04             	sub    $0x4,%esp
f0117ceb:	68 dc b2 13 f0       	push   $0xf013b2dc
f0117cf0:	68 63 01 00 00       	push   $0x163
f0117cf5:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117cfa:	e8 06 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117cff:	ff 45 cc             	incl   -0x34(%ebp)
f0117d02:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117d06:	0f 8e 76 ff ff ff    	jle    f0117c82 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117d0c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117d13:	e9 80 00 00 00       	jmp    f0117d98 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117d18:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d1b:	83 c0 03             	add    $0x3,%eax
f0117d1e:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117d25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d28:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d2b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d2e:	89 d0                	mov    %edx,%eax
f0117d30:	01 c0                	add    %eax,%eax
f0117d32:	01 d0                	add    %edx,%eax
f0117d34:	c1 e0 03             	shl    $0x3,%eax
f0117d37:	01 d8                	add    %ebx,%eax
f0117d39:	8b 00                	mov    (%eax),%eax
f0117d3b:	39 c1                	cmp    %eax,%ecx
f0117d3d:	74 17                	je     f0117d56 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117d3f:	ff 75 c8             	pushl  -0x38(%ebp)
f0117d42:	68 48 b3 13 f0       	push   $0xf013b348
f0117d47:	68 69 01 00 00       	push   $0x169
f0117d4c:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117d51:	e8 af 84 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117d56:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d59:	83 c0 03             	add    $0x3,%eax
f0117d5c:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117d63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d66:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d69:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d6c:	89 d0                	mov    %edx,%eax
f0117d6e:	01 c0                	add    %eax,%eax
f0117d70:	01 d0                	add    %edx,%eax
f0117d72:	c1 e0 03             	shl    $0x3,%eax
f0117d75:	01 d8                	add    %ebx,%eax
f0117d77:	8b 40 08             	mov    0x8(%eax),%eax
f0117d7a:	39 c1                	cmp    %eax,%ecx
f0117d7c:	74 17                	je     f0117d95 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d7e:	83 ec 04             	sub    $0x4,%esp
f0117d81:	68 dc b2 13 f0       	push   $0xf013b2dc
f0117d86:	68 6c 01 00 00       	push   $0x16c
f0117d8b:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117d90:	e8 70 84 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117d95:	ff 45 c8             	incl   -0x38(%ebp)
f0117d98:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117d9c:	0f 8e 76 ff ff ff    	jle    f0117d18 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117da2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117da9:	e9 80 00 00 00       	jmp    f0117e2e <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117dae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117db1:	83 c0 05             	add    $0x5,%eax
f0117db4:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117dbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dbe:	8b 58 78             	mov    0x78(%eax),%ebx
f0117dc1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117dc4:	89 d0                	mov    %edx,%eax
f0117dc6:	01 c0                	add    %eax,%eax
f0117dc8:	01 d0                	add    %edx,%eax
f0117dca:	c1 e0 03             	shl    $0x3,%eax
f0117dcd:	01 d8                	add    %ebx,%eax
f0117dcf:	8b 00                	mov    (%eax),%eax
f0117dd1:	39 c1                	cmp    %eax,%ecx
f0117dd3:	74 17                	je     f0117dec <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117dd5:	83 ec 04             	sub    $0x4,%esp
f0117dd8:	68 dc b2 13 f0       	push   $0xf013b2dc
f0117ddd:	68 72 01 00 00       	push   $0x172
f0117de2:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117de7:	e8 19 84 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117dec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117def:	83 c0 05             	add    $0x5,%eax
f0117df2:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117df9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dfc:	8b 58 78             	mov    0x78(%eax),%ebx
f0117dff:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e02:	89 d0                	mov    %edx,%eax
f0117e04:	01 c0                	add    %eax,%eax
f0117e06:	01 d0                	add    %edx,%eax
f0117e08:	c1 e0 03             	shl    $0x3,%eax
f0117e0b:	01 d8                	add    %ebx,%eax
f0117e0d:	8b 40 08             	mov    0x8(%eax),%eax
f0117e10:	39 c1                	cmp    %eax,%ecx
f0117e12:	74 17                	je     f0117e2b <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e14:	83 ec 04             	sub    $0x4,%esp
f0117e17:	68 dc b2 13 f0       	push   $0xf013b2dc
f0117e1c:	68 75 01 00 00       	push   $0x175
f0117e21:	68 f1 ae 13 f0       	push   $0xf013aef1
f0117e26:	e8 da 83 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117e2b:	ff 45 c4             	incl   -0x3c(%ebp)
f0117e2e:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117e32:	0f 8e 76 ff ff ff    	jle    f0117dae <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117e38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e3b:	83 ec 08             	sub    $0x8,%esp
f0117e3e:	6a 05                	push   $0x5
f0117e40:	50                   	push   %eax
f0117e41:	e8 5f 36 ff ff       	call   f010b4a5 <set_program_priority>
f0117e46:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117e49:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e4c:	83 ec 08             	sub    $0x8,%esp
f0117e4f:	6a 05                	push   $0x5
f0117e51:	50                   	push   %eax
f0117e52:	e8 4e 36 ff ff       	call   f010b4a5 <set_program_priority>
f0117e57:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117e5a:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117e61:	75 6e 61 
f0117e64:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117e6b:	6c 00 00 
f0117e6e:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117e74:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117e79:	b8 00 00 00 00       	mov    $0x0,%eax
f0117e7e:	89 d7                	mov    %edx,%edi
f0117e80:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117e82:	83 ec 0c             	sub    $0xc,%esp
f0117e85:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117e8b:	50                   	push   %eax
f0117e8c:	e8 df 8e fe ff       	call   f0100d70 <execute_command>
f0117e91:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117e94:	eb 10                	jmp    f0117ea6 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117e96:	83 ec 0c             	sub    $0xc,%esp
f0117e99:	68 b8 b3 13 f0       	push   $0xf013b3b8
f0117e9e:	e8 6b 8e fe ff       	call   f0100d0e <cprintf>
f0117ea3:	83 c4 10             	add    $0x10,%esp
	}
}
f0117ea6:	90                   	nop
f0117ea7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117eaa:	5b                   	pop    %ebx
f0117eab:	5e                   	pop    %esi
f0117eac:	5f                   	pop    %edi
f0117ead:	5d                   	pop    %ebp
f0117eae:	c3                   	ret    

f0117eaf <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117eaf:	55                   	push   %ebp
f0117eb0:	89 e5                	mov    %esp,%ebp
f0117eb2:	a1 5c a1 86 f0       	mov    0xf086a15c,%eax
f0117eb7:	83 f8 03             	cmp    $0x3,%eax
f0117eba:	75 04                	jne    f0117ec0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117ebc:	b0 01                	mov    $0x1,%al
f0117ebe:	eb 02                	jmp    f0117ec2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117ec0:	b0 00                	mov    $0x0,%al
f0117ec2:	5d                   	pop    %ebp
f0117ec3:	c3                   	ret    

f0117ec4 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117ec4:	55                   	push   %ebp
f0117ec5:	89 e5                	mov    %esp,%ebp
f0117ec7:	57                   	push   %edi
f0117ec8:	53                   	push   %ebx
f0117ec9:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117ecf:	83 ec 0c             	sub    $0xc,%esp
f0117ed2:	68 bc b4 13 f0       	push   $0xf013b4bc
f0117ed7:	e8 32 8e fe ff       	call   f0100d0e <cprintf>
f0117edc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117edf:	83 ec 0c             	sub    $0xc,%esp
f0117ee2:	68 ec b4 13 f0       	push   $0xf013b4ec
f0117ee7:	e8 22 8e fe ff       	call   f0100d0e <cprintf>
f0117eec:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117eef:	83 ec 0c             	sub    $0xc,%esp
f0117ef2:	68 bc b4 13 f0       	push   $0xf013b4bc
f0117ef7:	e8 12 8e fe ff       	call   f0100d0e <cprintf>
f0117efc:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117eff:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117f03:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117f07:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117f0d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117f13:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117f1a:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117f21:	e8 33 51 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117f26:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117f29:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117f2f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117f34:	b8 00 00 00 00       	mov    $0x0,%eax
f0117f39:	89 d7                	mov    %edx,%edi
f0117f3b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117f3d:	e8 17 51 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117f42:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117f45:	e8 dd bd fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0117f4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117f4d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117f54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117f5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f62:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f67:	f7 75 d4             	divl   -0x2c(%ebp)
f0117f6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f6d:	29 d0                	sub    %edx,%eax
f0117f6f:	89 c1                	mov    %eax,%ecx
f0117f71:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117f78:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0117f7d:	0f b6 d0             	movzbl %al,%edx
f0117f80:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117f83:	01 d0                	add    %edx,%eax
f0117f85:	48                   	dec    %eax
f0117f86:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117f89:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117f8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f91:	f7 75 cc             	divl   -0x34(%ebp)
f0117f94:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117f97:	29 d0                	sub    %edx,%eax
f0117f99:	01 c1                	add    %eax,%ecx
f0117f9b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117fa2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0117fa7:	0f b6 c0             	movzbl %al,%eax
f0117faa:	c1 e0 04             	shl    $0x4,%eax
f0117fad:	89 c2                	mov    %eax,%edx
f0117faf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117fb2:	01 d0                	add    %edx,%eax
f0117fb4:	48                   	dec    %eax
f0117fb5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117fb8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117fbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fc0:	f7 75 c4             	divl   -0x3c(%ebp)
f0117fc3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117fc6:	29 d0                	sub    %edx,%eax
f0117fc8:	01 c8                	add    %ecx,%eax
f0117fca:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117fcf:	29 c2                	sub    %eax,%edx
f0117fd1:	89 d0                	mov    %edx,%eax
f0117fd3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117fd6:	83 ec 0c             	sub    $0xc,%esp
f0117fd9:	ff 75 bc             	pushl  -0x44(%ebp)
f0117fdc:	e8 89 f9 fe ff       	call   f010796a <kmalloc>
f0117fe1:	83 c4 10             	add    $0x10,%esp
f0117fe4:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117fea:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117ff0:	85 c0                	test   %eax,%eax
f0117ff2:	74 14                	je     f0118008 <test_kmalloc+0x144>
f0117ff4:	83 ec 04             	sub    $0x4,%esp
f0117ff7:	68 48 b5 13 f0       	push   $0xf013b548
f0117ffc:	6a 40                	push   $0x40
f0117ffe:	68 7a b5 13 f0       	push   $0xf013b57a
f0118003:	e8 fd 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118008:	e8 1a bd fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011800d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118010:	74 14                	je     f0118026 <test_kmalloc+0x162>
f0118012:	83 ec 04             	sub    $0x4,%esp
f0118015:	68 94 b5 13 f0       	push   $0xf013b594
f011801a:	6a 41                	push   $0x41
f011801c:	68 7a b5 13 f0       	push   $0xf013b57a
f0118021:	e8 df 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118026:	e8 2e 50 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011802b:	89 c2                	mov    %eax,%edx
f011802d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118030:	39 c2                	cmp    %eax,%edx
f0118032:	74 14                	je     f0118048 <test_kmalloc+0x184>
f0118034:	83 ec 04             	sub    $0x4,%esp
f0118037:	68 fc b5 13 f0       	push   $0xf013b5fc
f011803c:	6a 42                	push   $0x42
f011803e:	68 7a b5 13 f0       	push   $0xf013b57a
f0118043:	e8 bd 81 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118048:	83 ec 0c             	sub    $0xc,%esp
f011804b:	68 3c b6 13 f0       	push   $0xf013b63c
f0118050:	e8 b9 8c fe ff       	call   f0100d0e <cprintf>
f0118055:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118058:	e8 fc 4f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011805d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118060:	e8 c2 bc fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118065:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118068:	83 ec 0c             	sub    $0xc,%esp
f011806b:	68 00 fc 1f 00       	push   $0x1ffc00
f0118070:	e8 f5 f8 fe ff       	call   f010796a <kmalloc>
f0118075:	83 c4 10             	add    $0x10,%esp
f0118078:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011807e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118084:	89 c1                	mov    %eax,%ecx
f0118086:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011808d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118090:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118095:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118098:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011809b:	ba 00 00 00 00       	mov    $0x0,%edx
f01180a0:	f7 75 b8             	divl   -0x48(%ebp)
f01180a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180a6:	29 d0                	sub    %edx,%eax
f01180a8:	89 c3                	mov    %eax,%ebx
f01180aa:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01180b1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01180b6:	0f b6 d0             	movzbl %al,%edx
f01180b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180bc:	01 d0                	add    %edx,%eax
f01180be:	48                   	dec    %eax
f01180bf:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01180c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01180ca:	f7 75 b0             	divl   -0x50(%ebp)
f01180cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180d0:	29 d0                	sub    %edx,%eax
f01180d2:	01 c3                	add    %eax,%ebx
f01180d4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01180db:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01180e0:	0f b6 c0             	movzbl %al,%eax
f01180e3:	c1 e0 04             	shl    $0x4,%eax
f01180e6:	89 c2                	mov    %eax,%edx
f01180e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01180eb:	01 d0                	add    %edx,%eax
f01180ed:	48                   	dec    %eax
f01180ee:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01180f1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01180f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01180f9:	f7 75 a8             	divl   -0x58(%ebp)
f01180fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01180ff:	29 d0                	sub    %edx,%eax
f0118101:	01 d8                	add    %ebx,%eax
f0118103:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118108:	39 c1                	cmp    %eax,%ecx
f011810a:	74 14                	je     f0118120 <test_kmalloc+0x25c>
f011810c:	83 ec 04             	sub    $0x4,%esp
f011810f:	68 60 b6 13 f0       	push   $0xf013b660
f0118114:	6a 49                	push   $0x49
f0118116:	68 7a b5 13 f0       	push   $0xf013b57a
f011811b:	e8 e5 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118120:	e8 02 bc fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118125:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118128:	74 14                	je     f011813e <test_kmalloc+0x27a>
f011812a:	83 ec 04             	sub    $0x4,%esp
f011812d:	68 94 b5 13 f0       	push   $0xf013b594
f0118132:	6a 4a                	push   $0x4a
f0118134:	68 7a b5 13 f0       	push   $0xf013b57a
f0118139:	e8 c7 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011813e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118141:	e8 13 4f ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118146:	29 c3                	sub    %eax,%ebx
f0118148:	89 d8                	mov    %ebx,%eax
f011814a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011814f:	74 14                	je     f0118165 <test_kmalloc+0x2a1>
f0118151:	83 ec 04             	sub    $0x4,%esp
f0118154:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118159:	6a 4b                	push   $0x4b
f011815b:	68 7a b5 13 f0       	push   $0xf013b57a
f0118160:	e8 a0 80 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118165:	e8 ef 4e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011816a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011816d:	e8 b5 bb fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118172:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118175:	83 ec 0c             	sub    $0xc,%esp
f0118178:	68 00 fc 1f 00       	push   $0x1ffc00
f011817d:	e8 e8 f7 fe ff       	call   f010796a <kmalloc>
f0118182:	83 c4 10             	add    $0x10,%esp
f0118185:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011818b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118191:	89 c1                	mov    %eax,%ecx
f0118193:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011819a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011819d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181a2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01181a5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01181ad:	f7 75 a0             	divl   -0x60(%ebp)
f01181b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181b3:	29 d0                	sub    %edx,%eax
f01181b5:	89 c3                	mov    %eax,%ebx
f01181b7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01181be:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01181c3:	0f b6 d0             	movzbl %al,%edx
f01181c6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01181c9:	01 d0                	add    %edx,%eax
f01181cb:	48                   	dec    %eax
f01181cc:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01181cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01181d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01181d7:	f7 75 98             	divl   -0x68(%ebp)
f01181da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01181dd:	29 d0                	sub    %edx,%eax
f01181df:	01 c3                	add    %eax,%ebx
f01181e1:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01181e8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01181ed:	0f b6 c0             	movzbl %al,%eax
f01181f0:	c1 e0 04             	shl    $0x4,%eax
f01181f3:	89 c2                	mov    %eax,%edx
f01181f5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01181f8:	01 d0                	add    %edx,%eax
f01181fa:	48                   	dec    %eax
f01181fb:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01181fe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118201:	ba 00 00 00 00       	mov    $0x0,%edx
f0118206:	f7 75 90             	divl   -0x70(%ebp)
f0118209:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011820c:	29 d0                	sub    %edx,%eax
f011820e:	01 d8                	add    %ebx,%eax
f0118210:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118215:	39 c1                	cmp    %eax,%ecx
f0118217:	74 14                	je     f011822d <test_kmalloc+0x369>
f0118219:	83 ec 04             	sub    $0x4,%esp
f011821c:	68 60 b6 13 f0       	push   $0xf013b660
f0118221:	6a 51                	push   $0x51
f0118223:	68 7a b5 13 f0       	push   $0xf013b57a
f0118228:	e8 d8 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011822d:	e8 f5 ba fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118232:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118235:	74 14                	je     f011824b <test_kmalloc+0x387>
f0118237:	83 ec 04             	sub    $0x4,%esp
f011823a:	68 94 b5 13 f0       	push   $0xf013b594
f011823f:	6a 52                	push   $0x52
f0118241:	68 7a b5 13 f0       	push   $0xf013b57a
f0118246:	e8 ba 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011824b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011824e:	e8 06 4e ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118253:	29 c3                	sub    %eax,%ebx
f0118255:	89 d8                	mov    %ebx,%eax
f0118257:	3d 00 02 00 00       	cmp    $0x200,%eax
f011825c:	74 14                	je     f0118272 <test_kmalloc+0x3ae>
f011825e:	83 ec 04             	sub    $0x4,%esp
f0118261:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118266:	6a 53                	push   $0x53
f0118268:	68 7a b5 13 f0       	push   $0xf013b57a
f011826d:	e8 93 7f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118272:	e8 e2 4d ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118277:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011827a:	e8 a8 ba fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011827f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118282:	83 ec 0c             	sub    $0xc,%esp
f0118285:	68 00 08 00 00       	push   $0x800
f011828a:	e8 db f6 fe ff       	call   f010796a <kmalloc>
f011828f:	83 c4 10             	add    $0x10,%esp
f0118292:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118298:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011829e:	89 c1                	mov    %eax,%ecx
f01182a0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01182a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01182aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182af:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01182b2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182ba:	f7 75 88             	divl   -0x78(%ebp)
f01182bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182c0:	29 d0                	sub    %edx,%eax
f01182c2:	89 c3                	mov    %eax,%ebx
f01182c4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01182cb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01182d0:	0f b6 d0             	movzbl %al,%edx
f01182d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01182d6:	01 d0                	add    %edx,%eax
f01182d8:	48                   	dec    %eax
f01182d9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01182df:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01182e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182ea:	f7 75 80             	divl   -0x80(%ebp)
f01182ed:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01182f3:	29 d0                	sub    %edx,%eax
f01182f5:	01 c3                	add    %eax,%ebx
f01182f7:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01182fe:	10 00 00 
f0118301:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118306:	0f b6 c0             	movzbl %al,%eax
f0118309:	c1 e0 04             	shl    $0x4,%eax
f011830c:	89 c2                	mov    %eax,%edx
f011830e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118314:	01 d0                	add    %edx,%eax
f0118316:	48                   	dec    %eax
f0118317:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011831d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118323:	ba 00 00 00 00       	mov    $0x0,%edx
f0118328:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011832e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118334:	29 d0                	sub    %edx,%eax
f0118336:	01 d8                	add    %ebx,%eax
f0118338:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011833d:	39 c1                	cmp    %eax,%ecx
f011833f:	74 14                	je     f0118355 <test_kmalloc+0x491>
f0118341:	83 ec 04             	sub    $0x4,%esp
f0118344:	68 60 b6 13 f0       	push   $0xf013b660
f0118349:	6a 59                	push   $0x59
f011834b:	68 7a b5 13 f0       	push   $0xf013b57a
f0118350:	e8 b0 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118355:	e8 cd b9 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011835a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011835d:	74 14                	je     f0118373 <test_kmalloc+0x4af>
f011835f:	83 ec 04             	sub    $0x4,%esp
f0118362:	68 94 b5 13 f0       	push   $0xf013b594
f0118367:	6a 5a                	push   $0x5a
f0118369:	68 7a b5 13 f0       	push   $0xf013b57a
f011836e:	e8 92 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118373:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118376:	e8 de 4c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011837b:	29 c3                	sub    %eax,%ebx
f011837d:	89 d8                	mov    %ebx,%eax
f011837f:	83 f8 01             	cmp    $0x1,%eax
f0118382:	74 14                	je     f0118398 <test_kmalloc+0x4d4>
f0118384:	83 ec 04             	sub    $0x4,%esp
f0118387:	68 fc b5 13 f0       	push   $0xf013b5fc
f011838c:	6a 5b                	push   $0x5b
f011838e:	68 7a b5 13 f0       	push   $0xf013b57a
f0118393:	e8 6d 7e fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118398:	e8 bc 4c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011839d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183a0:	e8 82 b9 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01183a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01183a8:	83 ec 0c             	sub    $0xc,%esp
f01183ab:	68 00 08 00 00       	push   $0x800
f01183b0:	e8 b5 f5 fe ff       	call   f010796a <kmalloc>
f01183b5:	83 c4 10             	add    $0x10,%esp
f01183b8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01183be:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01183c4:	89 c1                	mov    %eax,%ecx
f01183c6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01183cd:	10 00 00 
f01183d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01183d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183db:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01183e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01183e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183ec:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01183f2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01183f8:	29 d0                	sub    %edx,%eax
f01183fa:	89 c3                	mov    %eax,%ebx
f01183fc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118403:	10 00 00 
f0118406:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011840b:	0f b6 d0             	movzbl %al,%edx
f011840e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118414:	01 d0                	add    %edx,%eax
f0118416:	48                   	dec    %eax
f0118417:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011841d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118423:	ba 00 00 00 00       	mov    $0x0,%edx
f0118428:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011842e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118434:	29 d0                	sub    %edx,%eax
f0118436:	01 c3                	add    %eax,%ebx
f0118438:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011843f:	10 00 00 
f0118442:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118447:	0f b6 c0             	movzbl %al,%eax
f011844a:	c1 e0 04             	shl    $0x4,%eax
f011844d:	89 c2                	mov    %eax,%edx
f011844f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118455:	01 d0                	add    %edx,%eax
f0118457:	48                   	dec    %eax
f0118458:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011845e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118464:	ba 00 00 00 00       	mov    $0x0,%edx
f0118469:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011846f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118475:	29 d0                	sub    %edx,%eax
f0118477:	01 d8                	add    %ebx,%eax
f0118479:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011847e:	39 c1                	cmp    %eax,%ecx
f0118480:	74 14                	je     f0118496 <test_kmalloc+0x5d2>
f0118482:	83 ec 04             	sub    $0x4,%esp
f0118485:	68 60 b6 13 f0       	push   $0xf013b660
f011848a:	6a 61                	push   $0x61
f011848c:	68 7a b5 13 f0       	push   $0xf013b57a
f0118491:	e8 6f 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118496:	e8 8c b8 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011849b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011849e:	74 14                	je     f01184b4 <test_kmalloc+0x5f0>
f01184a0:	83 ec 04             	sub    $0x4,%esp
f01184a3:	68 94 b5 13 f0       	push   $0xf013b594
f01184a8:	6a 62                	push   $0x62
f01184aa:	68 7a b5 13 f0       	push   $0xf013b57a
f01184af:	e8 51 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01184b4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01184b7:	e8 9d 4b ff ff       	call   f010d059 <sys_calculate_free_frames>
f01184bc:	29 c3                	sub    %eax,%ebx
f01184be:	89 d8                	mov    %ebx,%eax
f01184c0:	83 f8 01             	cmp    $0x1,%eax
f01184c3:	74 14                	je     f01184d9 <test_kmalloc+0x615>
f01184c5:	83 ec 04             	sub    $0x4,%esp
f01184c8:	68 fc b5 13 f0       	push   $0xf013b5fc
f01184cd:	6a 63                	push   $0x63
f01184cf:	68 7a b5 13 f0       	push   $0xf013b57a
f01184d4:	e8 2c 7d fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01184d9:	e8 7b 4b ff ff       	call   f010d059 <sys_calculate_free_frames>
f01184de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184e1:	e8 41 b8 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01184e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01184e9:	83 ec 0c             	sub    $0xc,%esp
f01184ec:	68 00 1c 00 00       	push   $0x1c00
f01184f1:	e8 74 f4 fe ff       	call   f010796a <kmalloc>
f01184f6:	83 c4 10             	add    $0x10,%esp
f01184f9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01184ff:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118505:	89 c1                	mov    %eax,%ecx
f0118507:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011850e:	10 00 00 
f0118511:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118517:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011851c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118522:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118528:	ba 00 00 00 00       	mov    $0x0,%edx
f011852d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118533:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118539:	29 d0                	sub    %edx,%eax
f011853b:	89 c3                	mov    %eax,%ebx
f011853d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118544:	10 00 00 
f0118547:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011854c:	0f b6 d0             	movzbl %al,%edx
f011854f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118555:	01 d0                	add    %edx,%eax
f0118557:	48                   	dec    %eax
f0118558:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011855e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118564:	ba 00 00 00 00       	mov    $0x0,%edx
f0118569:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011856f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118575:	29 d0                	sub    %edx,%eax
f0118577:	01 c3                	add    %eax,%ebx
f0118579:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118580:	10 00 00 
f0118583:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118588:	0f b6 c0             	movzbl %al,%eax
f011858b:	c1 e0 04             	shl    $0x4,%eax
f011858e:	89 c2                	mov    %eax,%edx
f0118590:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118596:	01 d0                	add    %edx,%eax
f0118598:	48                   	dec    %eax
f0118599:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011859f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01185aa:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01185b0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185b6:	29 d0                	sub    %edx,%eax
f01185b8:	01 d8                	add    %ebx,%eax
f01185ba:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01185bf:	39 c1                	cmp    %eax,%ecx
f01185c1:	74 14                	je     f01185d7 <test_kmalloc+0x713>
f01185c3:	83 ec 04             	sub    $0x4,%esp
f01185c6:	68 60 b6 13 f0       	push   $0xf013b660
f01185cb:	6a 69                	push   $0x69
f01185cd:	68 7a b5 13 f0       	push   $0xf013b57a
f01185d2:	e8 2e 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185d7:	e8 4b b7 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01185dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01185df:	74 14                	je     f01185f5 <test_kmalloc+0x731>
f01185e1:	83 ec 04             	sub    $0x4,%esp
f01185e4:	68 94 b5 13 f0       	push   $0xf013b594
f01185e9:	6a 6a                	push   $0x6a
f01185eb:	68 7a b5 13 f0       	push   $0xf013b57a
f01185f0:	e8 10 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01185f5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01185f8:	e8 5c 4a ff ff       	call   f010d059 <sys_calculate_free_frames>
f01185fd:	29 c3                	sub    %eax,%ebx
f01185ff:	89 d8                	mov    %ebx,%eax
f0118601:	83 f8 02             	cmp    $0x2,%eax
f0118604:	74 14                	je     f011861a <test_kmalloc+0x756>
f0118606:	83 ec 04             	sub    $0x4,%esp
f0118609:	68 fc b5 13 f0       	push   $0xf013b5fc
f011860e:	6a 6b                	push   $0x6b
f0118610:	68 7a b5 13 f0       	push   $0xf013b57a
f0118615:	e8 eb 7b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011861a:	e8 3a 4a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011861f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118622:	e8 00 b7 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118627:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011862a:	83 ec 0c             	sub    $0xc,%esp
f011862d:	68 00 fc 2f 00       	push   $0x2ffc00
f0118632:	e8 33 f3 fe ff       	call   f010796a <kmalloc>
f0118637:	83 c4 10             	add    $0x10,%esp
f011863a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118640:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118646:	89 c1                	mov    %eax,%ecx
f0118648:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011864f:	10 00 00 
f0118652:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118658:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011865d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118663:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118669:	ba 00 00 00 00       	mov    $0x0,%edx
f011866e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118674:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011867a:	29 d0                	sub    %edx,%eax
f011867c:	89 c3                	mov    %eax,%ebx
f011867e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118685:	10 00 00 
f0118688:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011868d:	0f b6 d0             	movzbl %al,%edx
f0118690:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118696:	01 d0                	add    %edx,%eax
f0118698:	48                   	dec    %eax
f0118699:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011869f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01186aa:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01186b0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186b6:	29 d0                	sub    %edx,%eax
f01186b8:	01 c3                	add    %eax,%ebx
f01186ba:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01186c1:	10 00 00 
f01186c4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01186c9:	0f b6 c0             	movzbl %al,%eax
f01186cc:	c1 e0 04             	shl    $0x4,%eax
f01186cf:	89 c2                	mov    %eax,%edx
f01186d1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01186d7:	01 d0                	add    %edx,%eax
f01186d9:	48                   	dec    %eax
f01186da:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01186e0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01186e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01186eb:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01186f1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01186f7:	29 d0                	sub    %edx,%eax
f01186f9:	01 d8                	add    %ebx,%eax
f01186fb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118700:	39 c1                	cmp    %eax,%ecx
f0118702:	74 14                	je     f0118718 <test_kmalloc+0x854>
f0118704:	83 ec 04             	sub    $0x4,%esp
f0118707:	68 60 b6 13 f0       	push   $0xf013b660
f011870c:	6a 71                	push   $0x71
f011870e:	68 7a b5 13 f0       	push   $0xf013b57a
f0118713:	e8 ed 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118718:	e8 0a b6 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011871d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118720:	74 14                	je     f0118736 <test_kmalloc+0x872>
f0118722:	83 ec 04             	sub    $0x4,%esp
f0118725:	68 94 b5 13 f0       	push   $0xf013b594
f011872a:	6a 72                	push   $0x72
f011872c:	68 7a b5 13 f0       	push   $0xf013b57a
f0118731:	e8 cf 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118736:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118739:	e8 1b 49 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011873e:	29 c3                	sub    %eax,%ebx
f0118740:	89 d8                	mov    %ebx,%eax
f0118742:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118747:	74 14                	je     f011875d <test_kmalloc+0x899>
f0118749:	83 ec 04             	sub    $0x4,%esp
f011874c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118751:	6a 73                	push   $0x73
f0118753:	68 7a b5 13 f0       	push   $0xf013b57a
f0118758:	e8 a8 7a fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011875d:	e8 f7 48 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118762:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118765:	e8 bd b5 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011876a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011876d:	83 ec 0c             	sub    $0xc,%esp
f0118770:	68 00 fc 5f 00       	push   $0x5ffc00
f0118775:	e8 f0 f1 fe ff       	call   f010796a <kmalloc>
f011877a:	83 c4 10             	add    $0x10,%esp
f011877d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118783:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118789:	89 c1                	mov    %eax,%ecx
f011878b:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118792:	10 00 00 
f0118795:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011879b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187a0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01187a6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01187b1:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01187b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187bd:	29 d0                	sub    %edx,%eax
f01187bf:	89 c3                	mov    %eax,%ebx
f01187c1:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01187c8:	10 00 00 
f01187cb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01187d0:	0f b6 d0             	movzbl %al,%edx
f01187d3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01187d9:	01 d0                	add    %edx,%eax
f01187db:	48                   	dec    %eax
f01187dc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01187e2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01187e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01187ed:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01187f3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01187f9:	29 d0                	sub    %edx,%eax
f01187fb:	01 c3                	add    %eax,%ebx
f01187fd:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118804:	10 00 00 
f0118807:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011880c:	0f b6 c0             	movzbl %al,%eax
f011880f:	c1 e0 04             	shl    $0x4,%eax
f0118812:	89 c2                	mov    %eax,%edx
f0118814:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011881a:	01 d0                	add    %edx,%eax
f011881c:	48                   	dec    %eax
f011881d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118823:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118829:	ba 00 00 00 00       	mov    $0x0,%edx
f011882e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118834:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011883a:	29 d0                	sub    %edx,%eax
f011883c:	01 d8                	add    %ebx,%eax
f011883e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118843:	39 c1                	cmp    %eax,%ecx
f0118845:	74 14                	je     f011885b <test_kmalloc+0x997>
f0118847:	83 ec 04             	sub    $0x4,%esp
f011884a:	68 60 b6 13 f0       	push   $0xf013b660
f011884f:	6a 79                	push   $0x79
f0118851:	68 7a b5 13 f0       	push   $0xf013b57a
f0118856:	e8 aa 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011885b:	e8 c7 b4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118860:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118863:	74 14                	je     f0118879 <test_kmalloc+0x9b5>
f0118865:	83 ec 04             	sub    $0x4,%esp
f0118868:	68 94 b5 13 f0       	push   $0xf013b594
f011886d:	6a 7a                	push   $0x7a
f011886f:	68 7a b5 13 f0       	push   $0xf013b57a
f0118874:	e8 8c 79 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118879:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011887c:	e8 d8 47 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118881:	29 c3                	sub    %eax,%ebx
f0118883:	89 d8                	mov    %ebx,%eax
f0118885:	3d 00 06 00 00       	cmp    $0x600,%eax
f011888a:	74 14                	je     f01188a0 <test_kmalloc+0x9dc>
f011888c:	83 ec 04             	sub    $0x4,%esp
f011888f:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118894:	6a 7b                	push   $0x7b
f0118896:	68 7a b5 13 f0       	push   $0xf013b57a
f011889b:	e8 65 79 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01188a0:	e8 b4 47 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01188a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188a8:	e8 7a b4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01188ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01188b0:	83 ec 0c             	sub    $0xc,%esp
f01188b3:	68 00 38 00 00       	push   $0x3800
f01188b8:	e8 ad f0 fe ff       	call   f010796a <kmalloc>
f01188bd:	83 c4 10             	add    $0x10,%esp
f01188c0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188c6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01188cc:	89 c1                	mov    %eax,%ecx
f01188ce:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01188d5:	10 00 00 
f01188d8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01188de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01188e3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01188e9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01188ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01188f4:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01188fa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118900:	29 d0                	sub    %edx,%eax
f0118902:	89 c3                	mov    %eax,%ebx
f0118904:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011890b:	10 00 00 
f011890e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118913:	0f b6 d0             	movzbl %al,%edx
f0118916:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011891c:	01 d0                	add    %edx,%eax
f011891e:	48                   	dec    %eax
f011891f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118925:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011892b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118930:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118936:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011893c:	29 d0                	sub    %edx,%eax
f011893e:	01 c3                	add    %eax,%ebx
f0118940:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118947:	10 00 00 
f011894a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011894f:	0f b6 c0             	movzbl %al,%eax
f0118952:	c1 e0 04             	shl    $0x4,%eax
f0118955:	89 c2                	mov    %eax,%edx
f0118957:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011895d:	01 d0                	add    %edx,%eax
f011895f:	48                   	dec    %eax
f0118960:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118966:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011896c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118971:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118977:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011897d:	29 d0                	sub    %edx,%eax
f011897f:	01 d8                	add    %ebx,%eax
f0118981:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118986:	39 c1                	cmp    %eax,%ecx
f0118988:	74 17                	je     f01189a1 <test_kmalloc+0xadd>
f011898a:	83 ec 04             	sub    $0x4,%esp
f011898d:	68 60 b6 13 f0       	push   $0xf013b660
f0118992:	68 81 00 00 00       	push   $0x81
f0118997:	68 7a b5 13 f0       	push   $0xf013b57a
f011899c:	e8 64 78 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189a1:	e8 81 b3 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01189a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189a9:	74 17                	je     f01189c2 <test_kmalloc+0xafe>
f01189ab:	83 ec 04             	sub    $0x4,%esp
f01189ae:	68 94 b5 13 f0       	push   $0xf013b594
f01189b3:	68 82 00 00 00       	push   $0x82
f01189b8:	68 7a b5 13 f0       	push   $0xf013b57a
f01189bd:	e8 43 78 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189c2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189c5:	e8 8f 46 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01189ca:	29 c3                	sub    %eax,%ebx
f01189cc:	89 d8                	mov    %ebx,%eax
f01189ce:	83 f8 04             	cmp    $0x4,%eax
f01189d1:	74 17                	je     f01189ea <test_kmalloc+0xb26>
f01189d3:	83 ec 04             	sub    $0x4,%esp
f01189d6:	68 fc b5 13 f0       	push   $0xf013b5fc
f01189db:	68 83 00 00 00       	push   $0x83
f01189e0:	68 7a b5 13 f0       	push   $0xf013b57a
f01189e5:	e8 1b 78 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01189ea:	83 ec 0c             	sub    $0xc,%esp
f01189ed:	68 c6 b6 13 f0       	push   $0xf013b6c6
f01189f2:	e8 17 83 fe ff       	call   f0100d0e <cprintf>
f01189f7:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01189fa:	e8 5a 46 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01189ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118a02:	e8 20 b3 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118a07:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118a0a:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118a11:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118a14:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118a1a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118a20:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a26:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a29:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118a2b:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118a31:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a37:	01 c2                	add    %eax,%edx
f0118a39:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a3c:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118a3e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118a44:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118a4a:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118a51:	fd 0f 00 
			shortArr[0] = minShort;
f0118a54:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a5d:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118a60:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118a66:	01 c0                	add    %eax,%eax
f0118a68:	89 c2                	mov    %eax,%edx
f0118a6a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118a70:	01 c2                	add    %eax,%edx
f0118a72:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118a76:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118a79:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118a7f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118a85:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118a8c:	01 00 00 
			intArr[0] = minInt;
f0118a8f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118a95:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118a98:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118a9a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118aa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118aa7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118aad:	01 c2                	add    %eax,%edx
f0118aaf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118ab2:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118ab4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118aba:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118ac0:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0118ac7:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118aca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ad0:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118ad3:	88 10                	mov    %dl,(%eax)
f0118ad5:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118ade:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118ae2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ae8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118aeb:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118aee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118af4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118afb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b01:	01 c2                	add    %eax,%edx
f0118b03:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b06:	88 02                	mov    %al,(%edx)
f0118b08:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b0e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b15:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b1b:	01 c2                	add    %eax,%edx
f0118b1d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b21:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b25:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b2b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b38:	01 c2                	add    %eax,%edx
f0118b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b3d:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118b40:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118b47:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118b4a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118b50:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118b56:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b5c:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b5f:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118b61:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118b67:	89 c2                	mov    %eax,%edx
f0118b69:	c1 ea 1f             	shr    $0x1f,%edx
f0118b6c:	01 d0                	add    %edx,%eax
f0118b6e:	d1 f8                	sar    %eax
f0118b70:	89 c2                	mov    %eax,%edx
f0118b72:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b78:	01 c2                	add    %eax,%edx
f0118b7a:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b7d:	88 c1                	mov    %al,%cl
f0118b7f:	c0 e9 07             	shr    $0x7,%cl
f0118b82:	01 c8                	add    %ecx,%eax
f0118b84:	d0 f8                	sar    %al
f0118b86:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118b88:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118b8e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b94:	01 c2                	add    %eax,%edx
f0118b96:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b99:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118b9b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118ba1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118ba7:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118bae:	1b 00 00 
			shortArr2[0] = minShort;
f0118bb1:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118bba:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118bbd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118bc3:	01 c0                	add    %eax,%eax
f0118bc5:	89 c2                	mov    %eax,%edx
f0118bc7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118bcd:	01 c2                	add    %eax,%edx
f0118bcf:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118bd3:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118bd6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118bdc:	8a 00                	mov    (%eax),%al
f0118bde:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118be1:	75 15                	jne    f0118bf8 <test_kmalloc+0xd34>
f0118be3:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118be9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118bef:	01 d0                	add    %edx,%eax
f0118bf1:	8a 00                	mov    (%eax),%al
f0118bf3:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118bf6:	74 17                	je     f0118c0f <test_kmalloc+0xd4b>
f0118bf8:	83 ec 04             	sub    $0x4,%esp
f0118bfb:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118c00:	68 b2 00 00 00       	push   $0xb2
f0118c05:	68 7a b5 13 f0       	push   $0xf013b57a
f0118c0a:	e8 f6 75 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118c0f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c15:	66 8b 00             	mov    (%eax),%ax
f0118c18:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118c1c:	75 1b                	jne    f0118c39 <test_kmalloc+0xd75>
f0118c1e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c24:	01 c0                	add    %eax,%eax
f0118c26:	89 c2                	mov    %eax,%edx
f0118c28:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c2e:	01 d0                	add    %edx,%eax
f0118c30:	66 8b 00             	mov    (%eax),%ax
f0118c33:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118c37:	74 17                	je     f0118c50 <test_kmalloc+0xd8c>
f0118c39:	83 ec 04             	sub    $0x4,%esp
f0118c3c:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118c41:	68 b3 00 00 00       	push   $0xb3
f0118c46:	68 7a b5 13 f0       	push   $0xf013b57a
f0118c4b:	e8 b5 75 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118c50:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c56:	8b 00                	mov    (%eax),%eax
f0118c58:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c5b:	75 1c                	jne    f0118c79 <test_kmalloc+0xdb5>
f0118c5d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118c63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118c6a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c70:	01 d0                	add    %edx,%eax
f0118c72:	8b 00                	mov    (%eax),%eax
f0118c74:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118c77:	74 17                	je     f0118c90 <test_kmalloc+0xdcc>
f0118c79:	83 ec 04             	sub    $0x4,%esp
f0118c7c:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118c81:	68 b4 00 00 00       	push   $0xb4
f0118c86:	68 7a b5 13 f0       	push   $0xf013b57a
f0118c8b:	e8 75 75 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118c90:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c96:	8a 00                	mov    (%eax),%al
f0118c98:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118c9b:	75 1c                	jne    f0118cb9 <test_kmalloc+0xdf5>
f0118c9d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118ca3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118caa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cb0:	01 d0                	add    %edx,%eax
f0118cb2:	8a 00                	mov    (%eax),%al
f0118cb4:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118cb7:	74 17                	je     f0118cd0 <test_kmalloc+0xe0c>
f0118cb9:	83 ec 04             	sub    $0x4,%esp
f0118cbc:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118cc1:	68 b6 00 00 00       	push   $0xb6
f0118cc6:	68 7a b5 13 f0       	push   $0xf013b57a
f0118ccb:	e8 35 75 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118cd0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cd6:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118cda:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118cde:	75 1f                	jne    f0118cff <test_kmalloc+0xe3b>
f0118ce0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118ce6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ced:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cf3:	01 d0                	add    %edx,%eax
f0118cf5:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118cf9:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118cfd:	74 17                	je     f0118d16 <test_kmalloc+0xe52>
f0118cff:	83 ec 04             	sub    $0x4,%esp
f0118d02:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118d07:	68 b7 00 00 00       	push   $0xb7
f0118d0c:	68 7a b5 13 f0       	push   $0xf013b57a
f0118d11:	e8 ef 74 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d1c:	8b 40 04             	mov    0x4(%eax),%eax
f0118d1f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118d22:	75 1d                	jne    f0118d41 <test_kmalloc+0xe7d>
f0118d24:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d2a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d31:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d37:	01 d0                	add    %edx,%eax
f0118d39:	8b 40 04             	mov    0x4(%eax),%eax
f0118d3c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d3f:	74 17                	je     f0118d58 <test_kmalloc+0xe94>
f0118d41:	83 ec 04             	sub    $0x4,%esp
f0118d44:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118d49:	68 b8 00 00 00       	push   $0xb8
f0118d4e:	68 7a b5 13 f0       	push   $0xf013b57a
f0118d53:	e8 ad 74 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118d58:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d5e:	8a 00                	mov    (%eax),%al
f0118d60:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d63:	75 40                	jne    f0118da5 <test_kmalloc+0xee1>
f0118d65:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d6b:	89 c2                	mov    %eax,%edx
f0118d6d:	c1 ea 1f             	shr    $0x1f,%edx
f0118d70:	01 d0                	add    %edx,%eax
f0118d72:	d1 f8                	sar    %eax
f0118d74:	89 c2                	mov    %eax,%edx
f0118d76:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d7c:	01 d0                	add    %edx,%eax
f0118d7e:	8a 10                	mov    (%eax),%dl
f0118d80:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118d83:	88 c1                	mov    %al,%cl
f0118d85:	c0 e9 07             	shr    $0x7,%cl
f0118d88:	01 c8                	add    %ecx,%eax
f0118d8a:	d0 f8                	sar    %al
f0118d8c:	38 c2                	cmp    %al,%dl
f0118d8e:	75 15                	jne    f0118da5 <test_kmalloc+0xee1>
f0118d90:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118d96:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d9c:	01 d0                	add    %edx,%eax
f0118d9e:	8a 00                	mov    (%eax),%al
f0118da0:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118da3:	74 17                	je     f0118dbc <test_kmalloc+0xef8>
f0118da5:	83 ec 04             	sub    $0x4,%esp
f0118da8:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118dad:	68 ba 00 00 00       	push   $0xba
f0118db2:	68 7a b5 13 f0       	push   $0xf013b57a
f0118db7:	e8 49 74 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118dbc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118dc2:	66 8b 00             	mov    (%eax),%ax
f0118dc5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118dc9:	75 1b                	jne    f0118de6 <test_kmalloc+0xf22>
f0118dcb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118dd1:	01 c0                	add    %eax,%eax
f0118dd3:	89 c2                	mov    %eax,%edx
f0118dd5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ddb:	01 d0                	add    %edx,%eax
f0118ddd:	66 8b 00             	mov    (%eax),%ax
f0118de0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118de4:	74 17                	je     f0118dfd <test_kmalloc+0xf39>
f0118de6:	83 ec 04             	sub    $0x4,%esp
f0118de9:	68 d0 b6 13 f0       	push   $0xf013b6d0
f0118dee:	68 bb 00 00 00       	push   $0xbb
f0118df3:	68 7a b5 13 f0       	push   $0xf013b57a
f0118df8:	e8 08 74 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118dfd:	e8 57 42 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118e02:	89 c2                	mov    %eax,%edx
f0118e04:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e07:	39 c2                	cmp    %eax,%edx
f0118e09:	74 17                	je     f0118e22 <test_kmalloc+0xf5e>
f0118e0b:	83 ec 04             	sub    $0x4,%esp
f0118e0e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118e13:	68 bd 00 00 00       	push   $0xbd
f0118e18:	68 7a b5 13 f0       	push   $0xf013b57a
f0118e1d:	e8 e3 73 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e22:	e8 00 af fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118e27:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e2a:	74 17                	je     f0118e43 <test_kmalloc+0xf7f>
f0118e2c:	83 ec 04             	sub    $0x4,%esp
f0118e2f:	68 94 b5 13 f0       	push   $0xf013b594
f0118e34:	68 be 00 00 00       	push   $0xbe
f0118e39:	68 7a b5 13 f0       	push   $0xf013b57a
f0118e3e:	e8 c2 73 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118e43:	83 ec 0c             	sub    $0xc,%esp
f0118e46:	68 05 b7 13 f0       	push   $0xf013b705
f0118e4b:	e8 be 7e fe ff       	call   f0100d0e <cprintf>
f0118e50:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118e53:	e8 01 42 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118e58:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e5b:	e8 c7 ae fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118e60:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118e63:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118e6a:	10 00 00 
f0118e6d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118e73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e78:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118e7e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e84:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e89:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118e8f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e95:	29 d0                	sub    %edx,%eax
f0118e97:	89 c1                	mov    %eax,%ecx
f0118e99:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118ea0:	10 00 00 
f0118ea3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118ea8:	0f b6 d0             	movzbl %al,%edx
f0118eab:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118eb1:	01 d0                	add    %edx,%eax
f0118eb3:	48                   	dec    %eax
f0118eb4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118eba:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ec0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ec5:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118ecb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ed1:	29 d0                	sub    %edx,%eax
f0118ed3:	01 c1                	add    %eax,%ecx
f0118ed5:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118edc:	10 00 00 
f0118edf:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0118ee4:	0f b6 c0             	movzbl %al,%eax
f0118ee7:	c1 e0 04             	shl    $0x4,%eax
f0118eea:	89 c2                	mov    %eax,%edx
f0118eec:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118ef2:	01 d0                	add    %edx,%eax
f0118ef4:	48                   	dec    %eax
f0118ef5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118efb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f01:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f06:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118f0c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f12:	29 d0                	sub    %edx,%eax
f0118f14:	01 c8                	add    %ecx,%eax
f0118f16:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118f1b:	29 c2                	sub    %eax,%edx
f0118f1d:	89 d0                	mov    %edx,%eax
f0118f1f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118f25:	83 ec 0c             	sub    $0xc,%esp
f0118f28:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118f2e:	e8 37 ea fe ff       	call   f010796a <kmalloc>
f0118f33:	83 c4 10             	add    $0x10,%esp
f0118f36:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118f3c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118f42:	85 c0                	test   %eax,%eax
f0118f44:	74 17                	je     f0118f5d <test_kmalloc+0x1099>
f0118f46:	83 ec 04             	sub    $0x4,%esp
f0118f49:	68 48 b5 13 f0       	push   $0xf013b548
f0118f4e:	68 c8 00 00 00       	push   $0xc8
f0118f53:	68 7a b5 13 f0       	push   $0xf013b57a
f0118f58:	e8 a8 72 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f5d:	e8 c5 ad fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0118f62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f65:	74 17                	je     f0118f7e <test_kmalloc+0x10ba>
f0118f67:	83 ec 04             	sub    $0x4,%esp
f0118f6a:	68 94 b5 13 f0       	push   $0xf013b594
f0118f6f:	68 c9 00 00 00       	push   $0xc9
f0118f74:	68 7a b5 13 f0       	push   $0xf013b57a
f0118f79:	e8 87 72 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f7e:	e8 d6 40 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118f83:	89 c2                	mov    %eax,%edx
f0118f85:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118f88:	39 c2                	cmp    %eax,%edx
f0118f8a:	74 17                	je     f0118fa3 <test_kmalloc+0x10df>
f0118f8c:	83 ec 04             	sub    $0x4,%esp
f0118f8f:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118f94:	68 ca 00 00 00       	push   $0xca
f0118f99:	68 7a b5 13 f0       	push   $0xf013b57a
f0118f9e:	e8 62 72 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118fa3:	83 ec 0c             	sub    $0xc,%esp
f0118fa6:	68 0c b7 13 f0       	push   $0xf013b70c
f0118fab:	e8 5e 7d fe ff       	call   f0100d0e <cprintf>
f0118fb0:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118fb3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118fb9:	05 00 40 00 00       	add    $0x4000,%eax
f0118fbe:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118fc4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118fcb:	10 00 00 
f0118fce:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fd9:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118fdf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118fe5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fea:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118ff0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118ff6:	29 d0                	sub    %edx,%eax
f0118ff8:	89 c1                	mov    %eax,%ecx
f0118ffa:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0119001:	10 00 00 
f0119004:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119009:	0f b6 d0             	movzbl %al,%edx
f011900c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119012:	01 d0                	add    %edx,%eax
f0119014:	48                   	dec    %eax
f0119015:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011901b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119021:	ba 00 00 00 00       	mov    $0x0,%edx
f0119026:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011902c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119032:	29 d0                	sub    %edx,%eax
f0119034:	01 c1                	add    %eax,%ecx
f0119036:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011903d:	10 00 00 
f0119040:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119045:	0f b6 c0             	movzbl %al,%eax
f0119048:	c1 e0 04             	shl    $0x4,%eax
f011904b:	89 c2                	mov    %eax,%edx
f011904d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119053:	01 d0                	add    %edx,%eax
f0119055:	48                   	dec    %eax
f0119056:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011905c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119062:	ba 00 00 00 00       	mov    $0x0,%edx
f0119067:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011906d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119073:	29 d0                	sub    %edx,%eax
f0119075:	01 c8                	add    %ecx,%eax
f0119077:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011907c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011907f:	eb 6a                	jmp    f01190eb <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119081:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0119086:	83 ec 04             	sub    $0x4,%esp
f0119089:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f011908f:	52                   	push   %edx
f0119090:	ff 75 f4             	pushl  -0xc(%ebp)
f0119093:	50                   	push   %eax
f0119094:	e8 77 d9 fe ff       	call   f0106a10 <get_page_table>
f0119099:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011909c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01190a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01190a5:	c1 ea 0c             	shr    $0xc,%edx
f01190a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01190ae:	c1 e2 02             	shl    $0x2,%edx
f01190b1:	01 d0                	add    %edx,%eax
f01190b3:	8b 00                	mov    (%eax),%eax
f01190b5:	25 ff 0f 00 00       	and    $0xfff,%eax
f01190ba:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01190c0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01190c6:	83 e0 04             	and    $0x4,%eax
f01190c9:	85 c0                	test   %eax,%eax
f01190cb:	74 17                	je     f01190e4 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01190cd:	83 ec 04             	sub    $0x4,%esp
f01190d0:	68 14 b7 13 f0       	push   $0xf013b714
f01190d5:	68 d7 00 00 00       	push   $0xd7
f01190da:	68 7a b5 13 f0       	push   $0xf013b57a
f01190df:	e8 21 71 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01190e4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01190eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01190ee:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01190f4:	72 8b                	jb     f0119081 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01190f6:	83 ec 0c             	sub    $0xc,%esp
f01190f9:	68 5e b7 13 f0       	push   $0xf013b75e
f01190fe:	e8 0b 7c fe ff       	call   f0100d0e <cprintf>
f0119103:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119106:	83 ec 0c             	sub    $0xc,%esp
f0119109:	68 68 b7 13 f0       	push   $0xf013b768
f011910e:	e8 fb 7b fe ff       	call   f0100d0e <cprintf>
f0119113:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119116:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011911b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011911e:	5b                   	pop    %ebx
f011911f:	5f                   	pop    %edi
f0119120:	5d                   	pop    %ebp
f0119121:	c3                   	ret    

f0119122 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119122:	55                   	push   %ebp
f0119123:	89 e5                	mov    %esp,%ebp
f0119125:	57                   	push   %edi
f0119126:	53                   	push   %ebx
f0119127:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f011912d:	83 ec 0c             	sub    $0xc,%esp
f0119130:	68 bc b4 13 f0       	push   $0xf013b4bc
f0119135:	e8 d4 7b fe ff       	call   f0100d0e <cprintf>
f011913a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011913d:	83 ec 0c             	sub    $0xc,%esp
f0119140:	68 ec b4 13 f0       	push   $0xf013b4ec
f0119145:	e8 c4 7b fe ff       	call   f0100d0e <cprintf>
f011914a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011914d:	83 ec 0c             	sub    $0xc,%esp
f0119150:	68 bc b4 13 f0       	push   $0xf013b4bc
f0119155:	e8 b4 7b fe ff       	call   f0100d0e <cprintf>
f011915a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011915d:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0119163:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119168:	b8 00 00 00 00       	mov    $0x0,%eax
f011916d:	89 d7                	mov    %edx,%edi
f011916f:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119171:	83 ec 0c             	sub    $0xc,%esp
f0119174:	68 a4 b7 13 f0       	push   $0xf013b7a4
f0119179:	e8 90 7b fe ff       	call   f0100d0e <cprintf>
f011917e:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119181:	e8 d3 3e ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119186:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0119189:	e8 99 ab fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011918e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119191:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119198:	eb 1f                	jmp    f01191b9 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011919a:	83 ec 0c             	sub    $0xc,%esp
f011919d:	68 00 00 20 00       	push   $0x200000
f01191a2:	e8 c3 e7 fe ff       	call   f010796a <kmalloc>
f01191a7:	83 c4 10             	add    $0x10,%esp
f01191aa:	89 c2                	mov    %eax,%edx
f01191ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01191af:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01191b6:	ff 45 f4             	incl   -0xc(%ebp)
f01191b9:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01191bd:	7e db                	jle    f011919a <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01191bf:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01191c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01191c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01191d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01191d9:	f7 75 e8             	divl   -0x18(%ebp)
f01191dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191df:	29 d0                	sub    %edx,%eax
f01191e1:	89 c1                	mov    %eax,%ecx
f01191e3:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01191ea:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01191ef:	0f b6 d0             	movzbl %al,%edx
f01191f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01191f5:	01 d0                	add    %edx,%eax
f01191f7:	48                   	dec    %eax
f01191f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01191fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119203:	f7 75 e0             	divl   -0x20(%ebp)
f0119206:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119209:	29 d0                	sub    %edx,%eax
f011920b:	01 c1                	add    %eax,%ecx
f011920d:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119214:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119219:	0f b6 c0             	movzbl %al,%eax
f011921c:	c1 e0 04             	shl    $0x4,%eax
f011921f:	89 c2                	mov    %eax,%edx
f0119221:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119224:	01 d0                	add    %edx,%eax
f0119226:	48                   	dec    %eax
f0119227:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011922a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011922d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119232:	f7 75 d8             	divl   -0x28(%ebp)
f0119235:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119238:	29 d0                	sub    %edx,%eax
f011923a:	01 c8                	add    %ecx,%eax
f011923c:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119241:	29 c2                	sub    %eax,%edx
f0119243:	89 d0                	mov    %edx,%eax
f0119245:	83 ec 0c             	sub    $0xc,%esp
f0119248:	50                   	push   %eax
f0119249:	e8 1c e7 fe ff       	call   f010796a <kmalloc>
f011924e:	83 c4 10             	add    $0x10,%esp
f0119251:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119257:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011925d:	89 c1                	mov    %eax,%ecx
f011925f:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0119266:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119269:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011926e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119271:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119274:	ba 00 00 00 00       	mov    $0x0,%edx
f0119279:	f7 75 d0             	divl   -0x30(%ebp)
f011927c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011927f:	29 d0                	sub    %edx,%eax
f0119281:	89 c3                	mov    %eax,%ebx
f0119283:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011928a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011928f:	0f b6 d0             	movzbl %al,%edx
f0119292:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119295:	01 d0                	add    %edx,%eax
f0119297:	48                   	dec    %eax
f0119298:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011929b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011929e:	ba 00 00 00 00       	mov    $0x0,%edx
f01192a3:	f7 75 c8             	divl   -0x38(%ebp)
f01192a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192a9:	29 d0                	sub    %edx,%eax
f01192ab:	01 c3                	add    %eax,%ebx
f01192ad:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01192b4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01192b9:	0f b6 c0             	movzbl %al,%eax
f01192bc:	c1 e0 04             	shl    $0x4,%eax
f01192bf:	89 c2                	mov    %eax,%edx
f01192c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192c4:	01 d0                	add    %edx,%eax
f01192c6:	48                   	dec    %eax
f01192c7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01192ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01192cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d2:	f7 75 c0             	divl   -0x40(%ebp)
f01192d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01192d8:	29 d0                	sub    %edx,%eax
f01192da:	01 d8                	add    %ebx,%eax
f01192dc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01192e1:	39 c1                	cmp    %eax,%ecx
f01192e3:	0f 85 ed 04 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01192e9:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01192ef:	89 c1                	mov    %eax,%ecx
f01192f1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01192f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01192fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119300:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119303:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119306:	ba 00 00 00 00       	mov    $0x0,%edx
f011930b:	f7 75 b8             	divl   -0x48(%ebp)
f011930e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119311:	29 d0                	sub    %edx,%eax
f0119313:	89 c3                	mov    %eax,%ebx
f0119315:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011931c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119321:	0f b6 d0             	movzbl %al,%edx
f0119324:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119327:	01 d0                	add    %edx,%eax
f0119329:	48                   	dec    %eax
f011932a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011932d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119330:	ba 00 00 00 00       	mov    $0x0,%edx
f0119335:	f7 75 b0             	divl   -0x50(%ebp)
f0119338:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011933b:	29 d0                	sub    %edx,%eax
f011933d:	01 c3                	add    %eax,%ebx
f011933f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119346:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011934b:	0f b6 c0             	movzbl %al,%eax
f011934e:	c1 e0 04             	shl    $0x4,%eax
f0119351:	89 c2                	mov    %eax,%edx
f0119353:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119356:	01 d0                	add    %edx,%eax
f0119358:	48                   	dec    %eax
f0119359:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011935c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011935f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119364:	f7 75 a8             	divl   -0x58(%ebp)
f0119367:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011936a:	29 d0                	sub    %edx,%eax
f011936c:	01 d8                	add    %ebx,%eax
f011936e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119373:	39 c1                	cmp    %eax,%ecx
f0119375:	0f 85 5b 04 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011937b:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0119381:	89 c1                	mov    %eax,%ecx
f0119383:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011938a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011938d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119392:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0119395:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119398:	ba 00 00 00 00       	mov    $0x0,%edx
f011939d:	f7 75 a0             	divl   -0x60(%ebp)
f01193a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193a3:	29 d0                	sub    %edx,%eax
f01193a5:	89 c3                	mov    %eax,%ebx
f01193a7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01193ae:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01193b3:	0f b6 d0             	movzbl %al,%edx
f01193b6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01193b9:	01 d0                	add    %edx,%eax
f01193bb:	48                   	dec    %eax
f01193bc:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01193bf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193c7:	f7 75 98             	divl   -0x68(%ebp)
f01193ca:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193cd:	29 d0                	sub    %edx,%eax
f01193cf:	01 c3                	add    %eax,%ebx
f01193d1:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01193d8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01193dd:	0f b6 c0             	movzbl %al,%eax
f01193e0:	c1 e0 04             	shl    $0x4,%eax
f01193e3:	89 c2                	mov    %eax,%edx
f01193e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01193e8:	01 d0                	add    %edx,%eax
f01193ea:	48                   	dec    %eax
f01193eb:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01193ee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01193f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01193f6:	f7 75 90             	divl   -0x70(%ebp)
f01193f9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01193fc:	29 d0                	sub    %edx,%eax
f01193fe:	01 d8                	add    %ebx,%eax
f0119400:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119405:	39 c1                	cmp    %eax,%ecx
f0119407:	0f 85 c9 03 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011940d:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119413:	89 c1                	mov    %eax,%ecx
f0119415:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011941c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011941f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119424:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119427:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011942a:	ba 00 00 00 00       	mov    $0x0,%edx
f011942f:	f7 75 88             	divl   -0x78(%ebp)
f0119432:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119435:	29 d0                	sub    %edx,%eax
f0119437:	89 c3                	mov    %eax,%ebx
f0119439:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119440:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119445:	0f b6 d0             	movzbl %al,%edx
f0119448:	8b 45 80             	mov    -0x80(%ebp),%eax
f011944b:	01 d0                	add    %edx,%eax
f011944d:	48                   	dec    %eax
f011944e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119454:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011945a:	ba 00 00 00 00       	mov    $0x0,%edx
f011945f:	f7 75 80             	divl   -0x80(%ebp)
f0119462:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119468:	29 d0                	sub    %edx,%eax
f011946a:	01 c3                	add    %eax,%ebx
f011946c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119473:	10 00 00 
f0119476:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011947b:	0f b6 c0             	movzbl %al,%eax
f011947e:	c1 e0 04             	shl    $0x4,%eax
f0119481:	89 c2                	mov    %eax,%edx
f0119483:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119489:	01 d0                	add    %edx,%eax
f011948b:	48                   	dec    %eax
f011948c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119492:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119498:	ba 00 00 00 00       	mov    $0x0,%edx
f011949d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01194a3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194a9:	29 d0                	sub    %edx,%eax
f01194ab:	01 d8                	add    %ebx,%eax
f01194ad:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01194b2:	39 c1                	cmp    %eax,%ecx
f01194b4:	0f 85 1c 03 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01194ba:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01194c0:	89 c1                	mov    %eax,%ecx
f01194c2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01194c9:	10 00 00 
f01194cc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01194d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194d7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01194dd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01194e8:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01194ee:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194f4:	29 d0                	sub    %edx,%eax
f01194f6:	89 c3                	mov    %eax,%ebx
f01194f8:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01194ff:	10 00 00 
f0119502:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119507:	0f b6 d0             	movzbl %al,%edx
f011950a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119510:	01 d0                	add    %edx,%eax
f0119512:	48                   	dec    %eax
f0119513:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119519:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011951f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119524:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011952a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119530:	29 d0                	sub    %edx,%eax
f0119532:	01 c3                	add    %eax,%ebx
f0119534:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011953b:	10 00 00 
f011953e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119543:	0f b6 c0             	movzbl %al,%eax
f0119546:	c1 e0 04             	shl    $0x4,%eax
f0119549:	89 c2                	mov    %eax,%edx
f011954b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119551:	01 d0                	add    %edx,%eax
f0119553:	48                   	dec    %eax
f0119554:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011955a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119560:	ba 00 00 00 00       	mov    $0x0,%edx
f0119565:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011956b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119571:	29 d0                	sub    %edx,%eax
f0119573:	01 d8                	add    %ebx,%eax
f0119575:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011957a:	39 c1                	cmp    %eax,%ecx
f011957c:	0f 85 54 02 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119582:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119588:	89 c1                	mov    %eax,%ecx
f011958a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119591:	10 00 00 
f0119594:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011959a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011959f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01195a5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01195b0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01195b6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195bc:	29 d0                	sub    %edx,%eax
f01195be:	89 c3                	mov    %eax,%ebx
f01195c0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01195c7:	10 00 00 
f01195ca:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01195cf:	0f b6 d0             	movzbl %al,%edx
f01195d2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01195d8:	01 d0                	add    %edx,%eax
f01195da:	48                   	dec    %eax
f01195db:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01195e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01195e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01195ec:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01195f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01195f8:	29 d0                	sub    %edx,%eax
f01195fa:	01 c3                	add    %eax,%ebx
f01195fc:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119603:	10 00 00 
f0119606:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011960b:	0f b6 c0             	movzbl %al,%eax
f011960e:	c1 e0 04             	shl    $0x4,%eax
f0119611:	89 c2                	mov    %eax,%edx
f0119613:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119619:	01 d0                	add    %edx,%eax
f011961b:	48                   	dec    %eax
f011961c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119622:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119628:	ba 00 00 00 00       	mov    $0x0,%edx
f011962d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119633:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119639:	29 d0                	sub    %edx,%eax
f011963b:	01 d8                	add    %ebx,%eax
f011963d:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119642:	39 c1                	cmp    %eax,%ecx
f0119644:	0f 85 8c 01 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011964a:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119650:	89 c1                	mov    %eax,%ecx
f0119652:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119659:	10 00 00 
f011965c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119662:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119667:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011966d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119673:	ba 00 00 00 00       	mov    $0x0,%edx
f0119678:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011967e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119684:	29 d0                	sub    %edx,%eax
f0119686:	89 c3                	mov    %eax,%ebx
f0119688:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011968f:	10 00 00 
f0119692:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119697:	0f b6 d0             	movzbl %al,%edx
f011969a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01196a0:	01 d0                	add    %edx,%eax
f01196a2:	48                   	dec    %eax
f01196a3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01196a9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196af:	ba 00 00 00 00       	mov    $0x0,%edx
f01196b4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01196ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196c0:	29 d0                	sub    %edx,%eax
f01196c2:	01 c3                	add    %eax,%ebx
f01196c4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01196cb:	10 00 00 
f01196ce:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01196d3:	0f b6 c0             	movzbl %al,%eax
f01196d6:	c1 e0 04             	shl    $0x4,%eax
f01196d9:	89 c2                	mov    %eax,%edx
f01196db:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01196e1:	01 d0                	add    %edx,%eax
f01196e3:	48                   	dec    %eax
f01196e4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01196ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01196f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01196f5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01196fb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119701:	29 d0                	sub    %edx,%eax
f0119703:	01 d8                	add    %ebx,%eax
f0119705:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011970a:	39 c1                	cmp    %eax,%ecx
f011970c:	0f 85 c4 00 00 00    	jne    f01197d6 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119712:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119718:	89 c1                	mov    %eax,%ecx
f011971a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0119721:	10 00 00 
f0119724:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011972a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011972f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119735:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011973b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119740:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119746:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011974c:	29 d0                	sub    %edx,%eax
f011974e:	89 c3                	mov    %eax,%ebx
f0119750:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119757:	10 00 00 
f011975a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011975f:	0f b6 d0             	movzbl %al,%edx
f0119762:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119768:	01 d0                	add    %edx,%eax
f011976a:	48                   	dec    %eax
f011976b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0119771:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119777:	ba 00 00 00 00       	mov    $0x0,%edx
f011977c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0119782:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119788:	29 d0                	sub    %edx,%eax
f011978a:	01 c3                	add    %eax,%ebx
f011978c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0119793:	10 00 00 
f0119796:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011979b:	0f b6 c0             	movzbl %al,%eax
f011979e:	c1 e0 04             	shl    $0x4,%eax
f01197a1:	89 c2                	mov    %eax,%edx
f01197a3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01197a9:	01 d0                	add    %edx,%eax
f01197ab:	48                   	dec    %eax
f01197ac:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01197b2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01197bd:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01197c3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197c9:	29 d0                	sub    %edx,%eax
f01197cb:	01 d8                	add    %ebx,%eax
f01197cd:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01197d2:	39 c1                	cmp    %eax,%ecx
f01197d4:	74 17                	je     f01197ed <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01197d6:	83 ec 04             	sub    $0x4,%esp
f01197d9:	68 f4 b7 13 f0       	push   $0xf013b7f4
f01197de:	68 03 01 00 00       	push   $0x103
f01197e3:	68 7a b5 13 f0       	push   $0xf013b57a
f01197e8:	e8 18 6a fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197ed:	e8 35 a5 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01197f2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197f5:	74 17                	je     f011980e <test_kmalloc_nextfit+0x6ec>
f01197f7:	83 ec 04             	sub    $0x4,%esp
f01197fa:	68 94 b5 13 f0       	push   $0xf013b594
f01197ff:	68 05 01 00 00       	push   $0x105
f0119804:	68 7a b5 13 f0       	push   $0xf013b57a
f0119809:	e8 f7 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011980e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119811:	e8 43 38 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119816:	29 c3                	sub    %eax,%ebx
f0119818:	89 d9                	mov    %ebx,%ecx
f011981a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119821:	10 00 00 
f0119824:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011982a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011982f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119835:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011983b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119840:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119846:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011984c:	29 d0                	sub    %edx,%eax
f011984e:	89 c3                	mov    %eax,%ebx
f0119850:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119857:	10 00 00 
f011985a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011985f:	0f b6 d0             	movzbl %al,%edx
f0119862:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119868:	01 d0                	add    %edx,%eax
f011986a:	48                   	dec    %eax
f011986b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119871:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119877:	ba 00 00 00 00       	mov    $0x0,%edx
f011987c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119882:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119888:	29 d0                	sub    %edx,%eax
f011988a:	01 c3                	add    %eax,%ebx
f011988c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0119893:	10 00 00 
f0119896:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011989b:	0f b6 c0             	movzbl %al,%eax
f011989e:	c1 e0 04             	shl    $0x4,%eax
f01198a1:	89 c2                	mov    %eax,%edx
f01198a3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01198a9:	01 d0                	add    %edx,%eax
f01198ab:	48                   	dec    %eax
f01198ac:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01198b2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01198bd:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01198c3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198c9:	29 d0                	sub    %edx,%eax
f01198cb:	01 d8                	add    %ebx,%eax
f01198cd:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01198d2:	29 c2                	sub    %eax,%edx
f01198d4:	89 d0                	mov    %edx,%eax
f01198d6:	c1 e8 0c             	shr    $0xc,%eax
f01198d9:	39 c1                	cmp    %eax,%ecx
f01198db:	74 17                	je     f01198f4 <test_kmalloc_nextfit+0x7d2>
f01198dd:	83 ec 04             	sub    $0x4,%esp
f01198e0:	68 37 b8 13 f0       	push   $0xf013b837
f01198e5:	68 06 01 00 00       	push   $0x106
f01198ea:	68 7a b5 13 f0       	push   $0xf013b57a
f01198ef:	e8 11 69 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01198f4:	e8 2e a4 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01198f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01198fc:	e8 58 37 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119901:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119904:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011990a:	83 ec 0c             	sub    $0xc,%esp
f011990d:	50                   	push   %eax
f011990e:	e8 a0 e1 fe ff       	call   f0107ab3 <kfree>
f0119913:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119916:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011991c:	83 ec 0c             	sub    $0xc,%esp
f011991f:	50                   	push   %eax
f0119920:	e8 8e e1 fe ff       	call   f0107ab3 <kfree>
f0119925:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119928:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f011992e:	83 ec 0c             	sub    $0xc,%esp
f0119931:	50                   	push   %eax
f0119932:	e8 7c e1 fe ff       	call   f0107ab3 <kfree>
f0119937:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011993a:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119940:	83 ec 0c             	sub    $0xc,%esp
f0119943:	50                   	push   %eax
f0119944:	e8 6a e1 fe ff       	call   f0107ab3 <kfree>
f0119949:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011994c:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119952:	83 ec 0c             	sub    $0xc,%esp
f0119955:	50                   	push   %eax
f0119956:	e8 58 e1 fe ff       	call   f0107ab3 <kfree>
f011995b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011995e:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119964:	83 ec 0c             	sub    $0xc,%esp
f0119967:	50                   	push   %eax
f0119968:	e8 46 e1 fe ff       	call   f0107ab3 <kfree>
f011996d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119970:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119976:	83 ec 0c             	sub    $0xc,%esp
f0119979:	50                   	push   %eax
f011997a:	e8 34 e1 fe ff       	call   f0107ab3 <kfree>
f011997f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119982:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119988:	83 ec 0c             	sub    $0xc,%esp
f011998b:	50                   	push   %eax
f011998c:	e8 22 e1 fe ff       	call   f0107ab3 <kfree>
f0119991:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119994:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011999a:	83 ec 0c             	sub    $0xc,%esp
f011999d:	50                   	push   %eax
f011999e:	e8 10 e1 fe ff       	call   f0107ab3 <kfree>
f01199a3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01199a6:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01199ac:	83 ec 0c             	sub    $0xc,%esp
f01199af:	50                   	push   %eax
f01199b0:	e8 fe e0 fe ff       	call   f0107ab3 <kfree>
f01199b5:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199b8:	e8 6a a3 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01199bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199c0:	74 17                	je     f01199d9 <test_kmalloc_nextfit+0x8b7>
f01199c2:	83 ec 04             	sub    $0x4,%esp
f01199c5:	68 94 b5 13 f0       	push   $0xf013b594
f01199ca:	68 17 01 00 00       	push   $0x117
f01199cf:	68 7a b5 13 f0       	push   $0xf013b57a
f01199d4:	e8 2c 68 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01199d9:	e8 7b 36 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01199de:	89 c2                	mov    %eax,%edx
f01199e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01199e3:	89 d1                	mov    %edx,%ecx
f01199e5:	29 c1                	sub    %eax,%ecx
f01199e7:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01199ee:	10 00 00 
f01199f1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01199f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01199fc:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119a02:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a08:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a0d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119a13:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a19:	29 d0                	sub    %edx,%eax
f0119a1b:	89 c3                	mov    %eax,%ebx
f0119a1d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119a24:	10 00 00 
f0119a27:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119a2c:	0f b6 d0             	movzbl %al,%edx
f0119a2f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119a35:	01 d0                	add    %edx,%eax
f0119a37:	48                   	dec    %eax
f0119a38:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119a3e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a44:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a49:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119a4f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a55:	29 d0                	sub    %edx,%eax
f0119a57:	01 c3                	add    %eax,%ebx
f0119a59:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119a60:	10 00 00 
f0119a63:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119a68:	0f b6 c0             	movzbl %al,%eax
f0119a6b:	c1 e0 04             	shl    $0x4,%eax
f0119a6e:	89 c2                	mov    %eax,%edx
f0119a70:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119a76:	01 d0                	add    %edx,%eax
f0119a78:	48                   	dec    %eax
f0119a79:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119a7f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119a85:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a8a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119a90:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119a96:	29 d0                	sub    %edx,%eax
f0119a98:	01 d8                	add    %ebx,%eax
f0119a9a:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119a9f:	29 c2                	sub    %eax,%edx
f0119aa1:	89 d0                	mov    %edx,%eax
f0119aa3:	c1 e8 0c             	shr    $0xc,%eax
f0119aa6:	39 c1                	cmp    %eax,%ecx
f0119aa8:	74 17                	je     f0119ac1 <test_kmalloc_nextfit+0x99f>
f0119aaa:	83 ec 04             	sub    $0x4,%esp
f0119aad:	68 48 b8 13 f0       	push   $0xf013b848
f0119ab2:	68 18 01 00 00       	push   $0x118
f0119ab7:	68 7a b5 13 f0       	push   $0xf013b57a
f0119abc:	e8 44 67 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119ac1:	e8 61 a2 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119ac6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ac9:	e8 8b 35 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119ace:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119ad1:	83 ec 0c             	sub    $0xc,%esp
f0119ad4:	68 00 fc 0f 00       	push   $0xffc00
f0119ad9:	e8 8c de fe ff       	call   f010796a <kmalloc>
f0119ade:	83 c4 10             	add    $0x10,%esp
f0119ae1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119ae7:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119aee:	10 00 00 
f0119af1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119af7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119afc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119b02:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b08:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b0d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119b13:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b19:	29 d0                	sub    %edx,%eax
f0119b1b:	89 c1                	mov    %eax,%ecx
f0119b1d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119b24:	10 00 00 
f0119b27:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119b2c:	0f b6 d0             	movzbl %al,%edx
f0119b2f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119b35:	01 d0                	add    %edx,%eax
f0119b37:	48                   	dec    %eax
f0119b38:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119b3e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b49:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119b4f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b55:	29 d0                	sub    %edx,%eax
f0119b57:	01 c1                	add    %eax,%ecx
f0119b59:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119b60:	10 00 00 
f0119b63:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119b68:	0f b6 c0             	movzbl %al,%eax
f0119b6b:	c1 e0 04             	shl    $0x4,%eax
f0119b6e:	89 c2                	mov    %eax,%edx
f0119b70:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119b76:	01 d0                	add    %edx,%eax
f0119b78:	48                   	dec    %eax
f0119b79:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119b7f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119b85:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b8a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119b90:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119b96:	29 d0                	sub    %edx,%eax
f0119b98:	01 c8                	add    %ecx,%eax
f0119b9a:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119ba0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ba6:	39 c2                	cmp    %eax,%edx
f0119ba8:	74 17                	je     f0119bc1 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119baa:	83 ec 04             	sub    $0x4,%esp
f0119bad:	68 88 b8 13 f0       	push   $0xf013b888
f0119bb2:	68 1f 01 00 00       	push   $0x11f
f0119bb7:	68 7a b5 13 f0       	push   $0xf013b57a
f0119bbc:	e8 44 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bc1:	e8 61 a1 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119bc6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bc9:	74 17                	je     f0119be2 <test_kmalloc_nextfit+0xac0>
f0119bcb:	83 ec 04             	sub    $0x4,%esp
f0119bce:	68 94 b5 13 f0       	push   $0xf013b594
f0119bd3:	68 20 01 00 00       	push   $0x120
f0119bd8:	68 7a b5 13 f0       	push   $0xf013b57a
f0119bdd:	e8 23 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119be2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119be5:	e8 6f 34 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119bea:	29 c3                	sub    %eax,%ebx
f0119bec:	89 d8                	mov    %ebx,%eax
f0119bee:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119bf3:	74 17                	je     f0119c0c <test_kmalloc_nextfit+0xaea>
f0119bf5:	83 ec 04             	sub    $0x4,%esp
f0119bf8:	68 37 b8 13 f0       	push   $0xf013b837
f0119bfd:	68 21 01 00 00       	push   $0x121
f0119c02:	68 7a b5 13 f0       	push   $0xf013b57a
f0119c07:	e8 f9 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c0c:	e8 16 a1 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119c11:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c14:	e8 40 34 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119c19:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119c1c:	83 ec 0c             	sub    $0xc,%esp
f0119c1f:	68 00 04 00 00       	push   $0x400
f0119c24:	e8 41 dd fe ff       	call   f010796a <kmalloc>
f0119c29:	83 c4 10             	add    $0x10,%esp
f0119c2c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119c32:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119c39:	10 00 00 
f0119c3c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119c42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c47:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119c4d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c53:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c58:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119c5e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c64:	29 d0                	sub    %edx,%eax
f0119c66:	89 c1                	mov    %eax,%ecx
f0119c68:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119c6f:	10 00 00 
f0119c72:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119c77:	0f b6 d0             	movzbl %al,%edx
f0119c7a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119c80:	01 d0                	add    %edx,%eax
f0119c82:	48                   	dec    %eax
f0119c83:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119c89:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119c8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c94:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119c9a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119ca0:	29 d0                	sub    %edx,%eax
f0119ca2:	01 c1                	add    %eax,%ecx
f0119ca4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119cab:	10 00 00 
f0119cae:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119cb3:	0f b6 c0             	movzbl %al,%eax
f0119cb6:	c1 e0 04             	shl    $0x4,%eax
f0119cb9:	89 c2                	mov    %eax,%edx
f0119cbb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119cc1:	01 d0                	add    %edx,%eax
f0119cc3:	48                   	dec    %eax
f0119cc4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119cca:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119cd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cd5:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119cdb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119ce1:	29 d0                	sub    %edx,%eax
f0119ce3:	01 c8                	add    %ecx,%eax
f0119ce5:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119ceb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119cf1:	39 c2                	cmp    %eax,%edx
f0119cf3:	74 17                	je     f0119d0c <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119cf5:	83 ec 04             	sub    $0x4,%esp
f0119cf8:	68 88 b8 13 f0       	push   $0xf013b888
f0119cfd:	68 27 01 00 00       	push   $0x127
f0119d02:	68 7a b5 13 f0       	push   $0xf013b57a
f0119d07:	e8 f9 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d0c:	e8 16 a0 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119d11:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d14:	74 17                	je     f0119d2d <test_kmalloc_nextfit+0xc0b>
f0119d16:	83 ec 04             	sub    $0x4,%esp
f0119d19:	68 94 b5 13 f0       	push   $0xf013b594
f0119d1e:	68 28 01 00 00       	push   $0x128
f0119d23:	68 7a b5 13 f0       	push   $0xf013b57a
f0119d28:	e8 d8 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d2d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d30:	e8 24 33 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119d35:	29 c3                	sub    %eax,%ebx
f0119d37:	89 d8                	mov    %ebx,%eax
f0119d39:	83 f8 01             	cmp    $0x1,%eax
f0119d3c:	74 17                	je     f0119d55 <test_kmalloc_nextfit+0xc33>
f0119d3e:	83 ec 04             	sub    $0x4,%esp
f0119d41:	68 37 b8 13 f0       	push   $0xf013b837
f0119d46:	68 29 01 00 00       	push   $0x129
f0119d4b:	68 7a b5 13 f0       	push   $0xf013b57a
f0119d50:	e8 b0 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d55:	e8 cd 9f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119d5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d5d:	e8 f7 32 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119d65:	83 ec 0c             	sub    $0xc,%esp
f0119d68:	68 00 00 50 00       	push   $0x500000
f0119d6d:	e8 f8 db fe ff       	call   f010796a <kmalloc>
f0119d72:	83 c4 10             	add    $0x10,%esp
f0119d75:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119d7b:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119d82:	10 00 00 
f0119d85:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119d8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d90:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119d96:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119d9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119da1:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119da7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119dad:	29 d0                	sub    %edx,%eax
f0119daf:	89 c1                	mov    %eax,%ecx
f0119db1:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119db8:	10 00 00 
f0119dbb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119dc0:	0f b6 d0             	movzbl %al,%edx
f0119dc3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119dc9:	01 d0                	add    %edx,%eax
f0119dcb:	48                   	dec    %eax
f0119dcc:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119dd2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ddd:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119de3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119de9:	29 d0                	sub    %edx,%eax
f0119deb:	01 c1                	add    %eax,%ecx
f0119ded:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119df4:	10 00 00 
f0119df7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119dfc:	0f b6 c0             	movzbl %al,%eax
f0119dff:	c1 e0 04             	shl    $0x4,%eax
f0119e02:	89 c2                	mov    %eax,%edx
f0119e04:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119e0a:	01 d0                	add    %edx,%eax
f0119e0c:	48                   	dec    %eax
f0119e0d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119e13:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e1e:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119e24:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e2a:	29 d0                	sub    %edx,%eax
f0119e2c:	01 c8                	add    %ecx,%eax
f0119e2e:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e34:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e3a:	39 c2                	cmp    %eax,%edx
f0119e3c:	74 17                	je     f0119e55 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119e3e:	83 ec 04             	sub    $0x4,%esp
f0119e41:	68 88 b8 13 f0       	push   $0xf013b888
f0119e46:	68 2f 01 00 00       	push   $0x12f
f0119e4b:	68 7a b5 13 f0       	push   $0xf013b57a
f0119e50:	e8 b0 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e55:	e8 cd 9e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119e5a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e5d:	74 17                	je     f0119e76 <test_kmalloc_nextfit+0xd54>
f0119e5f:	83 ec 04             	sub    $0x4,%esp
f0119e62:	68 94 b5 13 f0       	push   $0xf013b594
f0119e67:	68 30 01 00 00       	push   $0x130
f0119e6c:	68 7a b5 13 f0       	push   $0xf013b57a
f0119e71:	e8 8f 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e76:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e79:	e8 db 31 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119e7e:	29 c3                	sub    %eax,%ebx
f0119e80:	89 d8                	mov    %ebx,%eax
f0119e82:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119e87:	74 17                	je     f0119ea0 <test_kmalloc_nextfit+0xd7e>
f0119e89:	83 ec 04             	sub    $0x4,%esp
f0119e8c:	68 37 b8 13 f0       	push   $0xf013b837
f0119e91:	68 31 01 00 00       	push   $0x131
f0119e96:	68 7a b5 13 f0       	push   $0xf013b57a
f0119e9b:	e8 65 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ea0:	e8 82 9e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119ea5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ea8:	e8 ac 31 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119ead:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119eb0:	83 ec 0c             	sub    $0xc,%esp
f0119eb3:	68 00 00 10 00       	push   $0x100000
f0119eb8:	e8 ad da fe ff       	call   f010796a <kmalloc>
f0119ebd:	83 c4 10             	add    $0x10,%esp
f0119ec0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119ec6:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119ecd:	10 00 00 
f0119ed0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119ed6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119edb:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119ee1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ee7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eec:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119ef2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119ef8:	29 d0                	sub    %edx,%eax
f0119efa:	89 c1                	mov    %eax,%ecx
f0119efc:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119f03:	10 00 00 
f0119f06:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119f0b:	0f b6 d0             	movzbl %al,%edx
f0119f0e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119f14:	01 d0                	add    %edx,%eax
f0119f16:	48                   	dec    %eax
f0119f17:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119f1d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f23:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f28:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119f2e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f34:	29 d0                	sub    %edx,%eax
f0119f36:	01 c1                	add    %eax,%ecx
f0119f38:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119f3f:	10 00 00 
f0119f42:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0119f47:	0f b6 c0             	movzbl %al,%eax
f0119f4a:	c1 e0 04             	shl    $0x4,%eax
f0119f4d:	89 c2                	mov    %eax,%edx
f0119f4f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119f55:	01 d0                	add    %edx,%eax
f0119f57:	48                   	dec    %eax
f0119f58:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119f5e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119f64:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f69:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119f6f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119f75:	29 d0                	sub    %edx,%eax
f0119f77:	01 c8                	add    %ecx,%eax
f0119f79:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119f7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119f85:	39 c2                	cmp    %eax,%edx
f0119f87:	74 17                	je     f0119fa0 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119f89:	83 ec 04             	sub    $0x4,%esp
f0119f8c:	68 88 b8 13 f0       	push   $0xf013b888
f0119f91:	68 37 01 00 00       	push   $0x137
f0119f96:	68 7a b5 13 f0       	push   $0xf013b57a
f0119f9b:	e8 65 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fa0:	e8 82 9d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119fa5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fa8:	74 17                	je     f0119fc1 <test_kmalloc_nextfit+0xe9f>
f0119faa:	83 ec 04             	sub    $0x4,%esp
f0119fad:	68 94 b5 13 f0       	push   $0xf013b594
f0119fb2:	68 38 01 00 00       	push   $0x138
f0119fb7:	68 7a b5 13 f0       	push   $0xf013b57a
f0119fbc:	e8 44 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119fc1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fc4:	e8 90 30 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119fc9:	29 c3                	sub    %eax,%ebx
f0119fcb:	89 d8                	mov    %ebx,%eax
f0119fcd:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fd2:	74 17                	je     f0119feb <test_kmalloc_nextfit+0xec9>
f0119fd4:	83 ec 04             	sub    $0x4,%esp
f0119fd7:	68 37 b8 13 f0       	push   $0xf013b837
f0119fdc:	68 39 01 00 00       	push   $0x139
f0119fe1:	68 7a b5 13 f0       	push   $0xf013b57a
f0119fe6:	e8 1a 62 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119feb:	e8 37 9d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0119ff0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ff3:	e8 61 30 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119ffb:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011a001:	83 ec 0c             	sub    $0xc,%esp
f011a004:	50                   	push   %eax
f011a005:	e8 a9 da fe ff       	call   f0107ab3 <kfree>
f011a00a:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a00d:	e8 15 9d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a012:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a015:	74 17                	je     f011a02e <test_kmalloc_nextfit+0xf0c>
f011a017:	83 ec 04             	sub    $0x4,%esp
f011a01a:	68 94 b5 13 f0       	push   $0xf013b594
f011a01f:	68 3e 01 00 00       	push   $0x13e
f011a024:	68 7a b5 13 f0       	push   $0xf013b57a
f011a029:	e8 d7 61 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a02e:	e8 26 30 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a033:	89 c2                	mov    %eax,%edx
f011a035:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a038:	29 c2                	sub    %eax,%edx
f011a03a:	89 d0                	mov    %edx,%eax
f011a03c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a041:	74 17                	je     f011a05a <test_kmalloc_nextfit+0xf38>
f011a043:	83 ec 04             	sub    $0x4,%esp
f011a046:	68 48 b8 13 f0       	push   $0xf013b848
f011a04b:	68 3f 01 00 00       	push   $0x13f
f011a050:	68 7a b5 13 f0       	push   $0xf013b57a
f011a055:	e8 ab 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a05a:	e8 c8 9c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a05f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a062:	e8 f2 2f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a067:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a06a:	83 ec 0c             	sub    $0xc,%esp
f011a06d:	68 00 04 00 00       	push   $0x400
f011a072:	e8 f3 d8 fe ff       	call   f010796a <kmalloc>
f011a077:	83 c4 10             	add    $0x10,%esp
f011a07a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a080:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011a087:	10 00 00 
f011a08a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a090:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a095:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011a09b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0a6:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011a0ac:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0b2:	29 d0                	sub    %edx,%eax
f011a0b4:	89 c1                	mov    %eax,%ecx
f011a0b6:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011a0bd:	10 00 00 
f011a0c0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a0c5:	0f b6 d0             	movzbl %al,%edx
f011a0c8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a0ce:	01 d0                	add    %edx,%eax
f011a0d0:	48                   	dec    %eax
f011a0d1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011a0d7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0e2:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011a0e8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a0ee:	29 d0                	sub    %edx,%eax
f011a0f0:	01 c1                	add    %eax,%ecx
f011a0f2:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011a0f9:	10 00 00 
f011a0fc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a101:	0f b6 c0             	movzbl %al,%eax
f011a104:	c1 e0 04             	shl    $0x4,%eax
f011a107:	89 c2                	mov    %eax,%edx
f011a109:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a10f:	01 d0                	add    %edx,%eax
f011a111:	48                   	dec    %eax
f011a112:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011a118:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a11e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a123:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011a129:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a12f:	29 d0                	sub    %edx,%eax
f011a131:	01 c8                	add    %ecx,%eax
f011a133:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a139:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a13f:	39 c2                	cmp    %eax,%edx
f011a141:	74 17                	je     f011a15a <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011a143:	83 ec 04             	sub    $0x4,%esp
f011a146:	68 88 b8 13 f0       	push   $0xf013b888
f011a14b:	68 45 01 00 00       	push   $0x145
f011a150:	68 7a b5 13 f0       	push   $0xf013b57a
f011a155:	e8 ab 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a15a:	e8 c8 9b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a15f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a162:	74 17                	je     f011a17b <test_kmalloc_nextfit+0x1059>
f011a164:	83 ec 04             	sub    $0x4,%esp
f011a167:	68 94 b5 13 f0       	push   $0xf013b594
f011a16c:	68 46 01 00 00       	push   $0x146
f011a171:	68 7a b5 13 f0       	push   $0xf013b57a
f011a176:	e8 8a 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a17b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a17e:	e8 d6 2e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a183:	29 c3                	sub    %eax,%ebx
f011a185:	89 d8                	mov    %ebx,%eax
f011a187:	83 f8 01             	cmp    $0x1,%eax
f011a18a:	74 17                	je     f011a1a3 <test_kmalloc_nextfit+0x1081>
f011a18c:	83 ec 04             	sub    $0x4,%esp
f011a18f:	68 37 b8 13 f0       	push   $0xf013b837
f011a194:	68 47 01 00 00       	push   $0x147
f011a199:	68 7a b5 13 f0       	push   $0xf013b57a
f011a19e:	e8 62 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1a3:	e8 7f 9b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a1a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1ab:	e8 a9 2e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a1b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a1b3:	83 ec 0c             	sub    $0xc,%esp
f011a1b6:	68 00 e0 1f 00       	push   $0x1fe000
f011a1bb:	e8 aa d7 fe ff       	call   f010796a <kmalloc>
f011a1c0:	83 c4 10             	add    $0x10,%esp
f011a1c3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a1c9:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011a1d0:	10 00 00 
f011a1d3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011a1d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1de:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011a1e4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a1ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1ef:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011a1f5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a1fb:	29 d0                	sub    %edx,%eax
f011a1fd:	89 c1                	mov    %eax,%ecx
f011a1ff:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011a206:	10 00 00 
f011a209:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a20e:	0f b6 d0             	movzbl %al,%edx
f011a211:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a217:	01 d0                	add    %edx,%eax
f011a219:	48                   	dec    %eax
f011a21a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f011a220:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a226:	ba 00 00 00 00       	mov    $0x0,%edx
f011a22b:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011a231:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a237:	29 d0                	sub    %edx,%eax
f011a239:	01 c1                	add    %eax,%ecx
f011a23b:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011a242:	10 00 00 
f011a245:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a24a:	0f b6 c0             	movzbl %al,%eax
f011a24d:	c1 e0 04             	shl    $0x4,%eax
f011a250:	89 c2                	mov    %eax,%edx
f011a252:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a258:	01 d0                	add    %edx,%eax
f011a25a:	48                   	dec    %eax
f011a25b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011a261:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a267:	ba 00 00 00 00       	mov    $0x0,%edx
f011a26c:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011a272:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a278:	29 d0                	sub    %edx,%eax
f011a27a:	01 c8                	add    %ecx,%eax
f011a27c:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a282:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a288:	39 c2                	cmp    %eax,%edx
f011a28a:	74 17                	je     f011a2a3 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f011a28c:	83 ec 04             	sub    $0x4,%esp
f011a28f:	68 88 b8 13 f0       	push   $0xf013b888
f011a294:	68 4d 01 00 00       	push   $0x14d
f011a299:	68 7a b5 13 f0       	push   $0xf013b57a
f011a29e:	e8 62 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2a3:	e8 7f 9a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a2a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2ab:	74 17                	je     f011a2c4 <test_kmalloc_nextfit+0x11a2>
f011a2ad:	83 ec 04             	sub    $0x4,%esp
f011a2b0:	68 94 b5 13 f0       	push   $0xf013b594
f011a2b5:	68 4e 01 00 00       	push   $0x14e
f011a2ba:	68 7a b5 13 f0       	push   $0xf013b57a
f011a2bf:	e8 41 5f fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a2c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a2c7:	e8 8d 2d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a2cc:	29 c3                	sub    %eax,%ebx
f011a2ce:	89 d8                	mov    %ebx,%eax
f011a2d0:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a2d5:	74 17                	je     f011a2ee <test_kmalloc_nextfit+0x11cc>
f011a2d7:	83 ec 04             	sub    $0x4,%esp
f011a2da:	68 37 b8 13 f0       	push   $0xf013b837
f011a2df:	68 50 01 00 00       	push   $0x150
f011a2e4:	68 7a b5 13 f0       	push   $0xf013b57a
f011a2e9:	e8 17 5f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a2ee:	e8 34 9a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a2f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a2f6:	e8 5e 2d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a2fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a2fe:	83 ec 0c             	sub    $0xc,%esp
f011a301:	68 00 00 08 00       	push   $0x80000
f011a306:	e8 5f d6 fe ff       	call   f010796a <kmalloc>
f011a30b:	83 c4 10             	add    $0x10,%esp
f011a30e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a314:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011a31b:	10 00 00 
f011a31e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011a324:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a329:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a32f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a335:	ba 00 00 00 00       	mov    $0x0,%edx
f011a33a:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a340:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a346:	29 d0                	sub    %edx,%eax
f011a348:	89 c1                	mov    %eax,%ecx
f011a34a:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a351:	10 00 00 
f011a354:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a359:	0f b6 d0             	movzbl %al,%edx
f011a35c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a362:	01 d0                	add    %edx,%eax
f011a364:	48                   	dec    %eax
f011a365:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a36b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a371:	ba 00 00 00 00       	mov    $0x0,%edx
f011a376:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a37c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a382:	29 d0                	sub    %edx,%eax
f011a384:	01 c1                	add    %eax,%ecx
f011a386:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a38d:	10 00 00 
f011a390:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a395:	0f b6 c0             	movzbl %al,%eax
f011a398:	c1 e0 04             	shl    $0x4,%eax
f011a39b:	89 c2                	mov    %eax,%edx
f011a39d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a3a3:	01 d0                	add    %edx,%eax
f011a3a5:	48                   	dec    %eax
f011a3a6:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a3ac:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3b7:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a3bd:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3c3:	29 d0                	sub    %edx,%eax
f011a3c5:	01 c8                	add    %ecx,%eax
f011a3c7:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a3cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3d3:	39 c2                	cmp    %eax,%edx
f011a3d5:	74 17                	je     f011a3ee <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a3d7:	83 ec 04             	sub    $0x4,%esp
f011a3da:	68 88 b8 13 f0       	push   $0xf013b888
f011a3df:	68 56 01 00 00       	push   $0x156
f011a3e4:	68 7a b5 13 f0       	push   $0xf013b57a
f011a3e9:	e8 17 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3ee:	e8 34 99 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a3f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a3f6:	74 17                	je     f011a40f <test_kmalloc_nextfit+0x12ed>
f011a3f8:	83 ec 04             	sub    $0x4,%esp
f011a3fb:	68 94 b5 13 f0       	push   $0xf013b594
f011a400:	68 57 01 00 00       	push   $0x157
f011a405:	68 7a b5 13 f0       	push   $0xf013b57a
f011a40a:	e8 f6 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a40f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a412:	e8 42 2c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a417:	29 c3                	sub    %eax,%ebx
f011a419:	89 d8                	mov    %ebx,%eax
f011a41b:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a420:	74 17                	je     f011a439 <test_kmalloc_nextfit+0x1317>
f011a422:	83 ec 04             	sub    $0x4,%esp
f011a425:	68 37 b8 13 f0       	push   $0xf013b837
f011a42a:	68 58 01 00 00       	push   $0x158
f011a42f:	68 7a b5 13 f0       	push   $0xf013b57a
f011a434:	e8 cc 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a439:	83 ec 0c             	sub    $0xc,%esp
f011a43c:	68 a8 b8 13 f0       	push   $0xf013b8a8
f011a441:	e8 c8 68 fe ff       	call   f0100d0e <cprintf>
f011a446:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a449:	e8 d9 98 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a44e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a451:	e8 03 2c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a456:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a459:	83 ec 0c             	sub    $0xc,%esp
f011a45c:	68 00 00 38 00       	push   $0x380000
f011a461:	e8 04 d5 fe ff       	call   f010796a <kmalloc>
f011a466:	83 c4 10             	add    $0x10,%esp
f011a469:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a46f:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a476:	10 00 00 
f011a479:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a47f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a484:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a48a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a490:	ba 00 00 00 00       	mov    $0x0,%edx
f011a495:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a49b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a4a1:	29 d0                	sub    %edx,%eax
f011a4a3:	89 c1                	mov    %eax,%ecx
f011a4a5:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a4ac:	10 00 00 
f011a4af:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a4b4:	0f b6 d0             	movzbl %al,%edx
f011a4b7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a4bd:	01 d0                	add    %edx,%eax
f011a4bf:	48                   	dec    %eax
f011a4c0:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a4c6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a4cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4d1:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a4d7:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a4dd:	29 d0                	sub    %edx,%eax
f011a4df:	01 c1                	add    %eax,%ecx
f011a4e1:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a4e8:	10 00 00 
f011a4eb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a4f0:	0f b6 c0             	movzbl %al,%eax
f011a4f3:	c1 e0 04             	shl    $0x4,%eax
f011a4f6:	89 c2                	mov    %eax,%edx
f011a4f8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a4fe:	01 d0                	add    %edx,%eax
f011a500:	48                   	dec    %eax
f011a501:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a507:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a50d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a512:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a518:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a51e:	29 d0                	sub    %edx,%eax
f011a520:	01 c8                	add    %ecx,%eax
f011a522:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a528:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a52e:	39 c2                	cmp    %eax,%edx
f011a530:	74 17                	je     f011a549 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a532:	83 ec 04             	sub    $0x4,%esp
f011a535:	68 88 b8 13 f0       	push   $0xf013b888
f011a53a:	68 62 01 00 00       	push   $0x162
f011a53f:	68 7a b5 13 f0       	push   $0xf013b57a
f011a544:	e8 bc 5c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a549:	e8 d9 97 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a54e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a551:	74 17                	je     f011a56a <test_kmalloc_nextfit+0x1448>
f011a553:	83 ec 04             	sub    $0x4,%esp
f011a556:	68 94 b5 13 f0       	push   $0xf013b594
f011a55b:	68 63 01 00 00       	push   $0x163
f011a560:	68 7a b5 13 f0       	push   $0xf013b57a
f011a565:	e8 9b 5c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a56a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a56d:	e8 e7 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a572:	29 c3                	sub    %eax,%ebx
f011a574:	89 d8                	mov    %ebx,%eax
f011a576:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a57b:	74 17                	je     f011a594 <test_kmalloc_nextfit+0x1472>
f011a57d:	83 ec 04             	sub    $0x4,%esp
f011a580:	68 37 b8 13 f0       	push   $0xf013b837
f011a585:	68 64 01 00 00       	push   $0x164
f011a58a:	68 7a b5 13 f0       	push   $0xf013b57a
f011a58f:	e8 71 5c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a594:	e8 8e 97 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a599:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a59c:	e8 b8 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a5a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a5a4:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a5aa:	83 ec 0c             	sub    $0xc,%esp
f011a5ad:	50                   	push   %eax
f011a5ae:	e8 00 d5 fe ff       	call   f0107ab3 <kfree>
f011a5b3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5b6:	e8 6c 97 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a5bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5be:	74 17                	je     f011a5d7 <test_kmalloc_nextfit+0x14b5>
f011a5c0:	83 ec 04             	sub    $0x4,%esp
f011a5c3:	68 94 b5 13 f0       	push   $0xf013b594
f011a5c8:	68 69 01 00 00       	push   $0x169
f011a5cd:	68 7a b5 13 f0       	push   $0xf013b57a
f011a5d2:	e8 2e 5c fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a5d7:	e8 7d 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a5dc:	89 c2                	mov    %eax,%edx
f011a5de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a5e1:	29 c2                	sub    %eax,%edx
f011a5e3:	89 d0                	mov    %edx,%eax
f011a5e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a5ea:	74 17                	je     f011a603 <test_kmalloc_nextfit+0x14e1>
f011a5ec:	83 ec 04             	sub    $0x4,%esp
f011a5ef:	68 48 b8 13 f0       	push   $0xf013b848
f011a5f4:	68 6a 01 00 00       	push   $0x16a
f011a5f9:	68 7a b5 13 f0       	push   $0xf013b57a
f011a5fe:	e8 02 5c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a603:	e8 1f 97 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a608:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a60b:	e8 49 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a610:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a613:	83 ec 0c             	sub    $0xc,%esp
f011a616:	68 00 fc 3f 00       	push   $0x3ffc00
f011a61b:	e8 4a d3 fe ff       	call   f010796a <kmalloc>
f011a620:	83 c4 10             	add    $0x10,%esp
f011a623:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a629:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a630:	10 00 00 
f011a633:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a639:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a63e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a644:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a64a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a64f:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a655:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a65b:	29 d0                	sub    %edx,%eax
f011a65d:	89 c1                	mov    %eax,%ecx
f011a65f:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a666:	10 00 00 
f011a669:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a66e:	0f b6 d0             	movzbl %al,%edx
f011a671:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a677:	01 d0                	add    %edx,%eax
f011a679:	48                   	dec    %eax
f011a67a:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a680:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a686:	ba 00 00 00 00       	mov    $0x0,%edx
f011a68b:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a691:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a697:	29 d0                	sub    %edx,%eax
f011a699:	01 c1                	add    %eax,%ecx
f011a69b:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a6a2:	10 00 00 
f011a6a5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a6aa:	0f b6 c0             	movzbl %al,%eax
f011a6ad:	c1 e0 04             	shl    $0x4,%eax
f011a6b0:	89 c2                	mov    %eax,%edx
f011a6b2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a6b8:	01 d0                	add    %edx,%eax
f011a6ba:	48                   	dec    %eax
f011a6bb:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a6c1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a6c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6cc:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a6d2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a6d8:	29 d0                	sub    %edx,%eax
f011a6da:	01 c8                	add    %ecx,%eax
f011a6dc:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a6e2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a6e8:	39 c2                	cmp    %eax,%edx
f011a6ea:	74 17                	je     f011a703 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a6ec:	83 ec 04             	sub    $0x4,%esp
f011a6ef:	68 88 b8 13 f0       	push   $0xf013b888
f011a6f4:	68 70 01 00 00       	push   $0x170
f011a6f9:	68 7a b5 13 f0       	push   $0xf013b57a
f011a6fe:	e8 02 5b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a703:	e8 1f 96 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a708:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a70b:	74 17                	je     f011a724 <test_kmalloc_nextfit+0x1602>
f011a70d:	83 ec 04             	sub    $0x4,%esp
f011a710:	68 94 b5 13 f0       	push   $0xf013b594
f011a715:	68 71 01 00 00       	push   $0x171
f011a71a:	68 7a b5 13 f0       	push   $0xf013b57a
f011a71f:	e8 e1 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a724:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a727:	e8 2d 29 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a72c:	29 c3                	sub    %eax,%ebx
f011a72e:	89 d8                	mov    %ebx,%eax
f011a730:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a735:	74 17                	je     f011a74e <test_kmalloc_nextfit+0x162c>
f011a737:	83 ec 04             	sub    $0x4,%esp
f011a73a:	68 37 b8 13 f0       	push   $0xf013b837
f011a73f:	68 72 01 00 00       	push   $0x172
f011a744:	68 7a b5 13 f0       	push   $0xf013b57a
f011a749:	e8 b7 5a fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a74e:	83 ec 0c             	sub    $0xc,%esp
f011a751:	68 e4 b8 13 f0       	push   $0xf013b8e4
f011a756:	e8 b3 65 fe ff       	call   f0100d0e <cprintf>
f011a75b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a75e:	e8 c4 95 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a763:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a766:	e8 ee 28 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a76b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a76e:	83 ec 0c             	sub    $0xc,%esp
f011a771:	68 00 00 60 00       	push   $0x600000
f011a776:	e8 ef d1 fe ff       	call   f010796a <kmalloc>
f011a77b:	83 c4 10             	add    $0x10,%esp
f011a77e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a784:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a78a:	85 c0                	test   %eax,%eax
f011a78c:	74 17                	je     f011a7a5 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a78e:	83 ec 04             	sub    $0x4,%esp
f011a791:	68 88 b8 13 f0       	push   $0xf013b888
f011a796:	68 7c 01 00 00       	push   $0x17c
f011a79b:	68 7a b5 13 f0       	push   $0xf013b57a
f011a7a0:	e8 60 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7a5:	e8 7d 95 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a7aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a7ad:	74 17                	je     f011a7c6 <test_kmalloc_nextfit+0x16a4>
f011a7af:	83 ec 04             	sub    $0x4,%esp
f011a7b2:	68 94 b5 13 f0       	push   $0xf013b594
f011a7b7:	68 7d 01 00 00       	push   $0x17d
f011a7bc:	68 7a b5 13 f0       	push   $0xf013b57a
f011a7c1:	e8 3f 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a7c6:	e8 8e 28 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a7cb:	89 c2                	mov    %eax,%edx
f011a7cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a7d0:	39 c2                	cmp    %eax,%edx
f011a7d2:	74 17                	je     f011a7eb <test_kmalloc_nextfit+0x16c9>
f011a7d4:	83 ec 04             	sub    $0x4,%esp
f011a7d7:	68 37 b8 13 f0       	push   $0xf013b837
f011a7dc:	68 7e 01 00 00       	push   $0x17e
f011a7e1:	68 7a b5 13 f0       	push   $0xf013b57a
f011a7e6:	e8 1a 5a fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a7eb:	83 ec 0c             	sub    $0xc,%esp
f011a7ee:	68 1c b9 13 f0       	push   $0xf013b91c
f011a7f3:	e8 16 65 fe ff       	call   f0100d0e <cprintf>
f011a7f8:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a7fb:	83 ec 0c             	sub    $0xc,%esp
f011a7fe:	68 58 b9 13 f0       	push   $0xf013b958
f011a803:	e8 06 65 fe ff       	call   f0100d0e <cprintf>
f011a808:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a80b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a810:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a813:	5b                   	pop    %ebx
f011a814:	5f                   	pop    %edi
f011a815:	5d                   	pop    %ebp
f011a816:	c3                   	ret    

f011a817 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a817:	55                   	push   %ebp
f011a818:	89 e5                	mov    %esp,%ebp
f011a81a:	57                   	push   %edi
f011a81b:	53                   	push   %ebx
f011a81c:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a822:	83 ec 0c             	sub    $0xc,%esp
f011a825:	68 bc b4 13 f0       	push   $0xf013b4bc
f011a82a:	e8 df 64 fe ff       	call   f0100d0e <cprintf>
f011a82f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a832:	83 ec 0c             	sub    $0xc,%esp
f011a835:	68 ec b4 13 f0       	push   $0xf013b4ec
f011a83a:	e8 cf 64 fe ff       	call   f0100d0e <cprintf>
f011a83f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a842:	83 ec 0c             	sub    $0xc,%esp
f011a845:	68 bc b4 13 f0       	push   $0xf013b4bc
f011a84a:	e8 bf 64 fe ff       	call   f0100d0e <cprintf>
f011a84f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a852:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a858:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a85d:	b8 00 00 00 00       	mov    $0x0,%eax
f011a862:	89 d7                	mov    %edx,%edi
f011a864:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a866:	e8 ee 27 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a86b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a86e:	e8 b4 94 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a873:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a876:	83 ec 0c             	sub    $0xc,%esp
f011a879:	68 00 fc 2f 00       	push   $0x2ffc00
f011a87e:	e8 e7 d0 fe ff       	call   f010796a <kmalloc>
f011a883:	83 c4 10             	add    $0x10,%esp
f011a886:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a88c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a892:	89 c1                	mov    %eax,%ecx
f011a894:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a89b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a89e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a8a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8ae:	f7 75 ec             	divl   -0x14(%ebp)
f011a8b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8b4:	29 d0                	sub    %edx,%eax
f011a8b6:	89 c3                	mov    %eax,%ebx
f011a8b8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a8bf:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a8c4:	0f b6 d0             	movzbl %al,%edx
f011a8c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a8ca:	01 d0                	add    %edx,%eax
f011a8cc:	48                   	dec    %eax
f011a8cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a8d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8d8:	f7 75 e4             	divl   -0x1c(%ebp)
f011a8db:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8de:	29 d0                	sub    %edx,%eax
f011a8e0:	01 c3                	add    %eax,%ebx
f011a8e2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a8e9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a8ee:	0f b6 c0             	movzbl %al,%eax
f011a8f1:	c1 e0 04             	shl    $0x4,%eax
f011a8f4:	89 c2                	mov    %eax,%edx
f011a8f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a8f9:	01 d0                	add    %edx,%eax
f011a8fb:	48                   	dec    %eax
f011a8fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a8ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a902:	ba 00 00 00 00       	mov    $0x0,%edx
f011a907:	f7 75 dc             	divl   -0x24(%ebp)
f011a90a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a90d:	29 d0                	sub    %edx,%eax
f011a90f:	01 d8                	add    %ebx,%eax
f011a911:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a916:	39 c1                	cmp    %eax,%ecx
f011a918:	74 17                	je     f011a931 <test_kmalloc_bestfit1+0x11a>
f011a91a:	83 ec 04             	sub    $0x4,%esp
f011a91d:	68 94 b9 13 f0       	push   $0xf013b994
f011a922:	68 98 01 00 00       	push   $0x198
f011a927:	68 7a b5 13 f0       	push   $0xf013b57a
f011a92c:	e8 d4 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a931:	e8 f1 93 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a936:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a939:	74 17                	je     f011a952 <test_kmalloc_bestfit1+0x13b>
f011a93b:	83 ec 04             	sub    $0x4,%esp
f011a93e:	68 94 b5 13 f0       	push   $0xf013b594
f011a943:	68 99 01 00 00       	push   $0x199
f011a948:	68 7a b5 13 f0       	push   $0xf013b57a
f011a94d:	e8 b3 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a952:	e8 02 27 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a957:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a95a:	29 c2                	sub    %eax,%edx
f011a95c:	89 d0                	mov    %edx,%eax
f011a95e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a963:	74 17                	je     f011a97c <test_kmalloc_bestfit1+0x165>
f011a965:	83 ec 04             	sub    $0x4,%esp
f011a968:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011a96d:	68 9a 01 00 00       	push   $0x19a
f011a972:	68 7a b5 13 f0       	push   $0xf013b57a
f011a977:	e8 89 58 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a97c:	e8 d8 26 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a981:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a984:	e8 9e 93 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011a989:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a98c:	83 ec 0c             	sub    $0xc,%esp
f011a98f:	68 00 fc 2f 00       	push   $0x2ffc00
f011a994:	e8 d1 cf fe ff       	call   f010796a <kmalloc>
f011a999:	83 c4 10             	add    $0x10,%esp
f011a99c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a9a2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a9a8:	89 c1                	mov    %eax,%ecx
f011a9aa:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a9b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a9b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a9bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9c4:	f7 75 d4             	divl   -0x2c(%ebp)
f011a9c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9ca:	29 d0                	sub    %edx,%eax
f011a9cc:	89 c3                	mov    %eax,%ebx
f011a9ce:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a9d5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011a9da:	0f b6 d0             	movzbl %al,%edx
f011a9dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a9e0:	01 d0                	add    %edx,%eax
f011a9e2:	48                   	dec    %eax
f011a9e3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a9e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9ee:	f7 75 cc             	divl   -0x34(%ebp)
f011a9f1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9f4:	29 d0                	sub    %edx,%eax
f011a9f6:	01 c3                	add    %eax,%ebx
f011a9f8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a9ff:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011aa04:	0f b6 c0             	movzbl %al,%eax
f011aa07:	c1 e0 04             	shl    $0x4,%eax
f011aa0a:	89 c2                	mov    %eax,%edx
f011aa0c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aa0f:	01 d0                	add    %edx,%eax
f011aa11:	48                   	dec    %eax
f011aa12:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aa15:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa18:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa1d:	f7 75 c4             	divl   -0x3c(%ebp)
f011aa20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa23:	29 d0                	sub    %edx,%eax
f011aa25:	01 d8                	add    %ebx,%eax
f011aa27:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011aa2c:	39 c1                	cmp    %eax,%ecx
f011aa2e:	74 17                	je     f011aa47 <test_kmalloc_bestfit1+0x230>
f011aa30:	83 ec 04             	sub    $0x4,%esp
f011aa33:	68 94 b9 13 f0       	push   $0xf013b994
f011aa38:	68 a0 01 00 00       	push   $0x1a0
f011aa3d:	68 7a b5 13 f0       	push   $0xf013b57a
f011aa42:	e8 be 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa47:	e8 db 92 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011aa4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa4f:	74 17                	je     f011aa68 <test_kmalloc_bestfit1+0x251>
f011aa51:	83 ec 04             	sub    $0x4,%esp
f011aa54:	68 94 b5 13 f0       	push   $0xf013b594
f011aa59:	68 a1 01 00 00       	push   $0x1a1
f011aa5e:	68 7a b5 13 f0       	push   $0xf013b57a
f011aa63:	e8 9d 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa68:	e8 ec 25 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011aa6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa70:	29 c2                	sub    %eax,%edx
f011aa72:	89 d0                	mov    %edx,%eax
f011aa74:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aa79:	74 17                	je     f011aa92 <test_kmalloc_bestfit1+0x27b>
f011aa7b:	83 ec 04             	sub    $0x4,%esp
f011aa7e:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011aa83:	68 a2 01 00 00       	push   $0x1a2
f011aa88:	68 7a b5 13 f0       	push   $0xf013b57a
f011aa8d:	e8 73 57 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa92:	e8 c2 25 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011aa97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa9a:	e8 88 92 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011aa9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011aaa2:	83 ec 0c             	sub    $0xc,%esp
f011aaa5:	68 00 fc 1f 00       	push   $0x1ffc00
f011aaaa:	e8 bb ce fe ff       	call   f010796a <kmalloc>
f011aaaf:	83 c4 10             	add    $0x10,%esp
f011aab2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011aab8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011aabe:	89 c1                	mov    %eax,%ecx
f011aac0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aac7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aaca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aacf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aad2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aad5:	ba 00 00 00 00       	mov    $0x0,%edx
f011aada:	f7 75 bc             	divl   -0x44(%ebp)
f011aadd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aae0:	29 d0                	sub    %edx,%eax
f011aae2:	89 c3                	mov    %eax,%ebx
f011aae4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aaeb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011aaf0:	0f b6 d0             	movzbl %al,%edx
f011aaf3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aaf6:	01 d0                	add    %edx,%eax
f011aaf8:	48                   	dec    %eax
f011aaf9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aafc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aaff:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab04:	f7 75 b4             	divl   -0x4c(%ebp)
f011ab07:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab0a:	29 d0                	sub    %edx,%eax
f011ab0c:	01 c3                	add    %eax,%ebx
f011ab0e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab15:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ab1a:	0f b6 c0             	movzbl %al,%eax
f011ab1d:	c1 e0 04             	shl    $0x4,%eax
f011ab20:	89 c2                	mov    %eax,%edx
f011ab22:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab25:	01 d0                	add    %edx,%eax
f011ab27:	48                   	dec    %eax
f011ab28:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab2b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab2e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab33:	f7 75 ac             	divl   -0x54(%ebp)
f011ab36:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab39:	29 d0                	sub    %edx,%eax
f011ab3b:	01 d8                	add    %ebx,%eax
f011ab3d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ab42:	39 c1                	cmp    %eax,%ecx
f011ab44:	74 17                	je     f011ab5d <test_kmalloc_bestfit1+0x346>
f011ab46:	83 ec 04             	sub    $0x4,%esp
f011ab49:	68 94 b9 13 f0       	push   $0xf013b994
f011ab4e:	68 a8 01 00 00       	push   $0x1a8
f011ab53:	68 7a b5 13 f0       	push   $0xf013b57a
f011ab58:	e8 a8 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab5d:	e8 c5 91 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ab62:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab65:	74 17                	je     f011ab7e <test_kmalloc_bestfit1+0x367>
f011ab67:	83 ec 04             	sub    $0x4,%esp
f011ab6a:	68 94 b5 13 f0       	push   $0xf013b594
f011ab6f:	68 a9 01 00 00       	push   $0x1a9
f011ab74:	68 7a b5 13 f0       	push   $0xf013b57a
f011ab79:	e8 87 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ab7e:	e8 d6 24 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ab83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab86:	29 c2                	sub    %eax,%edx
f011ab88:	89 d0                	mov    %edx,%eax
f011ab8a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ab8f:	74 17                	je     f011aba8 <test_kmalloc_bestfit1+0x391>
f011ab91:	83 ec 04             	sub    $0x4,%esp
f011ab94:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011ab99:	68 aa 01 00 00       	push   $0x1aa
f011ab9e:	68 7a b5 13 f0       	push   $0xf013b57a
f011aba3:	e8 5d 56 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aba8:	e8 ac 24 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011abad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abb0:	e8 72 91 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011abb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011abb8:	83 ec 0c             	sub    $0xc,%esp
f011abbb:	68 00 fc 1f 00       	push   $0x1ffc00
f011abc0:	e8 a5 cd fe ff       	call   f010796a <kmalloc>
f011abc5:	83 c4 10             	add    $0x10,%esp
f011abc8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011abce:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011abd4:	89 c1                	mov    %eax,%ecx
f011abd6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011abdd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011abe0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011abe5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011abe8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011abeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011abf0:	f7 75 a4             	divl   -0x5c(%ebp)
f011abf3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011abf6:	29 d0                	sub    %edx,%eax
f011abf8:	89 c3                	mov    %eax,%ebx
f011abfa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac01:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ac06:	0f b6 d0             	movzbl %al,%edx
f011ac09:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac0c:	01 d0                	add    %edx,%eax
f011ac0e:	48                   	dec    %eax
f011ac0f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac12:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac15:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac1a:	f7 75 9c             	divl   -0x64(%ebp)
f011ac1d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac20:	29 d0                	sub    %edx,%eax
f011ac22:	01 c3                	add    %eax,%ebx
f011ac24:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac2b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ac30:	0f b6 c0             	movzbl %al,%eax
f011ac33:	c1 e0 04             	shl    $0x4,%eax
f011ac36:	89 c2                	mov    %eax,%edx
f011ac38:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac3b:	01 d0                	add    %edx,%eax
f011ac3d:	48                   	dec    %eax
f011ac3e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac41:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac44:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac49:	f7 75 94             	divl   -0x6c(%ebp)
f011ac4c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac4f:	29 d0                	sub    %edx,%eax
f011ac51:	01 d8                	add    %ebx,%eax
f011ac53:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ac58:	39 c1                	cmp    %eax,%ecx
f011ac5a:	74 17                	je     f011ac73 <test_kmalloc_bestfit1+0x45c>
f011ac5c:	83 ec 04             	sub    $0x4,%esp
f011ac5f:	68 94 b9 13 f0       	push   $0xf013b994
f011ac64:	68 b0 01 00 00       	push   $0x1b0
f011ac69:	68 7a b5 13 f0       	push   $0xf013b57a
f011ac6e:	e8 92 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac73:	e8 af 90 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ac78:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac7b:	74 17                	je     f011ac94 <test_kmalloc_bestfit1+0x47d>
f011ac7d:	83 ec 04             	sub    $0x4,%esp
f011ac80:	68 94 b5 13 f0       	push   $0xf013b594
f011ac85:	68 b1 01 00 00       	push   $0x1b1
f011ac8a:	68 7a b5 13 f0       	push   $0xf013b57a
f011ac8f:	e8 71 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ac94:	e8 c0 23 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ac99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac9c:	29 c2                	sub    %eax,%edx
f011ac9e:	89 d0                	mov    %edx,%eax
f011aca0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aca5:	74 17                	je     f011acbe <test_kmalloc_bestfit1+0x4a7>
f011aca7:	83 ec 04             	sub    $0x4,%esp
f011acaa:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011acaf:	68 b2 01 00 00       	push   $0x1b2
f011acb4:	68 7a b5 13 f0       	push   $0xf013b57a
f011acb9:	e8 47 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acbe:	e8 96 23 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011acc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acc6:	e8 5c 90 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011accb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011acce:	83 ec 0c             	sub    $0xc,%esp
f011acd1:	68 00 fc 0f 00       	push   $0xffc00
f011acd6:	e8 8f cc fe ff       	call   f010796a <kmalloc>
f011acdb:	83 c4 10             	add    $0x10,%esp
f011acde:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ace4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011acea:	89 c1                	mov    %eax,%ecx
f011acec:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011acf3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011acf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acfb:	89 45 88             	mov    %eax,-0x78(%ebp)
f011acfe:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad01:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad06:	f7 75 8c             	divl   -0x74(%ebp)
f011ad09:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad0c:	29 d0                	sub    %edx,%eax
f011ad0e:	89 c3                	mov    %eax,%ebx
f011ad10:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad17:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ad1c:	0f b6 d0             	movzbl %al,%edx
f011ad1f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad22:	01 d0                	add    %edx,%eax
f011ad24:	48                   	dec    %eax
f011ad25:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad28:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad30:	f7 75 84             	divl   -0x7c(%ebp)
f011ad33:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad36:	29 d0                	sub    %edx,%eax
f011ad38:	01 c3                	add    %eax,%ebx
f011ad3a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ad41:	10 00 00 
f011ad44:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ad49:	0f b6 c0             	movzbl %al,%eax
f011ad4c:	c1 e0 04             	shl    $0x4,%eax
f011ad4f:	89 c2                	mov    %eax,%edx
f011ad51:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ad57:	01 d0                	add    %edx,%eax
f011ad59:	48                   	dec    %eax
f011ad5a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ad60:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ad66:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad6b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ad71:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ad77:	29 d0                	sub    %edx,%eax
f011ad79:	01 d8                	add    %ebx,%eax
f011ad7b:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ad80:	39 c1                	cmp    %eax,%ecx
f011ad82:	74 17                	je     f011ad9b <test_kmalloc_bestfit1+0x584>
f011ad84:	83 ec 04             	sub    $0x4,%esp
f011ad87:	68 94 b9 13 f0       	push   $0xf013b994
f011ad8c:	68 b8 01 00 00       	push   $0x1b8
f011ad91:	68 7a b5 13 f0       	push   $0xf013b57a
f011ad96:	e8 6a 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad9b:	e8 87 8f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ada0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ada3:	74 17                	je     f011adbc <test_kmalloc_bestfit1+0x5a5>
f011ada5:	83 ec 04             	sub    $0x4,%esp
f011ada8:	68 94 b5 13 f0       	push   $0xf013b594
f011adad:	68 b9 01 00 00       	push   $0x1b9
f011adb2:	68 7a b5 13 f0       	push   $0xf013b57a
f011adb7:	e8 49 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011adbc:	e8 98 22 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011adc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adc4:	29 c2                	sub    %eax,%edx
f011adc6:	89 d0                	mov    %edx,%eax
f011adc8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011adcd:	74 17                	je     f011ade6 <test_kmalloc_bestfit1+0x5cf>
f011adcf:	83 ec 04             	sub    $0x4,%esp
f011add2:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011add7:	68 ba 01 00 00       	push   $0x1ba
f011addc:	68 7a b5 13 f0       	push   $0xf013b57a
f011ade1:	e8 1f 54 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ade6:	e8 6e 22 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011adeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adee:	e8 34 8f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011adf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011adf6:	83 ec 0c             	sub    $0xc,%esp
f011adf9:	68 00 fc 0f 00       	push   $0xffc00
f011adfe:	e8 67 cb fe ff       	call   f010796a <kmalloc>
f011ae03:	83 c4 10             	add    $0x10,%esp
f011ae06:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ae0c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ae12:	89 c1                	mov    %eax,%ecx
f011ae14:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae1b:	10 00 00 
f011ae1e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae29:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae2f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae35:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae3a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae40:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae46:	29 d0                	sub    %edx,%eax
f011ae48:	89 c3                	mov    %eax,%ebx
f011ae4a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ae51:	10 00 00 
f011ae54:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ae59:	0f b6 d0             	movzbl %al,%edx
f011ae5c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ae62:	01 d0                	add    %edx,%eax
f011ae64:	48                   	dec    %eax
f011ae65:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ae6b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ae71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae76:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ae7c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ae82:	29 d0                	sub    %edx,%eax
f011ae84:	01 c3                	add    %eax,%ebx
f011ae86:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ae8d:	10 00 00 
f011ae90:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ae95:	0f b6 c0             	movzbl %al,%eax
f011ae98:	c1 e0 04             	shl    $0x4,%eax
f011ae9b:	89 c2                	mov    %eax,%edx
f011ae9d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aea3:	01 d0                	add    %edx,%eax
f011aea5:	48                   	dec    %eax
f011aea6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aeac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aeb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeb7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aebd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aec3:	29 d0                	sub    %edx,%eax
f011aec5:	01 d8                	add    %ebx,%eax
f011aec7:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aecc:	39 c1                	cmp    %eax,%ecx
f011aece:	74 17                	je     f011aee7 <test_kmalloc_bestfit1+0x6d0>
f011aed0:	83 ec 04             	sub    $0x4,%esp
f011aed3:	68 94 b9 13 f0       	push   $0xf013b994
f011aed8:	68 c0 01 00 00       	push   $0x1c0
f011aedd:	68 7a b5 13 f0       	push   $0xf013b57a
f011aee2:	e8 1e 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aee7:	e8 3b 8e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011aeec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aeef:	74 17                	je     f011af08 <test_kmalloc_bestfit1+0x6f1>
f011aef1:	83 ec 04             	sub    $0x4,%esp
f011aef4:	68 94 b5 13 f0       	push   $0xf013b594
f011aef9:	68 c1 01 00 00       	push   $0x1c1
f011aefe:	68 7a b5 13 f0       	push   $0xf013b57a
f011af03:	e8 fd 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af08:	e8 4c 21 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011af0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af10:	29 c2                	sub    %eax,%edx
f011af12:	89 d0                	mov    %edx,%eax
f011af14:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af19:	74 17                	je     f011af32 <test_kmalloc_bestfit1+0x71b>
f011af1b:	83 ec 04             	sub    $0x4,%esp
f011af1e:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011af23:	68 c2 01 00 00       	push   $0x1c2
f011af28:	68 7a b5 13 f0       	push   $0xf013b57a
f011af2d:	e8 d3 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011af32:	e8 22 21 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011af37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af3a:	e8 e8 8d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011af3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011af42:	83 ec 0c             	sub    $0xc,%esp
f011af45:	68 00 fc 0f 00       	push   $0xffc00
f011af4a:	e8 1b ca fe ff       	call   f010796a <kmalloc>
f011af4f:	83 c4 10             	add    $0x10,%esp
f011af52:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011af58:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011af5e:	89 c1                	mov    %eax,%ecx
f011af60:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011af67:	10 00 00 
f011af6a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011af70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af75:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011af7b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011af81:	ba 00 00 00 00       	mov    $0x0,%edx
f011af86:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011af8c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011af92:	29 d0                	sub    %edx,%eax
f011af94:	89 c3                	mov    %eax,%ebx
f011af96:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011af9d:	10 00 00 
f011afa0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011afa5:	0f b6 d0             	movzbl %al,%edx
f011afa8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011afae:	01 d0                	add    %edx,%eax
f011afb0:	48                   	dec    %eax
f011afb1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011afb7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011afbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011afc2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011afc8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011afce:	29 d0                	sub    %edx,%eax
f011afd0:	01 c3                	add    %eax,%ebx
f011afd2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011afd9:	10 00 00 
f011afdc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011afe1:	0f b6 c0             	movzbl %al,%eax
f011afe4:	c1 e0 04             	shl    $0x4,%eax
f011afe7:	89 c2                	mov    %eax,%edx
f011afe9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011afef:	01 d0                	add    %edx,%eax
f011aff1:	48                   	dec    %eax
f011aff2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011aff8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011affe:	ba 00 00 00 00       	mov    $0x0,%edx
f011b003:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b009:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b00f:	29 d0                	sub    %edx,%eax
f011b011:	01 d8                	add    %ebx,%eax
f011b013:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b018:	39 c1                	cmp    %eax,%ecx
f011b01a:	74 17                	je     f011b033 <test_kmalloc_bestfit1+0x81c>
f011b01c:	83 ec 04             	sub    $0x4,%esp
f011b01f:	68 94 b9 13 f0       	push   $0xf013b994
f011b024:	68 c8 01 00 00       	push   $0x1c8
f011b029:	68 7a b5 13 f0       	push   $0xf013b57a
f011b02e:	e8 d2 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b033:	e8 ef 8c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b038:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b03b:	74 17                	je     f011b054 <test_kmalloc_bestfit1+0x83d>
f011b03d:	83 ec 04             	sub    $0x4,%esp
f011b040:	68 94 b5 13 f0       	push   $0xf013b594
f011b045:	68 c9 01 00 00       	push   $0x1c9
f011b04a:	68 7a b5 13 f0       	push   $0xf013b57a
f011b04f:	e8 b1 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b054:	e8 00 20 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b059:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b05c:	29 c2                	sub    %eax,%edx
f011b05e:	89 d0                	mov    %edx,%eax
f011b060:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b065:	74 17                	je     f011b07e <test_kmalloc_bestfit1+0x867>
f011b067:	83 ec 04             	sub    $0x4,%esp
f011b06a:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b06f:	68 ca 01 00 00       	push   $0x1ca
f011b074:	68 7a b5 13 f0       	push   $0xf013b57a
f011b079:	e8 87 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b07e:	e8 d6 1f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b083:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b086:	e8 9c 8c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b08b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b08e:	83 ec 0c             	sub    $0xc,%esp
f011b091:	68 00 fc 0f 00       	push   $0xffc00
f011b096:	e8 cf c8 fe ff       	call   f010796a <kmalloc>
f011b09b:	83 c4 10             	add    $0x10,%esp
f011b09e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b0a4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011b0aa:	89 c1                	mov    %eax,%ecx
f011b0ac:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b0b3:	10 00 00 
f011b0b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b0bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0c1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b0c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0d2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b0d8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b0de:	29 d0                	sub    %edx,%eax
f011b0e0:	89 c3                	mov    %eax,%ebx
f011b0e2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b0e9:	10 00 00 
f011b0ec:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b0f1:	0f b6 d0             	movzbl %al,%edx
f011b0f4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b0fa:	01 d0                	add    %edx,%eax
f011b0fc:	48                   	dec    %eax
f011b0fd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b103:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b109:	ba 00 00 00 00       	mov    $0x0,%edx
f011b10e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b114:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b11a:	29 d0                	sub    %edx,%eax
f011b11c:	01 c3                	add    %eax,%ebx
f011b11e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b125:	10 00 00 
f011b128:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b12d:	0f b6 c0             	movzbl %al,%eax
f011b130:	c1 e0 04             	shl    $0x4,%eax
f011b133:	89 c2                	mov    %eax,%edx
f011b135:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b13b:	01 d0                	add    %edx,%eax
f011b13d:	48                   	dec    %eax
f011b13e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b144:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b14a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b14f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b155:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b15b:	29 d0                	sub    %edx,%eax
f011b15d:	01 d8                	add    %ebx,%eax
f011b15f:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b164:	39 c1                	cmp    %eax,%ecx
f011b166:	74 17                	je     f011b17f <test_kmalloc_bestfit1+0x968>
f011b168:	83 ec 04             	sub    $0x4,%esp
f011b16b:	68 94 b9 13 f0       	push   $0xf013b994
f011b170:	68 d0 01 00 00       	push   $0x1d0
f011b175:	68 7a b5 13 f0       	push   $0xf013b57a
f011b17a:	e8 86 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b17f:	e8 a3 8b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b184:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b187:	74 17                	je     f011b1a0 <test_kmalloc_bestfit1+0x989>
f011b189:	83 ec 04             	sub    $0x4,%esp
f011b18c:	68 94 b5 13 f0       	push   $0xf013b594
f011b191:	68 d1 01 00 00       	push   $0x1d1
f011b196:	68 7a b5 13 f0       	push   $0xf013b57a
f011b19b:	e8 65 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b1a0:	e8 b4 1e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b1a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1a8:	29 c2                	sub    %eax,%edx
f011b1aa:	89 d0                	mov    %edx,%eax
f011b1ac:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1b1:	74 17                	je     f011b1ca <test_kmalloc_bestfit1+0x9b3>
f011b1b3:	83 ec 04             	sub    $0x4,%esp
f011b1b6:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b1bb:	68 d2 01 00 00       	push   $0x1d2
f011b1c0:	68 7a b5 13 f0       	push   $0xf013b57a
f011b1c5:	e8 3b 50 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1ca:	e8 8a 1e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b1cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1d2:	e8 50 8b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b1d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b1da:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b1e0:	83 ec 0c             	sub    $0xc,%esp
f011b1e3:	50                   	push   %eax
f011b1e4:	e8 ca c8 fe ff       	call   f0107ab3 <kfree>
f011b1e9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1ec:	e8 36 8b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b1f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1f4:	74 17                	je     f011b20d <test_kmalloc_bestfit1+0x9f6>
f011b1f6:	83 ec 04             	sub    $0x4,%esp
f011b1f9:	68 94 b5 13 f0       	push   $0xf013b594
f011b1fe:	68 db 01 00 00       	push   $0x1db
f011b203:	68 7a b5 13 f0       	push   $0xf013b57a
f011b208:	e8 f8 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b20d:	e8 47 1e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b212:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b215:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b21a:	74 17                	je     f011b233 <test_kmalloc_bestfit1+0xa1c>
f011b21c:	83 ec 04             	sub    $0x4,%esp
f011b21f:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011b224:	68 dc 01 00 00       	push   $0x1dc
f011b229:	68 7a b5 13 f0       	push   $0xf013b57a
f011b22e:	e8 d2 4f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b233:	e8 21 1e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b238:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b23b:	e8 e7 8a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b240:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b243:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b249:	83 ec 0c             	sub    $0xc,%esp
f011b24c:	50                   	push   %eax
f011b24d:	e8 61 c8 fe ff       	call   f0107ab3 <kfree>
f011b252:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b255:	e8 cd 8a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b25a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b25d:	74 17                	je     f011b276 <test_kmalloc_bestfit1+0xa5f>
f011b25f:	83 ec 04             	sub    $0x4,%esp
f011b262:	68 94 b5 13 f0       	push   $0xf013b594
f011b267:	68 e2 01 00 00       	push   $0x1e2
f011b26c:	68 7a b5 13 f0       	push   $0xf013b57a
f011b271:	e8 8f 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b276:	e8 de 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b27b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b27e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b283:	74 17                	je     f011b29c <test_kmalloc_bestfit1+0xa85>
f011b285:	83 ec 04             	sub    $0x4,%esp
f011b288:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011b28d:	68 e3 01 00 00       	push   $0x1e3
f011b292:	68 7a b5 13 f0       	push   $0xf013b57a
f011b297:	e8 69 4f fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b29c:	e8 b8 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b2a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2a4:	e8 7e 8a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b2a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b2ac:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b2b2:	83 ec 0c             	sub    $0xc,%esp
f011b2b5:	50                   	push   %eax
f011b2b6:	e8 f8 c7 fe ff       	call   f0107ab3 <kfree>
f011b2bb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2be:	e8 64 8a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b2c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2c6:	74 17                	je     f011b2df <test_kmalloc_bestfit1+0xac8>
f011b2c8:	83 ec 04             	sub    $0x4,%esp
f011b2cb:	68 94 b5 13 f0       	push   $0xf013b594
f011b2d0:	68 e9 01 00 00       	push   $0x1e9
f011b2d5:	68 7a b5 13 f0       	push   $0xf013b57a
f011b2da:	e8 26 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b2df:	e8 75 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b2e4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b2e7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b2ec:	74 17                	je     f011b305 <test_kmalloc_bestfit1+0xaee>
f011b2ee:	83 ec 04             	sub    $0x4,%esp
f011b2f1:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011b2f6:	68 ea 01 00 00       	push   $0x1ea
f011b2fb:	68 7a b5 13 f0       	push   $0xf013b57a
f011b300:	e8 00 4f fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b305:	e8 4f 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b30a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b30d:	e8 15 8a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b312:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b315:	83 ec 0c             	sub    $0xc,%esp
f011b318:	68 00 00 08 00       	push   $0x80000
f011b31d:	e8 48 c6 fe ff       	call   f010796a <kmalloc>
f011b322:	83 c4 10             	add    $0x10,%esp
f011b325:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b32b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b331:	89 c1                	mov    %eax,%ecx
f011b333:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b33a:	10 00 00 
f011b33d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b343:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b348:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b34e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b354:	ba 00 00 00 00       	mov    $0x0,%edx
f011b359:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b35f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b365:	29 d0                	sub    %edx,%eax
f011b367:	89 c3                	mov    %eax,%ebx
f011b369:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b370:	10 00 00 
f011b373:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b378:	0f b6 d0             	movzbl %al,%edx
f011b37b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b381:	01 d0                	add    %edx,%eax
f011b383:	48                   	dec    %eax
f011b384:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b38a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b390:	ba 00 00 00 00       	mov    $0x0,%edx
f011b395:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b39b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b3a1:	29 d0                	sub    %edx,%eax
f011b3a3:	01 c3                	add    %eax,%ebx
f011b3a5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b3ac:	10 00 00 
f011b3af:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b3b4:	0f b6 c0             	movzbl %al,%eax
f011b3b7:	c1 e0 04             	shl    $0x4,%eax
f011b3ba:	89 c2                	mov    %eax,%edx
f011b3bc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b3c2:	01 d0                	add    %edx,%eax
f011b3c4:	48                   	dec    %eax
f011b3c5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b3cb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b3d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3d6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b3dc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b3e2:	29 d0                	sub    %edx,%eax
f011b3e4:	01 d8                	add    %ebx,%eax
f011b3e6:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b3eb:	39 c1                	cmp    %eax,%ecx
f011b3ed:	74 17                	je     f011b406 <test_kmalloc_bestfit1+0xbef>
f011b3ef:	83 ec 04             	sub    $0x4,%esp
f011b3f2:	68 94 b9 13 f0       	push   $0xf013b994
f011b3f7:	68 f3 01 00 00       	push   $0x1f3
f011b3fc:	68 7a b5 13 f0       	push   $0xf013b57a
f011b401:	e8 ff 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b406:	e8 1c 89 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b40b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b40e:	74 17                	je     f011b427 <test_kmalloc_bestfit1+0xc10>
f011b410:	83 ec 04             	sub    $0x4,%esp
f011b413:	68 94 b5 13 f0       	push   $0xf013b594
f011b418:	68 f4 01 00 00       	push   $0x1f4
f011b41d:	68 7a b5 13 f0       	push   $0xf013b57a
f011b422:	e8 de 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b427:	e8 2d 1c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b42c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b42f:	29 c2                	sub    %eax,%edx
f011b431:	89 d0                	mov    %edx,%eax
f011b433:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b438:	74 17                	je     f011b451 <test_kmalloc_bestfit1+0xc3a>
f011b43a:	83 ec 04             	sub    $0x4,%esp
f011b43d:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b442:	68 f5 01 00 00       	push   $0x1f5
f011b447:	68 7a b5 13 f0       	push   $0xf013b57a
f011b44c:	e8 b4 4d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b451:	e8 03 1c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b456:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b459:	e8 c9 88 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b45e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b461:	83 ec 0c             	sub    $0xc,%esp
f011b464:	68 00 fc 0f 00       	push   $0xffc00
f011b469:	e8 fc c4 fe ff       	call   f010796a <kmalloc>
f011b46e:	83 c4 10             	add    $0x10,%esp
f011b471:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b477:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b47d:	89 c1                	mov    %eax,%ecx
f011b47f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b486:	10 00 00 
f011b489:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b48f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b494:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b49a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4a5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b4ab:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4b1:	29 d0                	sub    %edx,%eax
f011b4b3:	89 c3                	mov    %eax,%ebx
f011b4b5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b4bc:	10 00 00 
f011b4bf:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b4c4:	0f b6 d0             	movzbl %al,%edx
f011b4c7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b4cd:	01 d0                	add    %edx,%eax
f011b4cf:	48                   	dec    %eax
f011b4d0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b4d6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4e1:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b4e7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b4ed:	29 d0                	sub    %edx,%eax
f011b4ef:	01 c3                	add    %eax,%ebx
f011b4f1:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b4f8:	10 00 00 
f011b4fb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b500:	0f b6 c0             	movzbl %al,%eax
f011b503:	c1 e0 04             	shl    $0x4,%eax
f011b506:	89 c2                	mov    %eax,%edx
f011b508:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b50e:	01 d0                	add    %edx,%eax
f011b510:	48                   	dec    %eax
f011b511:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b517:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b51d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b522:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b528:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b52e:	29 d0                	sub    %edx,%eax
f011b530:	01 d8                	add    %ebx,%eax
f011b532:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b537:	39 c1                	cmp    %eax,%ecx
f011b539:	74 17                	je     f011b552 <test_kmalloc_bestfit1+0xd3b>
f011b53b:	83 ec 04             	sub    $0x4,%esp
f011b53e:	68 94 b9 13 f0       	push   $0xf013b994
f011b543:	68 fb 01 00 00       	push   $0x1fb
f011b548:	68 7a b5 13 f0       	push   $0xf013b57a
f011b54d:	e8 b3 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b552:	e8 d0 87 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b557:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b55a:	74 17                	je     f011b573 <test_kmalloc_bestfit1+0xd5c>
f011b55c:	83 ec 04             	sub    $0x4,%esp
f011b55f:	68 94 b5 13 f0       	push   $0xf013b594
f011b564:	68 fc 01 00 00       	push   $0x1fc
f011b569:	68 7a b5 13 f0       	push   $0xf013b57a
f011b56e:	e8 92 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b573:	e8 e1 1a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b578:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b57b:	29 c2                	sub    %eax,%edx
f011b57d:	89 d0                	mov    %edx,%eax
f011b57f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b584:	74 17                	je     f011b59d <test_kmalloc_bestfit1+0xd86>
f011b586:	83 ec 04             	sub    $0x4,%esp
f011b589:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b58e:	68 fd 01 00 00       	push   $0x1fd
f011b593:	68 7a b5 13 f0       	push   $0xf013b57a
f011b598:	e8 68 4c fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b59d:	e8 b7 1a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b5a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5a5:	e8 7d 87 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b5aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b5ad:	83 ec 0c             	sub    $0xc,%esp
f011b5b0:	68 00 fc 03 00       	push   $0x3fc00
f011b5b5:	e8 b0 c3 fe ff       	call   f010796a <kmalloc>
f011b5ba:	83 c4 10             	add    $0x10,%esp
f011b5bd:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b5c3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b5c9:	89 c1                	mov    %eax,%ecx
f011b5cb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b5d2:	10 00 00 
f011b5d5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b5db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b5e0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b5e6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b5ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5f1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b5f7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b5fd:	29 d0                	sub    %edx,%eax
f011b5ff:	89 c3                	mov    %eax,%ebx
f011b601:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b608:	10 00 00 
f011b60b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b610:	0f b6 d0             	movzbl %al,%edx
f011b613:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b619:	01 d0                	add    %edx,%eax
f011b61b:	48                   	dec    %eax
f011b61c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b622:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b628:	ba 00 00 00 00       	mov    $0x0,%edx
f011b62d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b633:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b639:	29 d0                	sub    %edx,%eax
f011b63b:	01 c3                	add    %eax,%ebx
f011b63d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b644:	10 00 00 
f011b647:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b64c:	0f b6 c0             	movzbl %al,%eax
f011b64f:	c1 e0 04             	shl    $0x4,%eax
f011b652:	89 c2                	mov    %eax,%edx
f011b654:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b65a:	01 d0                	add    %edx,%eax
f011b65c:	48                   	dec    %eax
f011b65d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b663:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b669:	ba 00 00 00 00       	mov    $0x0,%edx
f011b66e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b674:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b67a:	29 d0                	sub    %edx,%eax
f011b67c:	01 d8                	add    %ebx,%eax
f011b67e:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b683:	39 c1                	cmp    %eax,%ecx
f011b685:	74 17                	je     f011b69e <test_kmalloc_bestfit1+0xe87>
f011b687:	83 ec 04             	sub    $0x4,%esp
f011b68a:	68 94 b9 13 f0       	push   $0xf013b994
f011b68f:	68 03 02 00 00       	push   $0x203
f011b694:	68 7a b5 13 f0       	push   $0xf013b57a
f011b699:	e8 67 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b69e:	e8 84 86 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b6a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6a6:	74 17                	je     f011b6bf <test_kmalloc_bestfit1+0xea8>
f011b6a8:	83 ec 04             	sub    $0x4,%esp
f011b6ab:	68 94 b5 13 f0       	push   $0xf013b594
f011b6b0:	68 04 02 00 00       	push   $0x204
f011b6b5:	68 7a b5 13 f0       	push   $0xf013b57a
f011b6ba:	e8 46 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b6bf:	e8 95 19 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b6c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b6c7:	29 c2                	sub    %eax,%edx
f011b6c9:	89 d0                	mov    %edx,%eax
f011b6cb:	83 f8 40             	cmp    $0x40,%eax
f011b6ce:	74 17                	je     f011b6e7 <test_kmalloc_bestfit1+0xed0>
f011b6d0:	83 ec 04             	sub    $0x4,%esp
f011b6d3:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b6d8:	68 05 02 00 00       	push   $0x205
f011b6dd:	68 7a b5 13 f0       	push   $0xf013b57a
f011b6e2:	e8 1e 4b fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b6e7:	e8 6d 19 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b6ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6ef:	e8 33 86 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b6f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b6f7:	83 ec 0c             	sub    $0xc,%esp
f011b6fa:	68 00 fc 3f 00       	push   $0x3ffc00
f011b6ff:	e8 66 c2 fe ff       	call   f010796a <kmalloc>
f011b704:	83 c4 10             	add    $0x10,%esp
f011b707:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b70d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b713:	89 c1                	mov    %eax,%ecx
f011b715:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b71c:	10 00 00 
f011b71f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b725:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b72a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b730:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b736:	ba 00 00 00 00       	mov    $0x0,%edx
f011b73b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b741:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b747:	29 d0                	sub    %edx,%eax
f011b749:	89 c3                	mov    %eax,%ebx
f011b74b:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b752:	10 00 00 
f011b755:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b75a:	0f b6 d0             	movzbl %al,%edx
f011b75d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b763:	01 d0                	add    %edx,%eax
f011b765:	48                   	dec    %eax
f011b766:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b76c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b772:	ba 00 00 00 00       	mov    $0x0,%edx
f011b777:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b77d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b783:	29 d0                	sub    %edx,%eax
f011b785:	01 c3                	add    %eax,%ebx
f011b787:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b78e:	10 00 00 
f011b791:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b796:	0f b6 c0             	movzbl %al,%eax
f011b799:	c1 e0 04             	shl    $0x4,%eax
f011b79c:	89 c2                	mov    %eax,%edx
f011b79e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b7a4:	01 d0                	add    %edx,%eax
f011b7a6:	48                   	dec    %eax
f011b7a7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b7ad:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7b8:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b7be:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7c4:	29 d0                	sub    %edx,%eax
f011b7c6:	01 d8                	add    %ebx,%eax
f011b7c8:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b7cd:	39 c1                	cmp    %eax,%ecx
f011b7cf:	74 17                	je     f011b7e8 <test_kmalloc_bestfit1+0xfd1>
f011b7d1:	83 ec 04             	sub    $0x4,%esp
f011b7d4:	68 94 b9 13 f0       	push   $0xf013b994
f011b7d9:	68 0b 02 00 00       	push   $0x20b
f011b7de:	68 7a b5 13 f0       	push   $0xf013b57a
f011b7e3:	e8 1d 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7e8:	e8 3a 85 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b7ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b7f0:	74 17                	je     f011b809 <test_kmalloc_bestfit1+0xff2>
f011b7f2:	83 ec 04             	sub    $0x4,%esp
f011b7f5:	68 94 b5 13 f0       	push   $0xf013b594
f011b7fa:	68 0c 02 00 00       	push   $0x20c
f011b7ff:	68 7a b5 13 f0       	push   $0xf013b57a
f011b804:	e8 fc 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b809:	e8 4b 18 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b80e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b811:	29 c2                	sub    %eax,%edx
f011b813:	89 d0                	mov    %edx,%eax
f011b815:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b81a:	74 17                	je     f011b833 <test_kmalloc_bestfit1+0x101c>
f011b81c:	83 ec 04             	sub    $0x4,%esp
f011b81f:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011b824:	68 0d 02 00 00       	push   $0x20d
f011b829:	68 7a b5 13 f0       	push   $0xf013b57a
f011b82e:	e8 d2 49 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b833:	e8 21 18 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b838:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b83b:	e8 e7 84 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b840:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b843:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b849:	83 ec 0c             	sub    $0xc,%esp
f011b84c:	50                   	push   %eax
f011b84d:	e8 61 c2 fe ff       	call   f0107ab3 <kfree>
f011b852:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b855:	e8 cd 84 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b85a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b85d:	74 17                	je     f011b876 <test_kmalloc_bestfit1+0x105f>
f011b85f:	83 ec 04             	sub    $0x4,%esp
f011b862:	68 94 b5 13 f0       	push   $0xf013b594
f011b867:	68 16 02 00 00       	push   $0x216
f011b86c:	68 7a b5 13 f0       	push   $0xf013b57a
f011b871:	e8 8f 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b876:	e8 de 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b87b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b87e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b883:	74 17                	je     f011b89c <test_kmalloc_bestfit1+0x1085>
f011b885:	83 ec 04             	sub    $0x4,%esp
f011b888:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011b88d:	68 17 02 00 00       	push   $0x217
f011b892:	68 7a b5 13 f0       	push   $0xf013b57a
f011b897:	e8 69 49 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b89c:	e8 b8 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b8a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8a4:	e8 7e 84 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b8a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b8ac:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b8b2:	83 ec 0c             	sub    $0xc,%esp
f011b8b5:	50                   	push   %eax
f011b8b6:	e8 f8 c1 fe ff       	call   f0107ab3 <kfree>
f011b8bb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8be:	e8 64 84 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b8c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8c6:	74 17                	je     f011b8df <test_kmalloc_bestfit1+0x10c8>
f011b8c8:	83 ec 04             	sub    $0x4,%esp
f011b8cb:	68 94 b5 13 f0       	push   $0xf013b594
f011b8d0:	68 1d 02 00 00       	push   $0x21d
f011b8d5:	68 7a b5 13 f0       	push   $0xf013b57a
f011b8da:	e8 26 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b8df:	e8 75 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b8e4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b8e7:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b8ec:	74 17                	je     f011b905 <test_kmalloc_bestfit1+0x10ee>
f011b8ee:	83 ec 04             	sub    $0x4,%esp
f011b8f1:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011b8f6:	68 1e 02 00 00       	push   $0x21e
f011b8fb:	68 7a b5 13 f0       	push   $0xf013b57a
f011b900:	e8 00 49 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b905:	e8 4f 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b90a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b90d:	e8 15 84 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011b912:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b915:	83 ec 0c             	sub    $0xc,%esp
f011b918:	68 00 fc 1f 00       	push   $0x1ffc00
f011b91d:	e8 48 c0 fe ff       	call   f010796a <kmalloc>
f011b922:	83 c4 10             	add    $0x10,%esp
f011b925:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b92b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b931:	89 c1                	mov    %eax,%ecx
f011b933:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b93a:	10 00 00 
f011b93d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b943:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b948:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b94e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b954:	ba 00 00 00 00       	mov    $0x0,%edx
f011b959:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b95f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b965:	29 d0                	sub    %edx,%eax
f011b967:	89 c3                	mov    %eax,%ebx
f011b969:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b970:	10 00 00 
f011b973:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b978:	0f b6 d0             	movzbl %al,%edx
f011b97b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b981:	01 d0                	add    %edx,%eax
f011b983:	48                   	dec    %eax
f011b984:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b98a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b990:	ba 00 00 00 00       	mov    $0x0,%edx
f011b995:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b99b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9a1:	29 d0                	sub    %edx,%eax
f011b9a3:	01 c3                	add    %eax,%ebx
f011b9a5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b9ac:	10 00 00 
f011b9af:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011b9b4:	0f b6 c0             	movzbl %al,%eax
f011b9b7:	c1 e0 04             	shl    $0x4,%eax
f011b9ba:	89 c2                	mov    %eax,%edx
f011b9bc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b9c2:	01 d0                	add    %edx,%eax
f011b9c4:	48                   	dec    %eax
f011b9c5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b9cb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b9d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9d6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b9dc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b9e2:	29 d0                	sub    %edx,%eax
f011b9e4:	01 d8                	add    %ebx,%eax
f011b9e6:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b9eb:	39 c1                	cmp    %eax,%ecx
f011b9ed:	74 17                	je     f011ba06 <test_kmalloc_bestfit1+0x11ef>
f011b9ef:	83 ec 04             	sub    $0x4,%esp
f011b9f2:	68 94 b9 13 f0       	push   $0xf013b994
f011b9f7:	68 27 02 00 00       	push   $0x227
f011b9fc:	68 7a b5 13 f0       	push   $0xf013b57a
f011ba01:	e8 ff 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba06:	e8 1c 83 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ba0b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ba0e:	74 17                	je     f011ba27 <test_kmalloc_bestfit1+0x1210>
f011ba10:	83 ec 04             	sub    $0x4,%esp
f011ba13:	68 94 b5 13 f0       	push   $0xf013b594
f011ba18:	68 28 02 00 00       	push   $0x228
f011ba1d:	68 7a b5 13 f0       	push   $0xf013b57a
f011ba22:	e8 de 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ba27:	e8 2d 16 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ba2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ba2f:	29 c2                	sub    %eax,%edx
f011ba31:	89 d0                	mov    %edx,%eax
f011ba33:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba38:	74 17                	je     f011ba51 <test_kmalloc_bestfit1+0x123a>
f011ba3a:	83 ec 04             	sub    $0x4,%esp
f011ba3d:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011ba42:	68 29 02 00 00       	push   $0x229
f011ba47:	68 7a b5 13 f0       	push   $0xf013b57a
f011ba4c:	e8 b4 47 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ba51:	83 ec 0c             	sub    $0xc,%esp
f011ba54:	68 e4 b9 13 f0       	push   $0xf013b9e4
f011ba59:	e8 b0 52 fe ff       	call   f0100d0e <cprintf>
f011ba5e:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ba61:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ba66:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ba69:	5b                   	pop    %ebx
f011ba6a:	5f                   	pop    %edi
f011ba6b:	5d                   	pop    %ebp
f011ba6c:	c3                   	ret    

f011ba6d <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ba6d:	55                   	push   %ebp
f011ba6e:	89 e5                	mov    %esp,%ebp
f011ba70:	57                   	push   %edi
f011ba71:	53                   	push   %ebx
f011ba72:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ba78:	83 ec 0c             	sub    $0xc,%esp
f011ba7b:	68 bc b4 13 f0       	push   $0xf013b4bc
f011ba80:	e8 89 52 fe ff       	call   f0100d0e <cprintf>
f011ba85:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ba88:	83 ec 0c             	sub    $0xc,%esp
f011ba8b:	68 ec b4 13 f0       	push   $0xf013b4ec
f011ba90:	e8 79 52 fe ff       	call   f0100d0e <cprintf>
f011ba95:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ba98:	83 ec 0c             	sub    $0xc,%esp
f011ba9b:	68 bc b4 13 f0       	push   $0xf013b4bc
f011baa0:	e8 69 52 fe ff       	call   f0100d0e <cprintf>
f011baa5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011baa8:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011baae:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bab3:	b8 00 00 00 00       	mov    $0x0,%eax
f011bab8:	89 d7                	mov    %edx,%edi
f011baba:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011babc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011bac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bac6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bacb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011bace:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bad1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bad6:	f7 75 f4             	divl   -0xc(%ebp)
f011bad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011badc:	29 d0                	sub    %edx,%eax
f011bade:	89 c1                	mov    %eax,%ecx
f011bae0:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bae7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011baec:	0f b6 d0             	movzbl %al,%edx
f011baef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011baf2:	01 d0                	add    %edx,%eax
f011baf4:	48                   	dec    %eax
f011baf5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011baf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bafb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb00:	f7 75 ec             	divl   -0x14(%ebp)
f011bb03:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb06:	29 d0                	sub    %edx,%eax
f011bb08:	01 c1                	add    %eax,%ecx
f011bb0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011bb11:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bb16:	0f b6 c0             	movzbl %al,%eax
f011bb19:	c1 e0 04             	shl    $0x4,%eax
f011bb1c:	89 c2                	mov    %eax,%edx
f011bb1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bb21:	01 d0                	add    %edx,%eax
f011bb23:	48                   	dec    %eax
f011bb24:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bb27:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb2f:	f7 75 e4             	divl   -0x1c(%ebp)
f011bb32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb35:	29 d0                	sub    %edx,%eax
f011bb37:	01 c8                	add    %ecx,%eax
f011bb39:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011bb3e:	29 c2                	sub    %eax,%edx
f011bb40:	89 d0                	mov    %edx,%eax
f011bb42:	83 ec 0c             	sub    $0xc,%esp
f011bb45:	50                   	push   %eax
f011bb46:	e8 1f be fe ff       	call   f010796a <kmalloc>
f011bb4b:	83 c4 10             	add    $0x10,%esp
f011bb4e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011bb54:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bb5a:	85 c0                	test   %eax,%eax
f011bb5c:	74 17                	je     f011bb75 <test_kmalloc_bestfit2+0x108>
f011bb5e:	83 ec 04             	sub    $0x4,%esp
f011bb61:	68 2c ba 13 f0       	push   $0xf013ba2c
f011bb66:	68 3f 02 00 00       	push   $0x23f
f011bb6b:	68 7a b5 13 f0       	push   $0xf013b57a
f011bb70:	e8 90 46 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb75:	e8 df 14 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bb7a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb7d:	e8 a5 81 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bb82:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bb85:	83 ec 0c             	sub    $0xc,%esp
f011bb88:	68 00 fc 1f 00       	push   $0x1ffc00
f011bb8d:	e8 d8 bd fe ff       	call   f010796a <kmalloc>
f011bb92:	83 c4 10             	add    $0x10,%esp
f011bb95:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bb9b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bba1:	89 c1                	mov    %eax,%ecx
f011bba3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bbaa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bbad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bbb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbbd:	f7 75 d4             	divl   -0x2c(%ebp)
f011bbc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbc3:	29 d0                	sub    %edx,%eax
f011bbc5:	89 c3                	mov    %eax,%ebx
f011bbc7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bbce:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bbd3:	0f b6 d0             	movzbl %al,%edx
f011bbd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bbd9:	01 d0                	add    %edx,%eax
f011bbdb:	48                   	dec    %eax
f011bbdc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bbdf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bbe2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbe7:	f7 75 cc             	divl   -0x34(%ebp)
f011bbea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bbed:	29 d0                	sub    %edx,%eax
f011bbef:	01 c3                	add    %eax,%ebx
f011bbf1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bbf8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bbfd:	0f b6 c0             	movzbl %al,%eax
f011bc00:	c1 e0 04             	shl    $0x4,%eax
f011bc03:	89 c2                	mov    %eax,%edx
f011bc05:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bc08:	01 d0                	add    %edx,%eax
f011bc0a:	48                   	dec    %eax
f011bc0b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bc0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc11:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc16:	f7 75 c4             	divl   -0x3c(%ebp)
f011bc19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc1c:	29 d0                	sub    %edx,%eax
f011bc1e:	01 d8                	add    %ebx,%eax
f011bc20:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bc25:	39 c1                	cmp    %eax,%ecx
f011bc27:	74 17                	je     f011bc40 <test_kmalloc_bestfit2+0x1d3>
f011bc29:	83 ec 04             	sub    $0x4,%esp
f011bc2c:	68 94 b9 13 f0       	push   $0xf013b994
f011bc31:	68 49 02 00 00       	push   $0x249
f011bc36:	68 7a b5 13 f0       	push   $0xf013b57a
f011bc3b:	e8 c5 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc40:	e8 e2 80 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bc45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc48:	74 17                	je     f011bc61 <test_kmalloc_bestfit2+0x1f4>
f011bc4a:	83 ec 04             	sub    $0x4,%esp
f011bc4d:	68 94 b5 13 f0       	push   $0xf013b594
f011bc52:	68 4a 02 00 00       	push   $0x24a
f011bc57:	68 7a b5 13 f0       	push   $0xf013b57a
f011bc5c:	e8 a4 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bc61:	e8 f3 13 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bc66:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc69:	29 c2                	sub    %eax,%edx
f011bc6b:	89 d0                	mov    %edx,%eax
f011bc6d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bc72:	74 17                	je     f011bc8b <test_kmalloc_bestfit2+0x21e>
f011bc74:	83 ec 04             	sub    $0x4,%esp
f011bc77:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011bc7c:	68 4b 02 00 00       	push   $0x24b
f011bc81:	68 7a b5 13 f0       	push   $0xf013b57a
f011bc86:	e8 7a 45 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc8b:	e8 c9 13 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bc90:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc93:	e8 8f 80 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bc98:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bc9b:	83 ec 0c             	sub    $0xc,%esp
f011bc9e:	68 00 fc 1f 00       	push   $0x1ffc00
f011bca3:	e8 c2 bc fe ff       	call   f010796a <kmalloc>
f011bca8:	83 c4 10             	add    $0x10,%esp
f011bcab:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bcb1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bcb7:	89 c1                	mov    %eax,%ecx
f011bcb9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bcc0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bcc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcc8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bccb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bcce:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcd3:	f7 75 bc             	divl   -0x44(%ebp)
f011bcd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bcd9:	29 d0                	sub    %edx,%eax
f011bcdb:	89 c3                	mov    %eax,%ebx
f011bcdd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bce4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bce9:	0f b6 d0             	movzbl %al,%edx
f011bcec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bcef:	01 d0                	add    %edx,%eax
f011bcf1:	48                   	dec    %eax
f011bcf2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bcf5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bcf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcfd:	f7 75 b4             	divl   -0x4c(%ebp)
f011bd00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd03:	29 d0                	sub    %edx,%eax
f011bd05:	01 c3                	add    %eax,%ebx
f011bd07:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bd0e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bd13:	0f b6 c0             	movzbl %al,%eax
f011bd16:	c1 e0 04             	shl    $0x4,%eax
f011bd19:	89 c2                	mov    %eax,%edx
f011bd1b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bd1e:	01 d0                	add    %edx,%eax
f011bd20:	48                   	dec    %eax
f011bd21:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bd24:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd27:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd2c:	f7 75 ac             	divl   -0x54(%ebp)
f011bd2f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd32:	29 d0                	sub    %edx,%eax
f011bd34:	01 d8                	add    %ebx,%eax
f011bd36:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bd3b:	39 c1                	cmp    %eax,%ecx
f011bd3d:	74 17                	je     f011bd56 <test_kmalloc_bestfit2+0x2e9>
f011bd3f:	83 ec 04             	sub    $0x4,%esp
f011bd42:	68 94 b9 13 f0       	push   $0xf013b994
f011bd47:	68 51 02 00 00       	push   $0x251
f011bd4c:	68 7a b5 13 f0       	push   $0xf013b57a
f011bd51:	e8 af 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd56:	e8 cc 7f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bd5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd5e:	74 17                	je     f011bd77 <test_kmalloc_bestfit2+0x30a>
f011bd60:	83 ec 04             	sub    $0x4,%esp
f011bd63:	68 94 b5 13 f0       	push   $0xf013b594
f011bd68:	68 52 02 00 00       	push   $0x252
f011bd6d:	68 7a b5 13 f0       	push   $0xf013b57a
f011bd72:	e8 8e 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bd77:	e8 dd 12 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bd7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd7f:	29 c2                	sub    %eax,%edx
f011bd81:	89 d0                	mov    %edx,%eax
f011bd83:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd88:	74 17                	je     f011bda1 <test_kmalloc_bestfit2+0x334>
f011bd8a:	83 ec 04             	sub    $0x4,%esp
f011bd8d:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011bd92:	68 53 02 00 00       	push   $0x253
f011bd97:	68 7a b5 13 f0       	push   $0xf013b57a
f011bd9c:	e8 64 44 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bda1:	e8 b3 12 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bda6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bda9:	e8 79 7f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bdae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bdb1:	83 ec 0c             	sub    $0xc,%esp
f011bdb4:	68 00 08 00 00       	push   $0x800
f011bdb9:	e8 ac bb fe ff       	call   f010796a <kmalloc>
f011bdbe:	83 c4 10             	add    $0x10,%esp
f011bdc1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bdc7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bdcd:	89 c1                	mov    %eax,%ecx
f011bdcf:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bdd6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bdd9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bdde:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bde1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bde4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde9:	f7 75 a4             	divl   -0x5c(%ebp)
f011bdec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bdef:	29 d0                	sub    %edx,%eax
f011bdf1:	89 c3                	mov    %eax,%ebx
f011bdf3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bdfa:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bdff:	0f b6 d0             	movzbl %al,%edx
f011be02:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011be05:	01 d0                	add    %edx,%eax
f011be07:	48                   	dec    %eax
f011be08:	89 45 98             	mov    %eax,-0x68(%ebp)
f011be0b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be13:	f7 75 9c             	divl   -0x64(%ebp)
f011be16:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be19:	29 d0                	sub    %edx,%eax
f011be1b:	01 c3                	add    %eax,%ebx
f011be1d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011be24:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011be29:	0f b6 c0             	movzbl %al,%eax
f011be2c:	c1 e0 04             	shl    $0x4,%eax
f011be2f:	89 c2                	mov    %eax,%edx
f011be31:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011be34:	01 d0                	add    %edx,%eax
f011be36:	48                   	dec    %eax
f011be37:	89 45 90             	mov    %eax,-0x70(%ebp)
f011be3a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011be42:	f7 75 94             	divl   -0x6c(%ebp)
f011be45:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be48:	29 d0                	sub    %edx,%eax
f011be4a:	01 d8                	add    %ebx,%eax
f011be4c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011be51:	39 c1                	cmp    %eax,%ecx
f011be53:	74 17                	je     f011be6c <test_kmalloc_bestfit2+0x3ff>
f011be55:	83 ec 04             	sub    $0x4,%esp
f011be58:	68 94 b9 13 f0       	push   $0xf013b994
f011be5d:	68 59 02 00 00       	push   $0x259
f011be62:	68 7a b5 13 f0       	push   $0xf013b57a
f011be67:	e8 99 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be6c:	e8 b6 7e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011be71:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be74:	74 17                	je     f011be8d <test_kmalloc_bestfit2+0x420>
f011be76:	83 ec 04             	sub    $0x4,%esp
f011be79:	68 94 b5 13 f0       	push   $0xf013b594
f011be7e:	68 5a 02 00 00       	push   $0x25a
f011be83:	68 7a b5 13 f0       	push   $0xf013b57a
f011be88:	e8 78 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011be8d:	e8 c7 11 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011be92:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be95:	29 c2                	sub    %eax,%edx
f011be97:	89 d0                	mov    %edx,%eax
f011be99:	83 f8 01             	cmp    $0x1,%eax
f011be9c:	74 17                	je     f011beb5 <test_kmalloc_bestfit2+0x448>
f011be9e:	83 ec 04             	sub    $0x4,%esp
f011bea1:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011bea6:	68 5b 02 00 00       	push   $0x25b
f011beab:	68 7a b5 13 f0       	push   $0xf013b57a
f011beb0:	e8 50 43 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011beb5:	e8 9f 11 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011beba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bebd:	e8 65 7e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bec2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bec5:	83 ec 0c             	sub    $0xc,%esp
f011bec8:	68 00 08 00 00       	push   $0x800
f011becd:	e8 98 ba fe ff       	call   f010796a <kmalloc>
f011bed2:	83 c4 10             	add    $0x10,%esp
f011bed5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bedb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bee1:	89 c1                	mov    %eax,%ecx
f011bee3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011beea:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011beed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bef2:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bef5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bef8:	ba 00 00 00 00       	mov    $0x0,%edx
f011befd:	f7 75 8c             	divl   -0x74(%ebp)
f011bf00:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf03:	29 d0                	sub    %edx,%eax
f011bf05:	89 c3                	mov    %eax,%ebx
f011bf07:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bf0e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bf13:	0f b6 d0             	movzbl %al,%edx
f011bf16:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bf19:	01 d0                	add    %edx,%eax
f011bf1b:	48                   	dec    %eax
f011bf1c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bf1f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf22:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf27:	f7 75 84             	divl   -0x7c(%ebp)
f011bf2a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf2d:	29 d0                	sub    %edx,%eax
f011bf2f:	01 c3                	add    %eax,%ebx
f011bf31:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bf38:	10 00 00 
f011bf3b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011bf40:	0f b6 c0             	movzbl %al,%eax
f011bf43:	c1 e0 04             	shl    $0x4,%eax
f011bf46:	89 c2                	mov    %eax,%edx
f011bf48:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bf4e:	01 d0                	add    %edx,%eax
f011bf50:	48                   	dec    %eax
f011bf51:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bf57:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf62:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bf68:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf6e:	29 d0                	sub    %edx,%eax
f011bf70:	01 d8                	add    %ebx,%eax
f011bf72:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bf77:	39 c1                	cmp    %eax,%ecx
f011bf79:	74 17                	je     f011bf92 <test_kmalloc_bestfit2+0x525>
f011bf7b:	83 ec 04             	sub    $0x4,%esp
f011bf7e:	68 94 b9 13 f0       	push   $0xf013b994
f011bf83:	68 61 02 00 00       	push   $0x261
f011bf88:	68 7a b5 13 f0       	push   $0xf013b57a
f011bf8d:	e8 73 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf92:	e8 90 7d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bf97:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf9a:	74 17                	je     f011bfb3 <test_kmalloc_bestfit2+0x546>
f011bf9c:	83 ec 04             	sub    $0x4,%esp
f011bf9f:	68 94 b5 13 f0       	push   $0xf013b594
f011bfa4:	68 62 02 00 00       	push   $0x262
f011bfa9:	68 7a b5 13 f0       	push   $0xf013b57a
f011bfae:	e8 52 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bfb3:	e8 a1 10 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bfb8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bfbb:	29 c2                	sub    %eax,%edx
f011bfbd:	89 d0                	mov    %edx,%eax
f011bfbf:	83 f8 01             	cmp    $0x1,%eax
f011bfc2:	74 17                	je     f011bfdb <test_kmalloc_bestfit2+0x56e>
f011bfc4:	83 ec 04             	sub    $0x4,%esp
f011bfc7:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011bfcc:	68 63 02 00 00       	push   $0x263
f011bfd1:	68 7a b5 13 f0       	push   $0xf013b57a
f011bfd6:	e8 2a 42 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bfdb:	e8 79 10 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bfe0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfe3:	e8 3f 7d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011bfe8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011bfeb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bff1:	83 ec 0c             	sub    $0xc,%esp
f011bff4:	50                   	push   %eax
f011bff5:	e8 b9 ba fe ff       	call   f0107ab3 <kfree>
f011bffa:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bffd:	e8 25 7d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c002:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c005:	74 17                	je     f011c01e <test_kmalloc_bestfit2+0x5b1>
f011c007:	83 ec 04             	sub    $0x4,%esp
f011c00a:	68 94 b5 13 f0       	push   $0xf013b594
f011c00f:	68 69 02 00 00       	push   $0x269
f011c014:	68 7a b5 13 f0       	push   $0xf013b57a
f011c019:	e8 e7 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011c01e:	e8 36 10 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c023:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c026:	83 f8 01             	cmp    $0x1,%eax
f011c029:	74 17                	je     f011c042 <test_kmalloc_bestfit2+0x5d5>
f011c02b:	83 ec 04             	sub    $0x4,%esp
f011c02e:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011c033:	68 6a 02 00 00       	push   $0x26a
f011c038:	68 7a b5 13 f0       	push   $0xf013b57a
f011c03d:	e8 c3 41 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c042:	e8 12 10 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c047:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c04a:	e8 d8 7c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c04f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c052:	83 ec 0c             	sub    $0xc,%esp
f011c055:	68 00 1c 00 00       	push   $0x1c00
f011c05a:	e8 0b b9 fe ff       	call   f010796a <kmalloc>
f011c05f:	83 c4 10             	add    $0x10,%esp
f011c062:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011c068:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c06e:	89 c1                	mov    %eax,%ecx
f011c070:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c077:	10 00 00 
f011c07a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c080:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c085:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c08b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c091:	ba 00 00 00 00       	mov    $0x0,%edx
f011c096:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c09c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c0a2:	29 d0                	sub    %edx,%eax
f011c0a4:	89 c3                	mov    %eax,%ebx
f011c0a6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c0ad:	10 00 00 
f011c0b0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c0b5:	0f b6 d0             	movzbl %al,%edx
f011c0b8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c0be:	01 d0                	add    %edx,%eax
f011c0c0:	48                   	dec    %eax
f011c0c1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c0c7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0d2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c0d8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c0de:	29 d0                	sub    %edx,%eax
f011c0e0:	01 c3                	add    %eax,%ebx
f011c0e2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c0e9:	10 00 00 
f011c0ec:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c0f1:	0f b6 c0             	movzbl %al,%eax
f011c0f4:	c1 e0 04             	shl    $0x4,%eax
f011c0f7:	89 c2                	mov    %eax,%edx
f011c0f9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c0ff:	01 d0                	add    %edx,%eax
f011c101:	48                   	dec    %eax
f011c102:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c108:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c10e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c113:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c119:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c11f:	29 d0                	sub    %edx,%eax
f011c121:	01 d8                	add    %ebx,%eax
f011c123:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c128:	39 c1                	cmp    %eax,%ecx
f011c12a:	74 17                	je     f011c143 <test_kmalloc_bestfit2+0x6d6>
f011c12c:	83 ec 04             	sub    $0x4,%esp
f011c12f:	68 94 b9 13 f0       	push   $0xf013b994
f011c134:	68 70 02 00 00       	push   $0x270
f011c139:	68 7a b5 13 f0       	push   $0xf013b57a
f011c13e:	e8 c2 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c143:	e8 df 7b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c148:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c14b:	74 17                	je     f011c164 <test_kmalloc_bestfit2+0x6f7>
f011c14d:	83 ec 04             	sub    $0x4,%esp
f011c150:	68 94 b5 13 f0       	push   $0xf013b594
f011c155:	68 71 02 00 00       	push   $0x271
f011c15a:	68 7a b5 13 f0       	push   $0xf013b57a
f011c15f:	e8 a1 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c164:	e8 f0 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c169:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c16c:	29 c2                	sub    %eax,%edx
f011c16e:	89 d0                	mov    %edx,%eax
f011c170:	83 f8 02             	cmp    $0x2,%eax
f011c173:	74 17                	je     f011c18c <test_kmalloc_bestfit2+0x71f>
f011c175:	83 ec 04             	sub    $0x4,%esp
f011c178:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011c17d:	68 72 02 00 00       	push   $0x272
f011c182:	68 7a b5 13 f0       	push   $0xf013b57a
f011c187:	e8 79 40 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c18c:	e8 c8 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c191:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c194:	e8 8e 7b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c199:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011c19c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c1a2:	83 ec 0c             	sub    $0xc,%esp
f011c1a5:	50                   	push   %eax
f011c1a6:	e8 08 b9 fe ff       	call   f0107ab3 <kfree>
f011c1ab:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1ae:	e8 74 7b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c1b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1b6:	74 17                	je     f011c1cf <test_kmalloc_bestfit2+0x762>
f011c1b8:	83 ec 04             	sub    $0x4,%esp
f011c1bb:	68 94 b5 13 f0       	push   $0xf013b594
f011c1c0:	68 78 02 00 00       	push   $0x278
f011c1c5:	68 7a b5 13 f0       	push   $0xf013b57a
f011c1ca:	e8 36 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c1cf:	e8 85 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c1d4:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c1d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c1dc:	74 17                	je     f011c1f5 <test_kmalloc_bestfit2+0x788>
f011c1de:	83 ec 04             	sub    $0x4,%esp
f011c1e1:	68 48 b8 13 f0       	push   $0xf013b848
f011c1e6:	68 79 02 00 00       	push   $0x279
f011c1eb:	68 7a b5 13 f0       	push   $0xf013b57a
f011c1f0:	e8 10 40 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c1f5:	e8 5f 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c1fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1fd:	e8 25 7b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c202:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c205:	83 ec 0c             	sub    $0xc,%esp
f011c208:	68 00 fc 2f 00       	push   $0x2ffc00
f011c20d:	e8 58 b7 fe ff       	call   f010796a <kmalloc>
f011c212:	83 c4 10             	add    $0x10,%esp
f011c215:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c21b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c221:	89 c1                	mov    %eax,%ecx
f011c223:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c22a:	10 00 00 
f011c22d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c233:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c238:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c23e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c244:	ba 00 00 00 00       	mov    $0x0,%edx
f011c249:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c24f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c255:	29 d0                	sub    %edx,%eax
f011c257:	89 c3                	mov    %eax,%ebx
f011c259:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c260:	10 00 00 
f011c263:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c268:	0f b6 d0             	movzbl %al,%edx
f011c26b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c271:	01 d0                	add    %edx,%eax
f011c273:	48                   	dec    %eax
f011c274:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c27a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c280:	ba 00 00 00 00       	mov    $0x0,%edx
f011c285:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c28b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c291:	29 d0                	sub    %edx,%eax
f011c293:	01 c3                	add    %eax,%ebx
f011c295:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c29c:	10 00 00 
f011c29f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c2a4:	0f b6 c0             	movzbl %al,%eax
f011c2a7:	c1 e0 04             	shl    $0x4,%eax
f011c2aa:	89 c2                	mov    %eax,%edx
f011c2ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c2b2:	01 d0                	add    %edx,%eax
f011c2b4:	48                   	dec    %eax
f011c2b5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c2bb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c2c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2c6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c2cc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c2d2:	29 d0                	sub    %edx,%eax
f011c2d4:	01 d8                	add    %ebx,%eax
f011c2d6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c2db:	39 c1                	cmp    %eax,%ecx
f011c2dd:	74 17                	je     f011c2f6 <test_kmalloc_bestfit2+0x889>
f011c2df:	83 ec 04             	sub    $0x4,%esp
f011c2e2:	68 94 b9 13 f0       	push   $0xf013b994
f011c2e7:	68 7f 02 00 00       	push   $0x27f
f011c2ec:	68 7a b5 13 f0       	push   $0xf013b57a
f011c2f1:	e8 0f 3f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2f6:	e8 2c 7a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c2fb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c2fe:	74 17                	je     f011c317 <test_kmalloc_bestfit2+0x8aa>
f011c300:	83 ec 04             	sub    $0x4,%esp
f011c303:	68 94 b5 13 f0       	push   $0xf013b594
f011c308:	68 80 02 00 00       	push   $0x280
f011c30d:	68 7a b5 13 f0       	push   $0xf013b57a
f011c312:	e8 ee 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c317:	e8 3d 0d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c31c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c31f:	29 c2                	sub    %eax,%edx
f011c321:	89 d0                	mov    %edx,%eax
f011c323:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c328:	74 17                	je     f011c341 <test_kmalloc_bestfit2+0x8d4>
f011c32a:	83 ec 04             	sub    $0x4,%esp
f011c32d:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011c332:	68 81 02 00 00       	push   $0x281
f011c337:	68 7a b5 13 f0       	push   $0xf013b57a
f011c33c:	e8 c4 3e fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c341:	e8 13 0d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c346:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c349:	e8 d9 79 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c34e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c351:	83 ec 0c             	sub    $0xc,%esp
f011c354:	68 00 18 20 00       	push   $0x201800
f011c359:	e8 0c b6 fe ff       	call   f010796a <kmalloc>
f011c35e:	83 c4 10             	add    $0x10,%esp
f011c361:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c367:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c36d:	89 c1                	mov    %eax,%ecx
f011c36f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c376:	10 00 00 
f011c379:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c37f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c384:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c38a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c390:	ba 00 00 00 00       	mov    $0x0,%edx
f011c395:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c39b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c3a1:	29 d0                	sub    %edx,%eax
f011c3a3:	89 c3                	mov    %eax,%ebx
f011c3a5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c3ac:	10 00 00 
f011c3af:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c3b4:	0f b6 d0             	movzbl %al,%edx
f011c3b7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3bd:	01 d0                	add    %edx,%eax
f011c3bf:	48                   	dec    %eax
f011c3c0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c3c6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3d1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c3d7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3dd:	29 d0                	sub    %edx,%eax
f011c3df:	01 c3                	add    %eax,%ebx
f011c3e1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c3e8:	10 00 00 
f011c3eb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c3f0:	0f b6 c0             	movzbl %al,%eax
f011c3f3:	c1 e0 04             	shl    $0x4,%eax
f011c3f6:	89 c2                	mov    %eax,%edx
f011c3f8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c3fe:	01 d0                	add    %edx,%eax
f011c400:	48                   	dec    %eax
f011c401:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c407:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c40d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c412:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c418:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c41e:	29 d0                	sub    %edx,%eax
f011c420:	01 d8                	add    %ebx,%eax
f011c422:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c427:	39 c1                	cmp    %eax,%ecx
f011c429:	74 17                	je     f011c442 <test_kmalloc_bestfit2+0x9d5>
f011c42b:	83 ec 04             	sub    $0x4,%esp
f011c42e:	68 94 b9 13 f0       	push   $0xf013b994
f011c433:	68 87 02 00 00       	push   $0x287
f011c438:	68 7a b5 13 f0       	push   $0xf013b57a
f011c43d:	e8 c3 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c442:	e8 e0 78 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c447:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c44a:	74 17                	je     f011c463 <test_kmalloc_bestfit2+0x9f6>
f011c44c:	83 ec 04             	sub    $0x4,%esp
f011c44f:	68 94 b5 13 f0       	push   $0xf013b594
f011c454:	68 88 02 00 00       	push   $0x288
f011c459:	68 7a b5 13 f0       	push   $0xf013b57a
f011c45e:	e8 a2 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c463:	e8 f1 0b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c468:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c46b:	29 c2                	sub    %eax,%edx
f011c46d:	89 d0                	mov    %edx,%eax
f011c46f:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c474:	74 17                	je     f011c48d <test_kmalloc_bestfit2+0xa20>
f011c476:	83 ec 04             	sub    $0x4,%esp
f011c479:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011c47e:	68 89 02 00 00       	push   $0x289
f011c483:	68 7a b5 13 f0       	push   $0xf013b57a
f011c488:	e8 78 3d fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c48d:	e8 c7 0b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c492:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c495:	e8 8d 78 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c49a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c49d:	83 ec 0c             	sub    $0xc,%esp
f011c4a0:	68 00 fc 4f 00       	push   $0x4ffc00
f011c4a5:	e8 c0 b4 fe ff       	call   f010796a <kmalloc>
f011c4aa:	83 c4 10             	add    $0x10,%esp
f011c4ad:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c4b3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c4b9:	89 c1                	mov    %eax,%ecx
f011c4bb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4c2:	10 00 00 
f011c4c5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4d0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c4d6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4e1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c4e7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4ed:	29 d0                	sub    %edx,%eax
f011c4ef:	89 c3                	mov    %eax,%ebx
f011c4f1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c4f8:	10 00 00 
f011c4fb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c500:	0f b6 d0             	movzbl %al,%edx
f011c503:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c509:	01 d0                	add    %edx,%eax
f011c50b:	48                   	dec    %eax
f011c50c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c512:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c518:	ba 00 00 00 00       	mov    $0x0,%edx
f011c51d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c523:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c529:	29 d0                	sub    %edx,%eax
f011c52b:	01 c3                	add    %eax,%ebx
f011c52d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c534:	10 00 00 
f011c537:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c53c:	0f b6 c0             	movzbl %al,%eax
f011c53f:	c1 e0 04             	shl    $0x4,%eax
f011c542:	89 c2                	mov    %eax,%edx
f011c544:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c54a:	01 d0                	add    %edx,%eax
f011c54c:	48                   	dec    %eax
f011c54d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c553:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c559:	ba 00 00 00 00       	mov    $0x0,%edx
f011c55e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c564:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c56a:	29 d0                	sub    %edx,%eax
f011c56c:	01 d8                	add    %ebx,%eax
f011c56e:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c573:	39 c1                	cmp    %eax,%ecx
f011c575:	74 17                	je     f011c58e <test_kmalloc_bestfit2+0xb21>
f011c577:	83 ec 04             	sub    $0x4,%esp
f011c57a:	68 94 b9 13 f0       	push   $0xf013b994
f011c57f:	68 8f 02 00 00       	push   $0x28f
f011c584:	68 7a b5 13 f0       	push   $0xf013b57a
f011c589:	e8 77 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c58e:	e8 94 77 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c593:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c596:	74 17                	je     f011c5af <test_kmalloc_bestfit2+0xb42>
f011c598:	83 ec 04             	sub    $0x4,%esp
f011c59b:	68 94 b5 13 f0       	push   $0xf013b594
f011c5a0:	68 90 02 00 00       	push   $0x290
f011c5a5:	68 7a b5 13 f0       	push   $0xf013b57a
f011c5aa:	e8 56 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c5af:	e8 a5 0a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c5b4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c5b7:	29 c2                	sub    %eax,%edx
f011c5b9:	89 d0                	mov    %edx,%eax
f011c5bb:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c5c0:	74 17                	je     f011c5d9 <test_kmalloc_bestfit2+0xb6c>
f011c5c2:	83 ec 04             	sub    $0x4,%esp
f011c5c5:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011c5ca:	68 91 02 00 00       	push   $0x291
f011c5cf:	68 7a b5 13 f0       	push   $0xf013b57a
f011c5d4:	e8 2c 3c fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c5d9:	e8 7b 0a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c5de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5e1:	e8 41 77 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c5e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c5e9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c5ef:	83 ec 0c             	sub    $0xc,%esp
f011c5f2:	50                   	push   %eax
f011c5f3:	e8 bb b4 fe ff       	call   f0107ab3 <kfree>
f011c5f8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5fb:	e8 27 77 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c600:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c603:	74 17                	je     f011c61c <test_kmalloc_bestfit2+0xbaf>
f011c605:	83 ec 04             	sub    $0x4,%esp
f011c608:	68 94 b5 13 f0       	push   $0xf013b594
f011c60d:	68 97 02 00 00       	push   $0x297
f011c612:	68 7a b5 13 f0       	push   $0xf013b57a
f011c617:	e8 e9 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c61c:	e8 38 0a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c621:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c624:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c629:	74 17                	je     f011c642 <test_kmalloc_bestfit2+0xbd5>
f011c62b:	83 ec 04             	sub    $0x4,%esp
f011c62e:	68 48 b8 13 f0       	push   $0xf013b848
f011c633:	68 98 02 00 00       	push   $0x298
f011c638:	68 7a b5 13 f0       	push   $0xf013b57a
f011c63d:	e8 c3 3b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c642:	e8 12 0a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c647:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c64a:	e8 d8 76 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c64f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c652:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c658:	83 ec 0c             	sub    $0xc,%esp
f011c65b:	50                   	push   %eax
f011c65c:	e8 52 b4 fe ff       	call   f0107ab3 <kfree>
f011c661:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c664:	e8 be 76 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c669:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c66c:	74 17                	je     f011c685 <test_kmalloc_bestfit2+0xc18>
f011c66e:	83 ec 04             	sub    $0x4,%esp
f011c671:	68 94 b5 13 f0       	push   $0xf013b594
f011c676:	68 9e 02 00 00       	push   $0x29e
f011c67b:	68 7a b5 13 f0       	push   $0xf013b57a
f011c680:	e8 80 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c685:	e8 cf 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c68a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c68d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c692:	74 17                	je     f011c6ab <test_kmalloc_bestfit2+0xc3e>
f011c694:	83 ec 04             	sub    $0x4,%esp
f011c697:	68 74 ba 13 f0       	push   $0xf013ba74
f011c69c:	68 9f 02 00 00       	push   $0x29f
f011c6a1:	68 7a b5 13 f0       	push   $0xf013b57a
f011c6a6:	e8 5a 3b fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6ab:	e8 a9 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c6b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6b3:	e8 6f 76 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c6b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c6bb:	83 ec 0c             	sub    $0xc,%esp
f011c6be:	68 00 fc 1f 00       	push   $0x1ffc00
f011c6c3:	e8 a2 b2 fe ff       	call   f010796a <kmalloc>
f011c6c8:	83 c4 10             	add    $0x10,%esp
f011c6cb:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c6d1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c6d7:	89 c1                	mov    %eax,%ecx
f011c6d9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c6e0:	10 00 00 
f011c6e3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c6e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c6ee:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c6f4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c6fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6ff:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c705:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c70b:	29 d0                	sub    %edx,%eax
f011c70d:	89 c3                	mov    %eax,%ebx
f011c70f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c716:	10 00 00 
f011c719:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c71e:	0f b6 d0             	movzbl %al,%edx
f011c721:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c727:	01 d0                	add    %edx,%eax
f011c729:	48                   	dec    %eax
f011c72a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c730:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c736:	ba 00 00 00 00       	mov    $0x0,%edx
f011c73b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c741:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c747:	29 d0                	sub    %edx,%eax
f011c749:	01 c3                	add    %eax,%ebx
f011c74b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c752:	10 00 00 
f011c755:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c75a:	0f b6 c0             	movzbl %al,%eax
f011c75d:	c1 e0 04             	shl    $0x4,%eax
f011c760:	89 c2                	mov    %eax,%edx
f011c762:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c768:	01 d0                	add    %edx,%eax
f011c76a:	48                   	dec    %eax
f011c76b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c771:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c777:	ba 00 00 00 00       	mov    $0x0,%edx
f011c77c:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c782:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c788:	29 d0                	sub    %edx,%eax
f011c78a:	01 d8                	add    %ebx,%eax
f011c78c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c791:	39 c1                	cmp    %eax,%ecx
f011c793:	74 17                	je     f011c7ac <test_kmalloc_bestfit2+0xd3f>
f011c795:	83 ec 04             	sub    $0x4,%esp
f011c798:	68 94 b9 13 f0       	push   $0xf013b994
f011c79d:	68 a5 02 00 00       	push   $0x2a5
f011c7a2:	68 7a b5 13 f0       	push   $0xf013b57a
f011c7a7:	e8 59 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7ac:	e8 76 75 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c7b1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c7b4:	74 17                	je     f011c7cd <test_kmalloc_bestfit2+0xd60>
f011c7b6:	83 ec 04             	sub    $0x4,%esp
f011c7b9:	68 94 b5 13 f0       	push   $0xf013b594
f011c7be:	68 a6 02 00 00       	push   $0x2a6
f011c7c3:	68 7a b5 13 f0       	push   $0xf013b57a
f011c7c8:	e8 38 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c7cd:	e8 87 08 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c7d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c7d5:	29 c2                	sub    %eax,%edx
f011c7d7:	89 d0                	mov    %edx,%eax
f011c7d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7de:	74 17                	je     f011c7f7 <test_kmalloc_bestfit2+0xd8a>
f011c7e0:	83 ec 04             	sub    $0x4,%esp
f011c7e3:	68 b2 ba 13 f0       	push   $0xf013bab2
f011c7e8:	68 a7 02 00 00       	push   $0x2a7
f011c7ed:	68 7a b5 13 f0       	push   $0xf013b57a
f011c7f2:	e8 0e 3a fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c7f7:	e8 5d 08 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c7fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c7ff:	e8 23 75 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c804:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c807:	83 ec 0c             	sub    $0xc,%esp
f011c80a:	68 00 18 00 00       	push   $0x1800
f011c80f:	e8 56 b1 fe ff       	call   f010796a <kmalloc>
f011c814:	83 c4 10             	add    $0x10,%esp
f011c817:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c81d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c823:	89 c1                	mov    %eax,%ecx
f011c825:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c82c:	10 00 00 
f011c82f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c835:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c83a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c840:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c846:	ba 00 00 00 00       	mov    $0x0,%edx
f011c84b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c851:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c857:	29 d0                	sub    %edx,%eax
f011c859:	89 c3                	mov    %eax,%ebx
f011c85b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c862:	10 00 00 
f011c865:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c86a:	0f b6 d0             	movzbl %al,%edx
f011c86d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c873:	01 d0                	add    %edx,%eax
f011c875:	48                   	dec    %eax
f011c876:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c87c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c882:	ba 00 00 00 00       	mov    $0x0,%edx
f011c887:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c88d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c893:	29 d0                	sub    %edx,%eax
f011c895:	01 c3                	add    %eax,%ebx
f011c897:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c89e:	10 00 00 
f011c8a1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011c8a6:	0f b6 c0             	movzbl %al,%eax
f011c8a9:	c1 e0 04             	shl    $0x4,%eax
f011c8ac:	89 c2                	mov    %eax,%edx
f011c8ae:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c8b4:	01 d0                	add    %edx,%eax
f011c8b6:	48                   	dec    %eax
f011c8b7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c8bd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8c8:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c8ce:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c8d4:	29 d0                	sub    %edx,%eax
f011c8d6:	01 d8                	add    %ebx,%eax
f011c8d8:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c8dd:	39 c1                	cmp    %eax,%ecx
f011c8df:	74 17                	je     f011c8f8 <test_kmalloc_bestfit2+0xe8b>
f011c8e1:	83 ec 04             	sub    $0x4,%esp
f011c8e4:	68 94 b9 13 f0       	push   $0xf013b994
f011c8e9:	68 ad 02 00 00       	push   $0x2ad
f011c8ee:	68 7a b5 13 f0       	push   $0xf013b57a
f011c8f3:	e8 0d 39 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8f8:	e8 2a 74 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c8fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c900:	74 17                	je     f011c919 <test_kmalloc_bestfit2+0xeac>
f011c902:	83 ec 04             	sub    $0x4,%esp
f011c905:	68 94 b5 13 f0       	push   $0xf013b594
f011c90a:	68 ae 02 00 00       	push   $0x2ae
f011c90f:	68 7a b5 13 f0       	push   $0xf013b57a
f011c914:	e8 ec 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c919:	e8 3b 07 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c91e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c921:	29 c2                	sub    %eax,%edx
f011c923:	89 d0                	mov    %edx,%eax
f011c925:	83 f8 02             	cmp    $0x2,%eax
f011c928:	74 17                	je     f011c941 <test_kmalloc_bestfit2+0xed4>
f011c92a:	83 ec 04             	sub    $0x4,%esp
f011c92d:	68 b2 ba 13 f0       	push   $0xf013bab2
f011c932:	68 af 02 00 00       	push   $0x2af
f011c937:	68 7a b5 13 f0       	push   $0xf013b57a
f011c93c:	e8 c4 38 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c941:	e8 13 07 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c946:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c949:	e8 d9 73 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c94e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c951:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c957:	83 ec 0c             	sub    $0xc,%esp
f011c95a:	50                   	push   %eax
f011c95b:	e8 53 b1 fe ff       	call   f0107ab3 <kfree>
f011c960:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c963:	e8 bf 73 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c968:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c96b:	74 17                	je     f011c984 <test_kmalloc_bestfit2+0xf17>
f011c96d:	83 ec 04             	sub    $0x4,%esp
f011c970:	68 94 b5 13 f0       	push   $0xf013b594
f011c975:	68 b5 02 00 00       	push   $0x2b5
f011c97a:	68 7a b5 13 f0       	push   $0xf013b57a
f011c97f:	e8 81 38 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c984:	e8 d0 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c989:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c98c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c991:	74 17                	je     f011c9aa <test_kmalloc_bestfit2+0xf3d>
f011c993:	83 ec 04             	sub    $0x4,%esp
f011c996:	68 74 ba 13 f0       	push   $0xf013ba74
f011c99b:	68 b6 02 00 00       	push   $0x2b6
f011c9a0:	68 7a b5 13 f0       	push   $0xf013b57a
f011c9a5:	e8 5b 38 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9aa:	e8 aa 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c9af:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c9b2:	e8 70 73 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011c9b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c9ba:	83 ec 0c             	sub    $0xc,%esp
f011c9bd:	68 00 fc 2f 00       	push   $0x2ffc00
f011c9c2:	e8 a3 af fe ff       	call   f010796a <kmalloc>
f011c9c7:	83 c4 10             	add    $0x10,%esp
f011c9ca:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c9d0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c9d6:	89 c1                	mov    %eax,%ecx
f011c9d8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c9df:	10 00 00 
f011c9e2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c9e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9ed:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c9f3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c9f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9fe:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ca04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca0a:	29 d0                	sub    %edx,%eax
f011ca0c:	89 c3                	mov    %eax,%ebx
f011ca0e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ca15:	10 00 00 
f011ca18:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ca1d:	0f b6 d0             	movzbl %al,%edx
f011ca20:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ca26:	01 d0                	add    %edx,%eax
f011ca28:	48                   	dec    %eax
f011ca29:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ca2f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca35:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca3a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ca40:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca46:	29 d0                	sub    %edx,%eax
f011ca48:	01 c3                	add    %eax,%ebx
f011ca4a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ca51:	10 00 00 
f011ca54:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ca59:	0f b6 c0             	movzbl %al,%eax
f011ca5c:	c1 e0 04             	shl    $0x4,%eax
f011ca5f:	89 c2                	mov    %eax,%edx
f011ca61:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ca67:	01 d0                	add    %edx,%eax
f011ca69:	48                   	dec    %eax
f011ca6a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011ca70:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ca76:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca7b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011ca81:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ca87:	29 d0                	sub    %edx,%eax
f011ca89:	01 d8                	add    %ebx,%eax
f011ca8b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ca90:	39 c1                	cmp    %eax,%ecx
f011ca92:	74 17                	je     f011caab <test_kmalloc_bestfit2+0x103e>
f011ca94:	83 ec 04             	sub    $0x4,%esp
f011ca97:	68 94 b9 13 f0       	push   $0xf013b994
f011ca9c:	68 bc 02 00 00       	push   $0x2bc
f011caa1:	68 7a b5 13 f0       	push   $0xf013b57a
f011caa6:	e8 5a 37 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011caab:	e8 77 72 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cab0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cab3:	74 17                	je     f011cacc <test_kmalloc_bestfit2+0x105f>
f011cab5:	83 ec 04             	sub    $0x4,%esp
f011cab8:	68 94 b5 13 f0       	push   $0xf013b594
f011cabd:	68 bd 02 00 00       	push   $0x2bd
f011cac2:	68 7a b5 13 f0       	push   $0xf013b57a
f011cac7:	e8 39 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cacc:	e8 88 05 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cad1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cad4:	29 c2                	sub    %eax,%edx
f011cad6:	89 d0                	mov    %edx,%eax
f011cad8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cadd:	74 17                	je     f011caf6 <test_kmalloc_bestfit2+0x1089>
f011cadf:	83 ec 04             	sub    $0x4,%esp
f011cae2:	68 74 ba 13 f0       	push   $0xf013ba74
f011cae7:	68 be 02 00 00       	push   $0x2be
f011caec:	68 7a b5 13 f0       	push   $0xf013b57a
f011caf1:	e8 0f 37 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011caf6:	e8 5e 05 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cafb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011cafe:	e8 24 72 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cb03:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011cb06:	83 ec 0c             	sub    $0xc,%esp
f011cb09:	68 00 fc 3f 00       	push   $0x3ffc00
f011cb0e:	e8 57 ae fe ff       	call   f010796a <kmalloc>
f011cb13:	83 c4 10             	add    $0x10,%esp
f011cb16:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cb1c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cb22:	89 c1                	mov    %eax,%ecx
f011cb24:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cb2b:	10 00 00 
f011cb2e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cb34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb39:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cb3f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb45:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb4a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cb50:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb56:	29 d0                	sub    %edx,%eax
f011cb58:	89 c3                	mov    %eax,%ebx
f011cb5a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cb61:	10 00 00 
f011cb64:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cb69:	0f b6 d0             	movzbl %al,%edx
f011cb6c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cb72:	01 d0                	add    %edx,%eax
f011cb74:	48                   	dec    %eax
f011cb75:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cb7b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cb81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb86:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cb8c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cb92:	29 d0                	sub    %edx,%eax
f011cb94:	01 c3                	add    %eax,%ebx
f011cb96:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cb9d:	10 00 00 
f011cba0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cba5:	0f b6 c0             	movzbl %al,%eax
f011cba8:	c1 e0 04             	shl    $0x4,%eax
f011cbab:	89 c2                	mov    %eax,%edx
f011cbad:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cbb3:	01 d0                	add    %edx,%eax
f011cbb5:	48                   	dec    %eax
f011cbb6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cbbc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cbc2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbc7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cbcd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cbd3:	29 d0                	sub    %edx,%eax
f011cbd5:	01 d8                	add    %ebx,%eax
f011cbd7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cbdc:	39 c1                	cmp    %eax,%ecx
f011cbde:	74 17                	je     f011cbf7 <test_kmalloc_bestfit2+0x118a>
f011cbe0:	83 ec 04             	sub    $0x4,%esp
f011cbe3:	68 94 b9 13 f0       	push   $0xf013b994
f011cbe8:	68 c4 02 00 00       	push   $0x2c4
f011cbed:	68 7a b5 13 f0       	push   $0xf013b57a
f011cbf2:	e8 0e 36 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbf7:	e8 2b 71 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cbfc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cbff:	74 17                	je     f011cc18 <test_kmalloc_bestfit2+0x11ab>
f011cc01:	83 ec 04             	sub    $0x4,%esp
f011cc04:	68 94 b5 13 f0       	push   $0xf013b594
f011cc09:	68 c5 02 00 00       	push   $0x2c5
f011cc0e:	68 7a b5 13 f0       	push   $0xf013b57a
f011cc13:	e8 ed 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cc18:	e8 3c 04 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cc1d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cc20:	29 c2                	sub    %eax,%edx
f011cc22:	89 d0                	mov    %edx,%eax
f011cc24:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cc29:	74 17                	je     f011cc42 <test_kmalloc_bestfit2+0x11d5>
f011cc2b:	83 ec 04             	sub    $0x4,%esp
f011cc2e:	68 74 ba 13 f0       	push   $0xf013ba74
f011cc33:	68 c6 02 00 00       	push   $0x2c6
f011cc38:	68 7a b5 13 f0       	push   $0xf013b57a
f011cc3d:	e8 c3 35 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011cc42:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cc49:	10 00 00 
f011cc4c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cc52:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc57:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cc5d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc63:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc68:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cc6e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc74:	29 d0                	sub    %edx,%eax
f011cc76:	89 c1                	mov    %eax,%ecx
f011cc78:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cc7f:	10 00 00 
f011cc82:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cc87:	0f b6 d0             	movzbl %al,%edx
f011cc8a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cc90:	01 d0                	add    %edx,%eax
f011cc92:	48                   	dec    %eax
f011cc93:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cc99:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cc9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cca4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011ccaa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ccb0:	29 d0                	sub    %edx,%eax
f011ccb2:	01 c1                	add    %eax,%ecx
f011ccb4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011ccbb:	10 00 00 
f011ccbe:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ccc3:	0f b6 c0             	movzbl %al,%eax
f011ccc6:	c1 e0 04             	shl    $0x4,%eax
f011ccc9:	89 c2                	mov    %eax,%edx
f011cccb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ccd1:	01 d0                	add    %edx,%eax
f011ccd3:	48                   	dec    %eax
f011ccd4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011ccda:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cce0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cce5:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cceb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ccf1:	29 d0                	sub    %edx,%eax
f011ccf3:	01 c8                	add    %ecx,%eax
f011ccf5:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ccfa:	29 c2                	sub    %eax,%edx
f011ccfc:	89 d0                	mov    %edx,%eax
f011ccfe:	83 ec 0c             	sub    $0xc,%esp
f011cd01:	50                   	push   %eax
f011cd02:	e8 63 ac fe ff       	call   f010796a <kmalloc>
f011cd07:	83 c4 10             	add    $0x10,%esp
f011cd0a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011cd10:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cd16:	85 c0                	test   %eax,%eax
f011cd18:	74 17                	je     f011cd31 <test_kmalloc_bestfit2+0x12c4>
f011cd1a:	83 ec 04             	sub    $0x4,%esp
f011cd1d:	68 c4 ba 13 f0       	push   $0xf013bac4
f011cd22:	68 ce 02 00 00       	push   $0x2ce
f011cd27:	68 7a b5 13 f0       	push   $0xf013b57a
f011cd2c:	e8 d4 34 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011cd31:	83 ec 0c             	sub    $0xc,%esp
f011cd34:	68 28 bb 13 f0       	push   $0xf013bb28
f011cd39:	e8 d0 3f fe ff       	call   f0100d0e <cprintf>
f011cd3e:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cd41:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cd46:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cd49:	5b                   	pop    %ebx
f011cd4a:	5f                   	pop    %edi
f011cd4b:	5d                   	pop    %ebp
f011cd4c:	c3                   	ret    

f011cd4d <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011cd4d:	55                   	push   %ebp
f011cd4e:	89 e5                	mov    %esp,%ebp
f011cd50:	57                   	push   %edi
f011cd51:	53                   	push   %ebx
f011cd52:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011cd58:	83 ec 0c             	sub    $0xc,%esp
f011cd5b:	68 bc b4 13 f0       	push   $0xf013b4bc
f011cd60:	e8 a9 3f fe ff       	call   f0100d0e <cprintf>
f011cd65:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd68:	83 ec 0c             	sub    $0xc,%esp
f011cd6b:	68 ec b4 13 f0       	push   $0xf013b4ec
f011cd70:	e8 99 3f fe ff       	call   f0100d0e <cprintf>
f011cd75:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cd78:	83 ec 0c             	sub    $0xc,%esp
f011cd7b:	68 bc b4 13 f0       	push   $0xf013b4bc
f011cd80:	e8 89 3f fe ff       	call   f0100d0e <cprintf>
f011cd85:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cd88:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011cd8e:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cd93:	b8 00 00 00 00       	mov    $0x0,%eax
f011cd98:	89 d7                	mov    %edx,%edi
f011cd9a:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd9c:	e8 b8 02 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cda4:	e8 7e 6f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cda9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011cdac:	83 ec 0c             	sub    $0xc,%esp
f011cdaf:	68 00 fc 0f 00       	push   $0xffc00
f011cdb4:	e8 b1 ab fe ff       	call   f010796a <kmalloc>
f011cdb9:	83 c4 10             	add    $0x10,%esp
f011cdbc:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cdc2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011cdc8:	89 c1                	mov    %eax,%ecx
f011cdca:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011cdd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cdd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdd9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cddc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cddf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cde4:	f7 75 ec             	divl   -0x14(%ebp)
f011cde7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cdea:	29 d0                	sub    %edx,%eax
f011cdec:	89 c3                	mov    %eax,%ebx
f011cdee:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011cdf5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cdfa:	0f b6 d0             	movzbl %al,%edx
f011cdfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce00:	01 d0                	add    %edx,%eax
f011ce02:	48                   	dec    %eax
f011ce03:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce06:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce09:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce0e:	f7 75 e4             	divl   -0x1c(%ebp)
f011ce11:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce14:	29 d0                	sub    %edx,%eax
f011ce16:	01 c3                	add    %eax,%ebx
f011ce18:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ce1f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ce24:	0f b6 c0             	movzbl %al,%eax
f011ce27:	c1 e0 04             	shl    $0x4,%eax
f011ce2a:	89 c2                	mov    %eax,%edx
f011ce2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ce2f:	01 d0                	add    %edx,%eax
f011ce31:	48                   	dec    %eax
f011ce32:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ce35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce38:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce3d:	f7 75 dc             	divl   -0x24(%ebp)
f011ce40:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce43:	29 d0                	sub    %edx,%eax
f011ce45:	01 d8                	add    %ebx,%eax
f011ce47:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ce4c:	39 c1                	cmp    %eax,%ecx
f011ce4e:	74 17                	je     f011ce67 <test_kmalloc_firstfit1+0x11a>
f011ce50:	83 ec 04             	sub    $0x4,%esp
f011ce53:	68 94 b9 13 f0       	push   $0xf013b994
f011ce58:	68 e6 02 00 00       	push   $0x2e6
f011ce5d:	68 7a b5 13 f0       	push   $0xf013b57a
f011ce62:	e8 9e 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce67:	e8 bb 6e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ce6c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce6f:	74 17                	je     f011ce88 <test_kmalloc_firstfit1+0x13b>
f011ce71:	83 ec 04             	sub    $0x4,%esp
f011ce74:	68 94 b5 13 f0       	push   $0xf013b594
f011ce79:	68 e7 02 00 00       	push   $0x2e7
f011ce7e:	68 7a b5 13 f0       	push   $0xf013b57a
f011ce83:	e8 7d 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ce88:	e8 cc 01 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ce8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce90:	29 c2                	sub    %eax,%edx
f011ce92:	89 d0                	mov    %edx,%eax
f011ce94:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce99:	74 17                	je     f011ceb2 <test_kmalloc_firstfit1+0x165>
f011ce9b:	83 ec 04             	sub    $0x4,%esp
f011ce9e:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011cea3:	68 e8 02 00 00       	push   $0x2e8
f011cea8:	68 7a b5 13 f0       	push   $0xf013b57a
f011cead:	e8 53 33 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ceb2:	e8 a2 01 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ceb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceba:	e8 68 6e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cebf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cec2:	83 ec 0c             	sub    $0xc,%esp
f011cec5:	68 00 fc 0f 00       	push   $0xffc00
f011ceca:	e8 9b aa fe ff       	call   f010796a <kmalloc>
f011cecf:	83 c4 10             	add    $0x10,%esp
f011ced2:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011ced8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cede:	89 c1                	mov    %eax,%ecx
f011cee0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cee7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ceea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ceef:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cef2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cef5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cefa:	f7 75 d4             	divl   -0x2c(%ebp)
f011cefd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf00:	29 d0                	sub    %edx,%eax
f011cf02:	89 c3                	mov    %eax,%ebx
f011cf04:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cf0b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cf10:	0f b6 d0             	movzbl %al,%edx
f011cf13:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cf16:	01 d0                	add    %edx,%eax
f011cf18:	48                   	dec    %eax
f011cf19:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cf1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf24:	f7 75 cc             	divl   -0x34(%ebp)
f011cf27:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf2a:	29 d0                	sub    %edx,%eax
f011cf2c:	01 c3                	add    %eax,%ebx
f011cf2e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cf35:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011cf3a:	0f b6 c0             	movzbl %al,%eax
f011cf3d:	c1 e0 04             	shl    $0x4,%eax
f011cf40:	89 c2                	mov    %eax,%edx
f011cf42:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cf45:	01 d0                	add    %edx,%eax
f011cf47:	48                   	dec    %eax
f011cf48:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cf4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf53:	f7 75 c4             	divl   -0x3c(%ebp)
f011cf56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf59:	29 d0                	sub    %edx,%eax
f011cf5b:	01 d8                	add    %ebx,%eax
f011cf5d:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cf62:	39 c1                	cmp    %eax,%ecx
f011cf64:	74 17                	je     f011cf7d <test_kmalloc_firstfit1+0x230>
f011cf66:	83 ec 04             	sub    $0x4,%esp
f011cf69:	68 94 b9 13 f0       	push   $0xf013b994
f011cf6e:	68 ee 02 00 00       	push   $0x2ee
f011cf73:	68 7a b5 13 f0       	push   $0xf013b57a
f011cf78:	e8 88 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf7d:	e8 a5 6d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cf82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf85:	74 17                	je     f011cf9e <test_kmalloc_firstfit1+0x251>
f011cf87:	83 ec 04             	sub    $0x4,%esp
f011cf8a:	68 94 b5 13 f0       	push   $0xf013b594
f011cf8f:	68 ef 02 00 00       	push   $0x2ef
f011cf94:	68 7a b5 13 f0       	push   $0xf013b57a
f011cf99:	e8 67 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cf9e:	e8 b6 00 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cfa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfa6:	29 c2                	sub    %eax,%edx
f011cfa8:	89 d0                	mov    %edx,%eax
f011cfaa:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfaf:	74 17                	je     f011cfc8 <test_kmalloc_firstfit1+0x27b>
f011cfb1:	83 ec 04             	sub    $0x4,%esp
f011cfb4:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011cfb9:	68 f0 02 00 00       	push   $0x2f0
f011cfbe:	68 7a b5 13 f0       	push   $0xf013b57a
f011cfc3:	e8 3d 32 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cfc8:	e8 8c 00 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cfcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfd0:	e8 52 6d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011cfd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cfd8:	83 ec 0c             	sub    $0xc,%esp
f011cfdb:	68 00 fc 0f 00       	push   $0xffc00
f011cfe0:	e8 85 a9 fe ff       	call   f010796a <kmalloc>
f011cfe5:	83 c4 10             	add    $0x10,%esp
f011cfe8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cfee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cff4:	89 c1                	mov    %eax,%ecx
f011cff6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cffd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d000:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d005:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d008:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d00b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d010:	f7 75 bc             	divl   -0x44(%ebp)
f011d013:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d016:	29 d0                	sub    %edx,%eax
f011d018:	89 c3                	mov    %eax,%ebx
f011d01a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d021:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d026:	0f b6 d0             	movzbl %al,%edx
f011d029:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d02c:	01 d0                	add    %edx,%eax
f011d02e:	48                   	dec    %eax
f011d02f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d032:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d035:	ba 00 00 00 00       	mov    $0x0,%edx
f011d03a:	f7 75 b4             	divl   -0x4c(%ebp)
f011d03d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d040:	29 d0                	sub    %edx,%eax
f011d042:	01 c3                	add    %eax,%ebx
f011d044:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d04b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d050:	0f b6 c0             	movzbl %al,%eax
f011d053:	c1 e0 04             	shl    $0x4,%eax
f011d056:	89 c2                	mov    %eax,%edx
f011d058:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d05b:	01 d0                	add    %edx,%eax
f011d05d:	48                   	dec    %eax
f011d05e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d061:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d064:	ba 00 00 00 00       	mov    $0x0,%edx
f011d069:	f7 75 ac             	divl   -0x54(%ebp)
f011d06c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d06f:	29 d0                	sub    %edx,%eax
f011d071:	01 d8                	add    %ebx,%eax
f011d073:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d078:	39 c1                	cmp    %eax,%ecx
f011d07a:	74 17                	je     f011d093 <test_kmalloc_firstfit1+0x346>
f011d07c:	83 ec 04             	sub    $0x4,%esp
f011d07f:	68 94 b9 13 f0       	push   $0xf013b994
f011d084:	68 f6 02 00 00       	push   $0x2f6
f011d089:	68 7a b5 13 f0       	push   $0xf013b57a
f011d08e:	e8 72 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d093:	e8 8f 6c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d098:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d09b:	74 17                	je     f011d0b4 <test_kmalloc_firstfit1+0x367>
f011d09d:	83 ec 04             	sub    $0x4,%esp
f011d0a0:	68 94 b5 13 f0       	push   $0xf013b594
f011d0a5:	68 f7 02 00 00       	push   $0x2f7
f011d0aa:	68 7a b5 13 f0       	push   $0xf013b57a
f011d0af:	e8 51 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d0b4:	e8 a0 ff fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d0b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0bc:	29 c2                	sub    %eax,%edx
f011d0be:	89 d0                	mov    %edx,%eax
f011d0c0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0c5:	74 17                	je     f011d0de <test_kmalloc_firstfit1+0x391>
f011d0c7:	83 ec 04             	sub    $0x4,%esp
f011d0ca:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d0cf:	68 f8 02 00 00       	push   $0x2f8
f011d0d4:	68 7a b5 13 f0       	push   $0xf013b57a
f011d0d9:	e8 27 31 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d0de:	e8 76 ff fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d0e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0e6:	e8 3c 6c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d0eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011d0ee:	83 ec 0c             	sub    $0xc,%esp
f011d0f1:	68 00 fc 0f 00       	push   $0xffc00
f011d0f6:	e8 6f a8 fe ff       	call   f010796a <kmalloc>
f011d0fb:	83 c4 10             	add    $0x10,%esp
f011d0fe:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d104:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d10a:	89 c1                	mov    %eax,%ecx
f011d10c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d113:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d116:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d11b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d11e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d121:	ba 00 00 00 00       	mov    $0x0,%edx
f011d126:	f7 75 a4             	divl   -0x5c(%ebp)
f011d129:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d12c:	29 d0                	sub    %edx,%eax
f011d12e:	89 c3                	mov    %eax,%ebx
f011d130:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d137:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d13c:	0f b6 d0             	movzbl %al,%edx
f011d13f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d142:	01 d0                	add    %edx,%eax
f011d144:	48                   	dec    %eax
f011d145:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d148:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d14b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d150:	f7 75 9c             	divl   -0x64(%ebp)
f011d153:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d156:	29 d0                	sub    %edx,%eax
f011d158:	01 c3                	add    %eax,%ebx
f011d15a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d161:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d166:	0f b6 c0             	movzbl %al,%eax
f011d169:	c1 e0 04             	shl    $0x4,%eax
f011d16c:	89 c2                	mov    %eax,%edx
f011d16e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d171:	01 d0                	add    %edx,%eax
f011d173:	48                   	dec    %eax
f011d174:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d177:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d17a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d17f:	f7 75 94             	divl   -0x6c(%ebp)
f011d182:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d185:	29 d0                	sub    %edx,%eax
f011d187:	01 d8                	add    %ebx,%eax
f011d189:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d18e:	39 c1                	cmp    %eax,%ecx
f011d190:	74 17                	je     f011d1a9 <test_kmalloc_firstfit1+0x45c>
f011d192:	83 ec 04             	sub    $0x4,%esp
f011d195:	68 94 b9 13 f0       	push   $0xf013b994
f011d19a:	68 fe 02 00 00       	push   $0x2fe
f011d19f:	68 7a b5 13 f0       	push   $0xf013b57a
f011d1a4:	e8 5c 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1a9:	e8 79 6b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d1ae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1b1:	74 17                	je     f011d1ca <test_kmalloc_firstfit1+0x47d>
f011d1b3:	83 ec 04             	sub    $0x4,%esp
f011d1b6:	68 94 b5 13 f0       	push   $0xf013b594
f011d1bb:	68 ff 02 00 00       	push   $0x2ff
f011d1c0:	68 7a b5 13 f0       	push   $0xf013b57a
f011d1c5:	e8 3b 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1ca:	e8 8a fe fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d1cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1d2:	29 c2                	sub    %eax,%edx
f011d1d4:	89 d0                	mov    %edx,%eax
f011d1d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1db:	74 17                	je     f011d1f4 <test_kmalloc_firstfit1+0x4a7>
f011d1dd:	83 ec 04             	sub    $0x4,%esp
f011d1e0:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d1e5:	68 00 03 00 00       	push   $0x300
f011d1ea:	68 7a b5 13 f0       	push   $0xf013b57a
f011d1ef:	e8 11 30 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d1f4:	e8 60 fe fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d1f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1fc:	e8 26 6b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d201:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d204:	83 ec 0c             	sub    $0xc,%esp
f011d207:	68 00 fc 1f 00       	push   $0x1ffc00
f011d20c:	e8 59 a7 fe ff       	call   f010796a <kmalloc>
f011d211:	83 c4 10             	add    $0x10,%esp
f011d214:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d21a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d220:	89 c1                	mov    %eax,%ecx
f011d222:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d229:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d22c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d231:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d234:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d237:	ba 00 00 00 00       	mov    $0x0,%edx
f011d23c:	f7 75 8c             	divl   -0x74(%ebp)
f011d23f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d242:	29 d0                	sub    %edx,%eax
f011d244:	89 c3                	mov    %eax,%ebx
f011d246:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d24d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d252:	0f b6 d0             	movzbl %al,%edx
f011d255:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d258:	01 d0                	add    %edx,%eax
f011d25a:	48                   	dec    %eax
f011d25b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d25e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d261:	ba 00 00 00 00       	mov    $0x0,%edx
f011d266:	f7 75 84             	divl   -0x7c(%ebp)
f011d269:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d26c:	29 d0                	sub    %edx,%eax
f011d26e:	01 c3                	add    %eax,%ebx
f011d270:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d277:	10 00 00 
f011d27a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d27f:	0f b6 c0             	movzbl %al,%eax
f011d282:	c1 e0 04             	shl    $0x4,%eax
f011d285:	89 c2                	mov    %eax,%edx
f011d287:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d28d:	01 d0                	add    %edx,%eax
f011d28f:	48                   	dec    %eax
f011d290:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d296:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d29c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2a1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d2a7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2ad:	29 d0                	sub    %edx,%eax
f011d2af:	01 d8                	add    %ebx,%eax
f011d2b1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d2b6:	39 c1                	cmp    %eax,%ecx
f011d2b8:	74 17                	je     f011d2d1 <test_kmalloc_firstfit1+0x584>
f011d2ba:	83 ec 04             	sub    $0x4,%esp
f011d2bd:	68 94 b9 13 f0       	push   $0xf013b994
f011d2c2:	68 06 03 00 00       	push   $0x306
f011d2c7:	68 7a b5 13 f0       	push   $0xf013b57a
f011d2cc:	e8 34 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2d1:	e8 51 6a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d2d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2d9:	74 17                	je     f011d2f2 <test_kmalloc_firstfit1+0x5a5>
f011d2db:	83 ec 04             	sub    $0x4,%esp
f011d2de:	68 94 b5 13 f0       	push   $0xf013b594
f011d2e3:	68 07 03 00 00       	push   $0x307
f011d2e8:	68 7a b5 13 f0       	push   $0xf013b57a
f011d2ed:	e8 13 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d2f2:	e8 62 fd fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d2f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2fa:	29 c2                	sub    %eax,%edx
f011d2fc:	89 d0                	mov    %edx,%eax
f011d2fe:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d303:	74 17                	je     f011d31c <test_kmalloc_firstfit1+0x5cf>
f011d305:	83 ec 04             	sub    $0x4,%esp
f011d308:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d30d:	68 08 03 00 00       	push   $0x308
f011d312:	68 7a b5 13 f0       	push   $0xf013b57a
f011d317:	e8 e9 2e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d31c:	e8 38 fd fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d321:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d324:	e8 fe 69 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d329:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d32c:	83 ec 0c             	sub    $0xc,%esp
f011d32f:	68 00 fc 1f 00       	push   $0x1ffc00
f011d334:	e8 31 a6 fe ff       	call   f010796a <kmalloc>
f011d339:	83 c4 10             	add    $0x10,%esp
f011d33c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d342:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d348:	89 c1                	mov    %eax,%ecx
f011d34a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d351:	10 00 00 
f011d354:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d35a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d35f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d365:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d36b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d370:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d376:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d37c:	29 d0                	sub    %edx,%eax
f011d37e:	89 c3                	mov    %eax,%ebx
f011d380:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d387:	10 00 00 
f011d38a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d38f:	0f b6 d0             	movzbl %al,%edx
f011d392:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d398:	01 d0                	add    %edx,%eax
f011d39a:	48                   	dec    %eax
f011d39b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d3a1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3ac:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d3b2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3b8:	29 d0                	sub    %edx,%eax
f011d3ba:	01 c3                	add    %eax,%ebx
f011d3bc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d3c3:	10 00 00 
f011d3c6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d3cb:	0f b6 c0             	movzbl %al,%eax
f011d3ce:	c1 e0 04             	shl    $0x4,%eax
f011d3d1:	89 c2                	mov    %eax,%edx
f011d3d3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d3d9:	01 d0                	add    %edx,%eax
f011d3db:	48                   	dec    %eax
f011d3dc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d3e2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d3e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3ed:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d3f3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d3f9:	29 d0                	sub    %edx,%eax
f011d3fb:	01 d8                	add    %ebx,%eax
f011d3fd:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d402:	39 c1                	cmp    %eax,%ecx
f011d404:	74 17                	je     f011d41d <test_kmalloc_firstfit1+0x6d0>
f011d406:	83 ec 04             	sub    $0x4,%esp
f011d409:	68 94 b9 13 f0       	push   $0xf013b994
f011d40e:	68 0e 03 00 00       	push   $0x30e
f011d413:	68 7a b5 13 f0       	push   $0xf013b57a
f011d418:	e8 e8 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d41d:	e8 05 69 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d422:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d425:	74 17                	je     f011d43e <test_kmalloc_firstfit1+0x6f1>
f011d427:	83 ec 04             	sub    $0x4,%esp
f011d42a:	68 94 b5 13 f0       	push   $0xf013b594
f011d42f:	68 0f 03 00 00       	push   $0x30f
f011d434:	68 7a b5 13 f0       	push   $0xf013b57a
f011d439:	e8 c7 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d43e:	e8 16 fc fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d443:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d446:	29 c2                	sub    %eax,%edx
f011d448:	89 d0                	mov    %edx,%eax
f011d44a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d44f:	74 17                	je     f011d468 <test_kmalloc_firstfit1+0x71b>
f011d451:	83 ec 04             	sub    $0x4,%esp
f011d454:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d459:	68 10 03 00 00       	push   $0x310
f011d45e:	68 7a b5 13 f0       	push   $0xf013b57a
f011d463:	e8 9d 2d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d468:	e8 ec fb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d46d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d470:	e8 b2 68 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d475:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d478:	83 ec 0c             	sub    $0xc,%esp
f011d47b:	68 00 fc 2f 00       	push   $0x2ffc00
f011d480:	e8 e5 a4 fe ff       	call   f010796a <kmalloc>
f011d485:	83 c4 10             	add    $0x10,%esp
f011d488:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d48e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d494:	89 c1                	mov    %eax,%ecx
f011d496:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d49d:	10 00 00 
f011d4a0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d4a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4ab:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d4b1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4bc:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d4c2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4c8:	29 d0                	sub    %edx,%eax
f011d4ca:	89 c3                	mov    %eax,%ebx
f011d4cc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d4d3:	10 00 00 
f011d4d6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d4db:	0f b6 d0             	movzbl %al,%edx
f011d4de:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d4e4:	01 d0                	add    %edx,%eax
f011d4e6:	48                   	dec    %eax
f011d4e7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d4ed:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d4f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4f8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d4fe:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d504:	29 d0                	sub    %edx,%eax
f011d506:	01 c3                	add    %eax,%ebx
f011d508:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d50f:	10 00 00 
f011d512:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d517:	0f b6 c0             	movzbl %al,%eax
f011d51a:	c1 e0 04             	shl    $0x4,%eax
f011d51d:	89 c2                	mov    %eax,%edx
f011d51f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d525:	01 d0                	add    %edx,%eax
f011d527:	48                   	dec    %eax
f011d528:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d52e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d534:	ba 00 00 00 00       	mov    $0x0,%edx
f011d539:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d53f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d545:	29 d0                	sub    %edx,%eax
f011d547:	01 d8                	add    %ebx,%eax
f011d549:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d54e:	39 c1                	cmp    %eax,%ecx
f011d550:	74 17                	je     f011d569 <test_kmalloc_firstfit1+0x81c>
f011d552:	83 ec 04             	sub    $0x4,%esp
f011d555:	68 94 b9 13 f0       	push   $0xf013b994
f011d55a:	68 16 03 00 00       	push   $0x316
f011d55f:	68 7a b5 13 f0       	push   $0xf013b57a
f011d564:	e8 9c 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d569:	e8 b9 67 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d56e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d571:	74 17                	je     f011d58a <test_kmalloc_firstfit1+0x83d>
f011d573:	83 ec 04             	sub    $0x4,%esp
f011d576:	68 94 b5 13 f0       	push   $0xf013b594
f011d57b:	68 17 03 00 00       	push   $0x317
f011d580:	68 7a b5 13 f0       	push   $0xf013b57a
f011d585:	e8 7b 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d58a:	e8 ca fa fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d58f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d592:	29 c2                	sub    %eax,%edx
f011d594:	89 d0                	mov    %edx,%eax
f011d596:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d59b:	74 17                	je     f011d5b4 <test_kmalloc_firstfit1+0x867>
f011d59d:	83 ec 04             	sub    $0x4,%esp
f011d5a0:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d5a5:	68 18 03 00 00       	push   $0x318
f011d5aa:	68 7a b5 13 f0       	push   $0xf013b57a
f011d5af:	e8 51 2c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5b4:	e8 a0 fa fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d5b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5bc:	e8 66 67 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d5c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d5c4:	83 ec 0c             	sub    $0xc,%esp
f011d5c7:	68 00 fc 2f 00       	push   $0x2ffc00
f011d5cc:	e8 99 a3 fe ff       	call   f010796a <kmalloc>
f011d5d1:	83 c4 10             	add    $0x10,%esp
f011d5d4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d5da:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d5e0:	89 c1                	mov    %eax,%ecx
f011d5e2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d5e9:	10 00 00 
f011d5ec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d5f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5f7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d5fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d603:	ba 00 00 00 00       	mov    $0x0,%edx
f011d608:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d60e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d614:	29 d0                	sub    %edx,%eax
f011d616:	89 c3                	mov    %eax,%ebx
f011d618:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d61f:	10 00 00 
f011d622:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d627:	0f b6 d0             	movzbl %al,%edx
f011d62a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d630:	01 d0                	add    %edx,%eax
f011d632:	48                   	dec    %eax
f011d633:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d639:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d63f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d644:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d64a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d650:	29 d0                	sub    %edx,%eax
f011d652:	01 c3                	add    %eax,%ebx
f011d654:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d65b:	10 00 00 
f011d65e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d663:	0f b6 c0             	movzbl %al,%eax
f011d666:	c1 e0 04             	shl    $0x4,%eax
f011d669:	89 c2                	mov    %eax,%edx
f011d66b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d671:	01 d0                	add    %edx,%eax
f011d673:	48                   	dec    %eax
f011d674:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d67a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d680:	ba 00 00 00 00       	mov    $0x0,%edx
f011d685:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d68b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d691:	29 d0                	sub    %edx,%eax
f011d693:	01 d8                	add    %ebx,%eax
f011d695:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d69a:	39 c1                	cmp    %eax,%ecx
f011d69c:	74 17                	je     f011d6b5 <test_kmalloc_firstfit1+0x968>
f011d69e:	83 ec 04             	sub    $0x4,%esp
f011d6a1:	68 94 b9 13 f0       	push   $0xf013b994
f011d6a6:	68 1e 03 00 00       	push   $0x31e
f011d6ab:	68 7a b5 13 f0       	push   $0xf013b57a
f011d6b0:	e8 50 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6b5:	e8 6d 66 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d6ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6bd:	74 17                	je     f011d6d6 <test_kmalloc_firstfit1+0x989>
f011d6bf:	83 ec 04             	sub    $0x4,%esp
f011d6c2:	68 94 b5 13 f0       	push   $0xf013b594
f011d6c7:	68 1f 03 00 00       	push   $0x31f
f011d6cc:	68 7a b5 13 f0       	push   $0xf013b57a
f011d6d1:	e8 2f 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d6d6:	e8 7e f9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d6db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6de:	29 c2                	sub    %eax,%edx
f011d6e0:	89 d0                	mov    %edx,%eax
f011d6e2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d6e7:	74 17                	je     f011d700 <test_kmalloc_firstfit1+0x9b3>
f011d6e9:	83 ec 04             	sub    $0x4,%esp
f011d6ec:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d6f1:	68 20 03 00 00       	push   $0x320
f011d6f6:	68 7a b5 13 f0       	push   $0xf013b57a
f011d6fb:	e8 05 2b fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d700:	e8 54 f9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d705:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d708:	e8 1a 66 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d70d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d710:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d716:	83 ec 0c             	sub    $0xc,%esp
f011d719:	50                   	push   %eax
f011d71a:	e8 94 a3 fe ff       	call   f0107ab3 <kfree>
f011d71f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d722:	e8 00 66 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d727:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d72a:	74 17                	je     f011d743 <test_kmalloc_firstfit1+0x9f6>
f011d72c:	83 ec 04             	sub    $0x4,%esp
f011d72f:	68 94 b5 13 f0       	push   $0xf013b594
f011d734:	68 29 03 00 00       	push   $0x329
f011d739:	68 7a b5 13 f0       	push   $0xf013b57a
f011d73e:	e8 c2 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d743:	e8 11 f9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d748:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d74b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d750:	74 17                	je     f011d769 <test_kmalloc_firstfit1+0xa1c>
f011d752:	83 ec 04             	sub    $0x4,%esp
f011d755:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011d75a:	68 2a 03 00 00       	push   $0x32a
f011d75f:	68 7a b5 13 f0       	push   $0xf013b57a
f011d764:	e8 9c 2a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d769:	e8 eb f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d76e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d771:	e8 b1 65 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d776:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d779:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d77f:	83 ec 0c             	sub    $0xc,%esp
f011d782:	50                   	push   %eax
f011d783:	e8 2b a3 fe ff       	call   f0107ab3 <kfree>
f011d788:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d78b:	e8 97 65 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d790:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d793:	74 17                	je     f011d7ac <test_kmalloc_firstfit1+0xa5f>
f011d795:	83 ec 04             	sub    $0x4,%esp
f011d798:	68 94 b5 13 f0       	push   $0xf013b594
f011d79d:	68 30 03 00 00       	push   $0x330
f011d7a2:	68 7a b5 13 f0       	push   $0xf013b57a
f011d7a7:	e8 59 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d7ac:	e8 a8 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d7b1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7b9:	74 17                	je     f011d7d2 <test_kmalloc_firstfit1+0xa85>
f011d7bb:	83 ec 04             	sub    $0x4,%esp
f011d7be:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011d7c3:	68 31 03 00 00       	push   $0x331
f011d7c8:	68 7a b5 13 f0       	push   $0xf013b57a
f011d7cd:	e8 33 2a fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d7d2:	e8 82 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d7d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7da:	e8 48 65 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d7e2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d7e8:	83 ec 0c             	sub    $0xc,%esp
f011d7eb:	50                   	push   %eax
f011d7ec:	e8 c2 a2 fe ff       	call   f0107ab3 <kfree>
f011d7f1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7f4:	e8 2e 65 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d7f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7fc:	74 17                	je     f011d815 <test_kmalloc_firstfit1+0xac8>
f011d7fe:	83 ec 04             	sub    $0x4,%esp
f011d801:	68 94 b5 13 f0       	push   $0xf013b594
f011d806:	68 37 03 00 00       	push   $0x337
f011d80b:	68 7a b5 13 f0       	push   $0xf013b57a
f011d810:	e8 f0 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d815:	e8 3f f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d81a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d81d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d822:	74 17                	je     f011d83b <test_kmalloc_firstfit1+0xaee>
f011d824:	83 ec 04             	sub    $0x4,%esp
f011d827:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011d82c:	68 38 03 00 00       	push   $0x338
f011d831:	68 7a b5 13 f0       	push   $0xf013b57a
f011d836:	e8 ca 29 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d83b:	e8 19 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d840:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d843:	e8 df 64 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d848:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d84b:	83 ec 0c             	sub    $0xc,%esp
f011d84e:	68 00 fc 07 00       	push   $0x7fc00
f011d853:	e8 12 a1 fe ff       	call   f010796a <kmalloc>
f011d858:	83 c4 10             	add    $0x10,%esp
f011d85b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d861:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d867:	89 c1                	mov    %eax,%ecx
f011d869:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d870:	10 00 00 
f011d873:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d879:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d87e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d884:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d88a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d88f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d895:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d89b:	29 d0                	sub    %edx,%eax
f011d89d:	89 c3                	mov    %eax,%ebx
f011d89f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d8a6:	10 00 00 
f011d8a9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d8ae:	0f b6 d0             	movzbl %al,%edx
f011d8b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d8b7:	01 d0                	add    %edx,%eax
f011d8b9:	48                   	dec    %eax
f011d8ba:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d8c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8cb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d8d1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8d7:	29 d0                	sub    %edx,%eax
f011d8d9:	01 c3                	add    %eax,%ebx
f011d8db:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d8e2:	10 00 00 
f011d8e5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d8ea:	0f b6 c0             	movzbl %al,%eax
f011d8ed:	c1 e0 04             	shl    $0x4,%eax
f011d8f0:	89 c2                	mov    %eax,%edx
f011d8f2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d8f8:	01 d0                	add    %edx,%eax
f011d8fa:	48                   	dec    %eax
f011d8fb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d901:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d907:	ba 00 00 00 00       	mov    $0x0,%edx
f011d90c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d912:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d918:	29 d0                	sub    %edx,%eax
f011d91a:	01 d8                	add    %ebx,%eax
f011d91c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d921:	39 c1                	cmp    %eax,%ecx
f011d923:	74 17                	je     f011d93c <test_kmalloc_firstfit1+0xbef>
f011d925:	83 ec 04             	sub    $0x4,%esp
f011d928:	68 94 b9 13 f0       	push   $0xf013b994
f011d92d:	68 41 03 00 00       	push   $0x341
f011d932:	68 7a b5 13 f0       	push   $0xf013b57a
f011d937:	e8 c9 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d93c:	e8 e6 63 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d941:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d944:	74 17                	je     f011d95d <test_kmalloc_firstfit1+0xc10>
f011d946:	83 ec 04             	sub    $0x4,%esp
f011d949:	68 94 b5 13 f0       	push   $0xf013b594
f011d94e:	68 42 03 00 00       	push   $0x342
f011d953:	68 7a b5 13 f0       	push   $0xf013b57a
f011d958:	e8 a8 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d95d:	e8 f7 f6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d962:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d965:	29 c2                	sub    %eax,%edx
f011d967:	89 d0                	mov    %edx,%eax
f011d969:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d96e:	74 17                	je     f011d987 <test_kmalloc_firstfit1+0xc3a>
f011d970:	83 ec 04             	sub    $0x4,%esp
f011d973:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011d978:	68 43 03 00 00       	push   $0x343
f011d97d:	68 7a b5 13 f0       	push   $0xf013b57a
f011d982:	e8 7e 28 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d987:	e8 cd f6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d98c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d98f:	e8 93 63 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011d994:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d997:	83 ec 0c             	sub    $0xc,%esp
f011d99a:	68 00 fc 0f 00       	push   $0xffc00
f011d99f:	e8 c6 9f fe ff       	call   f010796a <kmalloc>
f011d9a4:	83 c4 10             	add    $0x10,%esp
f011d9a7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d9ad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d9b3:	89 c1                	mov    %eax,%ecx
f011d9b5:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d9bc:	10 00 00 
f011d9bf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d9c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9ca:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d9d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9db:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d9e1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9e7:	29 d0                	sub    %edx,%eax
f011d9e9:	89 c3                	mov    %eax,%ebx
f011d9eb:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d9f2:	10 00 00 
f011d9f5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011d9fa:	0f b6 d0             	movzbl %al,%edx
f011d9fd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da03:	01 d0                	add    %edx,%eax
f011da05:	48                   	dec    %eax
f011da06:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da0c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da12:	ba 00 00 00 00       	mov    $0x0,%edx
f011da17:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011da1d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da23:	29 d0                	sub    %edx,%eax
f011da25:	01 c3                	add    %eax,%ebx
f011da27:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011da2e:	10 00 00 
f011da31:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011da36:	0f b6 c0             	movzbl %al,%eax
f011da39:	c1 e0 04             	shl    $0x4,%eax
f011da3c:	89 c2                	mov    %eax,%edx
f011da3e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da44:	01 d0                	add    %edx,%eax
f011da46:	48                   	dec    %eax
f011da47:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011da4d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da53:	ba 00 00 00 00       	mov    $0x0,%edx
f011da58:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011da5e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da64:	29 d0                	sub    %edx,%eax
f011da66:	01 d8                	add    %ebx,%eax
f011da68:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da6d:	39 c1                	cmp    %eax,%ecx
f011da6f:	74 17                	je     f011da88 <test_kmalloc_firstfit1+0xd3b>
f011da71:	83 ec 04             	sub    $0x4,%esp
f011da74:	68 94 b9 13 f0       	push   $0xf013b994
f011da79:	68 49 03 00 00       	push   $0x349
f011da7e:	68 7a b5 13 f0       	push   $0xf013b57a
f011da83:	e8 7d 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da88:	e8 9a 62 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011da8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da90:	74 17                	je     f011daa9 <test_kmalloc_firstfit1+0xd5c>
f011da92:	83 ec 04             	sub    $0x4,%esp
f011da95:	68 94 b5 13 f0       	push   $0xf013b594
f011da9a:	68 4a 03 00 00       	push   $0x34a
f011da9f:	68 7a b5 13 f0       	push   $0xf013b57a
f011daa4:	e8 5c 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011daa9:	e8 ab f5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011daae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dab1:	29 c2                	sub    %eax,%edx
f011dab3:	89 d0                	mov    %edx,%eax
f011dab5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011daba:	74 17                	je     f011dad3 <test_kmalloc_firstfit1+0xd86>
f011dabc:	83 ec 04             	sub    $0x4,%esp
f011dabf:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011dac4:	68 4b 03 00 00       	push   $0x34b
f011dac9:	68 7a b5 13 f0       	push   $0xf013b57a
f011dace:	e8 32 27 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011dad3:	e8 81 f5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dadb:	e8 47 62 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011dae3:	83 ec 0c             	sub    $0xc,%esp
f011dae6:	68 00 fc 03 00       	push   $0x3fc00
f011daeb:	e8 7a 9e fe ff       	call   f010796a <kmalloc>
f011daf0:	83 c4 10             	add    $0x10,%esp
f011daf3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011daf9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011daff:	89 c1                	mov    %eax,%ecx
f011db01:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011db08:	10 00 00 
f011db0b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db16:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011db1c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db22:	ba 00 00 00 00       	mov    $0x0,%edx
f011db27:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011db2d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db33:	29 d0                	sub    %edx,%eax
f011db35:	89 c3                	mov    %eax,%ebx
f011db37:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011db3e:	10 00 00 
f011db41:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011db46:	0f b6 d0             	movzbl %al,%edx
f011db49:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db4f:	01 d0                	add    %edx,%eax
f011db51:	48                   	dec    %eax
f011db52:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011db58:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011db63:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011db69:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db6f:	29 d0                	sub    %edx,%eax
f011db71:	01 c3                	add    %eax,%ebx
f011db73:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011db7a:	10 00 00 
f011db7d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011db82:	0f b6 c0             	movzbl %al,%eax
f011db85:	c1 e0 04             	shl    $0x4,%eax
f011db88:	89 c2                	mov    %eax,%edx
f011db8a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011db90:	01 d0                	add    %edx,%eax
f011db92:	48                   	dec    %eax
f011db93:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011db99:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011db9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011dba4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dbaa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbb0:	29 d0                	sub    %edx,%eax
f011dbb2:	01 d8                	add    %ebx,%eax
f011dbb4:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011dbb9:	39 c1                	cmp    %eax,%ecx
f011dbbb:	74 17                	je     f011dbd4 <test_kmalloc_firstfit1+0xe87>
f011dbbd:	83 ec 04             	sub    $0x4,%esp
f011dbc0:	68 94 b9 13 f0       	push   $0xf013b994
f011dbc5:	68 52 03 00 00       	push   $0x352
f011dbca:	68 7a b5 13 f0       	push   $0xf013b57a
f011dbcf:	e8 31 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbd4:	e8 4e 61 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dbd9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dbdc:	74 17                	je     f011dbf5 <test_kmalloc_firstfit1+0xea8>
f011dbde:	83 ec 04             	sub    $0x4,%esp
f011dbe1:	68 94 b5 13 f0       	push   $0xf013b594
f011dbe6:	68 53 03 00 00       	push   $0x353
f011dbeb:	68 7a b5 13 f0       	push   $0xf013b57a
f011dbf0:	e8 10 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011dbf5:	e8 5f f4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dbfa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dbfd:	29 c2                	sub    %eax,%edx
f011dbff:	89 d0                	mov    %edx,%eax
f011dc01:	83 f8 40             	cmp    $0x40,%eax
f011dc04:	74 17                	je     f011dc1d <test_kmalloc_firstfit1+0xed0>
f011dc06:	83 ec 04             	sub    $0x4,%esp
f011dc09:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011dc0e:	68 54 03 00 00       	push   $0x354
f011dc13:	68 7a b5 13 f0       	push   $0xf013b57a
f011dc18:	e8 e8 25 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011dc1d:	e8 37 f4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dc22:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc25:	e8 fd 60 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dc2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011dc2d:	83 ec 0c             	sub    $0xc,%esp
f011dc30:	68 00 00 20 00       	push   $0x200000
f011dc35:	e8 30 9d fe ff       	call   f010796a <kmalloc>
f011dc3a:	83 c4 10             	add    $0x10,%esp
f011dc3d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011dc43:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011dc49:	89 c1                	mov    %eax,%ecx
f011dc4b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011dc52:	10 00 00 
f011dc55:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011dc5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc60:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011dc66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dc6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc71:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011dc77:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dc7d:	29 d0                	sub    %edx,%eax
f011dc7f:	89 c3                	mov    %eax,%ebx
f011dc81:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011dc88:	10 00 00 
f011dc8b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011dc90:	0f b6 d0             	movzbl %al,%edx
f011dc93:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011dc99:	01 d0                	add    %edx,%eax
f011dc9b:	48                   	dec    %eax
f011dc9c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011dca2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dca8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcad:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011dcb3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dcb9:	29 d0                	sub    %edx,%eax
f011dcbb:	01 c3                	add    %eax,%ebx
f011dcbd:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011dcc4:	10 00 00 
f011dcc7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011dccc:	0f b6 c0             	movzbl %al,%eax
f011dccf:	c1 e0 04             	shl    $0x4,%eax
f011dcd2:	89 c2                	mov    %eax,%edx
f011dcd4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011dcda:	01 d0                	add    %edx,%eax
f011dcdc:	48                   	dec    %eax
f011dcdd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011dce3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dce9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcee:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011dcf4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dcfa:	29 d0                	sub    %edx,%eax
f011dcfc:	01 d8                	add    %ebx,%eax
f011dcfe:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011dd03:	39 c1                	cmp    %eax,%ecx
f011dd05:	74 17                	je     f011dd1e <test_kmalloc_firstfit1+0xfd1>
f011dd07:	83 ec 04             	sub    $0x4,%esp
f011dd0a:	68 94 b9 13 f0       	push   $0xf013b994
f011dd0f:	68 5a 03 00 00       	push   $0x35a
f011dd14:	68 7a b5 13 f0       	push   $0xf013b57a
f011dd19:	e8 e7 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dd1e:	e8 36 f3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dd23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd26:	29 c2                	sub    %eax,%edx
f011dd28:	89 d0                	mov    %edx,%eax
f011dd2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd2f:	74 17                	je     f011dd48 <test_kmalloc_firstfit1+0xffb>
f011dd31:	83 ec 04             	sub    $0x4,%esp
f011dd34:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011dd39:	68 5b 03 00 00       	push   $0x35b
f011dd3e:	68 7a b5 13 f0       	push   $0xf013b57a
f011dd43:	e8 bd 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd48:	e8 da 5f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dd4d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd50:	74 17                	je     f011dd69 <test_kmalloc_firstfit1+0x101c>
f011dd52:	83 ec 04             	sub    $0x4,%esp
f011dd55:	68 94 b5 13 f0       	push   $0xf013b594
f011dd5a:	68 5c 03 00 00       	push   $0x35c
f011dd5f:	68 7a b5 13 f0       	push   $0xf013b57a
f011dd64:	e8 9c 24 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011dd69:	e8 eb f2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dd6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd71:	e8 b1 5f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dd76:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011dd79:	83 ec 0c             	sub    $0xc,%esp
f011dd7c:	68 00 fc 3f 00       	push   $0x3ffc00
f011dd81:	e8 e4 9b fe ff       	call   f010796a <kmalloc>
f011dd86:	83 c4 10             	add    $0x10,%esp
f011dd89:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011dd8f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011dd95:	89 c1                	mov    %eax,%ecx
f011dd97:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011dd9e:	10 00 00 
f011dda1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011dda7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ddb2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ddb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddbd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ddc3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ddc9:	29 d0                	sub    %edx,%eax
f011ddcb:	89 c3                	mov    %eax,%ebx
f011ddcd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ddd4:	10 00 00 
f011ddd7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011dddc:	0f b6 d0             	movzbl %al,%edx
f011dddf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011dde5:	01 d0                	add    %edx,%eax
f011dde7:	48                   	dec    %eax
f011dde8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ddee:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ddf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddf9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ddff:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de05:	29 d0                	sub    %edx,%eax
f011de07:	01 c3                	add    %eax,%ebx
f011de09:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011de10:	10 00 00 
f011de13:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011de18:	0f b6 c0             	movzbl %al,%eax
f011de1b:	c1 e0 04             	shl    $0x4,%eax
f011de1e:	89 c2                	mov    %eax,%edx
f011de20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011de26:	01 d0                	add    %edx,%eax
f011de28:	48                   	dec    %eax
f011de29:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011de2f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de35:	ba 00 00 00 00       	mov    $0x0,%edx
f011de3a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011de40:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de46:	29 d0                	sub    %edx,%eax
f011de48:	01 d8                	add    %ebx,%eax
f011de4a:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011de4f:	39 c1                	cmp    %eax,%ecx
f011de51:	74 17                	je     f011de6a <test_kmalloc_firstfit1+0x111d>
f011de53:	83 ec 04             	sub    $0x4,%esp
f011de56:	68 94 b9 13 f0       	push   $0xf013b994
f011de5b:	68 63 03 00 00       	push   $0x363
f011de60:	68 7a b5 13 f0       	push   $0xf013b57a
f011de65:	e8 9b 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de6a:	e8 b8 5e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011de6f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011de72:	74 17                	je     f011de8b <test_kmalloc_firstfit1+0x113e>
f011de74:	83 ec 04             	sub    $0x4,%esp
f011de77:	68 94 b5 13 f0       	push   $0xf013b594
f011de7c:	68 64 03 00 00       	push   $0x364
f011de81:	68 7a b5 13 f0       	push   $0xf013b57a
f011de86:	e8 7a 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011de8b:	e8 c9 f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011de90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011de93:	29 c2                	sub    %eax,%edx
f011de95:	89 d0                	mov    %edx,%eax
f011de97:	3d 00 04 00 00       	cmp    $0x400,%eax
f011de9c:	74 17                	je     f011deb5 <test_kmalloc_firstfit1+0x1168>
f011de9e:	83 ec 04             	sub    $0x4,%esp
f011dea1:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011dea6:	68 65 03 00 00       	push   $0x365
f011deab:	68 7a b5 13 f0       	push   $0xf013b57a
f011deb0:	e8 50 23 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011deb5:	e8 9f f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011deba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011debd:	e8 65 5e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011dec5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011decb:	83 ec 0c             	sub    $0xc,%esp
f011dece:	50                   	push   %eax
f011decf:	e8 df 9b fe ff       	call   f0107ab3 <kfree>
f011ded4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ded7:	e8 4b 5e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011dedc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dedf:	74 17                	je     f011def8 <test_kmalloc_firstfit1+0x11ab>
f011dee1:	83 ec 04             	sub    $0x4,%esp
f011dee4:	68 94 b5 13 f0       	push   $0xf013b594
f011dee9:	68 6e 03 00 00       	push   $0x36e
f011deee:	68 7a b5 13 f0       	push   $0xf013b57a
f011def3:	e8 0d 23 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011def8:	e8 5c f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011defd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df00:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df05:	74 17                	je     f011df1e <test_kmalloc_firstfit1+0x11d1>
f011df07:	83 ec 04             	sub    $0x4,%esp
f011df0a:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011df0f:	68 6f 03 00 00       	push   $0x36f
f011df14:	68 7a b5 13 f0       	push   $0xf013b57a
f011df19:	e8 e7 22 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011df1e:	e8 36 f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df26:	e8 fc 5d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011df2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011df2e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011df34:	83 ec 0c             	sub    $0xc,%esp
f011df37:	50                   	push   %eax
f011df38:	e8 76 9b fe ff       	call   f0107ab3 <kfree>
f011df3d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df40:	e8 e2 5d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011df45:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df48:	74 17                	je     f011df61 <test_kmalloc_firstfit1+0x1214>
f011df4a:	83 ec 04             	sub    $0x4,%esp
f011df4d:	68 94 b5 13 f0       	push   $0xf013b594
f011df52:	68 75 03 00 00       	push   $0x375
f011df57:	68 7a b5 13 f0       	push   $0xf013b57a
f011df5c:	e8 a4 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df61:	e8 f3 f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df66:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df69:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df6e:	74 17                	je     f011df87 <test_kmalloc_firstfit1+0x123a>
f011df70:	83 ec 04             	sub    $0x4,%esp
f011df73:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011df78:	68 76 03 00 00       	push   $0x376
f011df7d:	68 7a b5 13 f0       	push   $0xf013b57a
f011df82:	e8 7e 22 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011df87:	e8 cd f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df8f:	e8 93 5d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011df94:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011df97:	83 ec 0c             	sub    $0xc,%esp
f011df9a:	68 00 00 10 00       	push   $0x100000
f011df9f:	e8 c6 99 fe ff       	call   f010796a <kmalloc>
f011dfa4:	83 c4 10             	add    $0x10,%esp
f011dfa7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dfad:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dfb3:	89 c1                	mov    %eax,%ecx
f011dfb5:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011dfbc:	10 00 00 
f011dfbf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dfc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfca:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dfd0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dfd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfdb:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dfe1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dfe7:	29 d0                	sub    %edx,%eax
f011dfe9:	89 c3                	mov    %eax,%ebx
f011dfeb:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011dff2:	10 00 00 
f011dff5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011dffa:	0f b6 d0             	movzbl %al,%edx
f011dffd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e003:	01 d0                	add    %edx,%eax
f011e005:	48                   	dec    %eax
f011e006:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011e00c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e012:	ba 00 00 00 00       	mov    $0x0,%edx
f011e017:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011e01d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e023:	29 d0                	sub    %edx,%eax
f011e025:	01 c3                	add    %eax,%ebx
f011e027:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011e02e:	10 00 00 
f011e031:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e036:	0f b6 c0             	movzbl %al,%eax
f011e039:	c1 e0 04             	shl    $0x4,%eax
f011e03c:	89 c2                	mov    %eax,%edx
f011e03e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e044:	01 d0                	add    %edx,%eax
f011e046:	48                   	dec    %eax
f011e047:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011e04d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e053:	ba 00 00 00 00       	mov    $0x0,%edx
f011e058:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011e05e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e064:	29 d0                	sub    %edx,%eax
f011e066:	01 d8                	add    %ebx,%eax
f011e068:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011e06d:	39 c1                	cmp    %eax,%ecx
f011e06f:	74 17                	je     f011e088 <test_kmalloc_firstfit1+0x133b>
f011e071:	83 ec 04             	sub    $0x4,%esp
f011e074:	68 94 b9 13 f0       	push   $0xf013b994
f011e079:	68 80 03 00 00       	push   $0x380
f011e07e:	68 7a b5 13 f0       	push   $0xf013b57a
f011e083:	e8 7d 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e088:	e8 9a 5c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e08d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011e090:	74 17                	je     f011e0a9 <test_kmalloc_firstfit1+0x135c>
f011e092:	83 ec 04             	sub    $0x4,%esp
f011e095:	68 94 b5 13 f0       	push   $0xf013b594
f011e09a:	68 81 03 00 00       	push   $0x381
f011e09f:	68 7a b5 13 f0       	push   $0xf013b57a
f011e0a4:	e8 5c 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011e0a9:	e8 ab ef fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e0ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e0b1:	29 c2                	sub    %eax,%edx
f011e0b3:	89 d0                	mov    %edx,%eax
f011e0b5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e0ba:	74 17                	je     f011e0d3 <test_kmalloc_firstfit1+0x1386>
f011e0bc:	83 ec 04             	sub    $0x4,%esp
f011e0bf:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e0c4:	68 82 03 00 00       	push   $0x382
f011e0c9:	68 7a b5 13 f0       	push   $0xf013b57a
f011e0ce:	e8 32 21 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011e0d3:	83 ec 0c             	sub    $0xc,%esp
f011e0d6:	68 70 bb 13 f0       	push   $0xf013bb70
f011e0db:	e8 2e 2c fe ff       	call   f0100d0e <cprintf>
f011e0e0:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e0e3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e0e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e0eb:	5b                   	pop    %ebx
f011e0ec:	5f                   	pop    %edi
f011e0ed:	5d                   	pop    %ebp
f011e0ee:	c3                   	ret    

f011e0ef <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011e0ef:	55                   	push   %ebp
f011e0f0:	89 e5                	mov    %esp,%ebp
f011e0f2:	57                   	push   %edi
f011e0f3:	53                   	push   %ebx
f011e0f4:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011e0fa:	83 ec 0c             	sub    $0xc,%esp
f011e0fd:	68 bc b4 13 f0       	push   $0xf013b4bc
f011e102:	e8 07 2c fe ff       	call   f0100d0e <cprintf>
f011e107:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e10a:	83 ec 0c             	sub    $0xc,%esp
f011e10d:	68 ec b4 13 f0       	push   $0xf013b4ec
f011e112:	e8 f7 2b fe ff       	call   f0100d0e <cprintf>
f011e117:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e11a:	83 ec 0c             	sub    $0xc,%esp
f011e11d:	68 bc b4 13 f0       	push   $0xf013b4bc
f011e122:	e8 e7 2b fe ff       	call   f0100d0e <cprintf>
f011e127:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011e12a:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011e130:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e135:	b8 00 00 00 00       	mov    $0x0,%eax
f011e13a:	89 d7                	mov    %edx,%edi
f011e13c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011e13e:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011e145:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e148:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e14d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e150:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e153:	ba 00 00 00 00       	mov    $0x0,%edx
f011e158:	f7 75 f4             	divl   -0xc(%ebp)
f011e15b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e15e:	29 d0                	sub    %edx,%eax
f011e160:	89 c1                	mov    %eax,%ecx
f011e162:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011e169:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e16e:	0f b6 d0             	movzbl %al,%edx
f011e171:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e174:	01 d0                	add    %edx,%eax
f011e176:	48                   	dec    %eax
f011e177:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011e17a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e17d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e182:	f7 75 ec             	divl   -0x14(%ebp)
f011e185:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e188:	29 d0                	sub    %edx,%eax
f011e18a:	01 c1                	add    %eax,%ecx
f011e18c:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e193:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e198:	0f b6 c0             	movzbl %al,%eax
f011e19b:	c1 e0 04             	shl    $0x4,%eax
f011e19e:	89 c2                	mov    %eax,%edx
f011e1a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e1a3:	01 d0                	add    %edx,%eax
f011e1a5:	48                   	dec    %eax
f011e1a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e1a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1b1:	f7 75 e4             	divl   -0x1c(%ebp)
f011e1b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1b7:	29 d0                	sub    %edx,%eax
f011e1b9:	01 c8                	add    %ecx,%eax
f011e1bb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011e1c0:	29 c2                	sub    %eax,%edx
f011e1c2:	89 d0                	mov    %edx,%eax
f011e1c4:	83 ec 0c             	sub    $0xc,%esp
f011e1c7:	50                   	push   %eax
f011e1c8:	e8 9d 97 fe ff       	call   f010796a <kmalloc>
f011e1cd:	83 c4 10             	add    $0x10,%esp
f011e1d0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011e1d6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e1dc:	85 c0                	test   %eax,%eax
f011e1de:	74 17                	je     f011e1f7 <test_kmalloc_firstfit2+0x108>
f011e1e0:	83 ec 04             	sub    $0x4,%esp
f011e1e3:	68 bc bb 13 f0       	push   $0xf013bbbc
f011e1e8:	68 97 03 00 00       	push   $0x397
f011e1ed:	68 7a b5 13 f0       	push   $0xf013b57a
f011e1f2:	e8 0e 20 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e1f7:	e8 5d ee fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e1fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e1ff:	e8 23 5b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e204:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e207:	83 ec 0c             	sub    $0xc,%esp
f011e20a:	68 00 fc 1f 00       	push   $0x1ffc00
f011e20f:	e8 56 97 fe ff       	call   f010796a <kmalloc>
f011e214:	83 c4 10             	add    $0x10,%esp
f011e217:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e21d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e223:	89 c1                	mov    %eax,%ecx
f011e225:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e22c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e22f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e234:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e237:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e23a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e23f:	f7 75 d4             	divl   -0x2c(%ebp)
f011e242:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e245:	29 d0                	sub    %edx,%eax
f011e247:	89 c3                	mov    %eax,%ebx
f011e249:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e250:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e255:	0f b6 d0             	movzbl %al,%edx
f011e258:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e25b:	01 d0                	add    %edx,%eax
f011e25d:	48                   	dec    %eax
f011e25e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e261:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e264:	ba 00 00 00 00       	mov    $0x0,%edx
f011e269:	f7 75 cc             	divl   -0x34(%ebp)
f011e26c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e26f:	29 d0                	sub    %edx,%eax
f011e271:	01 c3                	add    %eax,%ebx
f011e273:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e27a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e27f:	0f b6 c0             	movzbl %al,%eax
f011e282:	c1 e0 04             	shl    $0x4,%eax
f011e285:	89 c2                	mov    %eax,%edx
f011e287:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e28a:	01 d0                	add    %edx,%eax
f011e28c:	48                   	dec    %eax
f011e28d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e290:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e293:	ba 00 00 00 00       	mov    $0x0,%edx
f011e298:	f7 75 c4             	divl   -0x3c(%ebp)
f011e29b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e29e:	29 d0                	sub    %edx,%eax
f011e2a0:	01 d8                	add    %ebx,%eax
f011e2a2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e2a7:	39 c1                	cmp    %eax,%ecx
f011e2a9:	74 17                	je     f011e2c2 <test_kmalloc_firstfit2+0x1d3>
f011e2ab:	83 ec 04             	sub    $0x4,%esp
f011e2ae:	68 94 b9 13 f0       	push   $0xf013b994
f011e2b3:	68 a1 03 00 00       	push   $0x3a1
f011e2b8:	68 7a b5 13 f0       	push   $0xf013b57a
f011e2bd:	e8 43 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2c2:	e8 60 5a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e2c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2ca:	74 17                	je     f011e2e3 <test_kmalloc_firstfit2+0x1f4>
f011e2cc:	83 ec 04             	sub    $0x4,%esp
f011e2cf:	68 94 b5 13 f0       	push   $0xf013b594
f011e2d4:	68 a2 03 00 00       	push   $0x3a2
f011e2d9:	68 7a b5 13 f0       	push   $0xf013b57a
f011e2de:	e8 22 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e2e3:	e8 71 ed fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e2e8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e2eb:	29 c2                	sub    %eax,%edx
f011e2ed:	89 d0                	mov    %edx,%eax
f011e2ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e2f4:	74 17                	je     f011e30d <test_kmalloc_firstfit2+0x21e>
f011e2f6:	83 ec 04             	sub    $0x4,%esp
f011e2f9:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e2fe:	68 a3 03 00 00       	push   $0x3a3
f011e303:	68 7a b5 13 f0       	push   $0xf013b57a
f011e308:	e8 f8 1e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e30d:	e8 47 ed fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e312:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e315:	e8 0d 5a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e31a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e31d:	83 ec 0c             	sub    $0xc,%esp
f011e320:	68 00 fc 1f 00       	push   $0x1ffc00
f011e325:	e8 40 96 fe ff       	call   f010796a <kmalloc>
f011e32a:	83 c4 10             	add    $0x10,%esp
f011e32d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e333:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e339:	89 c1                	mov    %eax,%ecx
f011e33b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e342:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e345:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e34a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e34d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e350:	ba 00 00 00 00       	mov    $0x0,%edx
f011e355:	f7 75 bc             	divl   -0x44(%ebp)
f011e358:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e35b:	29 d0                	sub    %edx,%eax
f011e35d:	89 c3                	mov    %eax,%ebx
f011e35f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e366:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e36b:	0f b6 d0             	movzbl %al,%edx
f011e36e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e371:	01 d0                	add    %edx,%eax
f011e373:	48                   	dec    %eax
f011e374:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e377:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e37a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e37f:	f7 75 b4             	divl   -0x4c(%ebp)
f011e382:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e385:	29 d0                	sub    %edx,%eax
f011e387:	01 c3                	add    %eax,%ebx
f011e389:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e390:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e395:	0f b6 c0             	movzbl %al,%eax
f011e398:	c1 e0 04             	shl    $0x4,%eax
f011e39b:	89 c2                	mov    %eax,%edx
f011e39d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e3a0:	01 d0                	add    %edx,%eax
f011e3a2:	48                   	dec    %eax
f011e3a3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e3a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3ae:	f7 75 ac             	divl   -0x54(%ebp)
f011e3b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3b4:	29 d0                	sub    %edx,%eax
f011e3b6:	01 d8                	add    %ebx,%eax
f011e3b8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e3bd:	39 c1                	cmp    %eax,%ecx
f011e3bf:	74 17                	je     f011e3d8 <test_kmalloc_firstfit2+0x2e9>
f011e3c1:	83 ec 04             	sub    $0x4,%esp
f011e3c4:	68 94 b9 13 f0       	push   $0xf013b994
f011e3c9:	68 a9 03 00 00       	push   $0x3a9
f011e3ce:	68 7a b5 13 f0       	push   $0xf013b57a
f011e3d3:	e8 2d 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3d8:	e8 4a 59 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e3dd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e3e0:	74 17                	je     f011e3f9 <test_kmalloc_firstfit2+0x30a>
f011e3e2:	83 ec 04             	sub    $0x4,%esp
f011e3e5:	68 94 b5 13 f0       	push   $0xf013b594
f011e3ea:	68 aa 03 00 00       	push   $0x3aa
f011e3ef:	68 7a b5 13 f0       	push   $0xf013b57a
f011e3f4:	e8 0c 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e3f9:	e8 5b ec fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e3fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e401:	29 c2                	sub    %eax,%edx
f011e403:	89 d0                	mov    %edx,%eax
f011e405:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e40a:	74 17                	je     f011e423 <test_kmalloc_firstfit2+0x334>
f011e40c:	83 ec 04             	sub    $0x4,%esp
f011e40f:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e414:	68 ab 03 00 00       	push   $0x3ab
f011e419:	68 7a b5 13 f0       	push   $0xf013b57a
f011e41e:	e8 e2 1d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e423:	e8 31 ec fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e428:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e42b:	e8 f7 58 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e430:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e433:	83 ec 0c             	sub    $0xc,%esp
f011e436:	68 00 08 00 00       	push   $0x800
f011e43b:	e8 2a 95 fe ff       	call   f010796a <kmalloc>
f011e440:	83 c4 10             	add    $0x10,%esp
f011e443:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e449:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e44f:	89 c1                	mov    %eax,%ecx
f011e451:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e458:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e45b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e460:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e463:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e466:	ba 00 00 00 00       	mov    $0x0,%edx
f011e46b:	f7 75 a4             	divl   -0x5c(%ebp)
f011e46e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e471:	29 d0                	sub    %edx,%eax
f011e473:	89 c3                	mov    %eax,%ebx
f011e475:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e47c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e481:	0f b6 d0             	movzbl %al,%edx
f011e484:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e487:	01 d0                	add    %edx,%eax
f011e489:	48                   	dec    %eax
f011e48a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e48d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e490:	ba 00 00 00 00       	mov    $0x0,%edx
f011e495:	f7 75 9c             	divl   -0x64(%ebp)
f011e498:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e49b:	29 d0                	sub    %edx,%eax
f011e49d:	01 c3                	add    %eax,%ebx
f011e49f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e4a6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e4ab:	0f b6 c0             	movzbl %al,%eax
f011e4ae:	c1 e0 04             	shl    $0x4,%eax
f011e4b1:	89 c2                	mov    %eax,%edx
f011e4b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e4b6:	01 d0                	add    %edx,%eax
f011e4b8:	48                   	dec    %eax
f011e4b9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e4bc:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4c4:	f7 75 94             	divl   -0x6c(%ebp)
f011e4c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4ca:	29 d0                	sub    %edx,%eax
f011e4cc:	01 d8                	add    %ebx,%eax
f011e4ce:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e4d3:	39 c1                	cmp    %eax,%ecx
f011e4d5:	73 17                	jae    f011e4ee <test_kmalloc_firstfit2+0x3ff>
f011e4d7:	83 ec 04             	sub    $0x4,%esp
f011e4da:	68 94 b9 13 f0       	push   $0xf013b994
f011e4df:	68 b1 03 00 00       	push   $0x3b1
f011e4e4:	68 7a b5 13 f0       	push   $0xf013b57a
f011e4e9:	e8 17 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4ee:	e8 34 58 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e4f3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e4f6:	74 17                	je     f011e50f <test_kmalloc_firstfit2+0x420>
f011e4f8:	83 ec 04             	sub    $0x4,%esp
f011e4fb:	68 94 b5 13 f0       	push   $0xf013b594
f011e500:	68 b2 03 00 00       	push   $0x3b2
f011e505:	68 7a b5 13 f0       	push   $0xf013b57a
f011e50a:	e8 f6 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e50f:	e8 45 eb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e514:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e517:	29 c2                	sub    %eax,%edx
f011e519:	89 d0                	mov    %edx,%eax
f011e51b:	83 f8 01             	cmp    $0x1,%eax
f011e51e:	74 17                	je     f011e537 <test_kmalloc_firstfit2+0x448>
f011e520:	83 ec 04             	sub    $0x4,%esp
f011e523:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e528:	68 b3 03 00 00       	push   $0x3b3
f011e52d:	68 7a b5 13 f0       	push   $0xf013b57a
f011e532:	e8 ce 1c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e537:	e8 1d eb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e53c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e53f:	e8 e3 57 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e544:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e547:	83 ec 0c             	sub    $0xc,%esp
f011e54a:	68 00 08 00 00       	push   $0x800
f011e54f:	e8 16 94 fe ff       	call   f010796a <kmalloc>
f011e554:	83 c4 10             	add    $0x10,%esp
f011e557:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e55d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e563:	89 c1                	mov    %eax,%ecx
f011e565:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e56c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e56f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e574:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e577:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e57a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e57f:	f7 75 8c             	divl   -0x74(%ebp)
f011e582:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e585:	29 d0                	sub    %edx,%eax
f011e587:	89 c3                	mov    %eax,%ebx
f011e589:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e590:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e595:	0f b6 d0             	movzbl %al,%edx
f011e598:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e59b:	01 d0                	add    %edx,%eax
f011e59d:	48                   	dec    %eax
f011e59e:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e5a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5a9:	f7 75 84             	divl   -0x7c(%ebp)
f011e5ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5af:	29 d0                	sub    %edx,%eax
f011e5b1:	01 c3                	add    %eax,%ebx
f011e5b3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e5ba:	10 00 00 
f011e5bd:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e5c2:	0f b6 c0             	movzbl %al,%eax
f011e5c5:	c1 e0 04             	shl    $0x4,%eax
f011e5c8:	89 c2                	mov    %eax,%edx
f011e5ca:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e5d0:	01 d0                	add    %edx,%eax
f011e5d2:	48                   	dec    %eax
f011e5d3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e5d9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e5df:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5e4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e5ea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e5f0:	29 d0                	sub    %edx,%eax
f011e5f2:	01 d8                	add    %ebx,%eax
f011e5f4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e5f9:	39 c1                	cmp    %eax,%ecx
f011e5fb:	74 17                	je     f011e614 <test_kmalloc_firstfit2+0x525>
f011e5fd:	83 ec 04             	sub    $0x4,%esp
f011e600:	68 94 b9 13 f0       	push   $0xf013b994
f011e605:	68 b9 03 00 00       	push   $0x3b9
f011e60a:	68 7a b5 13 f0       	push   $0xf013b57a
f011e60f:	e8 f1 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e614:	e8 0e 57 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e619:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e61c:	74 17                	je     f011e635 <test_kmalloc_firstfit2+0x546>
f011e61e:	83 ec 04             	sub    $0x4,%esp
f011e621:	68 94 b5 13 f0       	push   $0xf013b594
f011e626:	68 ba 03 00 00       	push   $0x3ba
f011e62b:	68 7a b5 13 f0       	push   $0xf013b57a
f011e630:	e8 d0 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e635:	e8 1f ea fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e63a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e63d:	29 c2                	sub    %eax,%edx
f011e63f:	89 d0                	mov    %edx,%eax
f011e641:	83 f8 01             	cmp    $0x1,%eax
f011e644:	74 17                	je     f011e65d <test_kmalloc_firstfit2+0x56e>
f011e646:	83 ec 04             	sub    $0x4,%esp
f011e649:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e64e:	68 bb 03 00 00       	push   $0x3bb
f011e653:	68 7a b5 13 f0       	push   $0xf013b57a
f011e658:	e8 a8 1b fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e65d:	e8 f7 e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e662:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e665:	e8 bd 56 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e66a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e66d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e673:	83 ec 0c             	sub    $0xc,%esp
f011e676:	50                   	push   %eax
f011e677:	e8 37 94 fe ff       	call   f0107ab3 <kfree>
f011e67c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e67f:	e8 a3 56 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e684:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e687:	74 17                	je     f011e6a0 <test_kmalloc_firstfit2+0x5b1>
f011e689:	83 ec 04             	sub    $0x4,%esp
f011e68c:	68 94 b5 13 f0       	push   $0xf013b594
f011e691:	68 c1 03 00 00       	push   $0x3c1
f011e696:	68 7a b5 13 f0       	push   $0xf013b57a
f011e69b:	e8 65 1b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e6a0:	e8 b4 e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e6a5:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e6a8:	83 f8 01             	cmp    $0x1,%eax
f011e6ab:	74 17                	je     f011e6c4 <test_kmalloc_firstfit2+0x5d5>
f011e6ad:	83 ec 04             	sub    $0x4,%esp
f011e6b0:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011e6b5:	68 c2 03 00 00       	push   $0x3c2
f011e6ba:	68 7a b5 13 f0       	push   $0xf013b57a
f011e6bf:	e8 41 1b fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e6c4:	e8 90 e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e6c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6cc:	e8 56 56 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e6d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e6d4:	83 ec 0c             	sub    $0xc,%esp
f011e6d7:	68 00 1c 00 00       	push   $0x1c00
f011e6dc:	e8 89 92 fe ff       	call   f010796a <kmalloc>
f011e6e1:	83 c4 10             	add    $0x10,%esp
f011e6e4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e6ea:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e6f0:	89 c1                	mov    %eax,%ecx
f011e6f2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e6f9:	10 00 00 
f011e6fc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e702:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e707:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e70d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e713:	ba 00 00 00 00       	mov    $0x0,%edx
f011e718:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e71e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e724:	29 d0                	sub    %edx,%eax
f011e726:	89 c3                	mov    %eax,%ebx
f011e728:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e72f:	10 00 00 
f011e732:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e737:	0f b6 d0             	movzbl %al,%edx
f011e73a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e740:	01 d0                	add    %edx,%eax
f011e742:	48                   	dec    %eax
f011e743:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e749:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e74f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e754:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e75a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e760:	29 d0                	sub    %edx,%eax
f011e762:	01 c3                	add    %eax,%ebx
f011e764:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e76b:	10 00 00 
f011e76e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e773:	0f b6 c0             	movzbl %al,%eax
f011e776:	c1 e0 04             	shl    $0x4,%eax
f011e779:	89 c2                	mov    %eax,%edx
f011e77b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e781:	01 d0                	add    %edx,%eax
f011e783:	48                   	dec    %eax
f011e784:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e78a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e790:	ba 00 00 00 00       	mov    $0x0,%edx
f011e795:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e79b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e7a1:	29 d0                	sub    %edx,%eax
f011e7a3:	01 d8                	add    %ebx,%eax
f011e7a5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e7aa:	39 c1                	cmp    %eax,%ecx
f011e7ac:	74 17                	je     f011e7c5 <test_kmalloc_firstfit2+0x6d6>
f011e7ae:	83 ec 04             	sub    $0x4,%esp
f011e7b1:	68 94 b9 13 f0       	push   $0xf013b994
f011e7b6:	68 c8 03 00 00       	push   $0x3c8
f011e7bb:	68 7a b5 13 f0       	push   $0xf013b57a
f011e7c0:	e8 40 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7c5:	e8 5d 55 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e7ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7cd:	74 17                	je     f011e7e6 <test_kmalloc_firstfit2+0x6f7>
f011e7cf:	83 ec 04             	sub    $0x4,%esp
f011e7d2:	68 94 b5 13 f0       	push   $0xf013b594
f011e7d7:	68 c9 03 00 00       	push   $0x3c9
f011e7dc:	68 7a b5 13 f0       	push   $0xf013b57a
f011e7e1:	e8 1f 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e7e6:	e8 6e e8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e7eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e7ee:	29 c2                	sub    %eax,%edx
f011e7f0:	89 d0                	mov    %edx,%eax
f011e7f2:	83 f8 02             	cmp    $0x2,%eax
f011e7f5:	74 17                	je     f011e80e <test_kmalloc_firstfit2+0x71f>
f011e7f7:	83 ec 04             	sub    $0x4,%esp
f011e7fa:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e7ff:	68 ca 03 00 00       	push   $0x3ca
f011e804:	68 7a b5 13 f0       	push   $0xf013b57a
f011e809:	e8 f7 19 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e80e:	e8 46 e8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e813:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e816:	e8 0c 55 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e81b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e81e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e824:	83 ec 0c             	sub    $0xc,%esp
f011e827:	50                   	push   %eax
f011e828:	e8 86 92 fe ff       	call   f0107ab3 <kfree>
f011e82d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e830:	e8 f2 54 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e835:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e838:	74 17                	je     f011e851 <test_kmalloc_firstfit2+0x762>
f011e83a:	83 ec 04             	sub    $0x4,%esp
f011e83d:	68 94 b5 13 f0       	push   $0xf013b594
f011e842:	68 d0 03 00 00       	push   $0x3d0
f011e847:	68 7a b5 13 f0       	push   $0xf013b57a
f011e84c:	e8 b4 19 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e851:	e8 03 e8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e856:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e859:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e85e:	74 17                	je     f011e877 <test_kmalloc_firstfit2+0x788>
f011e860:	83 ec 04             	sub    $0x4,%esp
f011e863:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011e868:	68 d1 03 00 00       	push   $0x3d1
f011e86d:	68 7a b5 13 f0       	push   $0xf013b57a
f011e872:	e8 8e 19 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e877:	e8 dd e7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e87c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e87f:	e8 a3 54 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e884:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e887:	83 ec 0c             	sub    $0xc,%esp
f011e88a:	68 00 fc 2f 00       	push   $0x2ffc00
f011e88f:	e8 d6 90 fe ff       	call   f010796a <kmalloc>
f011e894:	83 c4 10             	add    $0x10,%esp
f011e897:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e89d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e8a3:	89 c1                	mov    %eax,%ecx
f011e8a5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e8ac:	10 00 00 
f011e8af:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e8b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8ba:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e8c0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8cb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e8d1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8d7:	29 d0                	sub    %edx,%eax
f011e8d9:	89 c3                	mov    %eax,%ebx
f011e8db:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e8e2:	10 00 00 
f011e8e5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e8ea:	0f b6 d0             	movzbl %al,%edx
f011e8ed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e8f3:	01 d0                	add    %edx,%eax
f011e8f5:	48                   	dec    %eax
f011e8f6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e8fc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e902:	ba 00 00 00 00       	mov    $0x0,%edx
f011e907:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e90d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e913:	29 d0                	sub    %edx,%eax
f011e915:	01 c3                	add    %eax,%ebx
f011e917:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e91e:	10 00 00 
f011e921:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011e926:	0f b6 c0             	movzbl %al,%eax
f011e929:	c1 e0 04             	shl    $0x4,%eax
f011e92c:	89 c2                	mov    %eax,%edx
f011e92e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e934:	01 d0                	add    %edx,%eax
f011e936:	48                   	dec    %eax
f011e937:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e93d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e943:	ba 00 00 00 00       	mov    $0x0,%edx
f011e948:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e94e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e954:	29 d0                	sub    %edx,%eax
f011e956:	01 d8                	add    %ebx,%eax
f011e958:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e95d:	39 c1                	cmp    %eax,%ecx
f011e95f:	74 17                	je     f011e978 <test_kmalloc_firstfit2+0x889>
f011e961:	83 ec 04             	sub    $0x4,%esp
f011e964:	68 94 b9 13 f0       	push   $0xf013b994
f011e969:	68 d7 03 00 00       	push   $0x3d7
f011e96e:	68 7a b5 13 f0       	push   $0xf013b57a
f011e973:	e8 8d 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e978:	e8 aa 53 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e97d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e980:	74 17                	je     f011e999 <test_kmalloc_firstfit2+0x8aa>
f011e982:	83 ec 04             	sub    $0x4,%esp
f011e985:	68 94 b5 13 f0       	push   $0xf013b594
f011e98a:	68 d8 03 00 00       	push   $0x3d8
f011e98f:	68 7a b5 13 f0       	push   $0xf013b57a
f011e994:	e8 6c 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e999:	e8 bb e6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e99e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e9a1:	29 c2                	sub    %eax,%edx
f011e9a3:	89 d0                	mov    %edx,%eax
f011e9a5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e9aa:	74 17                	je     f011e9c3 <test_kmalloc_firstfit2+0x8d4>
f011e9ac:	83 ec 04             	sub    $0x4,%esp
f011e9af:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011e9b4:	68 d9 03 00 00       	push   $0x3d9
f011e9b9:	68 7a b5 13 f0       	push   $0xf013b57a
f011e9be:	e8 42 18 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e9c3:	e8 91 e6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e9c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e9cb:	e8 57 53 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011e9d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e9d3:	83 ec 0c             	sub    $0xc,%esp
f011e9d6:	68 00 18 20 00       	push   $0x201800
f011e9db:	e8 8a 8f fe ff       	call   f010796a <kmalloc>
f011e9e0:	83 c4 10             	add    $0x10,%esp
f011e9e3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e9e9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e9ef:	89 c1                	mov    %eax,%ecx
f011e9f1:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e9f8:	10 00 00 
f011e9fb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ea01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea06:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ea0c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea12:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea17:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ea1d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea23:	29 d0                	sub    %edx,%eax
f011ea25:	89 c3                	mov    %eax,%ebx
f011ea27:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ea2e:	10 00 00 
f011ea31:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ea36:	0f b6 d0             	movzbl %al,%edx
f011ea39:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ea3f:	01 d0                	add    %edx,%eax
f011ea41:	48                   	dec    %eax
f011ea42:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ea48:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea53:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ea59:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea5f:	29 d0                	sub    %edx,%eax
f011ea61:	01 c3                	add    %eax,%ebx
f011ea63:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ea6a:	10 00 00 
f011ea6d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ea72:	0f b6 c0             	movzbl %al,%eax
f011ea75:	c1 e0 04             	shl    $0x4,%eax
f011ea78:	89 c2                	mov    %eax,%edx
f011ea7a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ea80:	01 d0                	add    %edx,%eax
f011ea82:	48                   	dec    %eax
f011ea83:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ea89:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ea8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea94:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ea9a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eaa0:	29 d0                	sub    %edx,%eax
f011eaa2:	01 d8                	add    %ebx,%eax
f011eaa4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011eaa9:	39 c1                	cmp    %eax,%ecx
f011eaab:	74 17                	je     f011eac4 <test_kmalloc_firstfit2+0x9d5>
f011eaad:	83 ec 04             	sub    $0x4,%esp
f011eab0:	68 94 b9 13 f0       	push   $0xf013b994
f011eab5:	68 df 03 00 00       	push   $0x3df
f011eaba:	68 7a b5 13 f0       	push   $0xf013b57a
f011eabf:	e8 41 17 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eac4:	e8 5e 52 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011eac9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eacc:	74 17                	je     f011eae5 <test_kmalloc_firstfit2+0x9f6>
f011eace:	83 ec 04             	sub    $0x4,%esp
f011ead1:	68 94 b5 13 f0       	push   $0xf013b594
f011ead6:	68 e0 03 00 00       	push   $0x3e0
f011eadb:	68 7a b5 13 f0       	push   $0xf013b57a
f011eae0:	e8 20 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011eae5:	e8 6f e5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eaea:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eaed:	29 c2                	sub    %eax,%edx
f011eaef:	89 d0                	mov    %edx,%eax
f011eaf1:	3d 02 02 00 00       	cmp    $0x202,%eax
f011eaf6:	74 17                	je     f011eb0f <test_kmalloc_firstfit2+0xa20>
f011eaf8:	83 ec 04             	sub    $0x4,%esp
f011eafb:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011eb00:	68 e1 03 00 00       	push   $0x3e1
f011eb05:	68 7a b5 13 f0       	push   $0xf013b57a
f011eb0a:	e8 f6 16 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011eb0f:	e8 45 e5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eb14:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb17:	e8 0b 52 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011eb1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011eb1f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011eb25:	83 ec 0c             	sub    $0xc,%esp
f011eb28:	50                   	push   %eax
f011eb29:	e8 85 8f fe ff       	call   f0107ab3 <kfree>
f011eb2e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb31:	e8 f1 51 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011eb36:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eb39:	74 17                	je     f011eb52 <test_kmalloc_firstfit2+0xa63>
f011eb3b:	83 ec 04             	sub    $0x4,%esp
f011eb3e:	68 94 b5 13 f0       	push   $0xf013b594
f011eb43:	68 e7 03 00 00       	push   $0x3e7
f011eb48:	68 7a b5 13 f0       	push   $0xf013b57a
f011eb4d:	e8 b3 16 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011eb52:	e8 02 e5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eb57:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011eb5a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011eb5f:	74 17                	je     f011eb78 <test_kmalloc_firstfit2+0xa89>
f011eb61:	83 ec 04             	sub    $0x4,%esp
f011eb64:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011eb69:	68 e8 03 00 00       	push   $0x3e8
f011eb6e:	68 7a b5 13 f0       	push   $0xf013b57a
f011eb73:	e8 8d 16 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011eb78:	e8 dc e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eb7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb80:	e8 a2 51 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011eb85:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011eb88:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eb8e:	83 ec 0c             	sub    $0xc,%esp
f011eb91:	50                   	push   %eax
f011eb92:	e8 1c 8f fe ff       	call   f0107ab3 <kfree>
f011eb97:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011eb9a:	e8 ba e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eb9f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011eba2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011eba7:	74 17                	je     f011ebc0 <test_kmalloc_firstfit2+0xad1>
f011eba9:	83 ec 04             	sub    $0x4,%esp
f011ebac:	68 d7 b9 13 f0       	push   $0xf013b9d7
f011ebb1:	68 ee 03 00 00       	push   $0x3ee
f011ebb6:	68 7a b5 13 f0       	push   $0xf013b57a
f011ebbb:	e8 45 16 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebc0:	e8 62 51 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ebc5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebc8:	74 17                	je     f011ebe1 <test_kmalloc_firstfit2+0xaf2>
f011ebca:	83 ec 04             	sub    $0x4,%esp
f011ebcd:	68 94 b5 13 f0       	push   $0xf013b594
f011ebd2:	68 ef 03 00 00       	push   $0x3ef
f011ebd7:	68 7a b5 13 f0       	push   $0xf013b57a
f011ebdc:	e8 24 16 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ebe1:	e8 73 e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ebe6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ebe9:	e8 39 51 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ebee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ebf1:	83 ec 0c             	sub    $0xc,%esp
f011ebf4:	68 00 fc 4f 00       	push   $0x4ffc00
f011ebf9:	e8 6c 8d fe ff       	call   f010796a <kmalloc>
f011ebfe:	83 c4 10             	add    $0x10,%esp
f011ec01:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ec07:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ec0d:	89 c1                	mov    %eax,%ecx
f011ec0f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ec16:	10 00 00 
f011ec19:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ec1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec24:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ec2a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec30:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec35:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ec3b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec41:	29 d0                	sub    %edx,%eax
f011ec43:	89 c3                	mov    %eax,%ebx
f011ec45:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ec4c:	10 00 00 
f011ec4f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ec54:	0f b6 d0             	movzbl %al,%edx
f011ec57:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ec5d:	01 d0                	add    %edx,%eax
f011ec5f:	48                   	dec    %eax
f011ec60:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ec66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec71:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ec77:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec7d:	29 d0                	sub    %edx,%eax
f011ec7f:	01 c3                	add    %eax,%ebx
f011ec81:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ec88:	10 00 00 
f011ec8b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011ec90:	0f b6 c0             	movzbl %al,%eax
f011ec93:	c1 e0 04             	shl    $0x4,%eax
f011ec96:	89 c2                	mov    %eax,%edx
f011ec98:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ec9e:	01 d0                	add    %edx,%eax
f011eca0:	48                   	dec    %eax
f011eca1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011eca7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecad:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecb2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ecb8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecbe:	29 d0                	sub    %edx,%eax
f011ecc0:	01 d8                	add    %ebx,%eax
f011ecc2:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ecc7:	39 c1                	cmp    %eax,%ecx
f011ecc9:	74 17                	je     f011ece2 <test_kmalloc_firstfit2+0xbf3>
f011eccb:	83 ec 04             	sub    $0x4,%esp
f011ecce:	68 94 b9 13 f0       	push   $0xf013b994
f011ecd3:	68 f5 03 00 00       	push   $0x3f5
f011ecd8:	68 7a b5 13 f0       	push   $0xf013b57a
f011ecdd:	e8 23 15 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ece2:	e8 40 50 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ece7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ecea:	74 17                	je     f011ed03 <test_kmalloc_firstfit2+0xc14>
f011ecec:	83 ec 04             	sub    $0x4,%esp
f011ecef:	68 94 b5 13 f0       	push   $0xf013b594
f011ecf4:	68 f6 03 00 00       	push   $0x3f6
f011ecf9:	68 7a b5 13 f0       	push   $0xf013b57a
f011ecfe:	e8 02 15 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ed03:	e8 51 e3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ed08:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed0b:	29 c2                	sub    %eax,%edx
f011ed0d:	89 d0                	mov    %edx,%eax
f011ed0f:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ed14:	74 17                	je     f011ed2d <test_kmalloc_firstfit2+0xc3e>
f011ed16:	83 ec 04             	sub    $0x4,%esp
f011ed19:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011ed1e:	68 f7 03 00 00       	push   $0x3f7
f011ed23:	68 7a b5 13 f0       	push   $0xf013b57a
f011ed28:	e8 d8 14 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ed2d:	e8 27 e3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ed32:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ed35:	e8 ed 4f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ed3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ed3d:	83 ec 0c             	sub    $0xc,%esp
f011ed40:	68 00 fc 2f 00       	push   $0x2ffc00
f011ed45:	e8 20 8c fe ff       	call   f010796a <kmalloc>
f011ed4a:	83 c4 10             	add    $0x10,%esp
f011ed4d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ed53:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ed59:	89 c1                	mov    %eax,%ecx
f011ed5b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ed62:	10 00 00 
f011ed65:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ed6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed70:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ed76:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ed7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed81:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ed87:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ed8d:	29 d0                	sub    %edx,%eax
f011ed8f:	89 c3                	mov    %eax,%ebx
f011ed91:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ed98:	10 00 00 
f011ed9b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011eda0:	0f b6 d0             	movzbl %al,%edx
f011eda3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011eda9:	01 d0                	add    %edx,%eax
f011edab:	48                   	dec    %eax
f011edac:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011edb2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011edb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011edbd:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011edc3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011edc9:	29 d0                	sub    %edx,%eax
f011edcb:	01 c3                	add    %eax,%ebx
f011edcd:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011edd4:	10 00 00 
f011edd7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011eddc:	0f b6 c0             	movzbl %al,%eax
f011eddf:	c1 e0 04             	shl    $0x4,%eax
f011ede2:	89 c2                	mov    %eax,%edx
f011ede4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011edea:	01 d0                	add    %edx,%eax
f011edec:	48                   	dec    %eax
f011eded:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011edf3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011edf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011edfe:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ee04:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee0a:	29 d0                	sub    %edx,%eax
f011ee0c:	01 d8                	add    %ebx,%eax
f011ee0e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ee13:	39 c1                	cmp    %eax,%ecx
f011ee15:	74 17                	je     f011ee2e <test_kmalloc_firstfit2+0xd3f>
f011ee17:	83 ec 04             	sub    $0x4,%esp
f011ee1a:	68 94 b9 13 f0       	push   $0xf013b994
f011ee1f:	68 05 04 00 00       	push   $0x405
f011ee24:	68 7a b5 13 f0       	push   $0xf013b57a
f011ee29:	e8 d7 13 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee2e:	e8 f4 4e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ee33:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ee36:	74 17                	je     f011ee4f <test_kmalloc_firstfit2+0xd60>
f011ee38:	83 ec 04             	sub    $0x4,%esp
f011ee3b:	68 94 b5 13 f0       	push   $0xf013b594
f011ee40:	68 06 04 00 00       	push   $0x406
f011ee45:	68 7a b5 13 f0       	push   $0xf013b57a
f011ee4a:	e8 b6 13 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ee4f:	e8 05 e2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ee54:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ee57:	29 c2                	sub    %eax,%edx
f011ee59:	89 d0                	mov    %edx,%eax
f011ee5b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ee60:	74 17                	je     f011ee79 <test_kmalloc_firstfit2+0xd8a>
f011ee62:	83 ec 04             	sub    $0x4,%esp
f011ee65:	68 c4 b9 13 f0       	push   $0xf013b9c4
f011ee6a:	68 07 04 00 00       	push   $0x407
f011ee6f:	68 7a b5 13 f0       	push   $0xf013b57a
f011ee74:	e8 8c 13 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ee79:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ee80:	10 00 00 
f011ee83:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ee89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee8e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ee94:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ee9a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee9f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011eea5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eeab:	29 d0                	sub    %edx,%eax
f011eead:	89 c1                	mov    %eax,%ecx
f011eeaf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011eeb6:	10 00 00 
f011eeb9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011eebe:	0f b6 d0             	movzbl %al,%edx
f011eec1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eec7:	01 d0                	add    %edx,%eax
f011eec9:	48                   	dec    %eax
f011eeca:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011eed0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eed6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eedb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011eee1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eee7:	29 d0                	sub    %edx,%eax
f011eee9:	01 c1                	add    %eax,%ecx
f011eeeb:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011eef2:	10 00 00 
f011eef5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011eefa:	0f b6 c0             	movzbl %al,%eax
f011eefd:	c1 e0 04             	shl    $0x4,%eax
f011ef00:	89 c2                	mov    %eax,%edx
f011ef02:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef08:	01 d0                	add    %edx,%eax
f011ef0a:	48                   	dec    %eax
f011ef0b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ef11:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef17:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef1c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ef22:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef28:	29 d0                	sub    %edx,%eax
f011ef2a:	01 c8                	add    %ecx,%eax
f011ef2c:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ef31:	29 c2                	sub    %eax,%edx
f011ef33:	89 d0                	mov    %edx,%eax
f011ef35:	83 ec 0c             	sub    $0xc,%esp
f011ef38:	50                   	push   %eax
f011ef39:	e8 2c 8a fe ff       	call   f010796a <kmalloc>
f011ef3e:	83 c4 10             	add    $0x10,%esp
f011ef41:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ef47:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef4d:	85 c0                	test   %eax,%eax
f011ef4f:	74 17                	je     f011ef68 <test_kmalloc_firstfit2+0xe79>
f011ef51:	83 ec 04             	sub    $0x4,%esp
f011ef54:	68 c4 ba 13 f0       	push   $0xf013bac4
f011ef59:	68 0d 04 00 00       	push   $0x40d
f011ef5e:	68 7a b5 13 f0       	push   $0xf013b57a
f011ef63:	e8 9d 12 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ef68:	83 ec 0c             	sub    $0xc,%esp
f011ef6b:	68 04 bc 13 f0       	push   $0xf013bc04
f011ef70:	e8 99 1d fe ff       	call   f0100d0e <cprintf>
f011ef75:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ef78:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ef7d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ef80:	5b                   	pop    %ebx
f011ef81:	5f                   	pop    %edi
f011ef82:	5d                   	pop    %ebp
f011ef83:	c3                   	ret    

f011ef84 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ef84:	55                   	push   %ebp
f011ef85:	89 e5                	mov    %esp,%ebp
f011ef87:	57                   	push   %edi
f011ef88:	53                   	push   %ebx
f011ef89:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011ef8f:	83 ec 0c             	sub    $0xc,%esp
f011ef92:	68 bc b4 13 f0       	push   $0xf013b4bc
f011ef97:	e8 72 1d fe ff       	call   f0100d0e <cprintf>
f011ef9c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ef9f:	83 ec 0c             	sub    $0xc,%esp
f011efa2:	68 ec b4 13 f0       	push   $0xf013b4ec
f011efa7:	e8 62 1d fe ff       	call   f0100d0e <cprintf>
f011efac:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011efaf:	83 ec 0c             	sub    $0xc,%esp
f011efb2:	68 bc b4 13 f0       	push   $0xf013b4bc
f011efb7:	e8 52 1d fe ff       	call   f0100d0e <cprintf>
f011efbc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011efbf:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011efc5:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011efca:	b8 00 00 00 00       	mov    $0x0,%eax
f011efcf:	89 d7                	mov    %edx,%edi
f011efd1:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011efd3:	e8 81 e0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011efd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011efdb:	e8 47 4d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011efe0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011efe3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011efea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011eff1:	eb 1f                	jmp    f011f012 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011eff3:	83 ec 0c             	sub    $0xc,%esp
f011eff6:	68 00 00 20 00       	push   $0x200000
f011effb:	e8 6a 89 fe ff       	call   f010796a <kmalloc>
f011f000:	83 c4 10             	add    $0x10,%esp
f011f003:	89 c2                	mov    %eax,%edx
f011f005:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f008:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011f00f:	ff 45 f4             	incl   -0xc(%ebp)
f011f012:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011f016:	7e db                	jle    f011eff3 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011f018:	83 ec 0c             	sub    $0xc,%esp
f011f01b:	68 00 b0 1f 00       	push   $0x1fb000
f011f020:	e8 45 89 fe ff       	call   f010796a <kmalloc>
f011f025:	83 c4 10             	add    $0x10,%esp
f011f028:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f02e:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f034:	89 c1                	mov    %eax,%ecx
f011f036:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011f03d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011f040:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f045:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011f048:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f04b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f050:	f7 75 e4             	divl   -0x1c(%ebp)
f011f053:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f056:	29 d0                	sub    %edx,%eax
f011f058:	89 c3                	mov    %eax,%ebx
f011f05a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011f061:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f066:	0f b6 d0             	movzbl %al,%edx
f011f069:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f06c:	01 d0                	add    %edx,%eax
f011f06e:	48                   	dec    %eax
f011f06f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011f072:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f075:	ba 00 00 00 00       	mov    $0x0,%edx
f011f07a:	f7 75 dc             	divl   -0x24(%ebp)
f011f07d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f080:	29 d0                	sub    %edx,%eax
f011f082:	01 c3                	add    %eax,%ebx
f011f084:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011f08b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f090:	0f b6 c0             	movzbl %al,%eax
f011f093:	c1 e0 04             	shl    $0x4,%eax
f011f096:	89 c2                	mov    %eax,%edx
f011f098:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f09b:	01 d0                	add    %edx,%eax
f011f09d:	48                   	dec    %eax
f011f09e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011f0a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0a9:	f7 75 d4             	divl   -0x2c(%ebp)
f011f0ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0af:	29 d0                	sub    %edx,%eax
f011f0b1:	01 d8                	add    %ebx,%eax
f011f0b3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f0b8:	39 c1                	cmp    %eax,%ecx
f011f0ba:	0f 85 c0 04 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f0c0:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f0c6:	89 c1                	mov    %eax,%ecx
f011f0c8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011f0cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f0d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0d7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011f0da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e2:	f7 75 cc             	divl   -0x34(%ebp)
f011f0e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f0e8:	29 d0                	sub    %edx,%eax
f011f0ea:	89 c3                	mov    %eax,%ebx
f011f0ec:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011f0f3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f0f8:	0f b6 d0             	movzbl %al,%edx
f011f0fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f0fe:	01 d0                	add    %edx,%eax
f011f100:	48                   	dec    %eax
f011f101:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011f104:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f107:	ba 00 00 00 00       	mov    $0x0,%edx
f011f10c:	f7 75 c4             	divl   -0x3c(%ebp)
f011f10f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f112:	29 d0                	sub    %edx,%eax
f011f114:	01 c3                	add    %eax,%ebx
f011f116:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011f11d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f122:	0f b6 c0             	movzbl %al,%eax
f011f125:	c1 e0 04             	shl    $0x4,%eax
f011f128:	89 c2                	mov    %eax,%edx
f011f12a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f12d:	01 d0                	add    %edx,%eax
f011f12f:	48                   	dec    %eax
f011f130:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011f133:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f136:	ba 00 00 00 00       	mov    $0x0,%edx
f011f13b:	f7 75 bc             	divl   -0x44(%ebp)
f011f13e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f141:	29 d0                	sub    %edx,%eax
f011f143:	01 d8                	add    %ebx,%eax
f011f145:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f14a:	39 c1                	cmp    %eax,%ecx
f011f14c:	0f 85 2e 04 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f152:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011f158:	89 c1                	mov    %eax,%ecx
f011f15a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011f161:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f164:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f169:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011f16c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f16f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f174:	f7 75 b4             	divl   -0x4c(%ebp)
f011f177:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f17a:	29 d0                	sub    %edx,%eax
f011f17c:	89 c3                	mov    %eax,%ebx
f011f17e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011f185:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f18a:	0f b6 d0             	movzbl %al,%edx
f011f18d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f190:	01 d0                	add    %edx,%eax
f011f192:	48                   	dec    %eax
f011f193:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011f196:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f199:	ba 00 00 00 00       	mov    $0x0,%edx
f011f19e:	f7 75 ac             	divl   -0x54(%ebp)
f011f1a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f1a4:	29 d0                	sub    %edx,%eax
f011f1a6:	01 c3                	add    %eax,%ebx
f011f1a8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011f1af:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f1b4:	0f b6 c0             	movzbl %al,%eax
f011f1b7:	c1 e0 04             	shl    $0x4,%eax
f011f1ba:	89 c2                	mov    %eax,%edx
f011f1bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f1bf:	01 d0                	add    %edx,%eax
f011f1c1:	48                   	dec    %eax
f011f1c2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011f1c5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f1c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1cd:	f7 75 a4             	divl   -0x5c(%ebp)
f011f1d0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f1d3:	29 d0                	sub    %edx,%eax
f011f1d5:	01 d8                	add    %ebx,%eax
f011f1d7:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f1dc:	39 c1                	cmp    %eax,%ecx
f011f1de:	0f 85 9c 03 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f1e4:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f1ea:	89 c1                	mov    %eax,%ecx
f011f1ec:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011f1f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f1f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1fb:	89 45 98             	mov    %eax,-0x68(%ebp)
f011f1fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f201:	ba 00 00 00 00       	mov    $0x0,%edx
f011f206:	f7 75 9c             	divl   -0x64(%ebp)
f011f209:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f20c:	29 d0                	sub    %edx,%eax
f011f20e:	89 c3                	mov    %eax,%ebx
f011f210:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f217:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f21c:	0f b6 d0             	movzbl %al,%edx
f011f21f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f222:	01 d0                	add    %edx,%eax
f011f224:	48                   	dec    %eax
f011f225:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f228:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f22b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f230:	f7 75 94             	divl   -0x6c(%ebp)
f011f233:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f236:	29 d0                	sub    %edx,%eax
f011f238:	01 c3                	add    %eax,%ebx
f011f23a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f241:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f246:	0f b6 c0             	movzbl %al,%eax
f011f249:	c1 e0 04             	shl    $0x4,%eax
f011f24c:	89 c2                	mov    %eax,%edx
f011f24e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f251:	01 d0                	add    %edx,%eax
f011f253:	48                   	dec    %eax
f011f254:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f257:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f25a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f25f:	f7 75 8c             	divl   -0x74(%ebp)
f011f262:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f265:	29 d0                	sub    %edx,%eax
f011f267:	01 d8                	add    %ebx,%eax
f011f269:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f26e:	39 c1                	cmp    %eax,%ecx
f011f270:	0f 85 0a 03 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f276:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011f27c:	89 c1                	mov    %eax,%ecx
f011f27e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f285:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f288:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f28d:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f290:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f293:	ba 00 00 00 00       	mov    $0x0,%edx
f011f298:	f7 75 84             	divl   -0x7c(%ebp)
f011f29b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f29e:	29 d0                	sub    %edx,%eax
f011f2a0:	89 c3                	mov    %eax,%ebx
f011f2a2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f2a9:	10 00 00 
f011f2ac:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f2b1:	0f b6 d0             	movzbl %al,%edx
f011f2b4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f2ba:	01 d0                	add    %edx,%eax
f011f2bc:	48                   	dec    %eax
f011f2bd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f2c3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2ce:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f2d4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2da:	29 d0                	sub    %edx,%eax
f011f2dc:	01 c3                	add    %eax,%ebx
f011f2de:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f2e5:	10 00 00 
f011f2e8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f2ed:	0f b6 c0             	movzbl %al,%eax
f011f2f0:	c1 e0 04             	shl    $0x4,%eax
f011f2f3:	89 c2                	mov    %eax,%edx
f011f2f5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f2fb:	01 d0                	add    %edx,%eax
f011f2fd:	48                   	dec    %eax
f011f2fe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f304:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f30a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f30f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f315:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f31b:	29 d0                	sub    %edx,%eax
f011f31d:	01 d8                	add    %ebx,%eax
f011f31f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f324:	39 c1                	cmp    %eax,%ecx
f011f326:	0f 85 54 02 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f32c:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f332:	89 c1                	mov    %eax,%ecx
f011f334:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f33b:	10 00 00 
f011f33e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f344:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f349:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f34f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f355:	ba 00 00 00 00       	mov    $0x0,%edx
f011f35a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f360:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f366:	29 d0                	sub    %edx,%eax
f011f368:	89 c3                	mov    %eax,%ebx
f011f36a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f371:	10 00 00 
f011f374:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f379:	0f b6 d0             	movzbl %al,%edx
f011f37c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f382:	01 d0                	add    %edx,%eax
f011f384:	48                   	dec    %eax
f011f385:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f38b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f391:	ba 00 00 00 00       	mov    $0x0,%edx
f011f396:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f39c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3a2:	29 d0                	sub    %edx,%eax
f011f3a4:	01 c3                	add    %eax,%ebx
f011f3a6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f3ad:	10 00 00 
f011f3b0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f3b5:	0f b6 c0             	movzbl %al,%eax
f011f3b8:	c1 e0 04             	shl    $0x4,%eax
f011f3bb:	89 c2                	mov    %eax,%edx
f011f3bd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f3c3:	01 d0                	add    %edx,%eax
f011f3c5:	48                   	dec    %eax
f011f3c6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f3cc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f3d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3d7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f3dd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f3e3:	29 d0                	sub    %edx,%eax
f011f3e5:	01 d8                	add    %ebx,%eax
f011f3e7:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f3ec:	39 c1                	cmp    %eax,%ecx
f011f3ee:	0f 85 8c 01 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f3f4:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f3fa:	89 c1                	mov    %eax,%ecx
f011f3fc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f403:	10 00 00 
f011f406:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f40c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f411:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f417:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f41d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f422:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f428:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f42e:	29 d0                	sub    %edx,%eax
f011f430:	89 c3                	mov    %eax,%ebx
f011f432:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f439:	10 00 00 
f011f43c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f441:	0f b6 d0             	movzbl %al,%edx
f011f444:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f44a:	01 d0                	add    %edx,%eax
f011f44c:	48                   	dec    %eax
f011f44d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f453:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f459:	ba 00 00 00 00       	mov    $0x0,%edx
f011f45e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f464:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f46a:	29 d0                	sub    %edx,%eax
f011f46c:	01 c3                	add    %eax,%ebx
f011f46e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f475:	10 00 00 
f011f478:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f47d:	0f b6 c0             	movzbl %al,%eax
f011f480:	c1 e0 04             	shl    $0x4,%eax
f011f483:	89 c2                	mov    %eax,%edx
f011f485:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f48b:	01 d0                	add    %edx,%eax
f011f48d:	48                   	dec    %eax
f011f48e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f494:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f49a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f49f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f4a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f4ab:	29 d0                	sub    %edx,%eax
f011f4ad:	01 d8                	add    %ebx,%eax
f011f4af:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f4b4:	39 c1                	cmp    %eax,%ecx
f011f4b6:	0f 85 c4 00 00 00    	jne    f011f580 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f4bc:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f4c2:	89 c1                	mov    %eax,%ecx
f011f4c4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f4cb:	10 00 00 
f011f4ce:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f4d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4d9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f4df:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f4e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ea:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f4f0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f4f6:	29 d0                	sub    %edx,%eax
f011f4f8:	89 c3                	mov    %eax,%ebx
f011f4fa:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f501:	10 00 00 
f011f504:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f509:	0f b6 d0             	movzbl %al,%edx
f011f50c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f512:	01 d0                	add    %edx,%eax
f011f514:	48                   	dec    %eax
f011f515:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f51b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f521:	ba 00 00 00 00       	mov    $0x0,%edx
f011f526:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f52c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f532:	29 d0                	sub    %edx,%eax
f011f534:	01 c3                	add    %eax,%ebx
f011f536:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f53d:	10 00 00 
f011f540:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f545:	0f b6 c0             	movzbl %al,%eax
f011f548:	c1 e0 04             	shl    $0x4,%eax
f011f54b:	89 c2                	mov    %eax,%edx
f011f54d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f553:	01 d0                	add    %edx,%eax
f011f555:	48                   	dec    %eax
f011f556:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f55c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f562:	ba 00 00 00 00       	mov    $0x0,%edx
f011f567:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f56d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f573:	29 d0                	sub    %edx,%eax
f011f575:	01 d8                	add    %ebx,%eax
f011f577:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f57c:	39 c1                	cmp    %eax,%ecx
f011f57e:	74 17                	je     f011f597 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f580:	83 ec 04             	sub    $0x4,%esp
f011f583:	68 50 bc 13 f0       	push   $0xf013bc50
f011f588:	68 31 04 00 00       	push   $0x431
f011f58d:	68 7a b5 13 f0       	push   $0xf013b57a
f011f592:	e8 6e 0c fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f597:	e8 8b 47 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f59c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f59f:	74 17                	je     f011f5b8 <test_kmalloc_worstfit+0x634>
f011f5a1:	83 ec 04             	sub    $0x4,%esp
f011f5a4:	68 94 b5 13 f0       	push   $0xf013b594
f011f5a9:	68 33 04 00 00       	push   $0x433
f011f5ae:	68 7a b5 13 f0       	push   $0xf013b57a
f011f5b3:	e8 4d 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f5b8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5bb:	e8 99 da fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f5c0:	29 c3                	sub    %eax,%ebx
f011f5c2:	89 d8                	mov    %ebx,%eax
f011f5c4:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f5c9:	74 17                	je     f011f5e2 <test_kmalloc_worstfit+0x65e>
f011f5cb:	83 ec 04             	sub    $0x4,%esp
f011f5ce:	68 37 b8 13 f0       	push   $0xf013b837
f011f5d3:	68 34 04 00 00       	push   $0x434
f011f5d8:	68 7a b5 13 f0       	push   $0xf013b57a
f011f5dd:	e8 23 0c fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f5e2:	e8 72 da fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f5e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f5ea:	e8 38 47 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f5ef:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f5f2:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f5f8:	83 ec 0c             	sub    $0xc,%esp
f011f5fb:	50                   	push   %eax
f011f5fc:	e8 b2 84 fe ff       	call   f0107ab3 <kfree>
f011f601:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f604:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f60a:	83 ec 0c             	sub    $0xc,%esp
f011f60d:	50                   	push   %eax
f011f60e:	e8 a0 84 fe ff       	call   f0107ab3 <kfree>
f011f613:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f616:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f61c:	83 ec 0c             	sub    $0xc,%esp
f011f61f:	50                   	push   %eax
f011f620:	e8 8e 84 fe ff       	call   f0107ab3 <kfree>
f011f625:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f628:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f62e:	83 ec 0c             	sub    $0xc,%esp
f011f631:	50                   	push   %eax
f011f632:	e8 7c 84 fe ff       	call   f0107ab3 <kfree>
f011f637:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f63a:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f640:	83 ec 0c             	sub    $0xc,%esp
f011f643:	50                   	push   %eax
f011f644:	e8 6a 84 fe ff       	call   f0107ab3 <kfree>
f011f649:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f64c:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f652:	83 ec 0c             	sub    $0xc,%esp
f011f655:	50                   	push   %eax
f011f656:	e8 58 84 fe ff       	call   f0107ab3 <kfree>
f011f65b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f65e:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f664:	83 ec 0c             	sub    $0xc,%esp
f011f667:	50                   	push   %eax
f011f668:	e8 46 84 fe ff       	call   f0107ab3 <kfree>
f011f66d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f670:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f676:	83 ec 0c             	sub    $0xc,%esp
f011f679:	50                   	push   %eax
f011f67a:	e8 34 84 fe ff       	call   f0107ab3 <kfree>
f011f67f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f682:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f688:	83 ec 0c             	sub    $0xc,%esp
f011f68b:	50                   	push   %eax
f011f68c:	e8 22 84 fe ff       	call   f0107ab3 <kfree>
f011f691:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f694:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f69a:	83 ec 0c             	sub    $0xc,%esp
f011f69d:	50                   	push   %eax
f011f69e:	e8 10 84 fe ff       	call   f0107ab3 <kfree>
f011f6a3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f6a6:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f6ac:	83 ec 0c             	sub    $0xc,%esp
f011f6af:	50                   	push   %eax
f011f6b0:	e8 fe 83 fe ff       	call   f0107ab3 <kfree>
f011f6b5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f6b8:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f6be:	83 ec 0c             	sub    $0xc,%esp
f011f6c1:	50                   	push   %eax
f011f6c2:	e8 ec 83 fe ff       	call   f0107ab3 <kfree>
f011f6c7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f6ca:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f6d0:	83 ec 0c             	sub    $0xc,%esp
f011f6d3:	50                   	push   %eax
f011f6d4:	e8 da 83 fe ff       	call   f0107ab3 <kfree>
f011f6d9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f6dc:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f6e2:	83 ec 0c             	sub    $0xc,%esp
f011f6e5:	50                   	push   %eax
f011f6e6:	e8 c8 83 fe ff       	call   f0107ab3 <kfree>
f011f6eb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f6ee:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f6f4:	83 ec 0c             	sub    $0xc,%esp
f011f6f7:	50                   	push   %eax
f011f6f8:	e8 b6 83 fe ff       	call   f0107ab3 <kfree>
f011f6fd:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f700:	e8 22 46 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f705:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f708:	74 17                	je     f011f721 <test_kmalloc_worstfit+0x79d>
f011f70a:	83 ec 04             	sub    $0x4,%esp
f011f70d:	68 94 b5 13 f0       	push   $0xf013b594
f011f712:	68 4a 04 00 00       	push   $0x44a
f011f717:	68 7a b5 13 f0       	push   $0xf013b57a
f011f71c:	e8 e4 0a fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f721:	e8 33 d9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f726:	89 c2                	mov    %eax,%edx
f011f728:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f72b:	29 c2                	sub    %eax,%edx
f011f72d:	89 d0                	mov    %edx,%eax
f011f72f:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f734:	74 17                	je     f011f74d <test_kmalloc_worstfit+0x7c9>
f011f736:	83 ec 04             	sub    $0x4,%esp
f011f739:	68 48 b8 13 f0       	push   $0xf013b848
f011f73e:	68 4b 04 00 00       	push   $0x44b
f011f743:	68 7a b5 13 f0       	push   $0xf013b57a
f011f748:	e8 b8 0a fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f74d:	e8 07 d9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f752:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f755:	e8 cd 45 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f75a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f75d:	83 ec 0c             	sub    $0xc,%esp
f011f760:	68 00 00 10 00       	push   $0x100000
f011f765:	e8 00 82 fe ff       	call   f010796a <kmalloc>
f011f76a:	83 c4 10             	add    $0x10,%esp
f011f76d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f773:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f77a:	10 00 00 
f011f77d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f783:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f788:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f78e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f794:	ba 00 00 00 00       	mov    $0x0,%edx
f011f799:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f79f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f7a5:	29 d0                	sub    %edx,%eax
f011f7a7:	89 c1                	mov    %eax,%ecx
f011f7a9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f7b0:	10 00 00 
f011f7b3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f7b8:	0f b6 d0             	movzbl %al,%edx
f011f7bb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f7c1:	01 d0                	add    %edx,%eax
f011f7c3:	48                   	dec    %eax
f011f7c4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f7ca:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f7d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7d5:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f7db:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f7e1:	29 d0                	sub    %edx,%eax
f011f7e3:	01 c1                	add    %eax,%ecx
f011f7e5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f7ec:	10 00 00 
f011f7ef:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f7f4:	0f b6 c0             	movzbl %al,%eax
f011f7f7:	c1 e0 04             	shl    $0x4,%eax
f011f7fa:	89 c2                	mov    %eax,%edx
f011f7fc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f802:	01 d0                	add    %edx,%eax
f011f804:	48                   	dec    %eax
f011f805:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f80b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f811:	ba 00 00 00 00       	mov    $0x0,%edx
f011f816:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f81c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f822:	29 d0                	sub    %edx,%eax
f011f824:	01 c8                	add    %ecx,%eax
f011f826:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f82c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f832:	39 c2                	cmp    %eax,%edx
f011f834:	74 17                	je     f011f84d <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f836:	83 ec 04             	sub    $0x4,%esp
f011f839:	68 94 bc 13 f0       	push   $0xf013bc94
f011f83e:	68 52 04 00 00       	push   $0x452
f011f843:	68 7a b5 13 f0       	push   $0xf013b57a
f011f848:	e8 b8 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f84d:	e8 d5 44 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f852:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f855:	74 17                	je     f011f86e <test_kmalloc_worstfit+0x8ea>
f011f857:	83 ec 04             	sub    $0x4,%esp
f011f85a:	68 94 b5 13 f0       	push   $0xf013b594
f011f85f:	68 53 04 00 00       	push   $0x453
f011f864:	68 7a b5 13 f0       	push   $0xf013b57a
f011f869:	e8 97 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f86e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f871:	e8 e3 d7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f876:	29 c3                	sub    %eax,%ebx
f011f878:	89 d8                	mov    %ebx,%eax
f011f87a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f87f:	74 17                	je     f011f898 <test_kmalloc_worstfit+0x914>
f011f881:	83 ec 04             	sub    $0x4,%esp
f011f884:	68 b2 ba 13 f0       	push   $0xf013bab2
f011f889:	68 54 04 00 00       	push   $0x454
f011f88e:	68 7a b5 13 f0       	push   $0xf013b57a
f011f893:	e8 6d 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f898:	ff 45 e8             	incl   -0x18(%ebp)
f011f89b:	83 ec 08             	sub    $0x8,%esp
f011f89e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8a1:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011f8a6:	e8 63 14 fe ff       	call   f0100d0e <cprintf>
f011f8ab:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8ae:	e8 a6 d7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f8b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8b6:	e8 6c 44 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f8bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f8be:	83 ec 0c             	sub    $0xc,%esp
f011f8c1:	68 00 00 40 00       	push   $0x400000
f011f8c6:	e8 9f 80 fe ff       	call   f010796a <kmalloc>
f011f8cb:	83 c4 10             	add    $0x10,%esp
f011f8ce:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f8d4:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f8db:	10 00 00 
f011f8de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f8e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8e9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f8ef:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f8f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8fa:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f900:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f906:	29 d0                	sub    %edx,%eax
f011f908:	89 c1                	mov    %eax,%ecx
f011f90a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f911:	10 00 00 
f011f914:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f919:	0f b6 d0             	movzbl %al,%edx
f011f91c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f922:	01 d0                	add    %edx,%eax
f011f924:	48                   	dec    %eax
f011f925:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f92b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f931:	ba 00 00 00 00       	mov    $0x0,%edx
f011f936:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f93c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f942:	29 d0                	sub    %edx,%eax
f011f944:	01 c1                	add    %eax,%ecx
f011f946:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f94d:	10 00 00 
f011f950:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011f955:	0f b6 c0             	movzbl %al,%eax
f011f958:	c1 e0 04             	shl    $0x4,%eax
f011f95b:	89 c2                	mov    %eax,%edx
f011f95d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f963:	01 d0                	add    %edx,%eax
f011f965:	48                   	dec    %eax
f011f966:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f96c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f972:	ba 00 00 00 00       	mov    $0x0,%edx
f011f977:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f97d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f983:	29 d0                	sub    %edx,%eax
f011f985:	01 c8                	add    %ecx,%eax
f011f987:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f98d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f993:	39 c2                	cmp    %eax,%edx
f011f995:	74 17                	je     f011f9ae <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f997:	83 ec 04             	sub    $0x4,%esp
f011f99a:	68 94 bc 13 f0       	push   $0xf013bc94
f011f99f:	68 5b 04 00 00       	push   $0x45b
f011f9a4:	68 7a b5 13 f0       	push   $0xf013b57a
f011f9a9:	e8 57 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9ae:	e8 74 43 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011f9b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9b6:	74 17                	je     f011f9cf <test_kmalloc_worstfit+0xa4b>
f011f9b8:	83 ec 04             	sub    $0x4,%esp
f011f9bb:	68 94 b5 13 f0       	push   $0xf013b594
f011f9c0:	68 5c 04 00 00       	push   $0x45c
f011f9c5:	68 7a b5 13 f0       	push   $0xf013b57a
f011f9ca:	e8 36 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f9cf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f9d2:	e8 82 d6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f9d7:	29 c3                	sub    %eax,%ebx
f011f9d9:	89 d8                	mov    %ebx,%eax
f011f9db:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f9e0:	74 17                	je     f011f9f9 <test_kmalloc_worstfit+0xa75>
f011f9e2:	83 ec 04             	sub    $0x4,%esp
f011f9e5:	68 b2 ba 13 f0       	push   $0xf013bab2
f011f9ea:	68 5d 04 00 00       	push   $0x45d
f011f9ef:	68 7a b5 13 f0       	push   $0xf013b57a
f011f9f4:	e8 0c 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f9f9:	ff 45 e8             	incl   -0x18(%ebp)
f011f9fc:	83 ec 08             	sub    $0x8,%esp
f011f9ff:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa02:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011fa07:	e8 02 13 fe ff       	call   f0100d0e <cprintf>
f011fa0c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa0f:	e8 45 d6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fa14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa17:	e8 0b 43 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fa1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011fa1f:	83 ec 0c             	sub    $0xc,%esp
f011fa22:	68 00 00 60 00       	push   $0x600000
f011fa27:	e8 3e 7f fe ff       	call   f010796a <kmalloc>
f011fa2c:	83 c4 10             	add    $0x10,%esp
f011fa2f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011fa35:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011fa3c:	10 00 00 
f011fa3f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fa45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa4a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011fa50:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa56:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa5b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011fa61:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa67:	29 d0                	sub    %edx,%eax
f011fa69:	89 c1                	mov    %eax,%ecx
f011fa6b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011fa72:	10 00 00 
f011fa75:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fa7a:	0f b6 d0             	movzbl %al,%edx
f011fa7d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fa83:	01 d0                	add    %edx,%eax
f011fa85:	48                   	dec    %eax
f011fa86:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011fa8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fa92:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa97:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011fa9d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011faa3:	29 d0                	sub    %edx,%eax
f011faa5:	01 c1                	add    %eax,%ecx
f011faa7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011faae:	10 00 00 
f011fab1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fab6:	0f b6 c0             	movzbl %al,%eax
f011fab9:	c1 e0 04             	shl    $0x4,%eax
f011fabc:	89 c2                	mov    %eax,%edx
f011fabe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011fac4:	01 d0                	add    %edx,%eax
f011fac6:	48                   	dec    %eax
f011fac7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011facd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fad3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fad8:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011fade:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fae4:	29 d0                	sub    %edx,%eax
f011fae6:	01 c8                	add    %ecx,%eax
f011fae8:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011faee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011faf4:	39 c2                	cmp    %eax,%edx
f011faf6:	74 17                	je     f011fb0f <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011faf8:	83 ec 04             	sub    $0x4,%esp
f011fafb:	68 94 bc 13 f0       	push   $0xf013bc94
f011fb00:	68 64 04 00 00       	push   $0x464
f011fb05:	68 7a b5 13 f0       	push   $0xf013b57a
f011fb0a:	e8 f6 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb0f:	e8 13 42 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fb14:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb17:	74 17                	je     f011fb30 <test_kmalloc_worstfit+0xbac>
f011fb19:	83 ec 04             	sub    $0x4,%esp
f011fb1c:	68 94 b5 13 f0       	push   $0xf013b594
f011fb21:	68 65 04 00 00       	push   $0x465
f011fb26:	68 7a b5 13 f0       	push   $0xf013b57a
f011fb2b:	e8 d5 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb30:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb33:	e8 21 d5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fb38:	29 c3                	sub    %eax,%ebx
f011fb3a:	89 d8                	mov    %ebx,%eax
f011fb3c:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fb41:	74 17                	je     f011fb5a <test_kmalloc_worstfit+0xbd6>
f011fb43:	83 ec 04             	sub    $0x4,%esp
f011fb46:	68 b2 ba 13 f0       	push   $0xf013bab2
f011fb4b:	68 66 04 00 00       	push   $0x466
f011fb50:	68 7a b5 13 f0       	push   $0xf013b57a
f011fb55:	e8 ab 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb5a:	ff 45 e8             	incl   -0x18(%ebp)
f011fb5d:	83 ec 08             	sub    $0x8,%esp
f011fb60:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb63:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011fb68:	e8 a1 11 fe ff       	call   f0100d0e <cprintf>
f011fb6d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb70:	e8 e4 d4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fb75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb78:	e8 aa 41 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fb7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011fb80:	83 ec 0c             	sub    $0xc,%esp
f011fb83:	68 00 00 50 00       	push   $0x500000
f011fb88:	e8 dd 7d fe ff       	call   f010796a <kmalloc>
f011fb8d:	83 c4 10             	add    $0x10,%esp
f011fb90:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011fb96:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011fb9d:	10 00 00 
f011fba0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fba6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fbab:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011fbb1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbbc:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011fbc2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbc8:	29 d0                	sub    %edx,%eax
f011fbca:	89 c1                	mov    %eax,%ecx
f011fbcc:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011fbd3:	10 00 00 
f011fbd6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fbdb:	0f b6 d0             	movzbl %al,%edx
f011fbde:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fbe4:	01 d0                	add    %edx,%eax
f011fbe6:	48                   	dec    %eax
f011fbe7:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fbed:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fbf3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbf8:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fbfe:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc04:	29 d0                	sub    %edx,%eax
f011fc06:	01 c1                	add    %eax,%ecx
f011fc08:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fc0f:	10 00 00 
f011fc12:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fc17:	0f b6 c0             	movzbl %al,%eax
f011fc1a:	c1 e0 04             	shl    $0x4,%eax
f011fc1d:	89 c2                	mov    %eax,%edx
f011fc1f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fc25:	01 d0                	add    %edx,%eax
f011fc27:	48                   	dec    %eax
f011fc28:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fc2e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc34:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc39:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fc3f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc45:	29 d0                	sub    %edx,%eax
f011fc47:	01 c8                	add    %ecx,%eax
f011fc49:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011fc4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc55:	39 c2                	cmp    %eax,%edx
f011fc57:	74 17                	je     f011fc70 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011fc59:	83 ec 04             	sub    $0x4,%esp
f011fc5c:	68 94 bc 13 f0       	push   $0xf013bc94
f011fc61:	68 6d 04 00 00       	push   $0x46d
f011fc66:	68 7a b5 13 f0       	push   $0xf013b57a
f011fc6b:	e8 95 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc70:	e8 b2 40 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fc75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc78:	74 17                	je     f011fc91 <test_kmalloc_worstfit+0xd0d>
f011fc7a:	83 ec 04             	sub    $0x4,%esp
f011fc7d:	68 94 b5 13 f0       	push   $0xf013b594
f011fc82:	68 6e 04 00 00       	push   $0x46e
f011fc87:	68 7a b5 13 f0       	push   $0xf013b57a
f011fc8c:	e8 74 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fc91:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fc94:	e8 c0 d3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fc99:	29 c3                	sub    %eax,%ebx
f011fc9b:	89 d8                	mov    %ebx,%eax
f011fc9d:	3d 00 05 00 00       	cmp    $0x500,%eax
f011fca2:	74 17                	je     f011fcbb <test_kmalloc_worstfit+0xd37>
f011fca4:	83 ec 04             	sub    $0x4,%esp
f011fca7:	68 b2 ba 13 f0       	push   $0xf013bab2
f011fcac:	68 6f 04 00 00       	push   $0x46f
f011fcb1:	68 7a b5 13 f0       	push   $0xf013b57a
f011fcb6:	e8 4a 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fcbb:	ff 45 e8             	incl   -0x18(%ebp)
f011fcbe:	83 ec 08             	sub    $0x8,%esp
f011fcc1:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcc4:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011fcc9:	e8 40 10 fe ff       	call   f0100d0e <cprintf>
f011fcce:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fcd1:	e8 83 d3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fcd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fcd9:	e8 49 40 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fcde:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011fce1:	83 ec 0c             	sub    $0xc,%esp
f011fce4:	68 00 00 40 00       	push   $0x400000
f011fce9:	e8 7c 7c fe ff       	call   f010796a <kmalloc>
f011fcee:	83 c4 10             	add    $0x10,%esp
f011fcf1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011fcf7:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011fcfe:	10 00 00 
f011fd01:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fd07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd0c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011fd12:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd18:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd1d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011fd23:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd29:	29 d0                	sub    %edx,%eax
f011fd2b:	89 c1                	mov    %eax,%ecx
f011fd2d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fd34:	10 00 00 
f011fd37:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fd3c:	0f b6 d0             	movzbl %al,%edx
f011fd3f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fd45:	01 d0                	add    %edx,%eax
f011fd47:	48                   	dec    %eax
f011fd48:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fd4e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd59:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fd5f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd65:	29 d0                	sub    %edx,%eax
f011fd67:	01 c1                	add    %eax,%ecx
f011fd69:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fd70:	10 00 00 
f011fd73:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fd78:	0f b6 c0             	movzbl %al,%eax
f011fd7b:	c1 e0 04             	shl    $0x4,%eax
f011fd7e:	89 c2                	mov    %eax,%edx
f011fd80:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fd86:	01 d0                	add    %edx,%eax
f011fd88:	48                   	dec    %eax
f011fd89:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fd8f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fd95:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd9a:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fda0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fda6:	29 d0                	sub    %edx,%eax
f011fda8:	01 c8                	add    %ecx,%eax
f011fdaa:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fdb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fdb6:	39 c2                	cmp    %eax,%edx
f011fdb8:	74 17                	je     f011fdd1 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fdba:	83 ec 04             	sub    $0x4,%esp
f011fdbd:	68 94 bc 13 f0       	push   $0xf013bc94
f011fdc2:	68 76 04 00 00       	push   $0x476
f011fdc7:	68 7a b5 13 f0       	push   $0xf013b57a
f011fdcc:	e8 34 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdd1:	e8 51 3f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fdd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fdd9:	74 17                	je     f011fdf2 <test_kmalloc_worstfit+0xe6e>
f011fddb:	83 ec 04             	sub    $0x4,%esp
f011fdde:	68 94 b5 13 f0       	push   $0xf013b594
f011fde3:	68 77 04 00 00       	push   $0x477
f011fde8:	68 7a b5 13 f0       	push   $0xf013b57a
f011fded:	e8 13 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fdf2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fdf5:	e8 5f d2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fdfa:	29 c3                	sub    %eax,%ebx
f011fdfc:	89 d8                	mov    %ebx,%eax
f011fdfe:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fe03:	74 17                	je     f011fe1c <test_kmalloc_worstfit+0xe98>
f011fe05:	83 ec 04             	sub    $0x4,%esp
f011fe08:	68 b2 ba 13 f0       	push   $0xf013bab2
f011fe0d:	68 78 04 00 00       	push   $0x478
f011fe12:	68 7a b5 13 f0       	push   $0xf013b57a
f011fe17:	e8 e9 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe1c:	ff 45 e8             	incl   -0x18(%ebp)
f011fe1f:	83 ec 08             	sub    $0x8,%esp
f011fe22:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe25:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011fe2a:	e8 df 0e fe ff       	call   f0100d0e <cprintf>
f011fe2f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe32:	e8 22 d2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fe37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe3a:	e8 e8 3e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011fe3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fe42:	83 ec 0c             	sub    $0xc,%esp
f011fe45:	68 00 00 20 00       	push   $0x200000
f011fe4a:	e8 1b 7b fe ff       	call   f010796a <kmalloc>
f011fe4f:	83 c4 10             	add    $0x10,%esp
f011fe52:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fe58:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fe5f:	10 00 00 
f011fe62:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fe68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe6d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fe73:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fe79:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7e:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fe84:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fe8a:	29 d0                	sub    %edx,%eax
f011fe8c:	89 c1                	mov    %eax,%ecx
f011fe8e:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fe95:	10 00 00 
f011fe98:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fe9d:	0f b6 d0             	movzbl %al,%edx
f011fea0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fea6:	01 d0                	add    %edx,%eax
f011fea8:	48                   	dec    %eax
f011fea9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011feaf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011feb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011feba:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fec0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fec6:	29 d0                	sub    %edx,%eax
f011fec8:	01 c1                	add    %eax,%ecx
f011feca:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011fed1:	10 00 00 
f011fed4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fed9:	0f b6 c0             	movzbl %al,%eax
f011fedc:	c1 e0 04             	shl    $0x4,%eax
f011fedf:	89 c2                	mov    %eax,%edx
f011fee1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011fee7:	01 d0                	add    %edx,%eax
f011fee9:	48                   	dec    %eax
f011feea:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011fef0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011fef6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fefb:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ff01:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff07:	29 d0                	sub    %edx,%eax
f011ff09:	01 c8                	add    %ecx,%eax
f011ff0b:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ff11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff17:	39 c2                	cmp    %eax,%edx
f011ff19:	74 17                	je     f011ff32 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011ff1b:	83 ec 04             	sub    $0x4,%esp
f011ff1e:	68 94 bc 13 f0       	push   $0xf013bc94
f011ff23:	68 7f 04 00 00       	push   $0x47f
f011ff28:	68 7a b5 13 f0       	push   $0xf013b57a
f011ff2d:	e8 d3 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff32:	e8 f0 3d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ff37:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff3a:	74 17                	je     f011ff53 <test_kmalloc_worstfit+0xfcf>
f011ff3c:	83 ec 04             	sub    $0x4,%esp
f011ff3f:	68 94 b5 13 f0       	push   $0xf013b594
f011ff44:	68 80 04 00 00       	push   $0x480
f011ff49:	68 7a b5 13 f0       	push   $0xf013b57a
f011ff4e:	e8 b2 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ff53:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff56:	e8 fe d0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ff5b:	29 c3                	sub    %eax,%ebx
f011ff5d:	89 d8                	mov    %ebx,%eax
f011ff5f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff64:	74 17                	je     f011ff7d <test_kmalloc_worstfit+0xff9>
f011ff66:	83 ec 04             	sub    $0x4,%esp
f011ff69:	68 b2 ba 13 f0       	push   $0xf013bab2
f011ff6e:	68 81 04 00 00       	push   $0x481
f011ff73:	68 7a b5 13 f0       	push   $0xf013b57a
f011ff78:	e8 88 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ff7d:	ff 45 e8             	incl   -0x18(%ebp)
f011ff80:	83 ec 08             	sub    $0x8,%esp
f011ff83:	ff 75 e8             	pushl  -0x18(%ebp)
f011ff86:	68 b4 bc 13 f0       	push   $0xf013bcb4
f011ff8b:	e8 7e 0d fe ff       	call   f0100d0e <cprintf>
f011ff90:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ff93:	e8 c1 d0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ff98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ff9b:	e8 87 3d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f011ffa0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ffa3:	83 ec 0c             	sub    $0xc,%esp
f011ffa6:	68 00 00 18 00       	push   $0x180000
f011ffab:	e8 ba 79 fe ff       	call   f010796a <kmalloc>
f011ffb0:	83 c4 10             	add    $0x10,%esp
f011ffb3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ffb9:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011ffc0:	10 00 00 
f011ffc3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ffc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ffce:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011ffd4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ffda:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffdf:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011ffe5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ffeb:	29 d0                	sub    %edx,%eax
f011ffed:	89 c1                	mov    %eax,%ecx
f011ffef:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011fff6:	10 00 00 
f011fff9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f011fffe:	0f b6 d0             	movzbl %al,%edx
f0120001:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120007:	01 d0                	add    %edx,%eax
f0120009:	48                   	dec    %eax
f012000a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120010:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120016:	ba 00 00 00 00       	mov    $0x0,%edx
f012001b:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120021:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120027:	29 d0                	sub    %edx,%eax
f0120029:	01 c1                	add    %eax,%ecx
f012002b:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120032:	10 00 00 
f0120035:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012003a:	0f b6 c0             	movzbl %al,%eax
f012003d:	c1 e0 04             	shl    $0x4,%eax
f0120040:	89 c2                	mov    %eax,%edx
f0120042:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120048:	01 d0                	add    %edx,%eax
f012004a:	48                   	dec    %eax
f012004b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120051:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120057:	ba 00 00 00 00       	mov    $0x0,%edx
f012005c:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120062:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120068:	29 d0                	sub    %edx,%eax
f012006a:	01 c8                	add    %ecx,%eax
f012006c:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0120072:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120078:	39 c2                	cmp    %eax,%edx
f012007a:	74 17                	je     f0120093 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f012007c:	83 ec 04             	sub    $0x4,%esp
f012007f:	68 94 bc 13 f0       	push   $0xf013bc94
f0120084:	68 88 04 00 00       	push   $0x488
f0120089:	68 7a b5 13 f0       	push   $0xf013b57a
f012008e:	e8 72 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120093:	e8 8f 3c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120098:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012009b:	74 17                	je     f01200b4 <test_kmalloc_worstfit+0x1130>
f012009d:	83 ec 04             	sub    $0x4,%esp
f01200a0:	68 94 b5 13 f0       	push   $0xf013b594
f01200a5:	68 89 04 00 00       	push   $0x489
f01200aa:	68 7a b5 13 f0       	push   $0xf013b57a
f01200af:	e8 51 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01200b4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01200b7:	e8 9d cf fe ff       	call   f010d059 <sys_calculate_free_frames>
f01200bc:	29 c3                	sub    %eax,%ebx
f01200be:	89 d8                	mov    %ebx,%eax
f01200c0:	3d 80 01 00 00       	cmp    $0x180,%eax
f01200c5:	74 17                	je     f01200de <test_kmalloc_worstfit+0x115a>
f01200c7:	83 ec 04             	sub    $0x4,%esp
f01200ca:	68 b2 ba 13 f0       	push   $0xf013bab2
f01200cf:	68 8a 04 00 00       	push   $0x48a
f01200d4:	68 7a b5 13 f0       	push   $0xf013b57a
f01200d9:	e8 27 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01200de:	ff 45 e8             	incl   -0x18(%ebp)
f01200e1:	83 ec 08             	sub    $0x8,%esp
f01200e4:	ff 75 e8             	pushl  -0x18(%ebp)
f01200e7:	68 b4 bc 13 f0       	push   $0xf013bcb4
f01200ec:	e8 1d 0c fe ff       	call   f0100d0e <cprintf>
f01200f1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01200f4:	e8 60 cf fe ff       	call   f010d059 <sys_calculate_free_frames>
f01200f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01200fc:	e8 26 3c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120101:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0120104:	83 ec 0c             	sub    $0xc,%esp
f0120107:	68 00 00 08 00       	push   $0x80000
f012010c:	e8 59 78 fe ff       	call   f010796a <kmalloc>
f0120111:	83 c4 10             	add    $0x10,%esp
f0120114:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f012011a:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120121:	10 00 00 
f0120124:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012012a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012012f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120135:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012013b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120140:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120146:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012014c:	29 d0                	sub    %edx,%eax
f012014e:	89 c1                	mov    %eax,%ecx
f0120150:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120157:	10 00 00 
f012015a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012015f:	0f b6 d0             	movzbl %al,%edx
f0120162:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120168:	01 d0                	add    %edx,%eax
f012016a:	48                   	dec    %eax
f012016b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120171:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120177:	ba 00 00 00 00       	mov    $0x0,%edx
f012017c:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120182:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120188:	29 d0                	sub    %edx,%eax
f012018a:	01 c1                	add    %eax,%ecx
f012018c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120193:	10 00 00 
f0120196:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012019b:	0f b6 c0             	movzbl %al,%eax
f012019e:	c1 e0 04             	shl    $0x4,%eax
f01201a1:	89 c2                	mov    %eax,%edx
f01201a3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01201a9:	01 d0                	add    %edx,%eax
f01201ab:	48                   	dec    %eax
f01201ac:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01201b2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01201bd:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01201c3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201c9:	29 d0                	sub    %edx,%eax
f01201cb:	01 c8                	add    %ecx,%eax
f01201cd:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f01201d3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01201d9:	39 c2                	cmp    %eax,%edx
f01201db:	74 17                	je     f01201f4 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f01201dd:	83 ec 04             	sub    $0x4,%esp
f01201e0:	68 94 bc 13 f0       	push   $0xf013bc94
f01201e5:	68 91 04 00 00       	push   $0x491
f01201ea:	68 7a b5 13 f0       	push   $0xf013b57a
f01201ef:	e8 11 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201f4:	e8 2e 3b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01201f9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01201fc:	74 17                	je     f0120215 <test_kmalloc_worstfit+0x1291>
f01201fe:	83 ec 04             	sub    $0x4,%esp
f0120201:	68 94 b5 13 f0       	push   $0xf013b594
f0120206:	68 92 04 00 00       	push   $0x492
f012020b:	68 7a b5 13 f0       	push   $0xf013b57a
f0120210:	e8 f0 ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120215:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120218:	e8 3c ce fe ff       	call   f010d059 <sys_calculate_free_frames>
f012021d:	29 c3                	sub    %eax,%ebx
f012021f:	89 d8                	mov    %ebx,%eax
f0120221:	3d 80 00 00 00       	cmp    $0x80,%eax
f0120226:	74 17                	je     f012023f <test_kmalloc_worstfit+0x12bb>
f0120228:	83 ec 04             	sub    $0x4,%esp
f012022b:	68 b2 ba 13 f0       	push   $0xf013bab2
f0120230:	68 93 04 00 00       	push   $0x493
f0120235:	68 7a b5 13 f0       	push   $0xf013b57a
f012023a:	e8 c6 ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012023f:	ff 45 e8             	incl   -0x18(%ebp)
f0120242:	83 ec 08             	sub    $0x8,%esp
f0120245:	ff 75 e8             	pushl  -0x18(%ebp)
f0120248:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012024d:	e8 bc 0a fe ff       	call   f0100d0e <cprintf>
f0120252:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120255:	e8 ff cd fe ff       	call   f010d059 <sys_calculate_free_frames>
f012025a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012025d:	e8 c5 3a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120262:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0120265:	83 ec 0c             	sub    $0xc,%esp
f0120268:	68 00 04 00 00       	push   $0x400
f012026d:	e8 f8 76 fe ff       	call   f010796a <kmalloc>
f0120272:	83 c4 10             	add    $0x10,%esp
f0120275:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f012027b:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120282:	10 00 00 
f0120285:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012028b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120290:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120296:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012029c:	ba 00 00 00 00       	mov    $0x0,%edx
f01202a1:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01202a7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01202ad:	29 d0                	sub    %edx,%eax
f01202af:	89 c1                	mov    %eax,%ecx
f01202b1:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01202b8:	10 00 00 
f01202bb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01202c0:	0f b6 d0             	movzbl %al,%edx
f01202c3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01202c9:	01 d0                	add    %edx,%eax
f01202cb:	48                   	dec    %eax
f01202cc:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01202d2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01202d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01202dd:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01202e3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01202e9:	29 d0                	sub    %edx,%eax
f01202eb:	01 c1                	add    %eax,%ecx
f01202ed:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01202f4:	10 00 00 
f01202f7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01202fc:	0f b6 c0             	movzbl %al,%eax
f01202ff:	c1 e0 04             	shl    $0x4,%eax
f0120302:	89 c2                	mov    %eax,%edx
f0120304:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012030a:	01 d0                	add    %edx,%eax
f012030c:	48                   	dec    %eax
f012030d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120313:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120319:	ba 00 00 00 00       	mov    $0x0,%edx
f012031e:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120324:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012032a:	29 d0                	sub    %edx,%eax
f012032c:	01 c8                	add    %ecx,%eax
f012032e:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0120334:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012033a:	39 c2                	cmp    %eax,%edx
f012033c:	74 17                	je     f0120355 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f012033e:	83 ec 04             	sub    $0x4,%esp
f0120341:	68 94 bc 13 f0       	push   $0xf013bc94
f0120346:	68 9a 04 00 00       	push   $0x49a
f012034b:	68 7a b5 13 f0       	push   $0xf013b57a
f0120350:	e8 b0 fe fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120355:	e8 cd 39 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012035a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012035d:	74 17                	je     f0120376 <test_kmalloc_worstfit+0x13f2>
f012035f:	83 ec 04             	sub    $0x4,%esp
f0120362:	68 94 b5 13 f0       	push   $0xf013b594
f0120367:	68 9b 04 00 00       	push   $0x49b
f012036c:	68 7a b5 13 f0       	push   $0xf013b57a
f0120371:	e8 8f fe fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120376:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120379:	e8 db cc fe ff       	call   f010d059 <sys_calculate_free_frames>
f012037e:	29 c3                	sub    %eax,%ebx
f0120380:	89 d8                	mov    %ebx,%eax
f0120382:	83 f8 01             	cmp    $0x1,%eax
f0120385:	74 17                	je     f012039e <test_kmalloc_worstfit+0x141a>
f0120387:	83 ec 04             	sub    $0x4,%esp
f012038a:	68 b2 ba 13 f0       	push   $0xf013bab2
f012038f:	68 9c 04 00 00       	push   $0x49c
f0120394:	68 7a b5 13 f0       	push   $0xf013b57a
f0120399:	e8 67 fe fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012039e:	ff 45 e8             	incl   -0x18(%ebp)
f01203a1:	83 ec 08             	sub    $0x8,%esp
f01203a4:	ff 75 e8             	pushl  -0x18(%ebp)
f01203a7:	68 b4 bc 13 f0       	push   $0xf013bcb4
f01203ac:	e8 5d 09 fe ff       	call   f0100d0e <cprintf>
f01203b1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01203b4:	e8 a0 cc fe ff       	call   f010d059 <sys_calculate_free_frames>
f01203b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01203bc:	e8 66 39 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01203c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f01203c4:	83 ec 0c             	sub    $0xc,%esp
f01203c7:	68 00 f0 1f 00       	push   $0x1ff000
f01203cc:	e8 99 75 fe ff       	call   f010796a <kmalloc>
f01203d1:	83 c4 10             	add    $0x10,%esp
f01203d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f01203da:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01203e1:	10 00 00 
f01203e4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01203ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203ef:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01203f5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01203fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120400:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120406:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012040c:	29 d0                	sub    %edx,%eax
f012040e:	89 c1                	mov    %eax,%ecx
f0120410:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120417:	10 00 00 
f012041a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012041f:	0f b6 d0             	movzbl %al,%edx
f0120422:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120428:	01 d0                	add    %edx,%eax
f012042a:	48                   	dec    %eax
f012042b:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120431:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120437:	ba 00 00 00 00       	mov    $0x0,%edx
f012043c:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120442:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120448:	29 d0                	sub    %edx,%eax
f012044a:	01 c1                	add    %eax,%ecx
f012044c:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0120453:	10 00 00 
f0120456:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012045b:	0f b6 c0             	movzbl %al,%eax
f012045e:	c1 e0 04             	shl    $0x4,%eax
f0120461:	89 c2                	mov    %eax,%edx
f0120463:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120469:	01 d0                	add    %edx,%eax
f012046b:	48                   	dec    %eax
f012046c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0120472:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120478:	ba 00 00 00 00       	mov    $0x0,%edx
f012047d:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0120483:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120489:	29 d0                	sub    %edx,%eax
f012048b:	01 c8                	add    %ecx,%eax
f012048d:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f0120493:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120499:	39 c2                	cmp    %eax,%edx
f012049b:	74 17                	je     f01204b4 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f012049d:	83 ec 04             	sub    $0x4,%esp
f01204a0:	68 94 bc 13 f0       	push   $0xf013bc94
f01204a5:	68 a3 04 00 00       	push   $0x4a3
f01204aa:	68 7a b5 13 f0       	push   $0xf013b57a
f01204af:	e8 51 fd fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204b4:	e8 6e 38 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01204b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01204bc:	74 17                	je     f01204d5 <test_kmalloc_worstfit+0x1551>
f01204be:	83 ec 04             	sub    $0x4,%esp
f01204c1:	68 94 b5 13 f0       	push   $0xf013b594
f01204c6:	68 a4 04 00 00       	push   $0x4a4
f01204cb:	68 7a b5 13 f0       	push   $0xf013b57a
f01204d0:	e8 30 fd fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01204d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01204d8:	e8 7c cb fe ff       	call   f010d059 <sys_calculate_free_frames>
f01204dd:	29 c3                	sub    %eax,%ebx
f01204df:	89 d8                	mov    %ebx,%eax
f01204e1:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01204e6:	74 17                	je     f01204ff <test_kmalloc_worstfit+0x157b>
f01204e8:	83 ec 04             	sub    $0x4,%esp
f01204eb:	68 b2 ba 13 f0       	push   $0xf013bab2
f01204f0:	68 a5 04 00 00       	push   $0x4a5
f01204f5:	68 7a b5 13 f0       	push   $0xf013b57a
f01204fa:	e8 06 fd fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01204ff:	ff 45 e8             	incl   -0x18(%ebp)
f0120502:	83 ec 08             	sub    $0x8,%esp
f0120505:	ff 75 e8             	pushl  -0x18(%ebp)
f0120508:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012050d:	e8 fc 07 fe ff       	call   f0100d0e <cprintf>
f0120512:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0120515:	e8 3f cb fe ff       	call   f010d059 <sys_calculate_free_frames>
f012051a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012051d:	e8 05 38 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120522:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0120525:	83 ec 0c             	sub    $0xc,%esp
f0120528:	68 00 00 40 00       	push   $0x400000
f012052d:	e8 38 74 fe ff       	call   f010796a <kmalloc>
f0120532:	83 c4 10             	add    $0x10,%esp
f0120535:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f012053b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120541:	85 c0                	test   %eax,%eax
f0120543:	74 17                	je     f012055c <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120545:	83 ec 04             	sub    $0x4,%esp
f0120548:	68 94 bc 13 f0       	push   $0xf013bc94
f012054d:	68 ad 04 00 00       	push   $0x4ad
f0120552:	68 7a b5 13 f0       	push   $0xf013b57a
f0120557:	e8 a9 fc fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012055c:	e8 c6 37 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120561:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120564:	74 17                	je     f012057d <test_kmalloc_worstfit+0x15f9>
f0120566:	83 ec 04             	sub    $0x4,%esp
f0120569:	68 94 b5 13 f0       	push   $0xf013b594
f012056e:	68 ae 04 00 00       	push   $0x4ae
f0120573:	68 7a b5 13 f0       	push   $0xf013b57a
f0120578:	e8 88 fc fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f012057d:	e8 d7 ca fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120582:	89 c2                	mov    %eax,%edx
f0120584:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120587:	39 c2                	cmp    %eax,%edx
f0120589:	74 17                	je     f01205a2 <test_kmalloc_worstfit+0x161e>
f012058b:	83 ec 04             	sub    $0x4,%esp
f012058e:	68 b2 ba 13 f0       	push   $0xf013bab2
f0120593:	68 af 04 00 00       	push   $0x4af
f0120598:	68 7a b5 13 f0       	push   $0xf013b57a
f012059d:	e8 63 fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01205a2:	ff 45 e8             	incl   -0x18(%ebp)
f01205a5:	83 ec 08             	sub    $0x8,%esp
f01205a8:	ff 75 e8             	pushl  -0x18(%ebp)
f01205ab:	68 b4 bc 13 f0       	push   $0xf013bcb4
f01205b0:	e8 59 07 fe ff       	call   f0100d0e <cprintf>
f01205b5:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01205b8:	83 ec 0c             	sub    $0xc,%esp
f01205bb:	68 c8 bc 13 f0       	push   $0xf013bcc8
f01205c0:	e8 49 07 fe ff       	call   f0100d0e <cprintf>
f01205c5:	83 c4 10             	add    $0x10,%esp


	return 1;
f01205c8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01205cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01205d0:	5b                   	pop    %ebx
f01205d1:	5f                   	pop    %edi
f01205d2:	5d                   	pop    %ebp
f01205d3:	c3                   	ret    

f01205d4 <test_kfree>:

int test_kfree()
{
f01205d4:	55                   	push   %ebp
f01205d5:	89 e5                	mov    %esp,%ebp
f01205d7:	57                   	push   %edi
f01205d8:	53                   	push   %ebx
f01205d9:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01205df:	83 ec 0c             	sub    $0xc,%esp
f01205e2:	68 bc b4 13 f0       	push   $0xf013b4bc
f01205e7:	e8 22 07 fe ff       	call   f0100d0e <cprintf>
f01205ec:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01205ef:	83 ec 0c             	sub    $0xc,%esp
f01205f2:	68 ec b4 13 f0       	push   $0xf013b4ec
f01205f7:	e8 12 07 fe ff       	call   f0100d0e <cprintf>
f01205fc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01205ff:	83 ec 0c             	sub    $0xc,%esp
f0120602:	68 bc b4 13 f0       	push   $0xf013b4bc
f0120607:	e8 02 07 fe ff       	call   f0100d0e <cprintf>
f012060c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012060f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0120613:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0120617:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012061d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0120623:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012062a:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0120631:	e8 23 ca fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120636:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120639:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f012063f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120644:	b8 00 00 00 00       	mov    $0x0,%eax
f0120649:	89 d7                	mov    %edx,%edi
f012064b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012064d:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f0120653:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120658:	b8 00 00 00 00       	mov    $0x0,%eax
f012065d:	89 d7                	mov    %edx,%edi
f012065f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0120661:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120667:	b9 14 00 00 00       	mov    $0x14,%ecx
f012066c:	b8 00 00 00 00       	mov    $0x0,%eax
f0120671:	89 d7                	mov    %edx,%edi
f0120673:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120675:	e8 df c9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012067a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012067d:	e8 a5 36 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120682:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0120685:	83 ec 0c             	sub    $0xc,%esp
f0120688:	68 00 fc 1f 00       	push   $0x1ffc00
f012068d:	e8 d8 72 fe ff       	call   f010796a <kmalloc>
f0120692:	83 c4 10             	add    $0x10,%esp
f0120695:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012069b:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01206a1:	89 c1                	mov    %eax,%ecx
f01206a3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01206aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01206ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01206b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01206bd:	f7 75 c8             	divl   -0x38(%ebp)
f01206c0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206c3:	29 d0                	sub    %edx,%eax
f01206c5:	89 c3                	mov    %eax,%ebx
f01206c7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01206ce:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01206d3:	0f b6 d0             	movzbl %al,%edx
f01206d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01206d9:	01 d0                	add    %edx,%eax
f01206db:	48                   	dec    %eax
f01206dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01206df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01206e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01206e7:	f7 75 c0             	divl   -0x40(%ebp)
f01206ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01206ed:	29 d0                	sub    %edx,%eax
f01206ef:	01 c3                	add    %eax,%ebx
f01206f1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01206f8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01206fd:	0f b6 c0             	movzbl %al,%eax
f0120700:	c1 e0 04             	shl    $0x4,%eax
f0120703:	89 c2                	mov    %eax,%edx
f0120705:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120708:	01 d0                	add    %edx,%eax
f012070a:	48                   	dec    %eax
f012070b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012070e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0120711:	ba 00 00 00 00       	mov    $0x0,%edx
f0120716:	f7 75 b8             	divl   -0x48(%ebp)
f0120719:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012071c:	29 d0                	sub    %edx,%eax
f012071e:	01 d8                	add    %ebx,%eax
f0120720:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120725:	39 c1                	cmp    %eax,%ecx
f0120727:	74 17                	je     f0120740 <test_kfree+0x16c>
f0120729:	83 ec 04             	sub    $0x4,%esp
f012072c:	68 60 b6 13 f0       	push   $0xf013b660
f0120731:	68 d7 04 00 00       	push   $0x4d7
f0120736:	68 7a b5 13 f0       	push   $0xf013b57a
f012073b:	e8 c5 fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120740:	e8 e2 35 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120745:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120748:	74 17                	je     f0120761 <test_kfree+0x18d>
f012074a:	83 ec 04             	sub    $0x4,%esp
f012074d:	68 94 b5 13 f0       	push   $0xf013b594
f0120752:	68 d8 04 00 00       	push   $0x4d8
f0120757:	68 7a b5 13 f0       	push   $0xf013b57a
f012075c:	e8 a4 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120761:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120764:	e8 f0 c8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120769:	29 c3                	sub    %eax,%ebx
f012076b:	89 d8                	mov    %ebx,%eax
f012076d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120772:	74 17                	je     f012078b <test_kfree+0x1b7>
f0120774:	83 ec 04             	sub    $0x4,%esp
f0120777:	68 fc b5 13 f0       	push   $0xf013b5fc
f012077c:	68 d9 04 00 00       	push   $0x4d9
f0120781:	68 7a b5 13 f0       	push   $0xf013b57a
f0120786:	e8 7a fa fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012078b:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f0120792:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120795:	e8 bf c8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012079a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012079d:	e8 85 35 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01207a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01207a5:	83 ec 0c             	sub    $0xc,%esp
f01207a8:	68 00 fc 1f 00       	push   $0x1ffc00
f01207ad:	e8 b8 71 fe ff       	call   f010796a <kmalloc>
f01207b2:	83 c4 10             	add    $0x10,%esp
f01207b5:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207bb:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01207c1:	89 c1                	mov    %eax,%ecx
f01207c3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01207ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01207cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207d2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01207d5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01207d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01207dd:	f7 75 b0             	divl   -0x50(%ebp)
f01207e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01207e3:	29 d0                	sub    %edx,%eax
f01207e5:	89 c3                	mov    %eax,%ebx
f01207e7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01207ee:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01207f3:	0f b6 d0             	movzbl %al,%edx
f01207f6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01207f9:	01 d0                	add    %edx,%eax
f01207fb:	48                   	dec    %eax
f01207fc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01207ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120802:	ba 00 00 00 00       	mov    $0x0,%edx
f0120807:	f7 75 a8             	divl   -0x58(%ebp)
f012080a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012080d:	29 d0                	sub    %edx,%eax
f012080f:	01 c3                	add    %eax,%ebx
f0120811:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0120818:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012081d:	0f b6 c0             	movzbl %al,%eax
f0120820:	c1 e0 04             	shl    $0x4,%eax
f0120823:	89 c2                	mov    %eax,%edx
f0120825:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120828:	01 d0                	add    %edx,%eax
f012082a:	48                   	dec    %eax
f012082b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012082e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120831:	ba 00 00 00 00       	mov    $0x0,%edx
f0120836:	f7 75 a0             	divl   -0x60(%ebp)
f0120839:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012083c:	29 d0                	sub    %edx,%eax
f012083e:	01 d8                	add    %ebx,%eax
f0120840:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120845:	39 c1                	cmp    %eax,%ecx
f0120847:	74 17                	je     f0120860 <test_kfree+0x28c>
f0120849:	83 ec 04             	sub    $0x4,%esp
f012084c:	68 60 b6 13 f0       	push   $0xf013b660
f0120851:	68 e0 04 00 00       	push   $0x4e0
f0120856:	68 7a b5 13 f0       	push   $0xf013b57a
f012085b:	e8 a5 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120860:	e8 c2 34 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120865:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120868:	74 17                	je     f0120881 <test_kfree+0x2ad>
f012086a:	83 ec 04             	sub    $0x4,%esp
f012086d:	68 94 b5 13 f0       	push   $0xf013b594
f0120872:	68 e1 04 00 00       	push   $0x4e1
f0120877:	68 7a b5 13 f0       	push   $0xf013b57a
f012087c:	e8 84 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120881:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120884:	e8 d0 c7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120889:	29 c3                	sub    %eax,%ebx
f012088b:	89 d8                	mov    %ebx,%eax
f012088d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120892:	74 17                	je     f01208ab <test_kfree+0x2d7>
f0120894:	83 ec 04             	sub    $0x4,%esp
f0120897:	68 fc b5 13 f0       	push   $0xf013b5fc
f012089c:	68 e2 04 00 00       	push   $0x4e2
f01208a1:	68 7a b5 13 f0       	push   $0xf013b57a
f01208a6:	e8 5a f9 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01208ab:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01208b2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01208b5:	e8 9f c7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01208ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208bd:	e8 65 34 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01208c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01208c5:	83 ec 0c             	sub    $0xc,%esp
f01208c8:	68 00 08 00 00       	push   $0x800
f01208cd:	e8 98 70 fe ff       	call   f010796a <kmalloc>
f01208d2:	83 c4 10             	add    $0x10,%esp
f01208d5:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208db:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01208e1:	89 c1                	mov    %eax,%ecx
f01208e3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01208ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01208ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208f2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01208f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01208f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01208fd:	f7 75 98             	divl   -0x68(%ebp)
f0120900:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120903:	29 d0                	sub    %edx,%eax
f0120905:	89 c3                	mov    %eax,%ebx
f0120907:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012090e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120913:	0f b6 d0             	movzbl %al,%edx
f0120916:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120919:	01 d0                	add    %edx,%eax
f012091b:	48                   	dec    %eax
f012091c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012091f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120922:	ba 00 00 00 00       	mov    $0x0,%edx
f0120927:	f7 75 90             	divl   -0x70(%ebp)
f012092a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012092d:	29 d0                	sub    %edx,%eax
f012092f:	01 c3                	add    %eax,%ebx
f0120931:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120938:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012093d:	0f b6 c0             	movzbl %al,%eax
f0120940:	c1 e0 04             	shl    $0x4,%eax
f0120943:	89 c2                	mov    %eax,%edx
f0120945:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120948:	01 d0                	add    %edx,%eax
f012094a:	48                   	dec    %eax
f012094b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012094e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120951:	ba 00 00 00 00       	mov    $0x0,%edx
f0120956:	f7 75 88             	divl   -0x78(%ebp)
f0120959:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012095c:	29 d0                	sub    %edx,%eax
f012095e:	01 d8                	add    %ebx,%eax
f0120960:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120965:	39 c1                	cmp    %eax,%ecx
f0120967:	74 17                	je     f0120980 <test_kfree+0x3ac>
f0120969:	83 ec 04             	sub    $0x4,%esp
f012096c:	68 60 b6 13 f0       	push   $0xf013b660
f0120971:	68 e9 04 00 00       	push   $0x4e9
f0120976:	68 7a b5 13 f0       	push   $0xf013b57a
f012097b:	e8 85 f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120980:	e8 a2 33 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120985:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120988:	74 17                	je     f01209a1 <test_kfree+0x3cd>
f012098a:	83 ec 04             	sub    $0x4,%esp
f012098d:	68 94 b5 13 f0       	push   $0xf013b594
f0120992:	68 ea 04 00 00       	push   $0x4ea
f0120997:	68 7a b5 13 f0       	push   $0xf013b57a
f012099c:	e8 64 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209a1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209a4:	e8 b0 c6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01209a9:	29 c3                	sub    %eax,%ebx
f01209ab:	89 d8                	mov    %ebx,%eax
f01209ad:	83 f8 01             	cmp    $0x1,%eax
f01209b0:	74 17                	je     f01209c9 <test_kfree+0x3f5>
f01209b2:	83 ec 04             	sub    $0x4,%esp
f01209b5:	68 fc b5 13 f0       	push   $0xf013b5fc
f01209ba:	68 eb 04 00 00       	push   $0x4eb
f01209bf:	68 7a b5 13 f0       	push   $0xf013b57a
f01209c4:	e8 3c f8 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01209c9:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01209d0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01209d3:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01209d9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01209dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209e3:	eb 0e                	jmp    f01209f3 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f01209e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01209e8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01209eb:	01 d0                	add    %edx,%eax
f01209ed:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01209f0:	ff 45 f4             	incl   -0xc(%ebp)
f01209f3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01209f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01209fc:	7f e7                	jg     f01209e5 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01209fe:	e8 56 c6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120a03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a06:	e8 1c 33 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120a0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120a0e:	83 ec 0c             	sub    $0xc,%esp
f0120a11:	68 00 08 00 00       	push   $0x800
f0120a16:	e8 4f 6f fe ff       	call   f010796a <kmalloc>
f0120a1b:	83 c4 10             	add    $0x10,%esp
f0120a1e:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a24:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120a2a:	89 c1                	mov    %eax,%ecx
f0120a2c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120a33:	10 00 00 
f0120a36:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120a3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120a47:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a52:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120a58:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a5e:	29 d0                	sub    %edx,%eax
f0120a60:	89 c3                	mov    %eax,%ebx
f0120a62:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120a69:	10 00 00 
f0120a6c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120a71:	0f b6 d0             	movzbl %al,%edx
f0120a74:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120a7a:	01 d0                	add    %edx,%eax
f0120a7c:	48                   	dec    %eax
f0120a7d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120a83:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120a89:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a8e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120a94:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120a9a:	29 d0                	sub    %edx,%eax
f0120a9c:	01 c3                	add    %eax,%ebx
f0120a9e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120aa5:	10 00 00 
f0120aa8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120aad:	0f b6 c0             	movzbl %al,%eax
f0120ab0:	c1 e0 04             	shl    $0x4,%eax
f0120ab3:	89 c2                	mov    %eax,%edx
f0120ab5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120abb:	01 d0                	add    %edx,%eax
f0120abd:	48                   	dec    %eax
f0120abe:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120ac4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120aca:	ba 00 00 00 00       	mov    $0x0,%edx
f0120acf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120ad5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120adb:	29 d0                	sub    %edx,%eax
f0120add:	01 d8                	add    %ebx,%eax
f0120adf:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120ae4:	39 c1                	cmp    %eax,%ecx
f0120ae6:	74 17                	je     f0120aff <test_kfree+0x52b>
f0120ae8:	83 ec 04             	sub    $0x4,%esp
f0120aeb:	68 60 b6 13 f0       	push   $0xf013b660
f0120af0:	68 f7 04 00 00       	push   $0x4f7
f0120af5:	68 7a b5 13 f0       	push   $0xf013b57a
f0120afa:	e8 06 f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120aff:	e8 23 32 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120b04:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b07:	74 17                	je     f0120b20 <test_kfree+0x54c>
f0120b09:	83 ec 04             	sub    $0x4,%esp
f0120b0c:	68 94 b5 13 f0       	push   $0xf013b594
f0120b11:	68 f8 04 00 00       	push   $0x4f8
f0120b16:	68 7a b5 13 f0       	push   $0xf013b57a
f0120b1b:	e8 e5 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b23:	e8 31 c5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120b28:	29 c3                	sub    %eax,%ebx
f0120b2a:	89 d8                	mov    %ebx,%eax
f0120b2c:	83 f8 01             	cmp    $0x1,%eax
f0120b2f:	74 17                	je     f0120b48 <test_kfree+0x574>
f0120b31:	83 ec 04             	sub    $0x4,%esp
f0120b34:	68 fc b5 13 f0       	push   $0xf013b5fc
f0120b39:	68 f9 04 00 00       	push   $0x4f9
f0120b3e:	68 7a b5 13 f0       	push   $0xf013b57a
f0120b43:	e8 bd f6 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120b48:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120b4f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120b52:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120b58:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120b5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b62:	eb 0e                	jmp    f0120b72 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120b64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b67:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b6a:	01 d0                	add    %edx,%eax
f0120b6c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120b6f:	ff 45 f4             	incl   -0xc(%ebp)
f0120b72:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120b78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b7b:	7f e7                	jg     f0120b64 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120b7d:	e8 d7 c4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120b82:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b85:	e8 9d 31 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120b8a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120b8d:	83 ec 0c             	sub    $0xc,%esp
f0120b90:	68 00 1c 00 00       	push   $0x1c00
f0120b95:	e8 d0 6d fe ff       	call   f010796a <kmalloc>
f0120b9a:	83 c4 10             	add    $0x10,%esp
f0120b9d:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ba3:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120ba9:	89 c1                	mov    %eax,%ecx
f0120bab:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120bb2:	10 00 00 
f0120bb5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120bbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bc0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120bc6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120bcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bd1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120bd7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120bdd:	29 d0                	sub    %edx,%eax
f0120bdf:	89 c3                	mov    %eax,%ebx
f0120be1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120be8:	10 00 00 
f0120beb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120bf0:	0f b6 d0             	movzbl %al,%edx
f0120bf3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120bf9:	01 d0                	add    %edx,%eax
f0120bfb:	48                   	dec    %eax
f0120bfc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120c02:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c08:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c0d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120c13:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c19:	29 d0                	sub    %edx,%eax
f0120c1b:	01 c3                	add    %eax,%ebx
f0120c1d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120c24:	10 00 00 
f0120c27:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120c2c:	0f b6 c0             	movzbl %al,%eax
f0120c2f:	c1 e0 04             	shl    $0x4,%eax
f0120c32:	89 c2                	mov    %eax,%edx
f0120c34:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120c3a:	01 d0                	add    %edx,%eax
f0120c3c:	48                   	dec    %eax
f0120c3d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120c43:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c49:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c4e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120c54:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c5a:	29 d0                	sub    %edx,%eax
f0120c5c:	01 d8                	add    %ebx,%eax
f0120c5e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120c63:	39 c1                	cmp    %eax,%ecx
f0120c65:	74 17                	je     f0120c7e <test_kfree+0x6aa>
f0120c67:	83 ec 04             	sub    $0x4,%esp
f0120c6a:	68 60 b6 13 f0       	push   $0xf013b660
f0120c6f:	68 05 05 00 00       	push   $0x505
f0120c74:	68 7a b5 13 f0       	push   $0xf013b57a
f0120c79:	e8 87 f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c7e:	e8 a4 30 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120c83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c86:	74 17                	je     f0120c9f <test_kfree+0x6cb>
f0120c88:	83 ec 04             	sub    $0x4,%esp
f0120c8b:	68 94 b5 13 f0       	push   $0xf013b594
f0120c90:	68 06 05 00 00       	push   $0x506
f0120c95:	68 7a b5 13 f0       	push   $0xf013b57a
f0120c9a:	e8 66 f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c9f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ca2:	e8 b2 c3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120ca7:	29 c3                	sub    %eax,%ebx
f0120ca9:	89 d8                	mov    %ebx,%eax
f0120cab:	83 f8 02             	cmp    $0x2,%eax
f0120cae:	74 17                	je     f0120cc7 <test_kfree+0x6f3>
f0120cb0:	83 ec 04             	sub    $0x4,%esp
f0120cb3:	68 fc b5 13 f0       	push   $0xf013b5fc
f0120cb8:	68 07 05 00 00       	push   $0x507
f0120cbd:	68 7a b5 13 f0       	push   $0xf013b57a
f0120cc2:	e8 3e f5 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120cc7:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120cce:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120cd1:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120cd7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120cda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ce1:	eb 0e                	jmp    f0120cf1 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120ce3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120ce6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120ce9:	01 d0                	add    %edx,%eax
f0120ceb:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120cee:	ff 45 f4             	incl   -0xc(%ebp)
f0120cf1:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120cf7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120cfa:	7f e7                	jg     f0120ce3 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120cfc:	e8 58 c3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120d01:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d04:	e8 1e 30 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120d09:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120d0c:	83 ec 0c             	sub    $0xc,%esp
f0120d0f:	68 00 fc 2f 00       	push   $0x2ffc00
f0120d14:	e8 51 6c fe ff       	call   f010796a <kmalloc>
f0120d19:	83 c4 10             	add    $0x10,%esp
f0120d1c:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d22:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120d28:	89 c1                	mov    %eax,%ecx
f0120d2a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120d31:	10 00 00 
f0120d34:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120d3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d3f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120d45:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d50:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120d56:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d5c:	29 d0                	sub    %edx,%eax
f0120d5e:	89 c3                	mov    %eax,%ebx
f0120d60:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120d67:	10 00 00 
f0120d6a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120d6f:	0f b6 d0             	movzbl %al,%edx
f0120d72:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120d78:	01 d0                	add    %edx,%eax
f0120d7a:	48                   	dec    %eax
f0120d7b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120d81:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120d87:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d8c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120d92:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120d98:	29 d0                	sub    %edx,%eax
f0120d9a:	01 c3                	add    %eax,%ebx
f0120d9c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120da3:	10 00 00 
f0120da6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120dab:	0f b6 c0             	movzbl %al,%eax
f0120dae:	c1 e0 04             	shl    $0x4,%eax
f0120db1:	89 c2                	mov    %eax,%edx
f0120db3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120db9:	01 d0                	add    %edx,%eax
f0120dbb:	48                   	dec    %eax
f0120dbc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120dc2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dcd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120dd3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120dd9:	29 d0                	sub    %edx,%eax
f0120ddb:	01 d8                	add    %ebx,%eax
f0120ddd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120de2:	39 c1                	cmp    %eax,%ecx
f0120de4:	74 17                	je     f0120dfd <test_kfree+0x829>
f0120de6:	83 ec 04             	sub    $0x4,%esp
f0120de9:	68 60 b6 13 f0       	push   $0xf013b660
f0120dee:	68 13 05 00 00       	push   $0x513
f0120df3:	68 7a b5 13 f0       	push   $0xf013b57a
f0120df8:	e8 08 f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dfd:	e8 25 2f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120e02:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e05:	74 17                	je     f0120e1e <test_kfree+0x84a>
f0120e07:	83 ec 04             	sub    $0x4,%esp
f0120e0a:	68 94 b5 13 f0       	push   $0xf013b594
f0120e0f:	68 14 05 00 00       	push   $0x514
f0120e14:	68 7a b5 13 f0       	push   $0xf013b57a
f0120e19:	e8 e7 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120e1e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120e21:	e8 33 c2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120e26:	29 c3                	sub    %eax,%ebx
f0120e28:	89 d8                	mov    %ebx,%eax
f0120e2a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120e2f:	74 17                	je     f0120e48 <test_kfree+0x874>
f0120e31:	83 ec 04             	sub    $0x4,%esp
f0120e34:	68 fc b5 13 f0       	push   $0xf013b5fc
f0120e39:	68 15 05 00 00       	push   $0x515
f0120e3e:	68 7a b5 13 f0       	push   $0xf013b57a
f0120e43:	e8 bd f3 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120e48:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120e4f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120e52:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120e58:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120e5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e62:	eb 0e                	jmp    f0120e72 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120e64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e67:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e6a:	01 d0                	add    %edx,%eax
f0120e6c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120e6f:	ff 45 f4             	incl   -0xc(%ebp)
f0120e72:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120e78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e7b:	7f e7                	jg     f0120e64 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e7d:	e8 d7 c1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e85:	e8 9d 2e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120e8a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120e8d:	83 ec 0c             	sub    $0xc,%esp
f0120e90:	68 00 fc 5f 00       	push   $0x5ffc00
f0120e95:	e8 d0 6a fe ff       	call   f010796a <kmalloc>
f0120e9a:	83 c4 10             	add    $0x10,%esp
f0120e9d:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ea3:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120ea9:	89 c1                	mov    %eax,%ecx
f0120eab:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120eb2:	10 00 00 
f0120eb5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120ebb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ec0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120ec6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120ecc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ed1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120ed7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120edd:	29 d0                	sub    %edx,%eax
f0120edf:	89 c3                	mov    %eax,%ebx
f0120ee1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120ee8:	10 00 00 
f0120eeb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120ef0:	0f b6 d0             	movzbl %al,%edx
f0120ef3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120ef9:	01 d0                	add    %edx,%eax
f0120efb:	48                   	dec    %eax
f0120efc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120f02:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f08:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f0d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120f13:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f19:	29 d0                	sub    %edx,%eax
f0120f1b:	01 c3                	add    %eax,%ebx
f0120f1d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120f24:	10 00 00 
f0120f27:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0120f2c:	0f b6 c0             	movzbl %al,%eax
f0120f2f:	c1 e0 04             	shl    $0x4,%eax
f0120f32:	89 c2                	mov    %eax,%edx
f0120f34:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120f3a:	01 d0                	add    %edx,%eax
f0120f3c:	48                   	dec    %eax
f0120f3d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120f43:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f49:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f4e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120f54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f5a:	29 d0                	sub    %edx,%eax
f0120f5c:	01 d8                	add    %ebx,%eax
f0120f5e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120f63:	39 c1                	cmp    %eax,%ecx
f0120f65:	74 17                	je     f0120f7e <test_kfree+0x9aa>
f0120f67:	83 ec 04             	sub    $0x4,%esp
f0120f6a:	68 60 b6 13 f0       	push   $0xf013b660
f0120f6f:	68 21 05 00 00       	push   $0x521
f0120f74:	68 7a b5 13 f0       	push   $0xf013b57a
f0120f79:	e8 87 f2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f7e:	e8 a4 2d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120f83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f86:	74 17                	je     f0120f9f <test_kfree+0x9cb>
f0120f88:	83 ec 04             	sub    $0x4,%esp
f0120f8b:	68 94 b5 13 f0       	push   $0xf013b594
f0120f90:	68 22 05 00 00       	push   $0x522
f0120f95:	68 7a b5 13 f0       	push   $0xf013b57a
f0120f9a:	e8 66 f2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120f9f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120fa2:	e8 b2 c0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120fa7:	29 c3                	sub    %eax,%ebx
f0120fa9:	89 d8                	mov    %ebx,%eax
f0120fab:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120fb0:	74 17                	je     f0120fc9 <test_kfree+0x9f5>
f0120fb2:	83 ec 04             	sub    $0x4,%esp
f0120fb5:	68 fc b5 13 f0       	push   $0xf013b5fc
f0120fba:	68 23 05 00 00       	push   $0x523
f0120fbf:	68 7a b5 13 f0       	push   $0xf013b57a
f0120fc4:	e8 3c f2 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120fc9:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120fd0:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120fd3:	e8 81 c0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120fd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fdb:	e8 47 2d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0120fe0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120fe3:	83 ec 0c             	sub    $0xc,%esp
f0120fe6:	68 00 38 00 00       	push   $0x3800
f0120feb:	e8 7a 69 fe ff       	call   f010796a <kmalloc>
f0120ff0:	83 c4 10             	add    $0x10,%esp
f0120ff3:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ff9:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120fff:	89 c1                	mov    %eax,%ecx
f0121001:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121008:	10 00 00 
f012100b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121011:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121016:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012101c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121022:	ba 00 00 00 00       	mov    $0x0,%edx
f0121027:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012102d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121033:	29 d0                	sub    %edx,%eax
f0121035:	89 c3                	mov    %eax,%ebx
f0121037:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012103e:	10 00 00 
f0121041:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121046:	0f b6 d0             	movzbl %al,%edx
f0121049:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012104f:	01 d0                	add    %edx,%eax
f0121051:	48                   	dec    %eax
f0121052:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121058:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012105e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121063:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121069:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012106f:	29 d0                	sub    %edx,%eax
f0121071:	01 c3                	add    %eax,%ebx
f0121073:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012107a:	10 00 00 
f012107d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121082:	0f b6 c0             	movzbl %al,%eax
f0121085:	c1 e0 04             	shl    $0x4,%eax
f0121088:	89 c2                	mov    %eax,%edx
f012108a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121090:	01 d0                	add    %edx,%eax
f0121092:	48                   	dec    %eax
f0121093:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0121099:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012109f:	ba 00 00 00 00       	mov    $0x0,%edx
f01210a4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01210aa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01210b0:	29 d0                	sub    %edx,%eax
f01210b2:	01 d8                	add    %ebx,%eax
f01210b4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01210b9:	39 c1                	cmp    %eax,%ecx
f01210bb:	74 17                	je     f01210d4 <test_kfree+0xb00>
f01210bd:	83 ec 04             	sub    $0x4,%esp
f01210c0:	68 60 b6 13 f0       	push   $0xf013b660
f01210c5:	68 2a 05 00 00       	push   $0x52a
f01210ca:	68 7a b5 13 f0       	push   $0xf013b57a
f01210cf:	e8 31 f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01210d4:	e8 4e 2c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01210d9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01210dc:	74 17                	je     f01210f5 <test_kfree+0xb21>
f01210de:	83 ec 04             	sub    $0x4,%esp
f01210e1:	68 94 b5 13 f0       	push   $0xf013b594
f01210e6:	68 2b 05 00 00       	push   $0x52b
f01210eb:	68 7a b5 13 f0       	push   $0xf013b57a
f01210f0:	e8 10 f1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01210f5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01210f8:	e8 5c bf fe ff       	call   f010d059 <sys_calculate_free_frames>
f01210fd:	29 c3                	sub    %eax,%ebx
f01210ff:	89 d8                	mov    %ebx,%eax
f0121101:	83 f8 04             	cmp    $0x4,%eax
f0121104:	74 17                	je     f012111d <test_kfree+0xb49>
f0121106:	83 ec 04             	sub    $0x4,%esp
f0121109:	68 fc b5 13 f0       	push   $0xf013b5fc
f012110e:	68 2c 05 00 00       	push   $0x52c
f0121113:	68 7a b5 13 f0       	push   $0xf013b57a
f0121118:	e8 e8 f0 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012111d:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0121124:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121127:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012112d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121130:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121137:	eb 0e                	jmp    f0121147 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0121139:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012113c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012113f:	01 d0                	add    %edx,%eax
f0121141:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121144:	ff 45 f4             	incl   -0xc(%ebp)
f0121147:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012114d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121150:	7f e7                	jg     f0121139 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121152:	e8 02 bf fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121157:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012115d:	e8 c5 2b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121162:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121168:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012116e:	83 ec 0c             	sub    $0xc,%esp
f0121171:	50                   	push   %eax
f0121172:	e8 3c 69 fe ff       	call   f0107ab3 <kfree>
f0121177:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012117a:	e8 a8 2b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012117f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121185:	74 17                	je     f012119e <test_kfree+0xbca>
f0121187:	83 ec 04             	sub    $0x4,%esp
f012118a:	68 94 b5 13 f0       	push   $0xf013b594
f012118f:	68 3b 05 00 00       	push   $0x53b
f0121194:	68 7a b5 13 f0       	push   $0xf013b57a
f0121199:	e8 67 f0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012119e:	e8 b6 be fe ff       	call   f010d059 <sys_calculate_free_frames>
f01211a3:	89 c2                	mov    %eax,%edx
f01211a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01211ab:	29 c2                	sub    %eax,%edx
f01211ad:	89 d0                	mov    %edx,%eax
f01211af:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211b4:	74 17                	je     f01211cd <test_kfree+0xbf9>
f01211b6:	83 ec 04             	sub    $0x4,%esp
f01211b9:	68 04 bd 13 f0       	push   $0xf013bd04
f01211be:	68 3c 05 00 00       	push   $0x53c
f01211c3:	68 7a b5 13 f0       	push   $0xf013b57a
f01211c8:	e8 38 f0 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211cd:	e8 87 be fe ff       	call   f010d059 <sys_calculate_free_frames>
f01211d2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211d8:	e8 4a 2b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01211dd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01211e3:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01211e9:	83 ec 0c             	sub    $0xc,%esp
f01211ec:	50                   	push   %eax
f01211ed:	e8 c1 68 fe ff       	call   f0107ab3 <kfree>
f01211f2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211f5:	e8 2d 2b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01211fa:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121200:	74 17                	je     f0121219 <test_kfree+0xc45>
f0121202:	83 ec 04             	sub    $0x4,%esp
f0121205:	68 94 b5 13 f0       	push   $0xf013b594
f012120a:	68 42 05 00 00       	push   $0x542
f012120f:	68 7a b5 13 f0       	push   $0xf013b57a
f0121214:	e8 ec ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121219:	e8 3b be fe ff       	call   f010d059 <sys_calculate_free_frames>
f012121e:	89 c2                	mov    %eax,%edx
f0121220:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121226:	29 c2                	sub    %eax,%edx
f0121228:	89 d0                	mov    %edx,%eax
f012122a:	83 f8 01             	cmp    $0x1,%eax
f012122d:	74 17                	je     f0121246 <test_kfree+0xc72>
f012122f:	83 ec 04             	sub    $0x4,%esp
f0121232:	68 04 bd 13 f0       	push   $0xf013bd04
f0121237:	68 43 05 00 00       	push   $0x543
f012123c:	68 7a b5 13 f0       	push   $0xf013b57a
f0121241:	e8 bf ef fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121246:	e8 0e be fe ff       	call   f010d059 <sys_calculate_free_frames>
f012124b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121251:	e8 d1 2a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121256:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012125c:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0121262:	83 ec 0c             	sub    $0xc,%esp
f0121265:	50                   	push   %eax
f0121266:	e8 48 68 fe ff       	call   f0107ab3 <kfree>
f012126b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012126e:	e8 b4 2a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121273:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121279:	74 17                	je     f0121292 <test_kfree+0xcbe>
f012127b:	83 ec 04             	sub    $0x4,%esp
f012127e:	68 94 b5 13 f0       	push   $0xf013b594
f0121283:	68 49 05 00 00       	push   $0x549
f0121288:	68 7a b5 13 f0       	push   $0xf013b57a
f012128d:	e8 73 ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121292:	e8 c2 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121297:	89 c2                	mov    %eax,%edx
f0121299:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012129f:	29 c2                	sub    %eax,%edx
f01212a1:	89 d0                	mov    %edx,%eax
f01212a3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01212a8:	74 17                	je     f01212c1 <test_kfree+0xced>
f01212aa:	83 ec 04             	sub    $0x4,%esp
f01212ad:	68 04 bd 13 f0       	push   $0xf013bd04
f01212b2:	68 4a 05 00 00       	push   $0x54a
f01212b7:	68 7a b5 13 f0       	push   $0xf013b57a
f01212bc:	e8 44 ef fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01212c1:	e8 93 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f01212c6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212cc:	e8 56 2a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01212d1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01212d7:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01212dd:	83 ec 0c             	sub    $0xc,%esp
f01212e0:	50                   	push   %eax
f01212e1:	e8 cd 67 fe ff       	call   f0107ab3 <kfree>
f01212e6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212e9:	e8 39 2a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01212ee:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01212f4:	74 17                	je     f012130d <test_kfree+0xd39>
f01212f6:	83 ec 04             	sub    $0x4,%esp
f01212f9:	68 94 b5 13 f0       	push   $0xf013b594
f01212fe:	68 50 05 00 00       	push   $0x550
f0121303:	68 7a b5 13 f0       	push   $0xf013b57a
f0121308:	e8 f8 ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012130d:	e8 47 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121312:	89 c2                	mov    %eax,%edx
f0121314:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012131a:	29 c2                	sub    %eax,%edx
f012131c:	89 d0                	mov    %edx,%eax
f012131e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121323:	74 17                	je     f012133c <test_kfree+0xd68>
f0121325:	83 ec 04             	sub    $0x4,%esp
f0121328:	68 04 bd 13 f0       	push   $0xf013bd04
f012132d:	68 51 05 00 00       	push   $0x551
f0121332:	68 7a b5 13 f0       	push   $0xf013b57a
f0121337:	e8 c9 ee fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012133c:	83 ec 0c             	sub    $0xc,%esp
f012133f:	68 3c bd 13 f0       	push   $0xf013bd3c
f0121344:	e8 c5 f9 fd ff       	call   f0100d0e <cprintf>
f0121349:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012134c:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121352:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121355:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012135c:	eb 1e                	jmp    f012137c <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f012135e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0121364:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121367:	8b 45 80             	mov    -0x80(%ebp),%eax
f012136a:	01 c8                	add    %ecx,%eax
f012136c:	8a 00                	mov    (%eax),%al
f012136e:	0f be c0             	movsbl %al,%eax
f0121371:	01 d0                	add    %edx,%eax
f0121373:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121379:	ff 45 f4             	incl   -0xc(%ebp)
f012137c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121382:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121385:	7f d7                	jg     f012135e <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121387:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012138d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121393:	89 c1                	mov    %eax,%ecx
f0121395:	01 c9                	add    %ecx,%ecx
f0121397:	01 c8                	add    %ecx,%eax
f0121399:	39 c2                	cmp    %eax,%edx
f012139b:	74 17                	je     f01213b4 <test_kfree+0xde0>
f012139d:	83 ec 04             	sub    $0x4,%esp
f01213a0:	68 60 bd 13 f0       	push   $0xf013bd60
f01213a5:	68 5e 05 00 00       	push   $0x55e
f01213aa:	68 7a b5 13 f0       	push   $0xf013b57a
f01213af:	e8 51 ee fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01213b4:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01213ba:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01213bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213c4:	eb 1e                	jmp    f01213e4 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01213c6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01213cc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01213cf:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213d2:	01 c8                	add    %ecx,%eax
f01213d4:	8a 00                	mov    (%eax),%al
f01213d6:	0f be c0             	movsbl %al,%eax
f01213d9:	01 d0                	add    %edx,%eax
f01213db:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01213e1:	ff 45 f4             	incl   -0xc(%ebp)
f01213e4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01213ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213ed:	7f d7                	jg     f01213c6 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01213ef:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01213f5:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f01213fb:	c1 e2 02             	shl    $0x2,%edx
f01213fe:	39 d0                	cmp    %edx,%eax
f0121400:	74 17                	je     f0121419 <test_kfree+0xe45>
f0121402:	83 ec 04             	sub    $0x4,%esp
f0121405:	68 60 bd 13 f0       	push   $0xf013bd60
f012140a:	68 66 05 00 00       	push   $0x566
f012140f:	68 7a b5 13 f0       	push   $0xf013b57a
f0121414:	e8 ec ed fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121419:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012141f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121422:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121429:	eb 1e                	jmp    f0121449 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f012142b:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0121431:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121434:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121437:	01 c8                	add    %ecx,%eax
f0121439:	8a 00                	mov    (%eax),%al
f012143b:	0f be c0             	movsbl %al,%eax
f012143e:	01 d0                	add    %edx,%eax
f0121440:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121446:	ff 45 f4             	incl   -0xc(%ebp)
f0121449:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012144f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121452:	7f d7                	jg     f012142b <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121454:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012145a:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0121460:	89 d0                	mov    %edx,%eax
f0121462:	c1 e0 02             	shl    $0x2,%eax
f0121465:	01 d0                	add    %edx,%eax
f0121467:	39 c1                	cmp    %eax,%ecx
f0121469:	74 17                	je     f0121482 <test_kfree+0xeae>
f012146b:	83 ec 04             	sub    $0x4,%esp
f012146e:	68 60 bd 13 f0       	push   $0xf013bd60
f0121473:	68 6e 05 00 00       	push   $0x56e
f0121478:	68 7a b5 13 f0       	push   $0xf013b57a
f012147d:	e8 83 ed fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121482:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121488:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012148b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121492:	eb 1e                	jmp    f01214b2 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0121494:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012149a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012149d:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214a0:	01 c8                	add    %ecx,%eax
f01214a2:	8a 00                	mov    (%eax),%al
f01214a4:	0f be c0             	movsbl %al,%eax
f01214a7:	01 d0                	add    %edx,%eax
f01214a9:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01214af:	ff 45 f4             	incl   -0xc(%ebp)
f01214b2:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01214b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214bb:	7f d7                	jg     f0121494 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01214bd:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01214c3:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01214c9:	89 d0                	mov    %edx,%eax
f01214cb:	01 c0                	add    %eax,%eax
f01214cd:	01 d0                	add    %edx,%eax
f01214cf:	01 c0                	add    %eax,%eax
f01214d1:	01 d0                	add    %edx,%eax
f01214d3:	39 c1                	cmp    %eax,%ecx
f01214d5:	74 17                	je     f01214ee <test_kfree+0xf1a>
f01214d7:	83 ec 04             	sub    $0x4,%esp
f01214da:	68 60 bd 13 f0       	push   $0xf013bd60
f01214df:	68 76 05 00 00       	push   $0x576
f01214e4:	68 7a b5 13 f0       	push   $0xf013b57a
f01214e9:	e8 17 ed fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01214ee:	83 ec 0c             	sub    $0xc,%esp
f01214f1:	68 93 bd 13 f0       	push   $0xf013bd93
f01214f6:	e8 13 f8 fd ff       	call   f0100d0e <cprintf>
f01214fb:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01214fe:	e8 56 bb fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121503:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121506:	e8 1c 28 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012150b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012150e:	83 ec 0c             	sub    $0xc,%esp
f0121511:	68 00 50 00 00       	push   $0x5000
f0121516:	e8 4f 64 fe ff       	call   f010796a <kmalloc>
f012151b:	83 c4 10             	add    $0x10,%esp
f012151e:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121524:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012152a:	89 c1                	mov    %eax,%ecx
f012152c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121533:	10 00 00 
f0121536:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012153c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121541:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121547:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012154d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121552:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121558:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012155e:	29 d0                	sub    %edx,%eax
f0121560:	89 c3                	mov    %eax,%ebx
f0121562:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121569:	10 00 00 
f012156c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121571:	0f b6 d0             	movzbl %al,%edx
f0121574:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012157a:	01 d0                	add    %edx,%eax
f012157c:	48                   	dec    %eax
f012157d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121583:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121589:	ba 00 00 00 00       	mov    $0x0,%edx
f012158e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0121594:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012159a:	29 d0                	sub    %edx,%eax
f012159c:	01 c3                	add    %eax,%ebx
f012159e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01215a5:	10 00 00 
f01215a8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01215ad:	0f b6 c0             	movzbl %al,%eax
f01215b0:	c1 e0 04             	shl    $0x4,%eax
f01215b3:	89 c2                	mov    %eax,%edx
f01215b5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01215bb:	01 d0                	add    %edx,%eax
f01215bd:	48                   	dec    %eax
f01215be:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01215c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01215ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01215cf:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01215d5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01215db:	29 d0                	sub    %edx,%eax
f01215dd:	01 d8                	add    %ebx,%eax
f01215df:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01215e4:	39 c1                	cmp    %eax,%ecx
f01215e6:	74 17                	je     f01215ff <test_kfree+0x102b>
f01215e8:	83 ec 04             	sub    $0x4,%esp
f01215eb:	68 60 b6 13 f0       	push   $0xf013b660
f01215f0:	68 80 05 00 00       	push   $0x580
f01215f5:	68 7a b5 13 f0       	push   $0xf013b57a
f01215fa:	e8 06 ec fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215ff:	e8 23 27 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121604:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121607:	74 17                	je     f0121620 <test_kfree+0x104c>
f0121609:	83 ec 04             	sub    $0x4,%esp
f012160c:	68 94 b5 13 f0       	push   $0xf013b594
f0121611:	68 81 05 00 00       	push   $0x581
f0121616:	68 7a b5 13 f0       	push   $0xf013b57a
f012161b:	e8 e5 eb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121623:	e8 31 ba fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121628:	29 c3                	sub    %eax,%ebx
f012162a:	89 d8                	mov    %ebx,%eax
f012162c:	83 f8 05             	cmp    $0x5,%eax
f012162f:	74 17                	je     f0121648 <test_kfree+0x1074>
f0121631:	83 ec 04             	sub    $0x4,%esp
f0121634:	68 fc b5 13 f0       	push   $0xf013b5fc
f0121639:	68 82 05 00 00       	push   $0x582
f012163e:	68 7a b5 13 f0       	push   $0xf013b57a
f0121643:	e8 bd eb fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121648:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f012164f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0121652:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121658:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012165b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121662:	eb 0e                	jmp    f0121672 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0121664:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121667:	8b 45 80             	mov    -0x80(%ebp),%eax
f012166a:	01 d0                	add    %edx,%eax
f012166c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012166f:	ff 45 f4             	incl   -0xc(%ebp)
f0121672:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121678:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012167b:	7f e7                	jg     f0121664 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012167d:	e8 d7 b9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121682:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121685:	e8 9d 26 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012168a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012168d:	83 ec 0c             	sub    $0xc,%esp
f0121690:	68 00 00 10 00       	push   $0x100000
f0121695:	e8 d0 62 fe ff       	call   f010796a <kmalloc>
f012169a:	83 c4 10             	add    $0x10,%esp
f012169d:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216a3:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01216a9:	89 c1                	mov    %eax,%ecx
f01216ab:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01216b2:	10 00 00 
f01216b5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01216bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216c0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01216c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01216cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01216d1:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01216d7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01216dd:	29 d0                	sub    %edx,%eax
f01216df:	89 c3                	mov    %eax,%ebx
f01216e1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01216e8:	10 00 00 
f01216eb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01216f0:	0f b6 d0             	movzbl %al,%edx
f01216f3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01216f9:	01 d0                	add    %edx,%eax
f01216fb:	48                   	dec    %eax
f01216fc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0121702:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121708:	ba 00 00 00 00       	mov    $0x0,%edx
f012170d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0121713:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121719:	29 d0                	sub    %edx,%eax
f012171b:	01 c3                	add    %eax,%ebx
f012171d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0121724:	10 00 00 
f0121727:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012172c:	0f b6 c0             	movzbl %al,%eax
f012172f:	c1 e0 04             	shl    $0x4,%eax
f0121732:	89 c2                	mov    %eax,%edx
f0121734:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012173a:	01 d0                	add    %edx,%eax
f012173c:	48                   	dec    %eax
f012173d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121743:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121749:	ba 00 00 00 00       	mov    $0x0,%edx
f012174e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121754:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012175a:	29 d0                	sub    %edx,%eax
f012175c:	01 d8                	add    %ebx,%eax
f012175e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121763:	39 c1                	cmp    %eax,%ecx
f0121765:	74 17                	je     f012177e <test_kfree+0x11aa>
f0121767:	83 ec 04             	sub    $0x4,%esp
f012176a:	68 60 b6 13 f0       	push   $0xf013b660
f012176f:	68 8e 05 00 00       	push   $0x58e
f0121774:	68 7a b5 13 f0       	push   $0xf013b57a
f0121779:	e8 87 ea fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012177e:	e8 a4 25 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121783:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121786:	74 17                	je     f012179f <test_kfree+0x11cb>
f0121788:	83 ec 04             	sub    $0x4,%esp
f012178b:	68 94 b5 13 f0       	push   $0xf013b594
f0121790:	68 8f 05 00 00       	push   $0x58f
f0121795:	68 7a b5 13 f0       	push   $0xf013b57a
f012179a:	e8 66 ea fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012179f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01217a2:	e8 b2 b8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01217a7:	29 c3                	sub    %eax,%ebx
f01217a9:	89 d8                	mov    %ebx,%eax
f01217ab:	3d 00 01 00 00       	cmp    $0x100,%eax
f01217b0:	74 17                	je     f01217c9 <test_kfree+0x11f5>
f01217b2:	83 ec 04             	sub    $0x4,%esp
f01217b5:	68 fc b5 13 f0       	push   $0xf013b5fc
f01217ba:	68 90 05 00 00       	push   $0x590
f01217bf:	68 7a b5 13 f0       	push   $0xf013b57a
f01217c4:	e8 3c ea fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01217c9:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01217d0:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01217d3:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01217d9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01217dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217e3:	eb 0e                	jmp    f01217f3 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01217e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217e8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217eb:	01 d0                	add    %edx,%eax
f01217ed:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01217f0:	ff 45 f4             	incl   -0xc(%ebp)
f01217f3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01217f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217fc:	7f e7                	jg     f01217e5 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01217fe:	e8 ac 66 ff ff       	call   f0117eaf <isKHeapPlacementStrategyNEXTFIT>
f0121803:	84 c0                	test   %al,%al
f0121805:	0f 84 ac 06 00 00    	je     f0121eb7 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012180b:	e8 49 b8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121810:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121813:	e8 0f 25 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121818:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012181b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0121822:	10 00 00 
f0121825:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012182b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121830:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121836:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012183c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121841:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121847:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012184d:	29 d0                	sub    %edx,%eax
f012184f:	89 c1                	mov    %eax,%ecx
f0121851:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121858:	10 00 00 
f012185b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121860:	0f b6 d0             	movzbl %al,%edx
f0121863:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121869:	01 d0                	add    %edx,%eax
f012186b:	48                   	dec    %eax
f012186c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0121872:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121878:	ba 00 00 00 00       	mov    $0x0,%edx
f012187d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0121883:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121889:	29 d0                	sub    %edx,%eax
f012188b:	01 c1                	add    %eax,%ecx
f012188d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0121894:	10 00 00 
f0121897:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012189c:	0f b6 c0             	movzbl %al,%eax
f012189f:	c1 e0 04             	shl    $0x4,%eax
f01218a2:	89 c2                	mov    %eax,%edx
f01218a4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01218aa:	01 d0                	add    %edx,%eax
f01218ac:	48                   	dec    %eax
f01218ad:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01218b3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01218be:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01218c4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218ca:	29 d0                	sub    %edx,%eax
f01218cc:	01 c8                	add    %ecx,%eax
f01218ce:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01218d3:	29 c2                	sub    %eax,%edx
f01218d5:	89 d0                	mov    %edx,%eax
f01218d7:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01218dd:	83 ec 0c             	sub    $0xc,%esp
f01218e0:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f01218e6:	e8 7f 60 fe ff       	call   f010796a <kmalloc>
f01218eb:	83 c4 10             	add    $0x10,%esp
f01218ee:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218f4:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01218fa:	89 c1                	mov    %eax,%ecx
f01218fc:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121903:	10 00 00 
f0121906:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012190c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121911:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0121917:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012191d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121922:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121928:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012192e:	29 d0                	sub    %edx,%eax
f0121930:	89 c3                	mov    %eax,%ebx
f0121932:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121939:	10 00 00 
f012193c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121941:	0f b6 d0             	movzbl %al,%edx
f0121944:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012194a:	01 d0                	add    %edx,%eax
f012194c:	48                   	dec    %eax
f012194d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121953:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121959:	ba 00 00 00 00       	mov    $0x0,%edx
f012195e:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121964:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012196a:	29 d0                	sub    %edx,%eax
f012196c:	01 c3                	add    %eax,%ebx
f012196e:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121975:	10 00 00 
f0121978:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012197d:	0f b6 c0             	movzbl %al,%eax
f0121980:	c1 e0 04             	shl    $0x4,%eax
f0121983:	89 c2                	mov    %eax,%edx
f0121985:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012198b:	01 d0                	add    %edx,%eax
f012198d:	48                   	dec    %eax
f012198e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0121994:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012199a:	ba 00 00 00 00       	mov    $0x0,%edx
f012199f:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01219a5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01219ab:	29 d0                	sub    %edx,%eax
f01219ad:	01 d8                	add    %ebx,%eax
f01219af:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01219b4:	39 c1                	cmp    %eax,%ecx
f01219b6:	74 17                	je     f01219cf <test_kfree+0x13fb>
f01219b8:	83 ec 04             	sub    $0x4,%esp
f01219bb:	68 60 b6 13 f0       	push   $0xf013b660
f01219c0:	68 9f 05 00 00       	push   $0x59f
f01219c5:	68 7a b5 13 f0       	push   $0xf013b57a
f01219ca:	e8 36 e8 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219cf:	e8 53 23 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01219d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219d7:	74 17                	je     f01219f0 <test_kfree+0x141c>
f01219d9:	83 ec 04             	sub    $0x4,%esp
f01219dc:	68 94 b5 13 f0       	push   $0xf013b594
f01219e1:	68 a0 05 00 00       	push   $0x5a0
f01219e6:	68 7a b5 13 f0       	push   $0xf013b57a
f01219eb:	e8 15 e8 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219f3:	e8 61 b6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01219f8:	29 c3                	sub    %eax,%ebx
f01219fa:	89 da                	mov    %ebx,%edx
f01219fc:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a02:	c1 e8 0c             	shr    $0xc,%eax
f0121a05:	39 c2                	cmp    %eax,%edx
f0121a07:	74 17                	je     f0121a20 <test_kfree+0x144c>
f0121a09:	83 ec 04             	sub    $0x4,%esp
f0121a0c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0121a11:	68 a1 05 00 00       	push   $0x5a1
f0121a16:	68 7a b5 13 f0       	push   $0xf013b57a
f0121a1b:	e8 e5 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121a20:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a26:	48                   	dec    %eax
f0121a27:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121a2d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121a33:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121a36:	e8 1e b6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121a3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a3e:	e8 e4 22 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121a43:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121a46:	83 ec 0c             	sub    $0xc,%esp
f0121a49:	68 00 00 30 00       	push   $0x300000
f0121a4e:	e8 17 5f fe ff       	call   f010796a <kmalloc>
f0121a53:	83 c4 10             	add    $0x10,%esp
f0121a56:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a5c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121a62:	89 c1                	mov    %eax,%ecx
f0121a64:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121a6b:	10 00 00 
f0121a6e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121a74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a79:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121a7f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121a85:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a8a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121a90:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121a96:	29 d0                	sub    %edx,%eax
f0121a98:	89 c3                	mov    %eax,%ebx
f0121a9a:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121aa1:	10 00 00 
f0121aa4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121aa9:	0f b6 d0             	movzbl %al,%edx
f0121aac:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121ab2:	01 d0                	add    %edx,%eax
f0121ab4:	48                   	dec    %eax
f0121ab5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121abb:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121ac1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ac6:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121acc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121ad2:	29 d0                	sub    %edx,%eax
f0121ad4:	01 c3                	add    %eax,%ebx
f0121ad6:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121add:	10 00 00 
f0121ae0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121ae5:	0f b6 c0             	movzbl %al,%eax
f0121ae8:	c1 e0 04             	shl    $0x4,%eax
f0121aeb:	89 c2                	mov    %eax,%edx
f0121aed:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121af3:	01 d0                	add    %edx,%eax
f0121af5:	48                   	dec    %eax
f0121af6:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121afc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b07:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121b0d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b13:	29 d0                	sub    %edx,%eax
f0121b15:	01 d8                	add    %ebx,%eax
f0121b17:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121b1c:	39 c1                	cmp    %eax,%ecx
f0121b1e:	74 17                	je     f0121b37 <test_kfree+0x1563>
f0121b20:	83 ec 04             	sub    $0x4,%esp
f0121b23:	68 60 b6 13 f0       	push   $0xf013b660
f0121b28:	68 ae 05 00 00       	push   $0x5ae
f0121b2d:	68 7a b5 13 f0       	push   $0xf013b57a
f0121b32:	e8 ce e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b37:	e8 eb 21 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121b3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b3f:	74 17                	je     f0121b58 <test_kfree+0x1584>
f0121b41:	83 ec 04             	sub    $0x4,%esp
f0121b44:	68 94 b5 13 f0       	push   $0xf013b594
f0121b49:	68 af 05 00 00       	push   $0x5af
f0121b4e:	68 7a b5 13 f0       	push   $0xf013b57a
f0121b53:	e8 ad e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b5b:	e8 f9 b4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121b60:	29 c3                	sub    %eax,%ebx
f0121b62:	89 d8                	mov    %ebx,%eax
f0121b64:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b69:	74 17                	je     f0121b82 <test_kfree+0x15ae>
f0121b6b:	83 ec 04             	sub    $0x4,%esp
f0121b6e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0121b73:	68 b0 05 00 00       	push   $0x5b0
f0121b78:	68 7a b5 13 f0       	push   $0xf013b57a
f0121b7d:	e8 83 e6 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121b82:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121b89:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121b8c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121b92:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121b95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b9c:	eb 0e                	jmp    f0121bac <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121b9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ba1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ba4:	01 d0                	add    %edx,%eax
f0121ba6:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121ba9:	ff 45 f4             	incl   -0xc(%ebp)
f0121bac:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121bb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121bb5:	7f e7                	jg     f0121b9e <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121bb7:	e8 9d b4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121bbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121bbf:	e8 63 21 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121bc4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121bc7:	83 ec 0c             	sub    $0xc,%esp
f0121bca:	68 00 08 00 00       	push   $0x800
f0121bcf:	e8 96 5d fe ff       	call   f010796a <kmalloc>
f0121bd4:	83 c4 10             	add    $0x10,%esp
f0121bd7:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121bdd:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121be3:	89 c1                	mov    %eax,%ecx
f0121be5:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121bec:	10 00 00 
f0121bef:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121bf5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121bfa:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121c00:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c06:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c0b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121c11:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c17:	29 d0                	sub    %edx,%eax
f0121c19:	89 c3                	mov    %eax,%ebx
f0121c1b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121c22:	10 00 00 
f0121c25:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121c2a:	0f b6 d0             	movzbl %al,%edx
f0121c2d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121c33:	01 d0                	add    %edx,%eax
f0121c35:	48                   	dec    %eax
f0121c36:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121c3c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c47:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121c4d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c53:	29 d0                	sub    %edx,%eax
f0121c55:	01 c3                	add    %eax,%ebx
f0121c57:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121c5e:	10 00 00 
f0121c61:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121c66:	0f b6 c0             	movzbl %al,%eax
f0121c69:	c1 e0 04             	shl    $0x4,%eax
f0121c6c:	89 c2                	mov    %eax,%edx
f0121c6e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121c74:	01 d0                	add    %edx,%eax
f0121c76:	48                   	dec    %eax
f0121c77:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121c7d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c88:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121c8e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121c94:	29 d0                	sub    %edx,%eax
f0121c96:	01 d8                	add    %ebx,%eax
f0121c98:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121c9d:	39 c1                	cmp    %eax,%ecx
f0121c9f:	74 17                	je     f0121cb8 <test_kfree+0x16e4>
f0121ca1:	83 ec 04             	sub    $0x4,%esp
f0121ca4:	68 60 b6 13 f0       	push   $0xf013b660
f0121ca9:	68 bc 05 00 00       	push   $0x5bc
f0121cae:	68 7a b5 13 f0       	push   $0xf013b57a
f0121cb3:	e8 4d e5 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cb8:	e8 6a 20 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121cbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cc0:	74 17                	je     f0121cd9 <test_kfree+0x1705>
f0121cc2:	83 ec 04             	sub    $0x4,%esp
f0121cc5:	68 94 b5 13 f0       	push   $0xf013b594
f0121cca:	68 bd 05 00 00       	push   $0x5bd
f0121ccf:	68 7a b5 13 f0       	push   $0xf013b57a
f0121cd4:	e8 2c e5 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121cd9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121cdc:	e8 78 b3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121ce1:	29 c3                	sub    %eax,%ebx
f0121ce3:	89 d8                	mov    %ebx,%eax
f0121ce5:	83 f8 01             	cmp    $0x1,%eax
f0121ce8:	74 17                	je     f0121d01 <test_kfree+0x172d>
f0121cea:	83 ec 04             	sub    $0x4,%esp
f0121ced:	68 fc b5 13 f0       	push   $0xf013b5fc
f0121cf2:	68 be 05 00 00       	push   $0x5be
f0121cf7:	68 7a b5 13 f0       	push   $0xf013b57a
f0121cfc:	e8 04 e5 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121d01:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121d08:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121d0b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121d11:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121d14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d1b:	eb 0e                	jmp    f0121d2b <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121d1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d20:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d23:	01 d0                	add    %edx,%eax
f0121d25:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121d28:	ff 45 f4             	incl   -0xc(%ebp)
f0121d2b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121d31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d34:	7f e7                	jg     f0121d1d <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121d36:	e8 1e b3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121d3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d3e:	e8 e4 1f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121d43:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121d46:	83 ec 0c             	sub    $0xc,%esp
f0121d49:	68 00 00 10 00       	push   $0x100000
f0121d4e:	e8 17 5c fe ff       	call   f010796a <kmalloc>
f0121d53:	83 c4 10             	add    $0x10,%esp
f0121d56:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d5c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121d62:	89 c1                	mov    %eax,%ecx
f0121d64:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121d6b:	10 00 00 
f0121d6e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121d74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121d79:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121d7f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d8a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121d90:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121d96:	29 d0                	sub    %edx,%eax
f0121d98:	89 c3                	mov    %eax,%ebx
f0121d9a:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121da1:	10 00 00 
f0121da4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121da9:	0f b6 d0             	movzbl %al,%edx
f0121dac:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121db2:	01 d0                	add    %edx,%eax
f0121db4:	48                   	dec    %eax
f0121db5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121dbb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121dc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dc6:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121dcc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121dd2:	29 d0                	sub    %edx,%eax
f0121dd4:	01 c3                	add    %eax,%ebx
f0121dd6:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121ddd:	10 00 00 
f0121de0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0121de5:	0f b6 c0             	movzbl %al,%eax
f0121de8:	c1 e0 04             	shl    $0x4,%eax
f0121deb:	89 c2                	mov    %eax,%edx
f0121ded:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121df3:	01 d0                	add    %edx,%eax
f0121df5:	48                   	dec    %eax
f0121df6:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121dfc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e07:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121e0d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e13:	29 d0                	sub    %edx,%eax
f0121e15:	01 d8                	add    %ebx,%eax
f0121e17:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121e1c:	39 c1                	cmp    %eax,%ecx
f0121e1e:	74 17                	je     f0121e37 <test_kfree+0x1863>
f0121e20:	83 ec 04             	sub    $0x4,%esp
f0121e23:	68 60 b6 13 f0       	push   $0xf013b660
f0121e28:	68 ca 05 00 00       	push   $0x5ca
f0121e2d:	68 7a b5 13 f0       	push   $0xf013b57a
f0121e32:	e8 ce e3 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e37:	e8 eb 1e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121e3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e3f:	74 17                	je     f0121e58 <test_kfree+0x1884>
f0121e41:	83 ec 04             	sub    $0x4,%esp
f0121e44:	68 94 b5 13 f0       	push   $0xf013b594
f0121e49:	68 cb 05 00 00       	push   $0x5cb
f0121e4e:	68 7a b5 13 f0       	push   $0xf013b57a
f0121e53:	e8 ad e3 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e5b:	e8 f9 b1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121e60:	29 c3                	sub    %eax,%ebx
f0121e62:	89 d8                	mov    %ebx,%eax
f0121e64:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121e69:	74 17                	je     f0121e82 <test_kfree+0x18ae>
f0121e6b:	83 ec 04             	sub    $0x4,%esp
f0121e6e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0121e73:	68 cc 05 00 00       	push   $0x5cc
f0121e78:	68 7a b5 13 f0       	push   $0xf013b57a
f0121e7d:	e8 83 e3 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121e82:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121e89:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121e8c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121e92:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121e95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121e9c:	eb 0e                	jmp    f0121eac <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121e9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ea1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ea4:	01 d0                	add    %edx,%eax
f0121ea6:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121ea9:	ff 45 f4             	incl   -0xc(%ebp)
f0121eac:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121eb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121eb5:	7f e7                	jg     f0121e9e <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121eb7:	83 ec 0c             	sub    $0xc,%esp
f0121eba:	68 9a bd 13 f0       	push   $0xf013bd9a
f0121ebf:	e8 4a ee fd ff       	call   f0100d0e <cprintf>
f0121ec4:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ec7:	e8 8d b1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121ecc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ecf:	e8 53 1e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121ed4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121ed7:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121edd:	83 ec 0c             	sub    $0xc,%esp
f0121ee0:	50                   	push   %eax
f0121ee1:	e8 cd 5b fe ff       	call   f0107ab3 <kfree>
f0121ee6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ee9:	e8 39 1e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121eee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ef1:	74 17                	je     f0121f0a <test_kfree+0x1936>
f0121ef3:	83 ec 04             	sub    $0x4,%esp
f0121ef6:	68 94 b5 13 f0       	push   $0xf013b594
f0121efb:	68 dd 05 00 00       	push   $0x5dd
f0121f00:	68 7a b5 13 f0       	push   $0xf013b57a
f0121f05:	e8 fb e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f0a:	e8 4a b1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121f0f:	89 c2                	mov    %eax,%edx
f0121f11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f14:	29 c2                	sub    %eax,%edx
f0121f16:	89 d0                	mov    %edx,%eax
f0121f18:	83 f8 02             	cmp    $0x2,%eax
f0121f1b:	74 17                	je     f0121f34 <test_kfree+0x1960>
f0121f1d:	83 ec 04             	sub    $0x4,%esp
f0121f20:	68 04 bd 13 f0       	push   $0xf013bd04
f0121f25:	68 de 05 00 00       	push   $0x5de
f0121f2a:	68 7a b5 13 f0       	push   $0xf013b57a
f0121f2f:	e8 d1 e2 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f34:	e8 20 b1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121f39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f3c:	e8 e6 1d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121f41:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121f44:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121f4a:	83 ec 0c             	sub    $0xc,%esp
f0121f4d:	50                   	push   %eax
f0121f4e:	e8 60 5b fe ff       	call   f0107ab3 <kfree>
f0121f53:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f56:	e8 cc 1d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121f5b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f5e:	74 17                	je     f0121f77 <test_kfree+0x19a3>
f0121f60:	83 ec 04             	sub    $0x4,%esp
f0121f63:	68 94 b5 13 f0       	push   $0xf013b594
f0121f68:	68 e4 05 00 00       	push   $0x5e4
f0121f6d:	68 7a b5 13 f0       	push   $0xf013b57a
f0121f72:	e8 8e e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f77:	e8 dd b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121f7c:	89 c2                	mov    %eax,%edx
f0121f7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f81:	29 c2                	sub    %eax,%edx
f0121f83:	89 d0                	mov    %edx,%eax
f0121f85:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121f8a:	74 17                	je     f0121fa3 <test_kfree+0x19cf>
f0121f8c:	83 ec 04             	sub    $0x4,%esp
f0121f8f:	68 04 bd 13 f0       	push   $0xf013bd04
f0121f94:	68 e5 05 00 00       	push   $0x5e5
f0121f99:	68 7a b5 13 f0       	push   $0xf013b57a
f0121f9e:	e8 62 e2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121fa3:	e8 b1 b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121fa8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121fab:	e8 77 1d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121fb0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121fb3:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121fb9:	83 ec 0c             	sub    $0xc,%esp
f0121fbc:	50                   	push   %eax
f0121fbd:	e8 f1 5a fe ff       	call   f0107ab3 <kfree>
f0121fc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fc5:	e8 5d 1d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0121fca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fcd:	74 17                	je     f0121fe6 <test_kfree+0x1a12>
f0121fcf:	83 ec 04             	sub    $0x4,%esp
f0121fd2:	68 94 b5 13 f0       	push   $0xf013b594
f0121fd7:	68 eb 05 00 00       	push   $0x5eb
f0121fdc:	68 7a b5 13 f0       	push   $0xf013b57a
f0121fe1:	e8 1f e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fe6:	e8 6e b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121feb:	89 c2                	mov    %eax,%edx
f0121fed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121ff0:	29 c2                	sub    %eax,%edx
f0121ff2:	89 d0                	mov    %edx,%eax
f0121ff4:	83 f8 01             	cmp    $0x1,%eax
f0121ff7:	74 17                	je     f0122010 <test_kfree+0x1a3c>
f0121ff9:	83 ec 04             	sub    $0x4,%esp
f0121ffc:	68 04 bd 13 f0       	push   $0xf013bd04
f0122001:	68 ec 05 00 00       	push   $0x5ec
f0122006:	68 7a b5 13 f0       	push   $0xf013b57a
f012200b:	e8 f5 e1 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122010:	e8 44 b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122015:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122018:	e8 0a 1d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012201d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122020:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0122026:	83 ec 0c             	sub    $0xc,%esp
f0122029:	50                   	push   %eax
f012202a:	e8 84 5a fe ff       	call   f0107ab3 <kfree>
f012202f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122032:	e8 f0 1c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122037:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012203a:	74 17                	je     f0122053 <test_kfree+0x1a7f>
f012203c:	83 ec 04             	sub    $0x4,%esp
f012203f:	68 94 b5 13 f0       	push   $0xf013b594
f0122044:	68 f2 05 00 00       	push   $0x5f2
f0122049:	68 7a b5 13 f0       	push   $0xf013b57a
f012204e:	e8 b2 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122053:	e8 01 b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122058:	89 c2                	mov    %eax,%edx
f012205a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012205d:	29 c2                	sub    %eax,%edx
f012205f:	89 d0                	mov    %edx,%eax
f0122061:	83 f8 04             	cmp    $0x4,%eax
f0122064:	74 17                	je     f012207d <test_kfree+0x1aa9>
f0122066:	83 ec 04             	sub    $0x4,%esp
f0122069:	68 04 bd 13 f0       	push   $0xf013bd04
f012206e:	68 f3 05 00 00       	push   $0x5f3
f0122073:	68 7a b5 13 f0       	push   $0xf013b57a
f0122078:	e8 88 e1 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012207d:	e8 d7 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122082:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122085:	e8 9d 1c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012208a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012208d:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0122093:	83 ec 0c             	sub    $0xc,%esp
f0122096:	50                   	push   %eax
f0122097:	e8 17 5a fe ff       	call   f0107ab3 <kfree>
f012209c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012209f:	e8 83 1c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01220a4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220a7:	74 17                	je     f01220c0 <test_kfree+0x1aec>
f01220a9:	83 ec 04             	sub    $0x4,%esp
f01220ac:	68 94 b5 13 f0       	push   $0xf013b594
f01220b1:	68 f9 05 00 00       	push   $0x5f9
f01220b6:	68 7a b5 13 f0       	push   $0xf013b57a
f01220bb:	e8 45 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01220c0:	e8 94 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f01220c5:	89 c2                	mov    %eax,%edx
f01220c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220ca:	29 c2                	sub    %eax,%edx
f01220cc:	89 d0                	mov    %edx,%eax
f01220ce:	83 f8 05             	cmp    $0x5,%eax
f01220d1:	74 17                	je     f01220ea <test_kfree+0x1b16>
f01220d3:	83 ec 04             	sub    $0x4,%esp
f01220d6:	68 04 bd 13 f0       	push   $0xf013bd04
f01220db:	68 fa 05 00 00       	push   $0x5fa
f01220e0:	68 7a b5 13 f0       	push   $0xf013b57a
f01220e5:	e8 1b e1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01220ea:	e8 6a af fe ff       	call   f010d059 <sys_calculate_free_frames>
f01220ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220f2:	e8 30 1c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01220f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01220fa:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122100:	83 ec 0c             	sub    $0xc,%esp
f0122103:	50                   	push   %eax
f0122104:	e8 aa 59 fe ff       	call   f0107ab3 <kfree>
f0122109:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012210c:	e8 16 1c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122111:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122114:	74 17                	je     f012212d <test_kfree+0x1b59>
f0122116:	83 ec 04             	sub    $0x4,%esp
f0122119:	68 94 b5 13 f0       	push   $0xf013b594
f012211e:	68 00 06 00 00       	push   $0x600
f0122123:	68 7a b5 13 f0       	push   $0xf013b57a
f0122128:	e8 d8 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012212d:	e8 27 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122132:	89 c2                	mov    %eax,%edx
f0122134:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122137:	29 c2                	sub    %eax,%edx
f0122139:	89 d0                	mov    %edx,%eax
f012213b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122140:	74 17                	je     f0122159 <test_kfree+0x1b85>
f0122142:	83 ec 04             	sub    $0x4,%esp
f0122145:	68 04 bd 13 f0       	push   $0xf013bd04
f012214a:	68 01 06 00 00       	push   $0x601
f012214f:	68 7a b5 13 f0       	push   $0xf013b57a
f0122154:	e8 ac e0 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0122159:	e8 51 5d ff ff       	call   f0117eaf <isKHeapPlacementStrategyNEXTFIT>
f012215e:	84 c0                	test   %al,%al
f0122160:	0f 84 80 02 00 00    	je     f01223e6 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0122166:	e8 ee ae fe ff       	call   f010d059 <sys_calculate_free_frames>
f012216b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012216e:	e8 b4 1b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122173:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0122176:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012217c:	83 ec 0c             	sub    $0xc,%esp
f012217f:	50                   	push   %eax
f0122180:	e8 2e 59 fe ff       	call   f0107ab3 <kfree>
f0122185:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0122188:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f012218f:	10 00 00 
f0122192:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0122198:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012219d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01221a3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01221ae:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01221b4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221ba:	29 d0                	sub    %edx,%eax
f01221bc:	89 c1                	mov    %eax,%ecx
f01221be:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01221c5:	10 00 00 
f01221c8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01221cd:	0f b6 d0             	movzbl %al,%edx
f01221d0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01221d6:	01 d0                	add    %edx,%eax
f01221d8:	48                   	dec    %eax
f01221d9:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01221df:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01221e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01221ea:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f01221f0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01221f6:	29 d0                	sub    %edx,%eax
f01221f8:	01 c1                	add    %eax,%ecx
f01221fa:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0122201:	10 00 00 
f0122204:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122209:	0f b6 c0             	movzbl %al,%eax
f012220c:	c1 e0 04             	shl    $0x4,%eax
f012220f:	89 c2                	mov    %eax,%edx
f0122211:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122217:	01 d0                	add    %edx,%eax
f0122219:	48                   	dec    %eax
f012221a:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0122220:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122226:	ba 00 00 00 00       	mov    $0x0,%edx
f012222b:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0122231:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122237:	29 d0                	sub    %edx,%eax
f0122239:	01 c8                	add    %ecx,%eax
f012223b:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0122240:	29 c2                	sub    %eax,%edx
f0122242:	89 d0                	mov    %edx,%eax
f0122244:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012224a:	e8 d8 1a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012224f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122252:	74 17                	je     f012226b <test_kfree+0x1c97>
f0122254:	83 ec 04             	sub    $0x4,%esp
f0122257:	68 94 b5 13 f0       	push   $0xf013b594
f012225c:	68 0b 06 00 00       	push   $0x60b
f0122261:	68 7a b5 13 f0       	push   $0xf013b57a
f0122266:	e8 9a df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f012226b:	e8 e9 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122270:	89 c2                	mov    %eax,%edx
f0122272:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122275:	29 c2                	sub    %eax,%edx
f0122277:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012227d:	c1 e8 0c             	shr    $0xc,%eax
f0122280:	39 c2                	cmp    %eax,%edx
f0122282:	74 17                	je     f012229b <test_kfree+0x1cc7>
f0122284:	83 ec 04             	sub    $0x4,%esp
f0122287:	68 04 bd 13 f0       	push   $0xf013bd04
f012228c:	68 0c 06 00 00       	push   $0x60c
f0122291:	68 7a b5 13 f0       	push   $0xf013b57a
f0122296:	e8 6a df fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f012229b:	e8 b9 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f01222a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01222a3:	e8 7f 1a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01222a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01222ab:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01222b1:	83 ec 0c             	sub    $0xc,%esp
f01222b4:	50                   	push   %eax
f01222b5:	e8 f9 57 fe ff       	call   f0107ab3 <kfree>
f01222ba:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222bd:	e8 65 1a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01222c2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222c5:	74 17                	je     f01222de <test_kfree+0x1d0a>
f01222c7:	83 ec 04             	sub    $0x4,%esp
f01222ca:	68 94 b5 13 f0       	push   $0xf013b594
f01222cf:	68 12 06 00 00       	push   $0x612
f01222d4:	68 7a b5 13 f0       	push   $0xf013b57a
f01222d9:	e8 27 df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01222de:	e8 76 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f01222e3:	89 c2                	mov    %eax,%edx
f01222e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222e8:	29 c2                	sub    %eax,%edx
f01222ea:	89 d0                	mov    %edx,%eax
f01222ec:	3d 00 03 00 00       	cmp    $0x300,%eax
f01222f1:	74 17                	je     f012230a <test_kfree+0x1d36>
f01222f3:	83 ec 04             	sub    $0x4,%esp
f01222f6:	68 04 bd 13 f0       	push   $0xf013bd04
f01222fb:	68 13 06 00 00       	push   $0x613
f0122300:	68 7a b5 13 f0       	push   $0xf013b57a
f0122305:	e8 fb de fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012230a:	e8 4a ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f012230f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122312:	e8 10 1a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122317:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012231a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0122320:	83 ec 0c             	sub    $0xc,%esp
f0122323:	50                   	push   %eax
f0122324:	e8 8a 57 fe ff       	call   f0107ab3 <kfree>
f0122329:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012232c:	e8 f6 19 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122331:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122334:	74 17                	je     f012234d <test_kfree+0x1d79>
f0122336:	83 ec 04             	sub    $0x4,%esp
f0122339:	68 94 b5 13 f0       	push   $0xf013b594
f012233e:	68 19 06 00 00       	push   $0x619
f0122343:	68 7a b5 13 f0       	push   $0xf013b57a
f0122348:	e8 b8 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012234d:	e8 07 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122352:	89 c2                	mov    %eax,%edx
f0122354:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122357:	29 c2                	sub    %eax,%edx
f0122359:	89 d0                	mov    %edx,%eax
f012235b:	83 f8 01             	cmp    $0x1,%eax
f012235e:	74 17                	je     f0122377 <test_kfree+0x1da3>
f0122360:	83 ec 04             	sub    $0x4,%esp
f0122363:	68 04 bd 13 f0       	push   $0xf013bd04
f0122368:	68 1a 06 00 00       	push   $0x61a
f012236d:	68 7a b5 13 f0       	push   $0xf013b57a
f0122372:	e8 8e de fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0122377:	e8 dd ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f012237c:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012237f:	e8 a3 19 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122384:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0122387:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012238d:	83 ec 0c             	sub    $0xc,%esp
f0122390:	50                   	push   %eax
f0122391:	e8 1d 57 fe ff       	call   f0107ab3 <kfree>
f0122396:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122399:	e8 89 19 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012239e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223a1:	74 17                	je     f01223ba <test_kfree+0x1de6>
f01223a3:	83 ec 04             	sub    $0x4,%esp
f01223a6:	68 94 b5 13 f0       	push   $0xf013b594
f01223ab:	68 20 06 00 00       	push   $0x620
f01223b0:	68 7a b5 13 f0       	push   $0xf013b57a
f01223b5:	e8 4b de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01223ba:	e8 9a ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f01223bf:	89 c2                	mov    %eax,%edx
f01223c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223c4:	29 c2                	sub    %eax,%edx
f01223c6:	89 d0                	mov    %edx,%eax
f01223c8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01223cd:	74 17                	je     f01223e6 <test_kfree+0x1e12>
f01223cf:	83 ec 04             	sub    $0x4,%esp
f01223d2:	68 04 bd 13 f0       	push   $0xf013bd04
f01223d7:	68 21 06 00 00       	push   $0x621
f01223dc:	68 7a b5 13 f0       	push   $0xf013b57a
f01223e1:	e8 1f de fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01223e6:	e8 6e ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f01223eb:	89 c2                	mov    %eax,%edx
f01223ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01223f0:	39 c2                	cmp    %eax,%edx
f01223f2:	74 17                	je     f012240b <test_kfree+0x1e37>
f01223f4:	83 ec 04             	sub    $0x4,%esp
f01223f7:	68 a4 bd 13 f0       	push   $0xf013bda4
f01223fc:	68 24 06 00 00       	push   $0x624
f0122401:	68 7a b5 13 f0       	push   $0xf013b57a
f0122406:	e8 fa dd fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f012240b:	83 ec 0c             	sub    $0xc,%esp
f012240e:	68 d8 bd 13 f0       	push   $0xf013bdd8
f0122413:	e8 f6 e8 fd ff       	call   f0100d0e <cprintf>
f0122418:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012241b:	83 ec 0c             	sub    $0xc,%esp
f012241e:	6a 03                	push   $0x3
f0122420:	e8 d4 b0 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0122425:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012242f:	e9 82 00 00 00       	jmp    f01224b6 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0122434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122437:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f012243e:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122441:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122444:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122447:	e8 9b b0 fe ff       	call   f010d4e7 <sys_rcr2>
f012244c:	89 c2                	mov    %eax,%edx
f012244e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122451:	39 c2                	cmp    %eax,%edx
f0122453:	74 17                	je     f012246c <test_kfree+0x1e98>
f0122455:	83 ec 04             	sub    $0x4,%esp
f0122458:	68 e0 bd 13 f0       	push   $0xf013bde0
f012245d:	68 33 06 00 00       	push   $0x633
f0122462:	68 7a b5 13 f0       	push   $0xf013b57a
f0122467:	e8 99 dd fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012246c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012246f:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122476:	89 c2                	mov    %eax,%edx
f0122478:	8b 45 80             	mov    -0x80(%ebp),%eax
f012247b:	01 d0                	add    %edx,%eax
f012247d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122480:	e8 62 b0 fe ff       	call   f010d4e7 <sys_rcr2>
f0122485:	89 c2                	mov    %eax,%edx
f0122487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012248a:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122491:	89 c1                	mov    %eax,%ecx
f0122493:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122496:	01 c8                	add    %ecx,%eax
f0122498:	39 c2                	cmp    %eax,%edx
f012249a:	74 17                	je     f01224b3 <test_kfree+0x1edf>
f012249c:	83 ec 04             	sub    $0x4,%esp
f012249f:	68 e0 bd 13 f0       	push   $0xf013bde0
f01224a4:	68 35 06 00 00       	push   $0x635
f01224a9:	68 7a b5 13 f0       	push   $0xf013b57a
f01224ae:	e8 52 dd fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01224b3:	ff 45 f4             	incl   -0xc(%ebp)
f01224b6:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01224ba:	0f 8e 74 ff ff ff    	jle    f0122434 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01224c0:	83 ec 0c             	sub    $0xc,%esp
f01224c3:	6a 00                	push   $0x0
f01224c5:	e8 2f b0 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f01224ca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01224cd:	83 ec 0c             	sub    $0xc,%esp
f01224d0:	68 25 be 13 f0       	push   $0xf013be25
f01224d5:	e8 34 e8 fd ff       	call   f0100d0e <cprintf>
f01224da:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01224dd:	e8 77 ab fe ff       	call   f010d059 <sys_calculate_free_frames>
f01224e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224e5:	e8 3d 18 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01224ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01224ed:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01224f3:	83 ec 0c             	sub    $0xc,%esp
f01224f6:	50                   	push   %eax
f01224f7:	e8 b7 55 fe ff       	call   f0107ab3 <kfree>
f01224fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224ff:	e8 23 18 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122504:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122507:	74 17                	je     f0122520 <test_kfree+0x1f4c>
f0122509:	83 ec 04             	sub    $0x4,%esp
f012250c:	68 94 b5 13 f0       	push   $0xf013b594
f0122511:	68 43 06 00 00       	push   $0x643
f0122516:	68 7a b5 13 f0       	push   $0xf013b57a
f012251b:	e8 e5 dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122520:	e8 34 ab fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122525:	89 c2                	mov    %eax,%edx
f0122527:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012252a:	39 c2                	cmp    %eax,%edx
f012252c:	74 17                	je     f0122545 <test_kfree+0x1f71>
f012252e:	83 ec 04             	sub    $0x4,%esp
f0122531:	68 2c be 13 f0       	push   $0xf013be2c
f0122536:	68 44 06 00 00       	push   $0x644
f012253b:	68 7a b5 13 f0       	push   $0xf013b57a
f0122540:	e8 c0 dc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122545:	e8 0f ab fe ff       	call   f010d059 <sys_calculate_free_frames>
f012254a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012254d:	e8 d5 17 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122552:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122555:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012255b:	83 ec 0c             	sub    $0xc,%esp
f012255e:	50                   	push   %eax
f012255f:	e8 4f 55 fe ff       	call   f0107ab3 <kfree>
f0122564:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122567:	e8 bb 17 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012256c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012256f:	74 17                	je     f0122588 <test_kfree+0x1fb4>
f0122571:	83 ec 04             	sub    $0x4,%esp
f0122574:	68 94 b5 13 f0       	push   $0xf013b594
f0122579:	68 4a 06 00 00       	push   $0x64a
f012257e:	68 7a b5 13 f0       	push   $0xf013b57a
f0122583:	e8 7d dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122588:	e8 cc aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f012258d:	89 c2                	mov    %eax,%edx
f012258f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122592:	39 c2                	cmp    %eax,%edx
f0122594:	74 17                	je     f01225ad <test_kfree+0x1fd9>
f0122596:	83 ec 04             	sub    $0x4,%esp
f0122599:	68 2c be 13 f0       	push   $0xf013be2c
f012259e:	68 4b 06 00 00       	push   $0x64b
f01225a3:	68 7a b5 13 f0       	push   $0xf013b57a
f01225a8:	e8 58 dc fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01225ad:	e8 a7 aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f01225b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225b5:	e8 6d 17 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01225ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01225bd:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01225c3:	83 ec 0c             	sub    $0xc,%esp
f01225c6:	50                   	push   %eax
f01225c7:	e8 e7 54 fe ff       	call   f0107ab3 <kfree>
f01225cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225cf:	e8 53 17 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01225d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225d7:	74 17                	je     f01225f0 <test_kfree+0x201c>
f01225d9:	83 ec 04             	sub    $0x4,%esp
f01225dc:	68 94 b5 13 f0       	push   $0xf013b594
f01225e1:	68 51 06 00 00       	push   $0x651
f01225e6:	68 7a b5 13 f0       	push   $0xf013b57a
f01225eb:	e8 15 dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01225f0:	e8 64 aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f01225f5:	89 c2                	mov    %eax,%edx
f01225f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225fa:	39 c2                	cmp    %eax,%edx
f01225fc:	74 17                	je     f0122615 <test_kfree+0x2041>
f01225fe:	83 ec 04             	sub    $0x4,%esp
f0122601:	68 2c be 13 f0       	push   $0xf013be2c
f0122606:	68 52 06 00 00       	push   $0x652
f012260b:	68 7a b5 13 f0       	push   $0xf013b57a
f0122610:	e8 f0 db fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122615:	e8 3f aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f012261a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012261d:	e8 05 17 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122622:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122625:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012262b:	83 ec 0c             	sub    $0xc,%esp
f012262e:	50                   	push   %eax
f012262f:	e8 7f 54 fe ff       	call   f0107ab3 <kfree>
f0122634:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122637:	e8 eb 16 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012263c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012263f:	74 17                	je     f0122658 <test_kfree+0x2084>
f0122641:	83 ec 04             	sub    $0x4,%esp
f0122644:	68 94 b5 13 f0       	push   $0xf013b594
f0122649:	68 58 06 00 00       	push   $0x658
f012264e:	68 7a b5 13 f0       	push   $0xf013b57a
f0122653:	e8 ad db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122658:	e8 fc a9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012265d:	89 c2                	mov    %eax,%edx
f012265f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122662:	39 c2                	cmp    %eax,%edx
f0122664:	74 17                	je     f012267d <test_kfree+0x20a9>
f0122666:	83 ec 04             	sub    $0x4,%esp
f0122669:	68 2c be 13 f0       	push   $0xf013be2c
f012266e:	68 59 06 00 00       	push   $0x659
f0122673:	68 7a b5 13 f0       	push   $0xf013b57a
f0122678:	e8 88 db fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012267d:	83 ec 0c             	sub    $0xc,%esp
f0122680:	68 73 be 13 f0       	push   $0xf013be73
f0122685:	e8 84 e6 fd ff       	call   f0100d0e <cprintf>
f012268a:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012268d:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122694:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012269b:	eb 48                	jmp    f01226e5 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012269d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01226a0:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01226a5:	83 ec 04             	sub    $0x4,%esp
f01226a8:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01226ae:	51                   	push   %ecx
f01226af:	52                   	push   %edx
f01226b0:	50                   	push   %eax
f01226b1:	e8 5a 43 fe ff       	call   f0106a10 <get_page_table>
f01226b6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01226b9:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01226bf:	85 c0                	test   %eax,%eax
f01226c1:	75 17                	jne    f01226da <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01226c3:	83 ec 04             	sub    $0x4,%esp
f01226c6:	68 7c be 13 f0       	push   $0xf013be7c
f01226cb:	68 67 06 00 00       	push   $0x667
f01226d0:	68 7a b5 13 f0       	push   $0xf013b57a
f01226d5:	e8 2b db fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01226da:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01226e1:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01226e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01226e9:	78 b2                	js     f012269d <test_kfree+0x20c9>
f01226eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01226ef:	7f 09                	jg     f01226fa <test_kfree+0x2126>
f01226f1:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01226f8:	76 a3                	jbe    f012269d <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01226fa:	83 ec 0c             	sub    $0xc,%esp
f01226fd:	68 5e b7 13 f0       	push   $0xf013b75e
f0122702:	e8 07 e6 fd ff       	call   f0100d0e <cprintf>
f0122707:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012270a:	83 ec 0c             	sub    $0xc,%esp
f012270d:	68 e4 be 13 f0       	push   $0xf013bee4
f0122712:	e8 f7 e5 fd ff       	call   f0100d0e <cprintf>
f0122717:	83 c4 10             	add    $0x10,%esp

	return 1;
f012271a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012271f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122722:	5b                   	pop    %ebx
f0122723:	5f                   	pop    %edi
f0122724:	5d                   	pop    %ebp
f0122725:	c3                   	ret    

f0122726 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122726:	55                   	push   %ebp
f0122727:	89 e5                	mov    %esp,%ebp
f0122729:	57                   	push   %edi
f012272a:	53                   	push   %ebx
f012272b:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0122731:	83 ec 0c             	sub    $0xc,%esp
f0122734:	68 bc b4 13 f0       	push   $0xf013b4bc
f0122739:	e8 d0 e5 fd ff       	call   f0100d0e <cprintf>
f012273e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122741:	83 ec 0c             	sub    $0xc,%esp
f0122744:	68 ec b4 13 f0       	push   $0xf013b4ec
f0122749:	e8 c0 e5 fd ff       	call   f0100d0e <cprintf>
f012274e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122751:	83 ec 0c             	sub    $0xc,%esp
f0122754:	68 bc b4 13 f0       	push   $0xf013b4bc
f0122759:	e8 b0 e5 fd ff       	call   f0100d0e <cprintf>
f012275e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122761:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122765:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122769:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012276f:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122775:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012277c:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122783:	e8 d1 a8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122788:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012278b:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0122791:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122796:	b8 00 00 00 00       	mov    $0x0,%eax
f012279b:	89 d7                	mov    %edx,%edi
f012279d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012279f:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01227a5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01227af:	89 d7                	mov    %edx,%edi
f01227b1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01227b3:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01227b9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227be:	b8 00 00 00 00       	mov    $0x0,%eax
f01227c3:	89 d7                	mov    %edx,%edi
f01227c5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01227c7:	e8 8d a8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01227cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227cf:	e8 53 15 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01227d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01227d7:	83 ec 0c             	sub    $0xc,%esp
f01227da:	68 00 fc 1f 00       	push   $0x1ffc00
f01227df:	e8 86 51 fe ff       	call   f010796a <kmalloc>
f01227e4:	83 c4 10             	add    $0x10,%esp
f01227e7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01227ed:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01227f3:	89 c1                	mov    %eax,%ecx
f01227f5:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01227fc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01227ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122804:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122807:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012280a:	ba 00 00 00 00       	mov    $0x0,%edx
f012280f:	f7 75 c8             	divl   -0x38(%ebp)
f0122812:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122815:	29 d0                	sub    %edx,%eax
f0122817:	89 c3                	mov    %eax,%ebx
f0122819:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0122820:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122825:	0f b6 d0             	movzbl %al,%edx
f0122828:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012282b:	01 d0                	add    %edx,%eax
f012282d:	48                   	dec    %eax
f012282e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0122831:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122834:	ba 00 00 00 00       	mov    $0x0,%edx
f0122839:	f7 75 c0             	divl   -0x40(%ebp)
f012283c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012283f:	29 d0                	sub    %edx,%eax
f0122841:	01 c3                	add    %eax,%ebx
f0122843:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012284a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012284f:	0f b6 c0             	movzbl %al,%eax
f0122852:	c1 e0 04             	shl    $0x4,%eax
f0122855:	89 c2                	mov    %eax,%edx
f0122857:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012285a:	01 d0                	add    %edx,%eax
f012285c:	48                   	dec    %eax
f012285d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122860:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122863:	ba 00 00 00 00       	mov    $0x0,%edx
f0122868:	f7 75 b8             	divl   -0x48(%ebp)
f012286b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012286e:	29 d0                	sub    %edx,%eax
f0122870:	01 d8                	add    %ebx,%eax
f0122872:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122877:	39 c1                	cmp    %eax,%ecx
f0122879:	74 17                	je     f0122892 <test_kfree_bestfirstfit+0x16c>
f012287b:	83 ec 04             	sub    $0x4,%esp
f012287e:	68 60 b6 13 f0       	push   $0xf013b660
f0122883:	68 95 06 00 00       	push   $0x695
f0122888:	68 7a b5 13 f0       	push   $0xf013b57a
f012288d:	e8 73 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122892:	e8 90 14 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122897:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012289a:	74 17                	je     f01228b3 <test_kfree_bestfirstfit+0x18d>
f012289c:	83 ec 04             	sub    $0x4,%esp
f012289f:	68 94 b5 13 f0       	push   $0xf013b594
f01228a4:	68 96 06 00 00       	push   $0x696
f01228a9:	68 7a b5 13 f0       	push   $0xf013b57a
f01228ae:	e8 52 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228b3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228b6:	e8 9e a7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01228bb:	29 c3                	sub    %eax,%ebx
f01228bd:	89 d8                	mov    %ebx,%eax
f01228bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01228c4:	74 17                	je     f01228dd <test_kfree_bestfirstfit+0x1b7>
f01228c6:	83 ec 04             	sub    $0x4,%esp
f01228c9:	68 fc b5 13 f0       	push   $0xf013b5fc
f01228ce:	68 97 06 00 00       	push   $0x697
f01228d3:	68 7a b5 13 f0       	push   $0xf013b57a
f01228d8:	e8 28 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01228dd:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01228e4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01228e7:	e8 6d a7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01228ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228ef:	e8 33 14 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01228f4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01228f7:	83 ec 0c             	sub    $0xc,%esp
f01228fa:	68 00 fc 1f 00       	push   $0x1ffc00
f01228ff:	e8 66 50 fe ff       	call   f010796a <kmalloc>
f0122904:	83 c4 10             	add    $0x10,%esp
f0122907:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012290d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122913:	89 c1                	mov    %eax,%ecx
f0122915:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012291c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012291f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122924:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122927:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012292a:	ba 00 00 00 00       	mov    $0x0,%edx
f012292f:	f7 75 b0             	divl   -0x50(%ebp)
f0122932:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122935:	29 d0                	sub    %edx,%eax
f0122937:	89 c3                	mov    %eax,%ebx
f0122939:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122940:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122945:	0f b6 d0             	movzbl %al,%edx
f0122948:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012294b:	01 d0                	add    %edx,%eax
f012294d:	48                   	dec    %eax
f012294e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122954:	ba 00 00 00 00       	mov    $0x0,%edx
f0122959:	f7 75 a8             	divl   -0x58(%ebp)
f012295c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012295f:	29 d0                	sub    %edx,%eax
f0122961:	01 c3                	add    %eax,%ebx
f0122963:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012296a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012296f:	0f b6 c0             	movzbl %al,%eax
f0122972:	c1 e0 04             	shl    $0x4,%eax
f0122975:	89 c2                	mov    %eax,%edx
f0122977:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012297a:	01 d0                	add    %edx,%eax
f012297c:	48                   	dec    %eax
f012297d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122980:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122983:	ba 00 00 00 00       	mov    $0x0,%edx
f0122988:	f7 75 a0             	divl   -0x60(%ebp)
f012298b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012298e:	29 d0                	sub    %edx,%eax
f0122990:	01 d8                	add    %ebx,%eax
f0122992:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122997:	39 c1                	cmp    %eax,%ecx
f0122999:	74 17                	je     f01229b2 <test_kfree_bestfirstfit+0x28c>
f012299b:	83 ec 04             	sub    $0x4,%esp
f012299e:	68 60 b6 13 f0       	push   $0xf013b660
f01229a3:	68 9e 06 00 00       	push   $0x69e
f01229a8:	68 7a b5 13 f0       	push   $0xf013b57a
f01229ad:	e8 53 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229b2:	e8 70 13 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01229b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229ba:	74 17                	je     f01229d3 <test_kfree_bestfirstfit+0x2ad>
f01229bc:	83 ec 04             	sub    $0x4,%esp
f01229bf:	68 94 b5 13 f0       	push   $0xf013b594
f01229c4:	68 9f 06 00 00       	push   $0x69f
f01229c9:	68 7a b5 13 f0       	push   $0xf013b57a
f01229ce:	e8 32 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229d3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229d6:	e8 7e a6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01229db:	29 c3                	sub    %eax,%ebx
f01229dd:	89 d8                	mov    %ebx,%eax
f01229df:	3d 00 02 00 00       	cmp    $0x200,%eax
f01229e4:	74 17                	je     f01229fd <test_kfree_bestfirstfit+0x2d7>
f01229e6:	83 ec 04             	sub    $0x4,%esp
f01229e9:	68 fc b5 13 f0       	push   $0xf013b5fc
f01229ee:	68 a0 06 00 00       	push   $0x6a0
f01229f3:	68 7a b5 13 f0       	push   $0xf013b57a
f01229f8:	e8 08 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01229fd:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122a04:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a07:	e8 4d a6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122a0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a0f:	e8 13 13 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122a14:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122a17:	83 ec 0c             	sub    $0xc,%esp
f0122a1a:	68 00 08 00 00       	push   $0x800
f0122a1f:	e8 46 4f fe ff       	call   f010796a <kmalloc>
f0122a24:	83 c4 10             	add    $0x10,%esp
f0122a27:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a2d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122a33:	89 c1                	mov    %eax,%ecx
f0122a35:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122a3c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122a3f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a44:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122a47:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a4f:	f7 75 98             	divl   -0x68(%ebp)
f0122a52:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a55:	29 d0                	sub    %edx,%eax
f0122a57:	89 c3                	mov    %eax,%ebx
f0122a59:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122a60:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122a65:	0f b6 d0             	movzbl %al,%edx
f0122a68:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122a6b:	01 d0                	add    %edx,%eax
f0122a6d:	48                   	dec    %eax
f0122a6e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122a71:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a79:	f7 75 90             	divl   -0x70(%ebp)
f0122a7c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122a7f:	29 d0                	sub    %edx,%eax
f0122a81:	01 c3                	add    %eax,%ebx
f0122a83:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122a8a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122a8f:	0f b6 c0             	movzbl %al,%eax
f0122a92:	c1 e0 04             	shl    $0x4,%eax
f0122a95:	89 c2                	mov    %eax,%edx
f0122a97:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122a9a:	01 d0                	add    %edx,%eax
f0122a9c:	48                   	dec    %eax
f0122a9d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122aa0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122aa3:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aa8:	f7 75 88             	divl   -0x78(%ebp)
f0122aab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122aae:	29 d0                	sub    %edx,%eax
f0122ab0:	01 d8                	add    %ebx,%eax
f0122ab2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ab7:	39 c1                	cmp    %eax,%ecx
f0122ab9:	74 17                	je     f0122ad2 <test_kfree_bestfirstfit+0x3ac>
f0122abb:	83 ec 04             	sub    $0x4,%esp
f0122abe:	68 60 b6 13 f0       	push   $0xf013b660
f0122ac3:	68 a7 06 00 00       	push   $0x6a7
f0122ac8:	68 7a b5 13 f0       	push   $0xf013b57a
f0122acd:	e8 33 d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ad2:	e8 50 12 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122ad7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ada:	74 17                	je     f0122af3 <test_kfree_bestfirstfit+0x3cd>
f0122adc:	83 ec 04             	sub    $0x4,%esp
f0122adf:	68 94 b5 13 f0       	push   $0xf013b594
f0122ae4:	68 a8 06 00 00       	push   $0x6a8
f0122ae9:	68 7a b5 13 f0       	push   $0xf013b57a
f0122aee:	e8 12 d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122af3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122af6:	e8 5e a5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122afb:	29 c3                	sub    %eax,%ebx
f0122afd:	89 d8                	mov    %ebx,%eax
f0122aff:	83 f8 01             	cmp    $0x1,%eax
f0122b02:	74 17                	je     f0122b1b <test_kfree_bestfirstfit+0x3f5>
f0122b04:	83 ec 04             	sub    $0x4,%esp
f0122b07:	68 fc b5 13 f0       	push   $0xf013b5fc
f0122b0c:	68 a9 06 00 00       	push   $0x6a9
f0122b11:	68 7a b5 13 f0       	push   $0xf013b57a
f0122b16:	e8 ea d6 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122b1b:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122b22:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122b25:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122b2b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122b2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b35:	eb 0e                	jmp    f0122b45 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122b37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b3a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b3d:	01 d0                	add    %edx,%eax
f0122b3f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122b42:	ff 45 f4             	incl   -0xc(%ebp)
f0122b45:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122b4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b4e:	7f e7                	jg     f0122b37 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b50:	e8 04 a5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122b55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b58:	e8 ca 11 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122b5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122b60:	83 ec 0c             	sub    $0xc,%esp
f0122b63:	68 00 08 00 00       	push   $0x800
f0122b68:	e8 fd 4d fe ff       	call   f010796a <kmalloc>
f0122b6d:	83 c4 10             	add    $0x10,%esp
f0122b70:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b76:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122b7c:	89 c1                	mov    %eax,%ecx
f0122b7e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122b85:	10 00 00 
f0122b88:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122b8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122b93:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122b99:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ba4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122baa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122bb0:	29 d0                	sub    %edx,%eax
f0122bb2:	89 c3                	mov    %eax,%ebx
f0122bb4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122bbb:	10 00 00 
f0122bbe:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122bc3:	0f b6 d0             	movzbl %al,%edx
f0122bc6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122bcc:	01 d0                	add    %edx,%eax
f0122bce:	48                   	dec    %eax
f0122bcf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122bd5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122bdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122be0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122be6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122bec:	29 d0                	sub    %edx,%eax
f0122bee:	01 c3                	add    %eax,%ebx
f0122bf0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122bf7:	10 00 00 
f0122bfa:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122bff:	0f b6 c0             	movzbl %al,%eax
f0122c02:	c1 e0 04             	shl    $0x4,%eax
f0122c05:	89 c2                	mov    %eax,%edx
f0122c07:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122c0d:	01 d0                	add    %edx,%eax
f0122c0f:	48                   	dec    %eax
f0122c10:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122c16:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c21:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122c27:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c2d:	29 d0                	sub    %edx,%eax
f0122c2f:	01 d8                	add    %ebx,%eax
f0122c31:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122c36:	39 c1                	cmp    %eax,%ecx
f0122c38:	74 17                	je     f0122c51 <test_kfree_bestfirstfit+0x52b>
f0122c3a:	83 ec 04             	sub    $0x4,%esp
f0122c3d:	68 60 b6 13 f0       	push   $0xf013b660
f0122c42:	68 b5 06 00 00       	push   $0x6b5
f0122c47:	68 7a b5 13 f0       	push   $0xf013b57a
f0122c4c:	e8 b4 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c51:	e8 d1 10 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122c56:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c59:	74 17                	je     f0122c72 <test_kfree_bestfirstfit+0x54c>
f0122c5b:	83 ec 04             	sub    $0x4,%esp
f0122c5e:	68 94 b5 13 f0       	push   $0xf013b594
f0122c63:	68 b6 06 00 00       	push   $0x6b6
f0122c68:	68 7a b5 13 f0       	push   $0xf013b57a
f0122c6d:	e8 93 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c72:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c75:	e8 df a3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122c7a:	29 c3                	sub    %eax,%ebx
f0122c7c:	89 d8                	mov    %ebx,%eax
f0122c7e:	83 f8 01             	cmp    $0x1,%eax
f0122c81:	74 17                	je     f0122c9a <test_kfree_bestfirstfit+0x574>
f0122c83:	83 ec 04             	sub    $0x4,%esp
f0122c86:	68 fc b5 13 f0       	push   $0xf013b5fc
f0122c8b:	68 b7 06 00 00       	push   $0x6b7
f0122c90:	68 7a b5 13 f0       	push   $0xf013b57a
f0122c95:	e8 6b d5 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122c9a:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122ca1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122ca4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122caa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122cad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122cb4:	eb 0e                	jmp    f0122cc4 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122cb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122cb9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cbc:	01 d0                	add    %edx,%eax
f0122cbe:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122cc1:	ff 45 f4             	incl   -0xc(%ebp)
f0122cc4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122cca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ccd:	7f e7                	jg     f0122cb6 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ccf:	e8 85 a3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122cd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cd7:	e8 4b 10 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122cdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122cdf:	83 ec 0c             	sub    $0xc,%esp
f0122ce2:	68 00 1c 00 00       	push   $0x1c00
f0122ce7:	e8 7e 4c fe ff       	call   f010796a <kmalloc>
f0122cec:	83 c4 10             	add    $0x10,%esp
f0122cef:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122cf5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122cfb:	89 c1                	mov    %eax,%ecx
f0122cfd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122d04:	10 00 00 
f0122d07:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d12:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122d18:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d23:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122d29:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d2f:	29 d0                	sub    %edx,%eax
f0122d31:	89 c3                	mov    %eax,%ebx
f0122d33:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122d3a:	10 00 00 
f0122d3d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122d42:	0f b6 d0             	movzbl %al,%edx
f0122d45:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d4b:	01 d0                	add    %edx,%eax
f0122d4d:	48                   	dec    %eax
f0122d4e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122d54:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d5f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122d65:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d6b:	29 d0                	sub    %edx,%eax
f0122d6d:	01 c3                	add    %eax,%ebx
f0122d6f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122d76:	10 00 00 
f0122d79:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122d7e:	0f b6 c0             	movzbl %al,%eax
f0122d81:	c1 e0 04             	shl    $0x4,%eax
f0122d84:	89 c2                	mov    %eax,%edx
f0122d86:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122d8c:	01 d0                	add    %edx,%eax
f0122d8e:	48                   	dec    %eax
f0122d8f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122d95:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122d9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122da0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122da6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122dac:	29 d0                	sub    %edx,%eax
f0122dae:	01 d8                	add    %ebx,%eax
f0122db0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122db5:	39 c1                	cmp    %eax,%ecx
f0122db7:	74 17                	je     f0122dd0 <test_kfree_bestfirstfit+0x6aa>
f0122db9:	83 ec 04             	sub    $0x4,%esp
f0122dbc:	68 60 b6 13 f0       	push   $0xf013b660
f0122dc1:	68 c3 06 00 00       	push   $0x6c3
f0122dc6:	68 7a b5 13 f0       	push   $0xf013b57a
f0122dcb:	e8 35 d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dd0:	e8 52 0f fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122dd5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122dd8:	74 17                	je     f0122df1 <test_kfree_bestfirstfit+0x6cb>
f0122dda:	83 ec 04             	sub    $0x4,%esp
f0122ddd:	68 94 b5 13 f0       	push   $0xf013b594
f0122de2:	68 c4 06 00 00       	push   $0x6c4
f0122de7:	68 7a b5 13 f0       	push   $0xf013b57a
f0122dec:	e8 14 d4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122df1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122df4:	e8 60 a2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122df9:	29 c3                	sub    %eax,%ebx
f0122dfb:	89 d8                	mov    %ebx,%eax
f0122dfd:	83 f8 02             	cmp    $0x2,%eax
f0122e00:	74 17                	je     f0122e19 <test_kfree_bestfirstfit+0x6f3>
f0122e02:	83 ec 04             	sub    $0x4,%esp
f0122e05:	68 fc b5 13 f0       	push   $0xf013b5fc
f0122e0a:	68 c5 06 00 00       	push   $0x6c5
f0122e0f:	68 7a b5 13 f0       	push   $0xf013b57a
f0122e14:	e8 ec d3 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122e19:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122e20:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122e23:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122e29:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122e2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e33:	eb 0e                	jmp    f0122e43 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122e35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e38:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e3b:	01 d0                	add    %edx,%eax
f0122e3d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122e40:	ff 45 f4             	incl   -0xc(%ebp)
f0122e43:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122e49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e4c:	7f e7                	jg     f0122e35 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e4e:	e8 06 a2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122e53:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e56:	e8 cc 0e fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122e5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122e5e:	83 ec 0c             	sub    $0xc,%esp
f0122e61:	68 00 fc 2f 00       	push   $0x2ffc00
f0122e66:	e8 ff 4a fe ff       	call   f010796a <kmalloc>
f0122e6b:	83 c4 10             	add    $0x10,%esp
f0122e6e:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e74:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122e7a:	89 c1                	mov    %eax,%ecx
f0122e7c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122e83:	10 00 00 
f0122e86:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122e8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e91:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122e97:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122e9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ea2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122ea8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122eae:	29 d0                	sub    %edx,%eax
f0122eb0:	89 c3                	mov    %eax,%ebx
f0122eb2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122eb9:	10 00 00 
f0122ebc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122ec1:	0f b6 d0             	movzbl %al,%edx
f0122ec4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122eca:	01 d0                	add    %edx,%eax
f0122ecc:	48                   	dec    %eax
f0122ecd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122ed3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ed9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ede:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122ee4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122eea:	29 d0                	sub    %edx,%eax
f0122eec:	01 c3                	add    %eax,%ebx
f0122eee:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122ef5:	10 00 00 
f0122ef8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0122efd:	0f b6 c0             	movzbl %al,%eax
f0122f00:	c1 e0 04             	shl    $0x4,%eax
f0122f03:	89 c2                	mov    %eax,%edx
f0122f05:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f0b:	01 d0                	add    %edx,%eax
f0122f0d:	48                   	dec    %eax
f0122f0e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122f14:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f1f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122f25:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f2b:	29 d0                	sub    %edx,%eax
f0122f2d:	01 d8                	add    %ebx,%eax
f0122f2f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122f34:	39 c1                	cmp    %eax,%ecx
f0122f36:	74 17                	je     f0122f4f <test_kfree_bestfirstfit+0x829>
f0122f38:	83 ec 04             	sub    $0x4,%esp
f0122f3b:	68 60 b6 13 f0       	push   $0xf013b660
f0122f40:	68 d1 06 00 00       	push   $0x6d1
f0122f45:	68 7a b5 13 f0       	push   $0xf013b57a
f0122f4a:	e8 b6 d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f4f:	e8 d3 0d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122f54:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f57:	74 17                	je     f0122f70 <test_kfree_bestfirstfit+0x84a>
f0122f59:	83 ec 04             	sub    $0x4,%esp
f0122f5c:	68 94 b5 13 f0       	push   $0xf013b594
f0122f61:	68 d2 06 00 00       	push   $0x6d2
f0122f66:	68 7a b5 13 f0       	push   $0xf013b57a
f0122f6b:	e8 95 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f70:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122f73:	e8 e1 a0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122f78:	29 c3                	sub    %eax,%ebx
f0122f7a:	89 d8                	mov    %ebx,%eax
f0122f7c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122f81:	74 17                	je     f0122f9a <test_kfree_bestfirstfit+0x874>
f0122f83:	83 ec 04             	sub    $0x4,%esp
f0122f86:	68 fc b5 13 f0       	push   $0xf013b5fc
f0122f8b:	68 d3 06 00 00       	push   $0x6d3
f0122f90:	68 7a b5 13 f0       	push   $0xf013b57a
f0122f95:	e8 6b d2 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122f9a:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122fa1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122fa4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122faa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122fad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fb4:	eb 0e                	jmp    f0122fc4 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122fb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122fb9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fbc:	01 d0                	add    %edx,%eax
f0122fbe:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122fc1:	ff 45 f4             	incl   -0xc(%ebp)
f0122fc4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122fca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122fcd:	7f e7                	jg     f0122fb6 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fcf:	e8 85 a0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122fd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fd7:	e8 4b 0d fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0122fdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122fdf:	83 ec 0c             	sub    $0xc,%esp
f0122fe2:	68 00 fc 5f 00       	push   $0x5ffc00
f0122fe7:	e8 7e 49 fe ff       	call   f010796a <kmalloc>
f0122fec:	83 c4 10             	add    $0x10,%esp
f0122fef:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ff5:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122ffb:	89 c1                	mov    %eax,%ecx
f0122ffd:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0123004:	10 00 00 
f0123007:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012300d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123012:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0123018:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012301e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123023:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0123029:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012302f:	29 d0                	sub    %edx,%eax
f0123031:	89 c3                	mov    %eax,%ebx
f0123033:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012303a:	10 00 00 
f012303d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0123042:	0f b6 d0             	movzbl %al,%edx
f0123045:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012304b:	01 d0                	add    %edx,%eax
f012304d:	48                   	dec    %eax
f012304e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0123054:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012305a:	ba 00 00 00 00       	mov    $0x0,%edx
f012305f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0123065:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012306b:	29 d0                	sub    %edx,%eax
f012306d:	01 c3                	add    %eax,%ebx
f012306f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0123076:	10 00 00 
f0123079:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012307e:	0f b6 c0             	movzbl %al,%eax
f0123081:	c1 e0 04             	shl    $0x4,%eax
f0123084:	89 c2                	mov    %eax,%edx
f0123086:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012308c:	01 d0                	add    %edx,%eax
f012308e:	48                   	dec    %eax
f012308f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0123095:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012309b:	ba 00 00 00 00       	mov    $0x0,%edx
f01230a0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01230a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230ac:	29 d0                	sub    %edx,%eax
f01230ae:	01 d8                	add    %ebx,%eax
f01230b0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01230b5:	39 c1                	cmp    %eax,%ecx
f01230b7:	74 17                	je     f01230d0 <test_kfree_bestfirstfit+0x9aa>
f01230b9:	83 ec 04             	sub    $0x4,%esp
f01230bc:	68 60 b6 13 f0       	push   $0xf013b660
f01230c1:	68 df 06 00 00       	push   $0x6df
f01230c6:	68 7a b5 13 f0       	push   $0xf013b57a
f01230cb:	e8 35 d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230d0:	e8 52 0c fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01230d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230d8:	74 17                	je     f01230f1 <test_kfree_bestfirstfit+0x9cb>
f01230da:	83 ec 04             	sub    $0x4,%esp
f01230dd:	68 94 b5 13 f0       	push   $0xf013b594
f01230e2:	68 e0 06 00 00       	push   $0x6e0
f01230e7:	68 7a b5 13 f0       	push   $0xf013b57a
f01230ec:	e8 14 d1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01230f1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01230f4:	e8 60 9f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01230f9:	29 c3                	sub    %eax,%ebx
f01230fb:	89 d8                	mov    %ebx,%eax
f01230fd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123102:	74 17                	je     f012311b <test_kfree_bestfirstfit+0x9f5>
f0123104:	83 ec 04             	sub    $0x4,%esp
f0123107:	68 fc b5 13 f0       	push   $0xf013b5fc
f012310c:	68 e1 06 00 00       	push   $0x6e1
f0123111:	68 7a b5 13 f0       	push   $0xf013b57a
f0123116:	e8 ea d0 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012311b:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0123122:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123125:	e8 2f 9f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012312a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012312d:	e8 f5 0b fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123132:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123135:	83 ec 0c             	sub    $0xc,%esp
f0123138:	68 00 38 00 00       	push   $0x3800
f012313d:	e8 28 48 fe ff       	call   f010796a <kmalloc>
f0123142:	83 c4 10             	add    $0x10,%esp
f0123145:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012314b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123151:	89 c1                	mov    %eax,%ecx
f0123153:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012315a:	10 00 00 
f012315d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123163:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123168:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012316e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123174:	ba 00 00 00 00       	mov    $0x0,%edx
f0123179:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012317f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123185:	29 d0                	sub    %edx,%eax
f0123187:	89 c3                	mov    %eax,%ebx
f0123189:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0123190:	10 00 00 
f0123193:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0123198:	0f b6 d0             	movzbl %al,%edx
f012319b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01231a1:	01 d0                	add    %edx,%eax
f01231a3:	48                   	dec    %eax
f01231a4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01231aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01231b5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01231bb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231c1:	29 d0                	sub    %edx,%eax
f01231c3:	01 c3                	add    %eax,%ebx
f01231c5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01231cc:	10 00 00 
f01231cf:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01231d4:	0f b6 c0             	movzbl %al,%eax
f01231d7:	c1 e0 04             	shl    $0x4,%eax
f01231da:	89 c2                	mov    %eax,%edx
f01231dc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01231e2:	01 d0                	add    %edx,%eax
f01231e4:	48                   	dec    %eax
f01231e5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01231eb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01231f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01231f6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01231fc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123202:	29 d0                	sub    %edx,%eax
f0123204:	01 d8                	add    %ebx,%eax
f0123206:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012320b:	39 c1                	cmp    %eax,%ecx
f012320d:	74 17                	je     f0123226 <test_kfree_bestfirstfit+0xb00>
f012320f:	83 ec 04             	sub    $0x4,%esp
f0123212:	68 60 b6 13 f0       	push   $0xf013b660
f0123217:	68 e8 06 00 00       	push   $0x6e8
f012321c:	68 7a b5 13 f0       	push   $0xf013b57a
f0123221:	e8 df cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123226:	e8 fc 0a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012322b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012322e:	74 17                	je     f0123247 <test_kfree_bestfirstfit+0xb21>
f0123230:	83 ec 04             	sub    $0x4,%esp
f0123233:	68 94 b5 13 f0       	push   $0xf013b594
f0123238:	68 e9 06 00 00       	push   $0x6e9
f012323d:	68 7a b5 13 f0       	push   $0xf013b57a
f0123242:	e8 be cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123247:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012324a:	e8 0a 9e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012324f:	29 c3                	sub    %eax,%ebx
f0123251:	89 d8                	mov    %ebx,%eax
f0123253:	83 f8 04             	cmp    $0x4,%eax
f0123256:	74 17                	je     f012326f <test_kfree_bestfirstfit+0xb49>
f0123258:	83 ec 04             	sub    $0x4,%esp
f012325b:	68 fc b5 13 f0       	push   $0xf013b5fc
f0123260:	68 ea 06 00 00       	push   $0x6ea
f0123265:	68 7a b5 13 f0       	push   $0xf013b57a
f012326a:	e8 96 cf fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012326f:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0123276:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0123279:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012327f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0123282:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123289:	eb 0e                	jmp    f0123299 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f012328b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012328e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123291:	01 d0                	add    %edx,%eax
f0123293:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123296:	ff 45 f4             	incl   -0xc(%ebp)
f0123299:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012329f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232a2:	7f e7                	jg     f012328b <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01232a4:	e8 b0 9d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01232a9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01232af:	e8 73 0a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01232b4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01232ba:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01232c0:	83 ec 0c             	sub    $0xc,%esp
f01232c3:	50                   	push   %eax
f01232c4:	e8 ea 47 fe ff       	call   f0107ab3 <kfree>
f01232c9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232cc:	e8 56 0a fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01232d1:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01232d7:	74 17                	je     f01232f0 <test_kfree_bestfirstfit+0xbca>
f01232d9:	83 ec 04             	sub    $0x4,%esp
f01232dc:	68 94 b5 13 f0       	push   $0xf013b594
f01232e1:	68 f9 06 00 00       	push   $0x6f9
f01232e6:	68 7a b5 13 f0       	push   $0xf013b57a
f01232eb:	e8 15 cf fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01232f0:	e8 64 9d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01232f5:	89 c2                	mov    %eax,%edx
f01232f7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01232fd:	29 c2                	sub    %eax,%edx
f01232ff:	89 d0                	mov    %edx,%eax
f0123301:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123306:	74 17                	je     f012331f <test_kfree_bestfirstfit+0xbf9>
f0123308:	83 ec 04             	sub    $0x4,%esp
f012330b:	68 04 bd 13 f0       	push   $0xf013bd04
f0123310:	68 fa 06 00 00       	push   $0x6fa
f0123315:	68 7a b5 13 f0       	push   $0xf013b57a
f012331a:	e8 e6 ce fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012331f:	e8 35 9d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123324:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012332a:	e8 f8 09 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012332f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0123335:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012333b:	83 ec 0c             	sub    $0xc,%esp
f012333e:	50                   	push   %eax
f012333f:	e8 6f 47 fe ff       	call   f0107ab3 <kfree>
f0123344:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123347:	e8 db 09 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012334c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123352:	74 17                	je     f012336b <test_kfree_bestfirstfit+0xc45>
f0123354:	83 ec 04             	sub    $0x4,%esp
f0123357:	68 94 b5 13 f0       	push   $0xf013b594
f012335c:	68 00 07 00 00       	push   $0x700
f0123361:	68 7a b5 13 f0       	push   $0xf013b57a
f0123366:	e8 9a ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012336b:	e8 e9 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123370:	89 c2                	mov    %eax,%edx
f0123372:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123378:	29 c2                	sub    %eax,%edx
f012337a:	89 d0                	mov    %edx,%eax
f012337c:	83 f8 01             	cmp    $0x1,%eax
f012337f:	74 17                	je     f0123398 <test_kfree_bestfirstfit+0xc72>
f0123381:	83 ec 04             	sub    $0x4,%esp
f0123384:	68 04 bd 13 f0       	push   $0xf013bd04
f0123389:	68 01 07 00 00       	push   $0x701
f012338e:	68 7a b5 13 f0       	push   $0xf013b57a
f0123393:	e8 6d ce fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123398:	e8 bc 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012339d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233a3:	e8 7f 09 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01233a8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01233ae:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01233b4:	83 ec 0c             	sub    $0xc,%esp
f01233b7:	50                   	push   %eax
f01233b8:	e8 f6 46 fe ff       	call   f0107ab3 <kfree>
f01233bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233c0:	e8 62 09 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01233c5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01233cb:	74 17                	je     f01233e4 <test_kfree_bestfirstfit+0xcbe>
f01233cd:	83 ec 04             	sub    $0x4,%esp
f01233d0:	68 94 b5 13 f0       	push   $0xf013b594
f01233d5:	68 07 07 00 00       	push   $0x707
f01233da:	68 7a b5 13 f0       	push   $0xf013b57a
f01233df:	e8 21 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01233e4:	e8 70 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01233e9:	89 c2                	mov    %eax,%edx
f01233eb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01233f1:	29 c2                	sub    %eax,%edx
f01233f3:	89 d0                	mov    %edx,%eax
f01233f5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01233fa:	74 17                	je     f0123413 <test_kfree_bestfirstfit+0xced>
f01233fc:	83 ec 04             	sub    $0x4,%esp
f01233ff:	68 04 bd 13 f0       	push   $0xf013bd04
f0123404:	68 08 07 00 00       	push   $0x708
f0123409:	68 7a b5 13 f0       	push   $0xf013b57a
f012340e:	e8 f2 cd fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123413:	e8 41 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123418:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012341e:	e8 04 09 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123423:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123429:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012342f:	83 ec 0c             	sub    $0xc,%esp
f0123432:	50                   	push   %eax
f0123433:	e8 7b 46 fe ff       	call   f0107ab3 <kfree>
f0123438:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012343b:	e8 e7 08 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123440:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123446:	74 17                	je     f012345f <test_kfree_bestfirstfit+0xd39>
f0123448:	83 ec 04             	sub    $0x4,%esp
f012344b:	68 94 b5 13 f0       	push   $0xf013b594
f0123450:	68 0e 07 00 00       	push   $0x70e
f0123455:	68 7a b5 13 f0       	push   $0xf013b57a
f012345a:	e8 a6 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012345f:	e8 f5 9b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123464:	89 c2                	mov    %eax,%edx
f0123466:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012346c:	29 c2                	sub    %eax,%edx
f012346e:	89 d0                	mov    %edx,%eax
f0123470:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123475:	74 17                	je     f012348e <test_kfree_bestfirstfit+0xd68>
f0123477:	83 ec 04             	sub    $0x4,%esp
f012347a:	68 04 bd 13 f0       	push   $0xf013bd04
f012347f:	68 0f 07 00 00       	push   $0x70f
f0123484:	68 7a b5 13 f0       	push   $0xf013b57a
f0123489:	e8 77 cd fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012348e:	83 ec 0c             	sub    $0xc,%esp
f0123491:	68 3c bd 13 f0       	push   $0xf013bd3c
f0123496:	e8 73 d8 fd ff       	call   f0100d0e <cprintf>
f012349b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012349e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01234a4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01234a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01234ae:	eb 1e                	jmp    f01234ce <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01234b0:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01234b6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01234b9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01234bc:	01 c8                	add    %ecx,%eax
f01234be:	8a 00                	mov    (%eax),%al
f01234c0:	0f be c0             	movsbl %al,%eax
f01234c3:	01 d0                	add    %edx,%eax
f01234c5:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01234cb:	ff 45 f4             	incl   -0xc(%ebp)
f01234ce:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01234d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01234d7:	7f d7                	jg     f01234b0 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01234d9:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01234df:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01234e5:	89 c1                	mov    %eax,%ecx
f01234e7:	01 c9                	add    %ecx,%ecx
f01234e9:	01 c8                	add    %ecx,%eax
f01234eb:	39 c2                	cmp    %eax,%edx
f01234ed:	74 17                	je     f0123506 <test_kfree_bestfirstfit+0xde0>
f01234ef:	83 ec 04             	sub    $0x4,%esp
f01234f2:	68 60 bd 13 f0       	push   $0xf013bd60
f01234f7:	68 1c 07 00 00       	push   $0x71c
f01234fc:	68 7a b5 13 f0       	push   $0xf013b57a
f0123501:	e8 ff cc fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123506:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012350c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012350f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123516:	eb 1e                	jmp    f0123536 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0123518:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012351e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123521:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123524:	01 c8                	add    %ecx,%eax
f0123526:	8a 00                	mov    (%eax),%al
f0123528:	0f be c0             	movsbl %al,%eax
f012352b:	01 d0                	add    %edx,%eax
f012352d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0123533:	ff 45 f4             	incl   -0xc(%ebp)
f0123536:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012353c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012353f:	7f d7                	jg     f0123518 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0123541:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123547:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012354d:	c1 e2 02             	shl    $0x2,%edx
f0123550:	39 d0                	cmp    %edx,%eax
f0123552:	74 17                	je     f012356b <test_kfree_bestfirstfit+0xe45>
f0123554:	83 ec 04             	sub    $0x4,%esp
f0123557:	68 60 bd 13 f0       	push   $0xf013bd60
f012355c:	68 24 07 00 00       	push   $0x724
f0123561:	68 7a b5 13 f0       	push   $0xf013b57a
f0123566:	e8 9a cc fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012356b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123571:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0123574:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012357b:	eb 1e                	jmp    f012359b <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f012357d:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0123583:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123586:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123589:	01 c8                	add    %ecx,%eax
f012358b:	8a 00                	mov    (%eax),%al
f012358d:	0f be c0             	movsbl %al,%eax
f0123590:	01 d0                	add    %edx,%eax
f0123592:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123598:	ff 45 f4             	incl   -0xc(%ebp)
f012359b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01235a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01235a4:	7f d7                	jg     f012357d <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01235a6:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01235ac:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01235b2:	89 d0                	mov    %edx,%eax
f01235b4:	c1 e0 02             	shl    $0x2,%eax
f01235b7:	01 d0                	add    %edx,%eax
f01235b9:	39 c1                	cmp    %eax,%ecx
f01235bb:	74 17                	je     f01235d4 <test_kfree_bestfirstfit+0xeae>
f01235bd:	83 ec 04             	sub    $0x4,%esp
f01235c0:	68 60 bd 13 f0       	push   $0xf013bd60
f01235c5:	68 2c 07 00 00       	push   $0x72c
f01235ca:	68 7a b5 13 f0       	push   $0xf013b57a
f01235cf:	e8 31 cc fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01235d4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01235da:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01235dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01235e4:	eb 1e                	jmp    f0123604 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01235e6:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01235ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01235ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235f2:	01 c8                	add    %ecx,%eax
f01235f4:	8a 00                	mov    (%eax),%al
f01235f6:	0f be c0             	movsbl %al,%eax
f01235f9:	01 d0                	add    %edx,%eax
f01235fb:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123601:	ff 45 f4             	incl   -0xc(%ebp)
f0123604:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012360a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012360d:	7f d7                	jg     f01235e6 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012360f:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0123615:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012361b:	89 d0                	mov    %edx,%eax
f012361d:	01 c0                	add    %eax,%eax
f012361f:	01 d0                	add    %edx,%eax
f0123621:	01 c0                	add    %eax,%eax
f0123623:	01 d0                	add    %edx,%eax
f0123625:	39 c1                	cmp    %eax,%ecx
f0123627:	74 17                	je     f0123640 <test_kfree_bestfirstfit+0xf1a>
f0123629:	83 ec 04             	sub    $0x4,%esp
f012362c:	68 60 bd 13 f0       	push   $0xf013bd60
f0123631:	68 34 07 00 00       	push   $0x734
f0123636:	68 7a b5 13 f0       	push   $0xf013b57a
f012363b:	e8 c5 cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0123640:	83 ec 0c             	sub    $0xc,%esp
f0123643:	68 93 bd 13 f0       	push   $0xf013bd93
f0123648:	e8 c1 d6 fd ff       	call   f0100d0e <cprintf>
f012364d:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123650:	e8 04 9a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123655:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123658:	e8 ca 06 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012365d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0123660:	83 ec 0c             	sub    $0xc,%esp
f0123663:	68 00 00 30 00       	push   $0x300000
f0123668:	e8 fd 42 fe ff       	call   f010796a <kmalloc>
f012366d:	83 c4 10             	add    $0x10,%esp
f0123670:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123676:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012367c:	89 c1                	mov    %eax,%ecx
f012367e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0123685:	10 00 00 
f0123688:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012368e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123693:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0123699:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012369f:	ba 00 00 00 00       	mov    $0x0,%edx
f01236a4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01236aa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236b0:	29 d0                	sub    %edx,%eax
f01236b2:	89 c3                	mov    %eax,%ebx
f01236b4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01236bb:	10 00 00 
f01236be:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01236c3:	0f b6 d0             	movzbl %al,%edx
f01236c6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01236cc:	01 d0                	add    %edx,%eax
f01236ce:	48                   	dec    %eax
f01236cf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01236d5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01236db:	ba 00 00 00 00       	mov    $0x0,%edx
f01236e0:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01236e6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01236ec:	29 d0                	sub    %edx,%eax
f01236ee:	01 c3                	add    %eax,%ebx
f01236f0:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01236f7:	10 00 00 
f01236fa:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01236ff:	0f b6 c0             	movzbl %al,%eax
f0123702:	c1 e0 04             	shl    $0x4,%eax
f0123705:	89 c2                	mov    %eax,%edx
f0123707:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012370d:	01 d0                	add    %edx,%eax
f012370f:	48                   	dec    %eax
f0123710:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0123716:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012371c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123721:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0123727:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012372d:	29 d0                	sub    %edx,%eax
f012372f:	01 d8                	add    %ebx,%eax
f0123731:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123736:	39 c1                	cmp    %eax,%ecx
f0123738:	74 17                	je     f0123751 <test_kfree_bestfirstfit+0x102b>
f012373a:	83 ec 04             	sub    $0x4,%esp
f012373d:	68 60 b6 13 f0       	push   $0xf013b660
f0123742:	68 3f 07 00 00       	push   $0x73f
f0123747:	68 7a b5 13 f0       	push   $0xf013b57a
f012374c:	e8 b4 ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123751:	e8 d1 05 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123756:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123759:	74 17                	je     f0123772 <test_kfree_bestfirstfit+0x104c>
f012375b:	83 ec 04             	sub    $0x4,%esp
f012375e:	68 94 b5 13 f0       	push   $0xf013b594
f0123763:	68 40 07 00 00       	push   $0x740
f0123768:	68 7a b5 13 f0       	push   $0xf013b57a
f012376d:	e8 93 ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123772:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123775:	e8 df 98 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012377a:	29 c3                	sub    %eax,%ebx
f012377c:	89 d8                	mov    %ebx,%eax
f012377e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123783:	74 17                	je     f012379c <test_kfree_bestfirstfit+0x1076>
f0123785:	83 ec 04             	sub    $0x4,%esp
f0123788:	68 fc b5 13 f0       	push   $0xf013b5fc
f012378d:	68 41 07 00 00       	push   $0x741
f0123792:	68 7a b5 13 f0       	push   $0xf013b57a
f0123797:	e8 69 ca fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012379c:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01237a3:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01237a6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01237ac:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01237af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01237b6:	eb 0e                	jmp    f01237c6 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01237b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01237bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01237be:	01 d0                	add    %edx,%eax
f01237c0:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01237c3:	ff 45 f4             	incl   -0xc(%ebp)
f01237c6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01237cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01237cf:	7f e7                	jg     f01237b8 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01237d1:	e8 83 98 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01237d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237d9:	e8 49 05 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01237de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01237e1:	83 ec 0c             	sub    $0xc,%esp
f01237e4:	68 00 08 00 00       	push   $0x800
f01237e9:	e8 7c 41 fe ff       	call   f010796a <kmalloc>
f01237ee:	83 c4 10             	add    $0x10,%esp
f01237f1:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01237f7:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01237fd:	89 c1                	mov    %eax,%ecx
f01237ff:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123806:	10 00 00 
f0123809:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012380f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123814:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012381a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123820:	ba 00 00 00 00       	mov    $0x0,%edx
f0123825:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012382b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123831:	29 d0                	sub    %edx,%eax
f0123833:	89 c3                	mov    %eax,%ebx
f0123835:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012383c:	10 00 00 
f012383f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0123844:	0f b6 d0             	movzbl %al,%edx
f0123847:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012384d:	01 d0                	add    %edx,%eax
f012384f:	48                   	dec    %eax
f0123850:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123856:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012385c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123861:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123867:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012386d:	29 d0                	sub    %edx,%eax
f012386f:	01 c3                	add    %eax,%ebx
f0123871:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123878:	10 00 00 
f012387b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0123880:	0f b6 c0             	movzbl %al,%eax
f0123883:	c1 e0 04             	shl    $0x4,%eax
f0123886:	89 c2                	mov    %eax,%edx
f0123888:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012388e:	01 d0                	add    %edx,%eax
f0123890:	48                   	dec    %eax
f0123891:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123897:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012389d:	ba 00 00 00 00       	mov    $0x0,%edx
f01238a2:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01238a8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238ae:	29 d0                	sub    %edx,%eax
f01238b0:	01 d8                	add    %ebx,%eax
f01238b2:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01238b7:	39 c1                	cmp    %eax,%ecx
f01238b9:	74 17                	je     f01238d2 <test_kfree_bestfirstfit+0x11ac>
f01238bb:	83 ec 04             	sub    $0x4,%esp
f01238be:	68 60 b6 13 f0       	push   $0xf013b660
f01238c3:	68 4d 07 00 00       	push   $0x74d
f01238c8:	68 7a b5 13 f0       	push   $0xf013b57a
f01238cd:	e8 33 c9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238d2:	e8 50 04 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f01238d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238da:	74 17                	je     f01238f3 <test_kfree_bestfirstfit+0x11cd>
f01238dc:	83 ec 04             	sub    $0x4,%esp
f01238df:	68 94 b5 13 f0       	push   $0xf013b594
f01238e4:	68 4e 07 00 00       	push   $0x74e
f01238e9:	68 7a b5 13 f0       	push   $0xf013b57a
f01238ee:	e8 12 c9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01238f3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01238f6:	e8 5e 97 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01238fb:	29 c3                	sub    %eax,%ebx
f01238fd:	89 d8                	mov    %ebx,%eax
f01238ff:	83 f8 01             	cmp    $0x1,%eax
f0123902:	74 17                	je     f012391b <test_kfree_bestfirstfit+0x11f5>
f0123904:	83 ec 04             	sub    $0x4,%esp
f0123907:	68 fc b5 13 f0       	push   $0xf013b5fc
f012390c:	68 4f 07 00 00       	push   $0x74f
f0123911:	68 7a b5 13 f0       	push   $0xf013b57a
f0123916:	e8 ea c8 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f012391b:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0123922:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123925:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012392b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012392e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123935:	eb 0e                	jmp    f0123945 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123937:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012393a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012393d:	01 d0                	add    %edx,%eax
f012393f:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123942:	ff 45 f4             	incl   -0xc(%ebp)
f0123945:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012394b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012394e:	7f e7                	jg     f0123937 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123950:	e8 04 97 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123955:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123958:	e8 ca 03 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f012395d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123960:	83 ec 0c             	sub    $0xc,%esp
f0123963:	68 00 00 10 00       	push   $0x100000
f0123968:	e8 fd 3f fe ff       	call   f010796a <kmalloc>
f012396d:	83 c4 10             	add    $0x10,%esp
f0123970:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123976:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012397c:	89 c1                	mov    %eax,%ecx
f012397e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123985:	10 00 00 
f0123988:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012398e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123993:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123999:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012399f:	ba 00 00 00 00       	mov    $0x0,%edx
f01239a4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01239aa:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239b0:	29 d0                	sub    %edx,%eax
f01239b2:	89 c3                	mov    %eax,%ebx
f01239b4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01239bb:	10 00 00 
f01239be:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01239c3:	0f b6 d0             	movzbl %al,%edx
f01239c6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01239cc:	01 d0                	add    %edx,%eax
f01239ce:	48                   	dec    %eax
f01239cf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01239d5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01239db:	ba 00 00 00 00       	mov    $0x0,%edx
f01239e0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01239e6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01239ec:	29 d0                	sub    %edx,%eax
f01239ee:	01 c3                	add    %eax,%ebx
f01239f0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01239f7:	10 00 00 
f01239fa:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01239ff:	0f b6 c0             	movzbl %al,%eax
f0123a02:	c1 e0 04             	shl    $0x4,%eax
f0123a05:	89 c2                	mov    %eax,%edx
f0123a07:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123a0d:	01 d0                	add    %edx,%eax
f0123a0f:	48                   	dec    %eax
f0123a10:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123a16:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a21:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123a27:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a2d:	29 d0                	sub    %edx,%eax
f0123a2f:	01 d8                	add    %ebx,%eax
f0123a31:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123a36:	39 c1                	cmp    %eax,%ecx
f0123a38:	74 17                	je     f0123a51 <test_kfree_bestfirstfit+0x132b>
f0123a3a:	83 ec 04             	sub    $0x4,%esp
f0123a3d:	68 60 b6 13 f0       	push   $0xf013b660
f0123a42:	68 5b 07 00 00       	push   $0x75b
f0123a47:	68 7a b5 13 f0       	push   $0xf013b57a
f0123a4c:	e8 b4 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a51:	e8 d1 02 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123a56:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a59:	74 17                	je     f0123a72 <test_kfree_bestfirstfit+0x134c>
f0123a5b:	83 ec 04             	sub    $0x4,%esp
f0123a5e:	68 94 b5 13 f0       	push   $0xf013b594
f0123a63:	68 5c 07 00 00       	push   $0x75c
f0123a68:	68 7a b5 13 f0       	push   $0xf013b57a
f0123a6d:	e8 93 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a72:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123a75:	e8 df 95 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123a7a:	29 c3                	sub    %eax,%ebx
f0123a7c:	89 d8                	mov    %ebx,%eax
f0123a7e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123a83:	74 17                	je     f0123a9c <test_kfree_bestfirstfit+0x1376>
f0123a85:	83 ec 04             	sub    $0x4,%esp
f0123a88:	68 fc b5 13 f0       	push   $0xf013b5fc
f0123a8d:	68 5d 07 00 00       	push   $0x75d
f0123a92:	68 7a b5 13 f0       	push   $0xf013b57a
f0123a97:	e8 69 c7 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123a9c:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123aa3:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123aa6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123aac:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123aaf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123ab6:	eb 0e                	jmp    f0123ac6 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123ab8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123abb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123abe:	01 d0                	add    %edx,%eax
f0123ac0:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123ac3:	ff 45 f4             	incl   -0xc(%ebp)
f0123ac6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123acc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123acf:	7f e7                	jg     f0123ab8 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123ad1:	83 ec 0c             	sub    $0xc,%esp
f0123ad4:	68 9a bd 13 f0       	push   $0xf013bd9a
f0123ad9:	e8 30 d2 fd ff       	call   f0100d0e <cprintf>
f0123ade:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ae1:	e8 73 95 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123ae6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ae9:	e8 39 02 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123aee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123af1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123af7:	83 ec 0c             	sub    $0xc,%esp
f0123afa:	50                   	push   %eax
f0123afb:	e8 b3 3f fe ff       	call   f0107ab3 <kfree>
f0123b00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b03:	e8 1f 02 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123b08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b0b:	74 17                	je     f0123b24 <test_kfree_bestfirstfit+0x13fe>
f0123b0d:	83 ec 04             	sub    $0x4,%esp
f0123b10:	68 94 b5 13 f0       	push   $0xf013b594
f0123b15:	68 6d 07 00 00       	push   $0x76d
f0123b1a:	68 7a b5 13 f0       	push   $0xf013b57a
f0123b1f:	e8 e1 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b24:	e8 30 95 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123b29:	89 c2                	mov    %eax,%edx
f0123b2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b2e:	29 c2                	sub    %eax,%edx
f0123b30:	89 d0                	mov    %edx,%eax
f0123b32:	83 f8 02             	cmp    $0x2,%eax
f0123b35:	74 17                	je     f0123b4e <test_kfree_bestfirstfit+0x1428>
f0123b37:	83 ec 04             	sub    $0x4,%esp
f0123b3a:	68 04 bd 13 f0       	push   $0xf013bd04
f0123b3f:	68 6e 07 00 00       	push   $0x76e
f0123b44:	68 7a b5 13 f0       	push   $0xf013b57a
f0123b49:	e8 b7 c6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b4e:	e8 06 95 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123b53:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b56:	e8 cc 01 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123b5b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123b5e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123b64:	83 ec 0c             	sub    $0xc,%esp
f0123b67:	50                   	push   %eax
f0123b68:	e8 46 3f fe ff       	call   f0107ab3 <kfree>
f0123b6d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b70:	e8 b2 01 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123b75:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b78:	74 17                	je     f0123b91 <test_kfree_bestfirstfit+0x146b>
f0123b7a:	83 ec 04             	sub    $0x4,%esp
f0123b7d:	68 94 b5 13 f0       	push   $0xf013b594
f0123b82:	68 74 07 00 00       	push   $0x774
f0123b87:	68 7a b5 13 f0       	push   $0xf013b57a
f0123b8c:	e8 74 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b91:	e8 c3 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123b96:	89 c2                	mov    %eax,%edx
f0123b98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b9b:	29 c2                	sub    %eax,%edx
f0123b9d:	89 d0                	mov    %edx,%eax
f0123b9f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123ba4:	74 17                	je     f0123bbd <test_kfree_bestfirstfit+0x1497>
f0123ba6:	83 ec 04             	sub    $0x4,%esp
f0123ba9:	68 04 bd 13 f0       	push   $0xf013bd04
f0123bae:	68 75 07 00 00       	push   $0x775
f0123bb3:	68 7a b5 13 f0       	push   $0xf013b57a
f0123bb8:	e8 48 c6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123bbd:	e8 97 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123bc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bc5:	e8 5d 01 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123bca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123bcd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123bd3:	83 ec 0c             	sub    $0xc,%esp
f0123bd6:	50                   	push   %eax
f0123bd7:	e8 d7 3e fe ff       	call   f0107ab3 <kfree>
f0123bdc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bdf:	e8 43 01 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123be4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123be7:	74 17                	je     f0123c00 <test_kfree_bestfirstfit+0x14da>
f0123be9:	83 ec 04             	sub    $0x4,%esp
f0123bec:	68 94 b5 13 f0       	push   $0xf013b594
f0123bf1:	68 7b 07 00 00       	push   $0x77b
f0123bf6:	68 7a b5 13 f0       	push   $0xf013b57a
f0123bfb:	e8 05 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c00:	e8 54 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c05:	89 c2                	mov    %eax,%edx
f0123c07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c0a:	29 c2                	sub    %eax,%edx
f0123c0c:	89 d0                	mov    %edx,%eax
f0123c0e:	83 f8 01             	cmp    $0x1,%eax
f0123c11:	74 17                	je     f0123c2a <test_kfree_bestfirstfit+0x1504>
f0123c13:	83 ec 04             	sub    $0x4,%esp
f0123c16:	68 04 bd 13 f0       	push   $0xf013bd04
f0123c1b:	68 7c 07 00 00       	push   $0x77c
f0123c20:	68 7a b5 13 f0       	push   $0xf013b57a
f0123c25:	e8 db c5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c2a:	e8 2a 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c32:	e8 f0 00 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123c37:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123c3a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123c40:	83 ec 0c             	sub    $0xc,%esp
f0123c43:	50                   	push   %eax
f0123c44:	e8 6a 3e fe ff       	call   f0107ab3 <kfree>
f0123c49:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c4c:	e8 d6 00 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123c51:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c54:	74 17                	je     f0123c6d <test_kfree_bestfirstfit+0x1547>
f0123c56:	83 ec 04             	sub    $0x4,%esp
f0123c59:	68 94 b5 13 f0       	push   $0xf013b594
f0123c5e:	68 82 07 00 00       	push   $0x782
f0123c63:	68 7a b5 13 f0       	push   $0xf013b57a
f0123c68:	e8 98 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c6d:	e8 e7 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c72:	89 c2                	mov    %eax,%edx
f0123c74:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c77:	29 c2                	sub    %eax,%edx
f0123c79:	89 d0                	mov    %edx,%eax
f0123c7b:	83 f8 04             	cmp    $0x4,%eax
f0123c7e:	74 17                	je     f0123c97 <test_kfree_bestfirstfit+0x1571>
f0123c80:	83 ec 04             	sub    $0x4,%esp
f0123c83:	68 04 bd 13 f0       	push   $0xf013bd04
f0123c88:	68 83 07 00 00       	push   $0x783
f0123c8d:	68 7a b5 13 f0       	push   $0xf013b57a
f0123c92:	e8 6e c5 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c97:	e8 bd 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c9f:	e8 83 00 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123ca4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123ca7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123cad:	83 ec 0c             	sub    $0xc,%esp
f0123cb0:	50                   	push   %eax
f0123cb1:	e8 fd 3d fe ff       	call   f0107ab3 <kfree>
f0123cb6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123cb9:	e8 69 00 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123cbe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123cc1:	74 17                	je     f0123cda <test_kfree_bestfirstfit+0x15b4>
f0123cc3:	83 ec 04             	sub    $0x4,%esp
f0123cc6:	68 94 b5 13 f0       	push   $0xf013b594
f0123ccb:	68 89 07 00 00       	push   $0x789
f0123cd0:	68 7a b5 13 f0       	push   $0xf013b57a
f0123cd5:	e8 2b c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cda:	e8 7a 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123cdf:	89 c2                	mov    %eax,%edx
f0123ce1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123ce4:	29 c2                	sub    %eax,%edx
f0123ce6:	89 d0                	mov    %edx,%eax
f0123ce8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123ced:	74 17                	je     f0123d06 <test_kfree_bestfirstfit+0x15e0>
f0123cef:	83 ec 04             	sub    $0x4,%esp
f0123cf2:	68 04 bd 13 f0       	push   $0xf013bd04
f0123cf7:	68 8a 07 00 00       	push   $0x78a
f0123cfc:	68 7a b5 13 f0       	push   $0xf013b57a
f0123d01:	e8 ff c4 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d06:	e8 4e 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d0e:	e8 14 00 fe ff       	call   f0103d27 <pf_calculate_free_frames>
f0123d13:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123d16:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123d1c:	83 ec 0c             	sub    $0xc,%esp
f0123d1f:	50                   	push   %eax
f0123d20:	e8 8e 3d fe ff       	call   f0107ab3 <kfree>
f0123d25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d28:	e8 fa ff fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123d2d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d30:	74 17                	je     f0123d49 <test_kfree_bestfirstfit+0x1623>
f0123d32:	83 ec 04             	sub    $0x4,%esp
f0123d35:	68 94 b5 13 f0       	push   $0xf013b594
f0123d3a:	68 90 07 00 00       	push   $0x790
f0123d3f:	68 7a b5 13 f0       	push   $0xf013b57a
f0123d44:	e8 bc c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123d49:	e8 0b 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d4e:	89 c2                	mov    %eax,%edx
f0123d50:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d53:	29 c2                	sub    %eax,%edx
f0123d55:	89 d0                	mov    %edx,%eax
f0123d57:	83 f8 01             	cmp    $0x1,%eax
f0123d5a:	74 17                	je     f0123d73 <test_kfree_bestfirstfit+0x164d>
f0123d5c:	83 ec 04             	sub    $0x4,%esp
f0123d5f:	68 04 bd 13 f0       	push   $0xf013bd04
f0123d64:	68 91 07 00 00       	push   $0x791
f0123d69:	68 7a b5 13 f0       	push   $0xf013b57a
f0123d6e:	e8 92 c4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d73:	e8 e1 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d7b:	e8 a7 ff fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123d80:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123d83:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123d89:	83 ec 0c             	sub    $0xc,%esp
f0123d8c:	50                   	push   %eax
f0123d8d:	e8 21 3d fe ff       	call   f0107ab3 <kfree>
f0123d92:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d95:	e8 8d ff fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123d9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d9d:	74 17                	je     f0123db6 <test_kfree_bestfirstfit+0x1690>
f0123d9f:	83 ec 04             	sub    $0x4,%esp
f0123da2:	68 94 b5 13 f0       	push   $0xf013b594
f0123da7:	68 97 07 00 00       	push   $0x797
f0123dac:	68 7a b5 13 f0       	push   $0xf013b57a
f0123db1:	e8 4f c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123db6:	e8 9e 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123dbb:	89 c2                	mov    %eax,%edx
f0123dbd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123dc0:	29 c2                	sub    %eax,%edx
f0123dc2:	89 d0                	mov    %edx,%eax
f0123dc4:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123dc9:	74 17                	je     f0123de2 <test_kfree_bestfirstfit+0x16bc>
f0123dcb:	83 ec 04             	sub    $0x4,%esp
f0123dce:	68 04 bd 13 f0       	push   $0xf013bd04
f0123dd3:	68 98 07 00 00       	push   $0x798
f0123dd8:	68 7a b5 13 f0       	push   $0xf013b57a
f0123ddd:	e8 23 c4 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123de2:	e8 72 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123de7:	89 c2                	mov    %eax,%edx
f0123de9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123dec:	39 c2                	cmp    %eax,%edx
f0123dee:	74 17                	je     f0123e07 <test_kfree_bestfirstfit+0x16e1>
f0123df0:	83 ec 04             	sub    $0x4,%esp
f0123df3:	68 a4 bd 13 f0       	push   $0xf013bda4
f0123df8:	68 9a 07 00 00       	push   $0x79a
f0123dfd:	68 7a b5 13 f0       	push   $0xf013b57a
f0123e02:	e8 fe c3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123e07:	83 ec 0c             	sub    $0xc,%esp
f0123e0a:	68 d8 bd 13 f0       	push   $0xf013bdd8
f0123e0f:	e8 fa ce fd ff       	call   f0100d0e <cprintf>
f0123e14:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123e17:	83 ec 0c             	sub    $0xc,%esp
f0123e1a:	6a 03                	push   $0x3
f0123e1c:	e8 d8 96 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0123e21:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123e24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123e2b:	e9 82 00 00 00       	jmp    f0123eb2 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e33:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123e3a:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123e3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e40:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123e43:	e8 9f 96 fe ff       	call   f010d4e7 <sys_rcr2>
f0123e48:	89 c2                	mov    %eax,%edx
f0123e4a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e4d:	39 c2                	cmp    %eax,%edx
f0123e4f:	74 17                	je     f0123e68 <test_kfree_bestfirstfit+0x1742>
f0123e51:	83 ec 04             	sub    $0x4,%esp
f0123e54:	68 e0 bd 13 f0       	push   $0xf013bde0
f0123e59:	68 a9 07 00 00       	push   $0x7a9
f0123e5e:	68 7a b5 13 f0       	push   $0xf013b57a
f0123e63:	e8 9d c3 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e6b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123e72:	89 c2                	mov    %eax,%edx
f0123e74:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e77:	01 d0                	add    %edx,%eax
f0123e79:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123e7c:	e8 66 96 fe ff       	call   f010d4e7 <sys_rcr2>
f0123e81:	89 c2                	mov    %eax,%edx
f0123e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e86:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123e8d:	89 c1                	mov    %eax,%ecx
f0123e8f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e92:	01 c8                	add    %ecx,%eax
f0123e94:	39 c2                	cmp    %eax,%edx
f0123e96:	74 17                	je     f0123eaf <test_kfree_bestfirstfit+0x1789>
f0123e98:	83 ec 04             	sub    $0x4,%esp
f0123e9b:	68 e0 bd 13 f0       	push   $0xf013bde0
f0123ea0:	68 ab 07 00 00       	push   $0x7ab
f0123ea5:	68 7a b5 13 f0       	push   $0xf013b57a
f0123eaa:	e8 56 c3 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123eaf:	ff 45 f4             	incl   -0xc(%ebp)
f0123eb2:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123eb6:	0f 8e 74 ff ff ff    	jle    f0123e30 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123ebc:	83 ec 0c             	sub    $0xc,%esp
f0123ebf:	6a 00                	push   $0x0
f0123ec1:	e8 33 96 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0123ec6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123ec9:	83 ec 0c             	sub    $0xc,%esp
f0123ecc:	68 25 be 13 f0       	push   $0xf013be25
f0123ed1:	e8 38 ce fd ff       	call   f0100d0e <cprintf>
f0123ed6:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ed9:	e8 7b 91 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123ede:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ee1:	e8 41 fe fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123ee6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123ee9:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123eef:	83 ec 0c             	sub    $0xc,%esp
f0123ef2:	50                   	push   %eax
f0123ef3:	e8 bb 3b fe ff       	call   f0107ab3 <kfree>
f0123ef8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123efb:	e8 27 fe fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123f00:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f03:	74 17                	je     f0123f1c <test_kfree_bestfirstfit+0x17f6>
f0123f05:	83 ec 04             	sub    $0x4,%esp
f0123f08:	68 94 b5 13 f0       	push   $0xf013b594
f0123f0d:	68 b9 07 00 00       	push   $0x7b9
f0123f12:	68 7a b5 13 f0       	push   $0xf013b57a
f0123f17:	e8 e9 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f1c:	e8 38 91 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123f21:	89 c2                	mov    %eax,%edx
f0123f23:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f26:	39 c2                	cmp    %eax,%edx
f0123f28:	74 17                	je     f0123f41 <test_kfree_bestfirstfit+0x181b>
f0123f2a:	83 ec 04             	sub    $0x4,%esp
f0123f2d:	68 2c be 13 f0       	push   $0xf013be2c
f0123f32:	68 ba 07 00 00       	push   $0x7ba
f0123f37:	68 7a b5 13 f0       	push   $0xf013b57a
f0123f3c:	e8 c4 c2 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f41:	e8 13 91 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123f46:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f49:	e8 d9 fd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123f4e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123f51:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123f57:	83 ec 0c             	sub    $0xc,%esp
f0123f5a:	50                   	push   %eax
f0123f5b:	e8 53 3b fe ff       	call   f0107ab3 <kfree>
f0123f60:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f63:	e8 bf fd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123f68:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f6b:	74 17                	je     f0123f84 <test_kfree_bestfirstfit+0x185e>
f0123f6d:	83 ec 04             	sub    $0x4,%esp
f0123f70:	68 94 b5 13 f0       	push   $0xf013b594
f0123f75:	68 c0 07 00 00       	push   $0x7c0
f0123f7a:	68 7a b5 13 f0       	push   $0xf013b57a
f0123f7f:	e8 81 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f84:	e8 d0 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123f89:	89 c2                	mov    %eax,%edx
f0123f8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f8e:	39 c2                	cmp    %eax,%edx
f0123f90:	74 17                	je     f0123fa9 <test_kfree_bestfirstfit+0x1883>
f0123f92:	83 ec 04             	sub    $0x4,%esp
f0123f95:	68 2c be 13 f0       	push   $0xf013be2c
f0123f9a:	68 c1 07 00 00       	push   $0x7c1
f0123f9f:	68 7a b5 13 f0       	push   $0xf013b57a
f0123fa4:	e8 5c c2 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fa9:	e8 ab 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123fae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fb1:	e8 71 fd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123fb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123fb9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123fbf:	83 ec 0c             	sub    $0xc,%esp
f0123fc2:	50                   	push   %eax
f0123fc3:	e8 eb 3a fe ff       	call   f0107ab3 <kfree>
f0123fc8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fcb:	e8 57 fd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0123fd0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123fd3:	74 17                	je     f0123fec <test_kfree_bestfirstfit+0x18c6>
f0123fd5:	83 ec 04             	sub    $0x4,%esp
f0123fd8:	68 94 b5 13 f0       	push   $0xf013b594
f0123fdd:	68 c7 07 00 00       	push   $0x7c7
f0123fe2:	68 7a b5 13 f0       	push   $0xf013b57a
f0123fe7:	e8 19 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123fec:	e8 68 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123ff1:	89 c2                	mov    %eax,%edx
f0123ff3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123ff6:	39 c2                	cmp    %eax,%edx
f0123ff8:	74 17                	je     f0124011 <test_kfree_bestfirstfit+0x18eb>
f0123ffa:	83 ec 04             	sub    $0x4,%esp
f0123ffd:	68 2c be 13 f0       	push   $0xf013be2c
f0124002:	68 c8 07 00 00       	push   $0x7c8
f0124007:	68 7a b5 13 f0       	push   $0xf013b57a
f012400c:	e8 f4 c1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0124011:	e8 43 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124016:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124019:	e8 09 fd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012401e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0124021:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0124027:	83 ec 0c             	sub    $0xc,%esp
f012402a:	50                   	push   %eax
f012402b:	e8 83 3a fe ff       	call   f0107ab3 <kfree>
f0124030:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124033:	e8 ef fc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124038:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012403b:	74 17                	je     f0124054 <test_kfree_bestfirstfit+0x192e>
f012403d:	83 ec 04             	sub    $0x4,%esp
f0124040:	68 94 b5 13 f0       	push   $0xf013b594
f0124045:	68 ce 07 00 00       	push   $0x7ce
f012404a:	68 7a b5 13 f0       	push   $0xf013b57a
f012404f:	e8 b1 c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0124054:	e8 00 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124059:	89 c2                	mov    %eax,%edx
f012405b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012405e:	39 c2                	cmp    %eax,%edx
f0124060:	74 17                	je     f0124079 <test_kfree_bestfirstfit+0x1953>
f0124062:	83 ec 04             	sub    $0x4,%esp
f0124065:	68 2c be 13 f0       	push   $0xf013be2c
f012406a:	68 cf 07 00 00       	push   $0x7cf
f012406f:	68 7a b5 13 f0       	push   $0xf013b57a
f0124074:	e8 8c c1 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0124079:	83 ec 0c             	sub    $0xc,%esp
f012407c:	68 73 be 13 f0       	push   $0xf013be73
f0124081:	e8 88 cc fd ff       	call   f0100d0e <cprintf>
f0124086:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0124089:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0124090:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0124097:	eb 48                	jmp    f01240e1 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0124099:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012409c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01240a1:	83 ec 04             	sub    $0x4,%esp
f01240a4:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01240aa:	51                   	push   %ecx
f01240ab:	52                   	push   %edx
f01240ac:	50                   	push   %eax
f01240ad:	e8 5e 29 fe ff       	call   f0106a10 <get_page_table>
f01240b2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01240b5:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01240bb:	85 c0                	test   %eax,%eax
f01240bd:	75 17                	jne    f01240d6 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01240bf:	83 ec 04             	sub    $0x4,%esp
f01240c2:	68 7c be 13 f0       	push   $0xf013be7c
f01240c7:	68 dd 07 00 00       	push   $0x7dd
f01240cc:	68 7a b5 13 f0       	push   $0xf013b57a
f01240d1:	e8 2f c1 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01240d6:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01240dd:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01240e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01240e5:	78 b2                	js     f0124099 <test_kfree_bestfirstfit+0x1973>
f01240e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01240eb:	7f 09                	jg     f01240f6 <test_kfree_bestfirstfit+0x19d0>
f01240ed:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01240f4:	76 a3                	jbe    f0124099 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01240f6:	83 ec 0c             	sub    $0xc,%esp
f01240f9:	68 5e b7 13 f0       	push   $0xf013b75e
f01240fe:	e8 0b cc fd ff       	call   f0100d0e <cprintf>
f0124103:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0124106:	83 ec 0c             	sub    $0xc,%esp
f0124109:	68 e4 be 13 f0       	push   $0xf013bee4
f012410e:	e8 fb cb fd ff       	call   f0100d0e <cprintf>
f0124113:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124116:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012411b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012411e:	5b                   	pop    %ebx
f012411f:	5f                   	pop    %edi
f0124120:	5d                   	pop    %ebp
f0124121:	c3                   	ret    

f0124122 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0124122:	55                   	push   %ebp
f0124123:	89 e5                	mov    %esp,%ebp
f0124125:	57                   	push   %edi
f0124126:	56                   	push   %esi
f0124127:	53                   	push   %ebx
f0124128:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f012412e:	83 ec 0c             	sub    $0xc,%esp
f0124131:	68 bc b4 13 f0       	push   $0xf013b4bc
f0124136:	e8 d3 cb fd ff       	call   f0100d0e <cprintf>
f012413b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012413e:	83 ec 0c             	sub    $0xc,%esp
f0124141:	68 ec b4 13 f0       	push   $0xf013b4ec
f0124146:	e8 c3 cb fd ff       	call   f0100d0e <cprintf>
f012414b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012414e:	83 ec 0c             	sub    $0xc,%esp
f0124151:	68 bc b4 13 f0       	push   $0xf013b4bc
f0124156:	e8 b3 cb fd ff       	call   f0100d0e <cprintf>
f012415b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012415e:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0124162:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0124166:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f012416c:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0124172:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124179:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124180:	e8 d4 8e fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124185:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124188:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f012418e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124193:	b8 00 00 00 00       	mov    $0x0,%eax
f0124198:	89 d7                	mov    %edx,%edi
f012419a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012419c:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01241a2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01241ac:	89 d7                	mov    %edx,%edi
f01241ae:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01241b0:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01241b6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01241c0:	89 d7                	mov    %edx,%edi
f01241c2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241c4:	e8 90 8e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01241c9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241cc:	e8 56 fb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01241d1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01241d4:	83 ec 0c             	sub    $0xc,%esp
f01241d7:	68 00 fc 1f 00       	push   $0x1ffc00
f01241dc:	e8 89 37 fe ff       	call   f010796a <kmalloc>
f01241e1:	83 c4 10             	add    $0x10,%esp
f01241e4:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01241ea:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01241f0:	89 c1                	mov    %eax,%ecx
f01241f2:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01241f9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01241fc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124201:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124204:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124207:	ba 00 00 00 00       	mov    $0x0,%edx
f012420c:	f7 75 a0             	divl   -0x60(%ebp)
f012420f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124212:	29 d0                	sub    %edx,%eax
f0124214:	89 c3                	mov    %eax,%ebx
f0124216:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012421d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124222:	0f b6 d0             	movzbl %al,%edx
f0124225:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124228:	01 d0                	add    %edx,%eax
f012422a:	48                   	dec    %eax
f012422b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012422e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124231:	ba 00 00 00 00       	mov    $0x0,%edx
f0124236:	f7 75 98             	divl   -0x68(%ebp)
f0124239:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012423c:	29 d0                	sub    %edx,%eax
f012423e:	01 c3                	add    %eax,%ebx
f0124240:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0124247:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012424c:	0f b6 c0             	movzbl %al,%eax
f012424f:	c1 e0 04             	shl    $0x4,%eax
f0124252:	89 c2                	mov    %eax,%edx
f0124254:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124257:	01 d0                	add    %edx,%eax
f0124259:	48                   	dec    %eax
f012425a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012425d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124260:	ba 00 00 00 00       	mov    $0x0,%edx
f0124265:	f7 75 90             	divl   -0x70(%ebp)
f0124268:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012426b:	29 d0                	sub    %edx,%eax
f012426d:	01 d8                	add    %ebx,%eax
f012426f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124274:	39 c1                	cmp    %eax,%ecx
f0124276:	74 17                	je     f012428f <test_kheap_phys_addr+0x16d>
f0124278:	83 ec 04             	sub    $0x4,%esp
f012427b:	68 60 b6 13 f0       	push   $0xf013b660
f0124280:	68 0a 08 00 00       	push   $0x80a
f0124285:	68 7a b5 13 f0       	push   $0xf013b57a
f012428a:	e8 76 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012428f:	e8 93 fa fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124294:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124297:	74 17                	je     f01242b0 <test_kheap_phys_addr+0x18e>
f0124299:	83 ec 04             	sub    $0x4,%esp
f012429c:	68 94 b5 13 f0       	push   $0xf013b594
f01242a1:	68 0b 08 00 00       	push   $0x80b
f01242a6:	68 7a b5 13 f0       	push   $0xf013b57a
f01242ab:	e8 55 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242b0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242b3:	e8 a1 8d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01242b8:	29 c3                	sub    %eax,%ebx
f01242ba:	89 d8                	mov    %ebx,%eax
f01242bc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01242c1:	74 17                	je     f01242da <test_kheap_phys_addr+0x1b8>
f01242c3:	83 ec 04             	sub    $0x4,%esp
f01242c6:	68 fc b5 13 f0       	push   $0xf013b5fc
f01242cb:	68 0c 08 00 00       	push   $0x80c
f01242d0:	68 7a b5 13 f0       	push   $0xf013b57a
f01242d5:	e8 2b bf fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01242da:	e8 7a 8d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01242df:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242e2:	e8 40 fa fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01242e7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01242ea:	83 ec 0c             	sub    $0xc,%esp
f01242ed:	68 00 fc 1f 00       	push   $0x1ffc00
f01242f2:	e8 73 36 fe ff       	call   f010796a <kmalloc>
f01242f7:	83 c4 10             	add    $0x10,%esp
f01242fa:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124300:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124306:	89 c1                	mov    %eax,%ecx
f0124308:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012430f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124312:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124317:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012431a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012431d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124322:	f7 75 88             	divl   -0x78(%ebp)
f0124325:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124328:	29 d0                	sub    %edx,%eax
f012432a:	89 c3                	mov    %eax,%ebx
f012432c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0124333:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124338:	0f b6 d0             	movzbl %al,%edx
f012433b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012433e:	01 d0                	add    %edx,%eax
f0124340:	48                   	dec    %eax
f0124341:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0124347:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012434d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124352:	f7 75 80             	divl   -0x80(%ebp)
f0124355:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012435b:	29 d0                	sub    %edx,%eax
f012435d:	01 c3                	add    %eax,%ebx
f012435f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0124366:	10 00 00 
f0124369:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012436e:	0f b6 c0             	movzbl %al,%eax
f0124371:	c1 e0 04             	shl    $0x4,%eax
f0124374:	89 c2                	mov    %eax,%edx
f0124376:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012437c:	01 d0                	add    %edx,%eax
f012437e:	48                   	dec    %eax
f012437f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0124385:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012438b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124390:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0124396:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012439c:	29 d0                	sub    %edx,%eax
f012439e:	01 d8                	add    %ebx,%eax
f01243a0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01243a5:	39 c1                	cmp    %eax,%ecx
f01243a7:	74 17                	je     f01243c0 <test_kheap_phys_addr+0x29e>
f01243a9:	83 ec 04             	sub    $0x4,%esp
f01243ac:	68 60 b6 13 f0       	push   $0xf013b660
f01243b1:	68 12 08 00 00       	push   $0x812
f01243b6:	68 7a b5 13 f0       	push   $0xf013b57a
f01243bb:	e8 45 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243c0:	e8 62 f9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01243c5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243c8:	74 17                	je     f01243e1 <test_kheap_phys_addr+0x2bf>
f01243ca:	83 ec 04             	sub    $0x4,%esp
f01243cd:	68 94 b5 13 f0       	push   $0xf013b594
f01243d2:	68 13 08 00 00       	push   $0x813
f01243d7:	68 7a b5 13 f0       	push   $0xf013b57a
f01243dc:	e8 24 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243e1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01243e4:	e8 70 8c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01243e9:	29 c3                	sub    %eax,%ebx
f01243eb:	89 d8                	mov    %ebx,%eax
f01243ed:	3d 00 02 00 00       	cmp    $0x200,%eax
f01243f2:	74 17                	je     f012440b <test_kheap_phys_addr+0x2e9>
f01243f4:	83 ec 04             	sub    $0x4,%esp
f01243f7:	68 fc b5 13 f0       	push   $0xf013b5fc
f01243fc:	68 14 08 00 00       	push   $0x814
f0124401:	68 7a b5 13 f0       	push   $0xf013b57a
f0124406:	e8 fa bd fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012440b:	e8 49 8c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124410:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124413:	e8 0f f9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124418:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012441b:	83 ec 0c             	sub    $0xc,%esp
f012441e:	68 00 08 00 00       	push   $0x800
f0124423:	e8 42 35 fe ff       	call   f010796a <kmalloc>
f0124428:	83 c4 10             	add    $0x10,%esp
f012442b:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124431:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124437:	89 c1                	mov    %eax,%ecx
f0124439:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0124440:	10 00 00 
f0124443:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124449:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012444e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0124454:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012445a:	ba 00 00 00 00       	mov    $0x0,%edx
f012445f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124465:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012446b:	29 d0                	sub    %edx,%eax
f012446d:	89 c3                	mov    %eax,%ebx
f012446f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124476:	10 00 00 
f0124479:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012447e:	0f b6 d0             	movzbl %al,%edx
f0124481:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124487:	01 d0                	add    %edx,%eax
f0124489:	48                   	dec    %eax
f012448a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0124490:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124496:	ba 00 00 00 00       	mov    $0x0,%edx
f012449b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01244a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01244a7:	29 d0                	sub    %edx,%eax
f01244a9:	01 c3                	add    %eax,%ebx
f01244ab:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01244b2:	10 00 00 
f01244b5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01244ba:	0f b6 c0             	movzbl %al,%eax
f01244bd:	c1 e0 04             	shl    $0x4,%eax
f01244c0:	89 c2                	mov    %eax,%edx
f01244c2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01244c8:	01 d0                	add    %edx,%eax
f01244ca:	48                   	dec    %eax
f01244cb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01244d1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01244d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01244dc:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01244e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01244e8:	29 d0                	sub    %edx,%eax
f01244ea:	01 d8                	add    %ebx,%eax
f01244ec:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01244f1:	39 c1                	cmp    %eax,%ecx
f01244f3:	74 17                	je     f012450c <test_kheap_phys_addr+0x3ea>
f01244f5:	83 ec 04             	sub    $0x4,%esp
f01244f8:	68 60 b6 13 f0       	push   $0xf013b660
f01244fd:	68 1a 08 00 00       	push   $0x81a
f0124502:	68 7a b5 13 f0       	push   $0xf013b57a
f0124507:	e8 f9 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012450c:	e8 16 f8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124511:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124514:	74 17                	je     f012452d <test_kheap_phys_addr+0x40b>
f0124516:	83 ec 04             	sub    $0x4,%esp
f0124519:	68 94 b5 13 f0       	push   $0xf013b594
f012451e:	68 1b 08 00 00       	push   $0x81b
f0124523:	68 7a b5 13 f0       	push   $0xf013b57a
f0124528:	e8 d8 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012452d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124530:	e8 24 8b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124535:	29 c3                	sub    %eax,%ebx
f0124537:	89 d8                	mov    %ebx,%eax
f0124539:	83 f8 01             	cmp    $0x1,%eax
f012453c:	74 17                	je     f0124555 <test_kheap_phys_addr+0x433>
f012453e:	83 ec 04             	sub    $0x4,%esp
f0124541:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124546:	68 1c 08 00 00       	push   $0x81c
f012454b:	68 7a b5 13 f0       	push   $0xf013b57a
f0124550:	e8 b0 bc fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124555:	e8 ff 8a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012455a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012455d:	e8 c5 f7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124562:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124565:	83 ec 0c             	sub    $0xc,%esp
f0124568:	68 00 08 00 00       	push   $0x800
f012456d:	e8 f8 33 fe ff       	call   f010796a <kmalloc>
f0124572:	83 c4 10             	add    $0x10,%esp
f0124575:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012457b:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124581:	89 c1                	mov    %eax,%ecx
f0124583:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012458a:	10 00 00 
f012458d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124593:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124598:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012459e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01245a9:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01245af:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245b5:	29 d0                	sub    %edx,%eax
f01245b7:	89 c3                	mov    %eax,%ebx
f01245b9:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01245c0:	10 00 00 
f01245c3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01245c8:	0f b6 d0             	movzbl %al,%edx
f01245cb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01245d1:	01 d0                	add    %edx,%eax
f01245d3:	48                   	dec    %eax
f01245d4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01245da:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01245e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01245e5:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01245eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01245f1:	29 d0                	sub    %edx,%eax
f01245f3:	01 c3                	add    %eax,%ebx
f01245f5:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01245fc:	10 00 00 
f01245ff:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124604:	0f b6 c0             	movzbl %al,%eax
f0124607:	c1 e0 04             	shl    $0x4,%eax
f012460a:	89 c2                	mov    %eax,%edx
f012460c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124612:	01 d0                	add    %edx,%eax
f0124614:	48                   	dec    %eax
f0124615:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012461b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124621:	ba 00 00 00 00       	mov    $0x0,%edx
f0124626:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012462c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124632:	29 d0                	sub    %edx,%eax
f0124634:	01 d8                	add    %ebx,%eax
f0124636:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012463b:	39 c1                	cmp    %eax,%ecx
f012463d:	74 17                	je     f0124656 <test_kheap_phys_addr+0x534>
f012463f:	83 ec 04             	sub    $0x4,%esp
f0124642:	68 60 b6 13 f0       	push   $0xf013b660
f0124647:	68 22 08 00 00       	push   $0x822
f012464c:	68 7a b5 13 f0       	push   $0xf013b57a
f0124651:	e8 af bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124656:	e8 cc f6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012465b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012465e:	74 17                	je     f0124677 <test_kheap_phys_addr+0x555>
f0124660:	83 ec 04             	sub    $0x4,%esp
f0124663:	68 94 b5 13 f0       	push   $0xf013b594
f0124668:	68 23 08 00 00       	push   $0x823
f012466d:	68 7a b5 13 f0       	push   $0xf013b57a
f0124672:	e8 8e bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124677:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012467a:	e8 da 89 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012467f:	29 c3                	sub    %eax,%ebx
f0124681:	89 d8                	mov    %ebx,%eax
f0124683:	83 f8 01             	cmp    $0x1,%eax
f0124686:	74 17                	je     f012469f <test_kheap_phys_addr+0x57d>
f0124688:	83 ec 04             	sub    $0x4,%esp
f012468b:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124690:	68 24 08 00 00       	push   $0x824
f0124695:	68 7a b5 13 f0       	push   $0xf013b57a
f012469a:	e8 66 bb fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012469f:	e8 b5 89 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01246a4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246a7:	e8 7b f6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01246ac:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01246af:	83 ec 0c             	sub    $0xc,%esp
f01246b2:	68 00 1c 00 00       	push   $0x1c00
f01246b7:	e8 ae 32 fe ff       	call   f010796a <kmalloc>
f01246bc:	83 c4 10             	add    $0x10,%esp
f01246bf:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246c5:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01246cb:	89 c1                	mov    %eax,%ecx
f01246cd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01246d4:	10 00 00 
f01246d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01246dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246e2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01246e8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01246ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01246f3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01246f9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01246ff:	29 d0                	sub    %edx,%eax
f0124701:	89 c3                	mov    %eax,%ebx
f0124703:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012470a:	10 00 00 
f012470d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124712:	0f b6 d0             	movzbl %al,%edx
f0124715:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012471b:	01 d0                	add    %edx,%eax
f012471d:	48                   	dec    %eax
f012471e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0124724:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012472a:	ba 00 00 00 00       	mov    $0x0,%edx
f012472f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124735:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012473b:	29 d0                	sub    %edx,%eax
f012473d:	01 c3                	add    %eax,%ebx
f012473f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124746:	10 00 00 
f0124749:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012474e:	0f b6 c0             	movzbl %al,%eax
f0124751:	c1 e0 04             	shl    $0x4,%eax
f0124754:	89 c2                	mov    %eax,%edx
f0124756:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012475c:	01 d0                	add    %edx,%eax
f012475e:	48                   	dec    %eax
f012475f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124765:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012476b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124770:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124776:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012477c:	29 d0                	sub    %edx,%eax
f012477e:	01 d8                	add    %ebx,%eax
f0124780:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124785:	39 c1                	cmp    %eax,%ecx
f0124787:	74 17                	je     f01247a0 <test_kheap_phys_addr+0x67e>
f0124789:	83 ec 04             	sub    $0x4,%esp
f012478c:	68 60 b6 13 f0       	push   $0xf013b660
f0124791:	68 2a 08 00 00       	push   $0x82a
f0124796:	68 7a b5 13 f0       	push   $0xf013b57a
f012479b:	e8 65 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247a0:	e8 82 f5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01247a5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01247a8:	74 17                	je     f01247c1 <test_kheap_phys_addr+0x69f>
f01247aa:	83 ec 04             	sub    $0x4,%esp
f01247ad:	68 94 b5 13 f0       	push   $0xf013b594
f01247b2:	68 2b 08 00 00       	push   $0x82b
f01247b7:	68 7a b5 13 f0       	push   $0xf013b57a
f01247bc:	e8 44 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247c1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01247c4:	e8 90 88 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01247c9:	29 c3                	sub    %eax,%ebx
f01247cb:	89 d8                	mov    %ebx,%eax
f01247cd:	83 f8 02             	cmp    $0x2,%eax
f01247d0:	74 17                	je     f01247e9 <test_kheap_phys_addr+0x6c7>
f01247d2:	83 ec 04             	sub    $0x4,%esp
f01247d5:	68 fc b5 13 f0       	push   $0xf013b5fc
f01247da:	68 2c 08 00 00       	push   $0x82c
f01247df:	68 7a b5 13 f0       	push   $0xf013b57a
f01247e4:	e8 1c ba fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01247e9:	e8 6b 88 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01247ee:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247f1:	e8 31 f5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01247f6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01247f9:	83 ec 0c             	sub    $0xc,%esp
f01247fc:	68 00 fc 2f 00       	push   $0x2ffc00
f0124801:	e8 64 31 fe ff       	call   f010796a <kmalloc>
f0124806:	83 c4 10             	add    $0x10,%esp
f0124809:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012480f:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124815:	89 c1                	mov    %eax,%ecx
f0124817:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012481e:	10 00 00 
f0124821:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124827:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012482c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0124832:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124838:	ba 00 00 00 00       	mov    $0x0,%edx
f012483d:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124843:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124849:	29 d0                	sub    %edx,%eax
f012484b:	89 c3                	mov    %eax,%ebx
f012484d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124854:	10 00 00 
f0124857:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012485c:	0f b6 d0             	movzbl %al,%edx
f012485f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124865:	01 d0                	add    %edx,%eax
f0124867:	48                   	dec    %eax
f0124868:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012486e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124874:	ba 00 00 00 00       	mov    $0x0,%edx
f0124879:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012487f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124885:	29 d0                	sub    %edx,%eax
f0124887:	01 c3                	add    %eax,%ebx
f0124889:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0124890:	10 00 00 
f0124893:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124898:	0f b6 c0             	movzbl %al,%eax
f012489b:	c1 e0 04             	shl    $0x4,%eax
f012489e:	89 c2                	mov    %eax,%edx
f01248a0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01248a6:	01 d0                	add    %edx,%eax
f01248a8:	48                   	dec    %eax
f01248a9:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01248af:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01248ba:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01248c0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248c6:	29 d0                	sub    %edx,%eax
f01248c8:	01 d8                	add    %ebx,%eax
f01248ca:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01248cf:	39 c1                	cmp    %eax,%ecx
f01248d1:	74 17                	je     f01248ea <test_kheap_phys_addr+0x7c8>
f01248d3:	83 ec 04             	sub    $0x4,%esp
f01248d6:	68 60 b6 13 f0       	push   $0xf013b660
f01248db:	68 32 08 00 00       	push   $0x832
f01248e0:	68 7a b5 13 f0       	push   $0xf013b57a
f01248e5:	e8 1b b9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248ea:	e8 38 f4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01248ef:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01248f2:	74 17                	je     f012490b <test_kheap_phys_addr+0x7e9>
f01248f4:	83 ec 04             	sub    $0x4,%esp
f01248f7:	68 94 b5 13 f0       	push   $0xf013b594
f01248fc:	68 33 08 00 00       	push   $0x833
f0124901:	68 7a b5 13 f0       	push   $0xf013b57a
f0124906:	e8 fa b8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012490b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012490e:	e8 46 87 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124913:	29 c3                	sub    %eax,%ebx
f0124915:	89 d8                	mov    %ebx,%eax
f0124917:	3d 00 03 00 00       	cmp    $0x300,%eax
f012491c:	74 17                	je     f0124935 <test_kheap_phys_addr+0x813>
f012491e:	83 ec 04             	sub    $0x4,%esp
f0124921:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124926:	68 34 08 00 00       	push   $0x834
f012492b:	68 7a b5 13 f0       	push   $0xf013b57a
f0124930:	e8 d0 b8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124935:	e8 1f 87 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012493a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012493d:	e8 e5 f3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124942:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124945:	83 ec 0c             	sub    $0xc,%esp
f0124948:	68 00 fc 5f 00       	push   $0x5ffc00
f012494d:	e8 18 30 fe ff       	call   f010796a <kmalloc>
f0124952:	83 c4 10             	add    $0x10,%esp
f0124955:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012495b:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124961:	89 c1                	mov    %eax,%ecx
f0124963:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012496a:	10 00 00 
f012496d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124973:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124978:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012497e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124984:	ba 00 00 00 00       	mov    $0x0,%edx
f0124989:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012498f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124995:	29 d0                	sub    %edx,%eax
f0124997:	89 c3                	mov    %eax,%ebx
f0124999:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01249a0:	10 00 00 
f01249a3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01249a8:	0f b6 d0             	movzbl %al,%edx
f01249ab:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01249b1:	01 d0                	add    %edx,%eax
f01249b3:	48                   	dec    %eax
f01249b4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01249ba:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01249cb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249d1:	29 d0                	sub    %edx,%eax
f01249d3:	01 c3                	add    %eax,%ebx
f01249d5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01249dc:	10 00 00 
f01249df:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01249e4:	0f b6 c0             	movzbl %al,%eax
f01249e7:	c1 e0 04             	shl    $0x4,%eax
f01249ea:	89 c2                	mov    %eax,%edx
f01249ec:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01249f2:	01 d0                	add    %edx,%eax
f01249f4:	48                   	dec    %eax
f01249f5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01249fb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a01:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a06:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124a0c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a12:	29 d0                	sub    %edx,%eax
f0124a14:	01 d8                	add    %ebx,%eax
f0124a16:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124a1b:	39 c1                	cmp    %eax,%ecx
f0124a1d:	74 17                	je     f0124a36 <test_kheap_phys_addr+0x914>
f0124a1f:	83 ec 04             	sub    $0x4,%esp
f0124a22:	68 60 b6 13 f0       	push   $0xf013b660
f0124a27:	68 3a 08 00 00       	push   $0x83a
f0124a2c:	68 7a b5 13 f0       	push   $0xf013b57a
f0124a31:	e8 cf b7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a36:	e8 ec f2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124a3b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124a3e:	74 17                	je     f0124a57 <test_kheap_phys_addr+0x935>
f0124a40:	83 ec 04             	sub    $0x4,%esp
f0124a43:	68 94 b5 13 f0       	push   $0xf013b594
f0124a48:	68 3b 08 00 00       	push   $0x83b
f0124a4d:	68 7a b5 13 f0       	push   $0xf013b57a
f0124a52:	e8 ae b7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a57:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124a5a:	e8 fa 85 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124a5f:	29 c3                	sub    %eax,%ebx
f0124a61:	89 d8                	mov    %ebx,%eax
f0124a63:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a68:	74 17                	je     f0124a81 <test_kheap_phys_addr+0x95f>
f0124a6a:	83 ec 04             	sub    $0x4,%esp
f0124a6d:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124a72:	68 3c 08 00 00       	push   $0x83c
f0124a77:	68 7a b5 13 f0       	push   $0xf013b57a
f0124a7c:	e8 84 b7 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124a81:	e8 d3 85 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124a86:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a89:	e8 99 f2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124a8e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124a91:	83 ec 0c             	sub    $0xc,%esp
f0124a94:	68 00 38 00 00       	push   $0x3800
f0124a99:	e8 cc 2e fe ff       	call   f010796a <kmalloc>
f0124a9e:	83 c4 10             	add    $0x10,%esp
f0124aa1:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124aa7:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124aad:	89 c1                	mov    %eax,%ecx
f0124aaf:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124ab6:	10 00 00 
f0124ab9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124abf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ac4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124aca:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124ad0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124adb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124ae1:	29 d0                	sub    %edx,%eax
f0124ae3:	89 c3                	mov    %eax,%ebx
f0124ae5:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124aec:	10 00 00 
f0124aef:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124af4:	0f b6 d0             	movzbl %al,%edx
f0124af7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124afd:	01 d0                	add    %edx,%eax
f0124aff:	48                   	dec    %eax
f0124b00:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124b06:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b11:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124b17:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b1d:	29 d0                	sub    %edx,%eax
f0124b1f:	01 c3                	add    %eax,%ebx
f0124b21:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124b28:	10 00 00 
f0124b2b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124b30:	0f b6 c0             	movzbl %al,%eax
f0124b33:	c1 e0 04             	shl    $0x4,%eax
f0124b36:	89 c2                	mov    %eax,%edx
f0124b38:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124b3e:	01 d0                	add    %edx,%eax
f0124b40:	48                   	dec    %eax
f0124b41:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124b47:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b52:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124b58:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b5e:	29 d0                	sub    %edx,%eax
f0124b60:	01 d8                	add    %ebx,%eax
f0124b62:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124b67:	39 c1                	cmp    %eax,%ecx
f0124b69:	74 17                	je     f0124b82 <test_kheap_phys_addr+0xa60>
f0124b6b:	83 ec 04             	sub    $0x4,%esp
f0124b6e:	68 60 b6 13 f0       	push   $0xf013b660
f0124b73:	68 42 08 00 00       	push   $0x842
f0124b78:	68 7a b5 13 f0       	push   $0xf013b57a
f0124b7d:	e8 83 b6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b82:	e8 a0 f1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124b87:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124b8a:	74 17                	je     f0124ba3 <test_kheap_phys_addr+0xa81>
f0124b8c:	83 ec 04             	sub    $0x4,%esp
f0124b8f:	68 94 b5 13 f0       	push   $0xf013b594
f0124b94:	68 43 08 00 00       	push   $0x843
f0124b99:	68 7a b5 13 f0       	push   $0xf013b57a
f0124b9e:	e8 62 b6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ba3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124ba6:	e8 ae 84 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124bab:	29 c3                	sub    %eax,%ebx
f0124bad:	89 d8                	mov    %ebx,%eax
f0124baf:	83 f8 04             	cmp    $0x4,%eax
f0124bb2:	74 17                	je     f0124bcb <test_kheap_phys_addr+0xaa9>
f0124bb4:	83 ec 04             	sub    $0x4,%esp
f0124bb7:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124bbc:	68 44 08 00 00       	push   $0x844
f0124bc1:	68 7a b5 13 f0       	push   $0xf013b57a
f0124bc6:	e8 3a b6 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124bcb:	89 e0                	mov    %esp,%eax
f0124bcd:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124bcf:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124bd6:	10 00 00 
f0124bd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124bdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124be4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124bea:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124bf5:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124bfb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c01:	29 d0                	sub    %edx,%eax
f0124c03:	89 c1                	mov    %eax,%ecx
f0124c05:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124c0c:	10 00 00 
f0124c0f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124c14:	0f b6 d0             	movzbl %al,%edx
f0124c17:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124c1d:	01 d0                	add    %edx,%eax
f0124c1f:	48                   	dec    %eax
f0124c20:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124c26:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c31:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124c37:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c3d:	29 d0                	sub    %edx,%eax
f0124c3f:	01 c1                	add    %eax,%ecx
f0124c41:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124c48:	10 00 00 
f0124c4b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124c50:	0f b6 c0             	movzbl %al,%eax
f0124c53:	c1 e0 04             	shl    $0x4,%eax
f0124c56:	89 c2                	mov    %eax,%edx
f0124c58:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124c5e:	01 d0                	add    %edx,%eax
f0124c60:	48                   	dec    %eax
f0124c61:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124c67:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c72:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124c78:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124c7e:	29 d0                	sub    %edx,%eax
f0124c80:	01 c8                	add    %ecx,%eax
f0124c82:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124c87:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124c8d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124c94:	10 00 00 
f0124c97:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ca2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124ca8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cae:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cb3:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124cb9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cbf:	29 d0                	sub    %edx,%eax
f0124cc1:	89 c1                	mov    %eax,%ecx
f0124cc3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124cca:	10 00 00 
f0124ccd:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124cd2:	0f b6 d0             	movzbl %al,%edx
f0124cd5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124cdb:	01 d0                	add    %edx,%eax
f0124cdd:	48                   	dec    %eax
f0124cde:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124ce4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cef:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124cf5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124cfb:	29 d0                	sub    %edx,%eax
f0124cfd:	01 c1                	add    %eax,%ecx
f0124cff:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124d06:	10 00 00 
f0124d09:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0124d0e:	0f b6 c0             	movzbl %al,%eax
f0124d11:	c1 e0 04             	shl    $0x4,%eax
f0124d14:	89 c2                	mov    %eax,%edx
f0124d16:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124d1c:	01 d0                	add    %edx,%eax
f0124d1e:	48                   	dec    %eax
f0124d1f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124d25:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d30:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124d36:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d3c:	29 d0                	sub    %edx,%eax
f0124d3e:	01 c8                	add    %ecx,%eax
f0124d40:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124d45:	c1 e8 0c             	shr    $0xc,%eax
f0124d48:	89 c2                	mov    %eax,%edx
f0124d4a:	4a                   	dec    %edx
f0124d4b:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124d51:	c1 e0 02             	shl    $0x2,%eax
f0124d54:	8d 50 03             	lea    0x3(%eax),%edx
f0124d57:	b8 10 00 00 00       	mov    $0x10,%eax
f0124d5c:	48                   	dec    %eax
f0124d5d:	01 d0                	add    %edx,%eax
f0124d5f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124d64:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d69:	f7 f7                	div    %edi
f0124d6b:	6b c0 10             	imul   $0x10,%eax,%eax
f0124d6e:	29 c4                	sub    %eax,%esp
f0124d70:	89 e0                	mov    %esp,%eax
f0124d72:	83 c0 03             	add    $0x3,%eax
f0124d75:	c1 e8 02             	shr    $0x2,%eax
f0124d78:	c1 e0 02             	shl    $0x2,%eax
f0124d7b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124d81:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124d88:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124d8f:	10 00 00 
f0124d92:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124d98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d9d:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124da3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124da9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dae:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124db4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124dba:	29 d0                	sub    %edx,%eax
f0124dbc:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124dc1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124dc4:	eb 29                	jmp    f0124def <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124dc6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124dc9:	8d 43 01             	lea    0x1(%ebx),%eax
f0124dcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124dcf:	83 ec 0c             	sub    $0xc,%esp
f0124dd2:	ff 75 e0             	pushl  -0x20(%ebp)
f0124dd5:	e8 f0 2d fe ff       	call   f0107bca <kheap_physical_address>
f0124dda:	83 c4 10             	add    $0x10,%esp
f0124ddd:	89 c2                	mov    %eax,%edx
f0124ddf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124de5:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124de8:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124def:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124df2:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124df8:	72 cc                	jb     f0124dc6 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124dfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124dfd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124e03:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e0a:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124e11:	10 00 00 
f0124e14:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124e1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e1f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124e25:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e30:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124e36:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e3c:	29 d0                	sub    %edx,%eax
f0124e3e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e43:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e46:	e9 ab 00 00 00       	jmp    f0124ef6 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124e4b:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0124e50:	83 ec 04             	sub    $0x4,%esp
f0124e53:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124e59:	52                   	push   %edx
f0124e5a:	ff 75 e0             	pushl  -0x20(%ebp)
f0124e5d:	50                   	push   %eax
f0124e5e:	e8 ad 1b fe ff       	call   f0106a10 <get_page_table>
f0124e63:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124e66:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124e6c:	85 c0                	test   %eax,%eax
f0124e6e:	75 17                	jne    f0124e87 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124e70:	83 ec 04             	sub    $0x4,%esp
f0124e73:	68 1c bf 13 f0       	push   $0xf013bf1c
f0124e78:	68 59 08 00 00       	push   $0x859
f0124e7d:	68 7a b5 13 f0       	push   $0xf013b57a
f0124e82:	e8 7e b3 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124e87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e8a:	c1 e8 0c             	shr    $0xc,%eax
f0124e8d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124e92:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124e95:	eb 4b                	jmp    f0124ee2 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124e97:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124e9d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ea0:	c1 e2 02             	shl    $0x2,%edx
f0124ea3:	01 d0                	add    %edx,%eax
f0124ea5:	8b 00                	mov    (%eax),%eax
f0124ea7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124eac:	89 c1                	mov    %eax,%ecx
f0124eae:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124eb4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124eb7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124eba:	39 c1                	cmp    %eax,%ecx
f0124ebc:	74 17                	je     f0124ed5 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124ebe:	83 ec 04             	sub    $0x4,%esp
f0124ec1:	68 75 bf 13 f0       	push   $0xf013bf75
f0124ec6:	68 60 08 00 00       	push   $0x860
f0124ecb:	68 7a b5 13 f0       	push   $0xf013b57a
f0124ed0:	e8 30 b3 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124ed5:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124edc:	ff 45 dc             	incl   -0x24(%ebp)
f0124edf:	ff 45 e4             	incl   -0x1c(%ebp)
f0124ee2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124ee5:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124eeb:	7d 09                	jge    f0124ef6 <test_kheap_phys_addr+0xdd4>
f0124eed:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124ef4:	7e a1                	jle    f0124e97 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124ef6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ef9:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124eff:	0f 82 46 ff ff ff    	jb     f0124e4b <test_kheap_phys_addr+0xd29>
f0124f05:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124f07:	83 ec 0c             	sub    $0xc,%esp
f0124f0a:	68 94 bf 13 f0       	push   $0xf013bf94
f0124f0f:	e8 fa bd fd ff       	call   f0100d0e <cprintf>
f0124f14:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124f17:	e8 3d 81 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124f1c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124f22:	e8 00 ee fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124f27:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124f2d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124f33:	83 ec 0c             	sub    $0xc,%esp
f0124f36:	50                   	push   %eax
f0124f37:	e8 77 2b fe ff       	call   f0107ab3 <kfree>
f0124f3c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f3f:	e8 e3 ed fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124f44:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124f4a:	74 17                	je     f0124f63 <test_kheap_phys_addr+0xe41>
f0124f4c:	83 ec 04             	sub    $0x4,%esp
f0124f4f:	68 94 b5 13 f0       	push   $0xf013b594
f0124f54:	68 6e 08 00 00       	push   $0x86e
f0124f59:	68 7a b5 13 f0       	push   $0xf013b57a
f0124f5e:	e8 a2 b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124f63:	e8 f1 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124f68:	89 c2                	mov    %eax,%edx
f0124f6a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124f70:	29 c2                	sub    %eax,%edx
f0124f72:	89 d0                	mov    %edx,%eax
f0124f74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124f79:	74 17                	je     f0124f92 <test_kheap_phys_addr+0xe70>
f0124f7b:	83 ec 04             	sub    $0x4,%esp
f0124f7e:	68 04 bd 13 f0       	push   $0xf013bd04
f0124f83:	68 6f 08 00 00       	push   $0x86f
f0124f88:	68 7a b5 13 f0       	push   $0xf013b57a
f0124f8d:	e8 73 b2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124f92:	e8 c2 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124f97:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124f9d:	e8 85 ed fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124fa2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124fa8:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124fae:	83 ec 0c             	sub    $0xc,%esp
f0124fb1:	50                   	push   %eax
f0124fb2:	e8 fc 2a fe ff       	call   f0107ab3 <kfree>
f0124fb7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fba:	e8 68 ed fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0124fbf:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124fc5:	74 17                	je     f0124fde <test_kheap_phys_addr+0xebc>
f0124fc7:	83 ec 04             	sub    $0x4,%esp
f0124fca:	68 94 b5 13 f0       	push   $0xf013b594
f0124fcf:	68 75 08 00 00       	push   $0x875
f0124fd4:	68 7a b5 13 f0       	push   $0xf013b57a
f0124fd9:	e8 27 b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124fde:	e8 76 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124fe3:	89 c2                	mov    %eax,%edx
f0124fe5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124feb:	29 c2                	sub    %eax,%edx
f0124fed:	89 d0                	mov    %edx,%eax
f0124fef:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124ff4:	74 17                	je     f012500d <test_kheap_phys_addr+0xeeb>
f0124ff6:	83 ec 04             	sub    $0x4,%esp
f0124ff9:	68 04 bd 13 f0       	push   $0xf013bd04
f0124ffe:	68 76 08 00 00       	push   $0x876
f0125003:	68 7a b5 13 f0       	push   $0xf013b57a
f0125008:	e8 f8 b1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012500d:	e8 47 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125012:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125018:	e8 0a ed fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012501d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0125023:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125029:	83 ec 0c             	sub    $0xc,%esp
f012502c:	50                   	push   %eax
f012502d:	e8 81 2a fe ff       	call   f0107ab3 <kfree>
f0125032:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125035:	e8 ed ec fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012503a:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0125040:	74 17                	je     f0125059 <test_kheap_phys_addr+0xf37>
f0125042:	83 ec 04             	sub    $0x4,%esp
f0125045:	68 94 b5 13 f0       	push   $0xf013b594
f012504a:	68 7c 08 00 00       	push   $0x87c
f012504f:	68 7a b5 13 f0       	push   $0xf013b57a
f0125054:	e8 ac b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125059:	e8 fb 7f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012505e:	89 c2                	mov    %eax,%edx
f0125060:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0125066:	29 c2                	sub    %eax,%edx
f0125068:	89 d0                	mov    %edx,%eax
f012506a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012506f:	74 17                	je     f0125088 <test_kheap_phys_addr+0xf66>
f0125071:	83 ec 04             	sub    $0x4,%esp
f0125074:	68 04 bd 13 f0       	push   $0xf013bd04
f0125079:	68 7d 08 00 00       	push   $0x87d
f012507e:	68 7a b5 13 f0       	push   $0xf013b57a
f0125083:	e8 7d b1 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0125088:	89 e0                	mov    %esp,%eax
f012508a:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012508c:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0125093:	10 00 00 
f0125096:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012509c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250a1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01250a7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01250b2:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01250b8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250be:	29 d0                	sub    %edx,%eax
f01250c0:	89 c1                	mov    %eax,%ecx
f01250c2:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01250c9:	10 00 00 
f01250cc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01250d1:	0f b6 d0             	movzbl %al,%edx
f01250d4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01250da:	01 d0                	add    %edx,%eax
f01250dc:	48                   	dec    %eax
f01250dd:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01250e3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01250e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01250ee:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01250f4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01250fa:	29 d0                	sub    %edx,%eax
f01250fc:	01 c1                	add    %eax,%ecx
f01250fe:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125105:	10 00 00 
f0125108:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012510d:	0f b6 c0             	movzbl %al,%eax
f0125110:	c1 e0 04             	shl    $0x4,%eax
f0125113:	89 c2                	mov    %eax,%edx
f0125115:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012511b:	01 d0                	add    %edx,%eax
f012511d:	48                   	dec    %eax
f012511e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125124:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012512a:	ba 00 00 00 00       	mov    $0x0,%edx
f012512f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125135:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012513b:	29 d0                	sub    %edx,%eax
f012513d:	01 c8                	add    %ecx,%eax
f012513f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125144:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012514a:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0125151:	10 00 00 
f0125154:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012515a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012515f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0125165:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012516b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125170:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0125176:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012517c:	29 d0                	sub    %edx,%eax
f012517e:	89 c1                	mov    %eax,%ecx
f0125180:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0125187:	10 00 00 
f012518a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012518f:	0f b6 d0             	movzbl %al,%edx
f0125192:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125198:	01 d0                	add    %edx,%eax
f012519a:	48                   	dec    %eax
f012519b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01251a1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01251ac:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01251b2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251b8:	29 d0                	sub    %edx,%eax
f01251ba:	01 c1                	add    %eax,%ecx
f01251bc:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01251c3:	10 00 00 
f01251c6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01251cb:	0f b6 c0             	movzbl %al,%eax
f01251ce:	c1 e0 04             	shl    $0x4,%eax
f01251d1:	89 c2                	mov    %eax,%edx
f01251d3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01251d9:	01 d0                	add    %edx,%eax
f01251db:	48                   	dec    %eax
f01251dc:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01251e2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01251e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01251ed:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01251f3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01251f9:	29 d0                	sub    %edx,%eax
f01251fb:	01 c8                	add    %ecx,%eax
f01251fd:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125202:	c1 e8 0c             	shr    $0xc,%eax
f0125205:	89 c2                	mov    %eax,%edx
f0125207:	4a                   	dec    %edx
f0125208:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f012520e:	c1 e0 02             	shl    $0x2,%eax
f0125211:	8d 50 03             	lea    0x3(%eax),%edx
f0125214:	b8 10 00 00 00       	mov    $0x10,%eax
f0125219:	48                   	dec    %eax
f012521a:	01 d0                	add    %edx,%eax
f012521c:	bf 10 00 00 00       	mov    $0x10,%edi
f0125221:	ba 00 00 00 00       	mov    $0x0,%edx
f0125226:	f7 f7                	div    %edi
f0125228:	6b c0 10             	imul   $0x10,%eax,%eax
f012522b:	29 c4                	sub    %eax,%esp
f012522d:	89 e0                	mov    %esp,%eax
f012522f:	83 c0 03             	add    $0x3,%eax
f0125232:	c1 e8 02             	shr    $0x2,%eax
f0125235:	c1 e0 02             	shl    $0x2,%eax
f0125238:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f012523e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0125245:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012524c:	10 00 00 
f012524f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125255:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012525a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125260:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125266:	ba 00 00 00 00       	mov    $0x0,%edx
f012526b:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125271:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125277:	29 d0                	sub    %edx,%eax
f0125279:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012527e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125281:	eb 29                	jmp    f01252ac <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0125283:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0125286:	8d 43 01             	lea    0x1(%ebx),%eax
f0125289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012528c:	83 ec 0c             	sub    $0xc,%esp
f012528f:	ff 75 d8             	pushl  -0x28(%ebp)
f0125292:	e8 33 29 fe ff       	call   f0107bca <kheap_physical_address>
f0125297:	83 c4 10             	add    $0x10,%esp
f012529a:	89 c2                	mov    %eax,%edx
f012529c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01252a2:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01252a5:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01252ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252af:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01252b5:	72 cc                	jb     f0125283 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01252b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01252ba:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01252c0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01252c7:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01252ce:	10 00 00 
f01252d1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01252d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252dc:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01252e2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01252e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ed:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01252f3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01252f9:	29 d0                	sub    %edx,%eax
f01252fb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125300:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125303:	e9 ab 00 00 00       	jmp    f01253b3 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125308:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f012530d:	83 ec 04             	sub    $0x4,%esp
f0125310:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0125316:	52                   	push   %edx
f0125317:	ff 75 d8             	pushl  -0x28(%ebp)
f012531a:	50                   	push   %eax
f012531b:	e8 f0 16 fe ff       	call   f0106a10 <get_page_table>
f0125320:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125323:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125329:	85 c0                	test   %eax,%eax
f012532b:	75 17                	jne    f0125344 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012532d:	83 ec 04             	sub    $0x4,%esp
f0125330:	68 1c bf 13 f0       	push   $0xf013bf1c
f0125335:	68 93 08 00 00       	push   $0x893
f012533a:	68 7a b5 13 f0       	push   $0xf013b57a
f012533f:	e8 c1 ae fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0125344:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125347:	c1 e8 0c             	shr    $0xc,%eax
f012534a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012534f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0125352:	eb 4b                	jmp    f012539f <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0125354:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012535a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012535d:	c1 e2 02             	shl    $0x2,%edx
f0125360:	01 d0                	add    %edx,%eax
f0125362:	8b 00                	mov    (%eax),%eax
f0125364:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125369:	89 c1                	mov    %eax,%ecx
f012536b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125371:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125374:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125377:	39 c1                	cmp    %eax,%ecx
f0125379:	74 17                	je     f0125392 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012537b:	83 ec 04             	sub    $0x4,%esp
f012537e:	68 75 bf 13 f0       	push   $0xf013bf75
f0125383:	68 9a 08 00 00       	push   $0x89a
f0125388:	68 7a b5 13 f0       	push   $0xf013b57a
f012538d:	e8 73 ae fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0125392:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0125399:	ff 45 d4             	incl   -0x2c(%ebp)
f012539c:	ff 45 e4             	incl   -0x1c(%ebp)
f012539f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01253a2:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01253a8:	7d 09                	jge    f01253b3 <test_kheap_phys_addr+0x1291>
f01253aa:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01253b1:	7e a1                	jle    f0125354 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01253b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01253b6:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01253bc:	0f 82 46 ff ff ff    	jb     f0125308 <test_kheap_phys_addr+0x11e6>
f01253c2:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01253c4:	83 ec 0c             	sub    $0xc,%esp
f01253c7:	68 05 b7 13 f0       	push   $0xf013b705
f01253cc:	e8 3d b9 fd ff       	call   f0100d0e <cprintf>
f01253d1:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01253d4:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01253db:	10 00 00 
f01253de:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01253e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253e9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01253ef:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01253f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253fa:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0125400:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125406:	29 d0                	sub    %edx,%eax
f0125408:	89 c1                	mov    %eax,%ecx
f012540a:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125411:	10 00 00 
f0125414:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125419:	0f b6 d0             	movzbl %al,%edx
f012541c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125422:	01 d0                	add    %edx,%eax
f0125424:	48                   	dec    %eax
f0125425:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012542b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125431:	ba 00 00 00 00       	mov    $0x0,%edx
f0125436:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012543c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125442:	29 d0                	sub    %edx,%eax
f0125444:	01 c1                	add    %eax,%ecx
f0125446:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f012544d:	10 00 00 
f0125450:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125455:	0f b6 c0             	movzbl %al,%eax
f0125458:	c1 e0 04             	shl    $0x4,%eax
f012545b:	89 c2                	mov    %eax,%edx
f012545d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125463:	01 d0                	add    %edx,%eax
f0125465:	48                   	dec    %eax
f0125466:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012546c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125472:	ba 00 00 00 00       	mov    $0x0,%edx
f0125477:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f012547d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125483:	29 d0                	sub    %edx,%eax
f0125485:	01 c8                	add    %ecx,%eax
f0125487:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f012548c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0125492:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125499:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012549f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01254a2:	eb 0a                	jmp    f01254ae <test_kheap_phys_addr+0x138c>
		{
			i++;
f01254a4:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01254a7:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01254ae:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01254b5:	76 ed                	jbe    f01254a4 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01254b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01254ba:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01254c0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01254c7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01254cd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01254d0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01254d7:	e9 cc 00 00 00       	jmp    f01255a8 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01254dc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01254df:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01254e4:	83 ec 04             	sub    $0x4,%esp
f01254e7:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f01254ed:	51                   	push   %ecx
f01254ee:	52                   	push   %edx
f01254ef:	50                   	push   %eax
f01254f0:	e8 1b 15 fe ff       	call   f0106a10 <get_page_table>
f01254f5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01254f8:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01254fe:	85 c0                	test   %eax,%eax
f0125500:	75 17                	jne    f0125519 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125502:	83 ec 04             	sub    $0x4,%esp
f0125505:	68 1c bf 13 f0       	push   $0xf013bf1c
f012550a:	68 b6 08 00 00       	push   $0x8b6
f012550f:	68 7a b5 13 f0       	push   $0xf013b57a
f0125514:	e8 ec ac fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125519:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0125520:	eb 67                	jmp    f0125589 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0125522:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125525:	c1 e0 0c             	shl    $0xc,%eax
f0125528:	89 c2                	mov    %eax,%edx
f012552a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125530:	01 d0                	add    %edx,%eax
f0125532:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125538:	83 ec 0c             	sub    $0xc,%esp
f012553b:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125541:	e8 84 26 fe ff       	call   f0107bca <kheap_physical_address>
f0125546:	83 c4 10             	add    $0x10,%esp
f0125549:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012554f:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125555:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125558:	c1 e2 02             	shl    $0x2,%edx
f012555b:	01 d0                	add    %edx,%eax
f012555d:	8b 00                	mov    (%eax),%eax
f012555f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125564:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f012556a:	74 17                	je     f0125583 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012556c:	83 ec 04             	sub    $0x4,%esp
f012556f:	68 75 bf 13 f0       	push   $0xf013bf75
f0125574:	68 c0 08 00 00       	push   $0x8c0
f0125579:	68 7a b5 13 f0       	push   $0xf013b57a
f012557e:	e8 82 ac fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125583:	ff 45 cc             	incl   -0x34(%ebp)
f0125586:	ff 45 e4             	incl   -0x1c(%ebp)
f0125589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012558c:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0125592:	7d 09                	jge    f012559d <test_kheap_phys_addr+0x147b>
f0125594:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f012559b:	7e 85                	jle    f0125522 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012559d:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01255a4:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01255a8:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255ac:	0f 88 2a ff ff ff    	js     f01254dc <test_kheap_phys_addr+0x13ba>
f01255b2:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255b6:	7f 0d                	jg     f01255c5 <test_kheap_phys_addr+0x14a3>
f01255b8:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01255bf:	0f 86 17 ff ff ff    	jbe    f01254dc <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01255c5:	83 ec 0c             	sub    $0xc,%esp
f01255c8:	68 5e b7 13 f0       	push   $0xf013b75e
f01255cd:	e8 3c b7 fd ff       	call   f0100d0e <cprintf>
f01255d2:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01255d5:	83 ec 0c             	sub    $0xc,%esp
f01255d8:	68 c8 bf 13 f0       	push   $0xf013bfc8
f01255dd:	e8 2c b7 fd ff       	call   f0100d0e <cprintf>
f01255e2:	83 c4 10             	add    $0x10,%esp

	return 1;
f01255e5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01255ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01255ed:	5b                   	pop    %ebx
f01255ee:	5e                   	pop    %esi
f01255ef:	5f                   	pop    %edi
f01255f0:	5d                   	pop    %ebp
f01255f1:	c3                   	ret    

f01255f2 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01255f2:	55                   	push   %ebp
f01255f3:	89 e5                	mov    %esp,%ebp
f01255f5:	57                   	push   %edi
f01255f6:	56                   	push   %esi
f01255f7:	53                   	push   %ebx
f01255f8:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01255fe:	89 e0                	mov    %esp,%eax
f0125600:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0125602:	83 ec 0c             	sub    $0xc,%esp
f0125605:	68 bc b4 13 f0       	push   $0xf013b4bc
f012560a:	e8 ff b6 fd ff       	call   f0100d0e <cprintf>
f012560f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0125612:	83 ec 0c             	sub    $0xc,%esp
f0125615:	68 ec b4 13 f0       	push   $0xf013b4ec
f012561a:	e8 ef b6 fd ff       	call   f0100d0e <cprintf>
f012561f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0125622:	83 ec 0c             	sub    $0xc,%esp
f0125625:	68 bc b4 13 f0       	push   $0xf013b4bc
f012562a:	e8 df b6 fd ff       	call   f0100d0e <cprintf>
f012562f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0125632:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125636:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012563a:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0125640:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125646:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f012564d:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125654:	e8 00 7a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125659:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012565c:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125662:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125667:	b8 00 00 00 00       	mov    $0x0,%eax
f012566c:	89 d7                	mov    %edx,%edi
f012566e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125670:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125676:	b9 14 00 00 00       	mov    $0x14,%ecx
f012567b:	b8 00 00 00 00       	mov    $0x0,%eax
f0125680:	89 d7                	mov    %edx,%edi
f0125682:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125684:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f012568a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012568f:	b8 00 00 00 00       	mov    $0x0,%eax
f0125694:	89 d7                	mov    %edx,%edi
f0125696:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125698:	e8 bc 79 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012569d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256a0:	e8 82 e6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01256a5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01256a8:	83 ec 0c             	sub    $0xc,%esp
f01256ab:	68 00 fc 1f 00       	push   $0x1ffc00
f01256b0:	e8 b5 22 fe ff       	call   f010796a <kmalloc>
f01256b5:	83 c4 10             	add    $0x10,%esp
f01256b8:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256be:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01256c4:	89 c1                	mov    %eax,%ecx
f01256c6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01256cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01256d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256d5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01256d8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01256db:	ba 00 00 00 00       	mov    $0x0,%edx
f01256e0:	f7 75 b4             	divl   -0x4c(%ebp)
f01256e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01256e6:	29 d0                	sub    %edx,%eax
f01256e8:	89 c3                	mov    %eax,%ebx
f01256ea:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01256f1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01256f6:	0f b6 d0             	movzbl %al,%edx
f01256f9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01256fc:	01 d0                	add    %edx,%eax
f01256fe:	48                   	dec    %eax
f01256ff:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0125702:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125705:	ba 00 00 00 00       	mov    $0x0,%edx
f012570a:	f7 75 ac             	divl   -0x54(%ebp)
f012570d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125710:	29 d0                	sub    %edx,%eax
f0125712:	01 c3                	add    %eax,%ebx
f0125714:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012571b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125720:	0f b6 c0             	movzbl %al,%eax
f0125723:	c1 e0 04             	shl    $0x4,%eax
f0125726:	89 c2                	mov    %eax,%edx
f0125728:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012572b:	01 d0                	add    %edx,%eax
f012572d:	48                   	dec    %eax
f012572e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0125731:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125734:	ba 00 00 00 00       	mov    $0x0,%edx
f0125739:	f7 75 a4             	divl   -0x5c(%ebp)
f012573c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012573f:	29 d0                	sub    %edx,%eax
f0125741:	01 d8                	add    %ebx,%eax
f0125743:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125748:	39 c1                	cmp    %eax,%ecx
f012574a:	74 17                	je     f0125763 <test_kheap_virt_addr+0x171>
f012574c:	83 ec 04             	sub    $0x4,%esp
f012574f:	68 60 b6 13 f0       	push   $0xf013b660
f0125754:	68 ed 08 00 00       	push   $0x8ed
f0125759:	68 7a b5 13 f0       	push   $0xf013b57a
f012575e:	e8 a2 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125763:	e8 bf e5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125768:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012576b:	74 17                	je     f0125784 <test_kheap_virt_addr+0x192>
f012576d:	83 ec 04             	sub    $0x4,%esp
f0125770:	68 94 b5 13 f0       	push   $0xf013b594
f0125775:	68 ee 08 00 00       	push   $0x8ee
f012577a:	68 7a b5 13 f0       	push   $0xf013b57a
f012577f:	e8 81 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125784:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125787:	e8 cd 78 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012578c:	29 c3                	sub    %eax,%ebx
f012578e:	89 d8                	mov    %ebx,%eax
f0125790:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125795:	74 17                	je     f01257ae <test_kheap_virt_addr+0x1bc>
f0125797:	83 ec 04             	sub    $0x4,%esp
f012579a:	68 fc b5 13 f0       	push   $0xf013b5fc
f012579f:	68 ef 08 00 00       	push   $0x8ef
f01257a4:	68 7a b5 13 f0       	push   $0xf013b57a
f01257a9:	e8 57 aa fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01257ae:	e8 a6 78 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01257b3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257b6:	e8 6c e5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01257bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01257be:	83 ec 0c             	sub    $0xc,%esp
f01257c1:	68 00 fc 1f 00       	push   $0x1ffc00
f01257c6:	e8 9f 21 fe ff       	call   f010796a <kmalloc>
f01257cb:	83 c4 10             	add    $0x10,%esp
f01257ce:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257d4:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01257da:	89 c1                	mov    %eax,%ecx
f01257dc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01257e3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01257e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01257eb:	89 45 98             	mov    %eax,-0x68(%ebp)
f01257ee:	8b 45 98             	mov    -0x68(%ebp),%eax
f01257f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01257f6:	f7 75 9c             	divl   -0x64(%ebp)
f01257f9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01257fc:	29 d0                	sub    %edx,%eax
f01257fe:	89 c3                	mov    %eax,%ebx
f0125800:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125807:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012580c:	0f b6 d0             	movzbl %al,%edx
f012580f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125812:	01 d0                	add    %edx,%eax
f0125814:	48                   	dec    %eax
f0125815:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125818:	8b 45 90             	mov    -0x70(%ebp),%eax
f012581b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125820:	f7 75 94             	divl   -0x6c(%ebp)
f0125823:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125826:	29 d0                	sub    %edx,%eax
f0125828:	01 c3                	add    %eax,%ebx
f012582a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125831:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125836:	0f b6 c0             	movzbl %al,%eax
f0125839:	c1 e0 04             	shl    $0x4,%eax
f012583c:	89 c2                	mov    %eax,%edx
f012583e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125841:	01 d0                	add    %edx,%eax
f0125843:	48                   	dec    %eax
f0125844:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125847:	8b 45 88             	mov    -0x78(%ebp),%eax
f012584a:	ba 00 00 00 00       	mov    $0x0,%edx
f012584f:	f7 75 8c             	divl   -0x74(%ebp)
f0125852:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125855:	29 d0                	sub    %edx,%eax
f0125857:	01 d8                	add    %ebx,%eax
f0125859:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012585e:	39 c1                	cmp    %eax,%ecx
f0125860:	74 17                	je     f0125879 <test_kheap_virt_addr+0x287>
f0125862:	83 ec 04             	sub    $0x4,%esp
f0125865:	68 60 b6 13 f0       	push   $0xf013b660
f012586a:	68 f5 08 00 00       	push   $0x8f5
f012586f:	68 7a b5 13 f0       	push   $0xf013b57a
f0125874:	e8 8c a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125879:	e8 a9 e4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012587e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125881:	74 17                	je     f012589a <test_kheap_virt_addr+0x2a8>
f0125883:	83 ec 04             	sub    $0x4,%esp
f0125886:	68 94 b5 13 f0       	push   $0xf013b594
f012588b:	68 f6 08 00 00       	push   $0x8f6
f0125890:	68 7a b5 13 f0       	push   $0xf013b57a
f0125895:	e8 6b a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012589a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012589d:	e8 b7 77 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01258a2:	29 c3                	sub    %eax,%ebx
f01258a4:	89 d8                	mov    %ebx,%eax
f01258a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01258ab:	74 17                	je     f01258c4 <test_kheap_virt_addr+0x2d2>
f01258ad:	83 ec 04             	sub    $0x4,%esp
f01258b0:	68 fc b5 13 f0       	push   $0xf013b5fc
f01258b5:	68 f7 08 00 00       	push   $0x8f7
f01258ba:	68 7a b5 13 f0       	push   $0xf013b57a
f01258bf:	e8 41 a9 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01258c4:	e8 90 77 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01258c9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258cc:	e8 56 e4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01258d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01258d4:	83 ec 0c             	sub    $0xc,%esp
f01258d7:	68 00 08 00 00       	push   $0x800
f01258dc:	e8 89 20 fe ff       	call   f010796a <kmalloc>
f01258e1:	83 c4 10             	add    $0x10,%esp
f01258e4:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258ea:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01258f0:	89 c1                	mov    %eax,%ecx
f01258f2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01258f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01258fc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125901:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125904:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125907:	ba 00 00 00 00       	mov    $0x0,%edx
f012590c:	f7 75 84             	divl   -0x7c(%ebp)
f012590f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125912:	29 d0                	sub    %edx,%eax
f0125914:	89 c3                	mov    %eax,%ebx
f0125916:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012591d:	10 00 00 
f0125920:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125925:	0f b6 d0             	movzbl %al,%edx
f0125928:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012592e:	01 d0                	add    %edx,%eax
f0125930:	48                   	dec    %eax
f0125931:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125937:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012593d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125942:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125948:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012594e:	29 d0                	sub    %edx,%eax
f0125950:	01 c3                	add    %eax,%ebx
f0125952:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125959:	10 00 00 
f012595c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125961:	0f b6 c0             	movzbl %al,%eax
f0125964:	c1 e0 04             	shl    $0x4,%eax
f0125967:	89 c2                	mov    %eax,%edx
f0125969:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012596f:	01 d0                	add    %edx,%eax
f0125971:	48                   	dec    %eax
f0125972:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125978:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012597e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125983:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125989:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012598f:	29 d0                	sub    %edx,%eax
f0125991:	01 d8                	add    %ebx,%eax
f0125993:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125998:	39 c1                	cmp    %eax,%ecx
f012599a:	74 17                	je     f01259b3 <test_kheap_virt_addr+0x3c1>
f012599c:	83 ec 04             	sub    $0x4,%esp
f012599f:	68 60 b6 13 f0       	push   $0xf013b660
f01259a4:	68 fd 08 00 00       	push   $0x8fd
f01259a9:	68 7a b5 13 f0       	push   $0xf013b57a
f01259ae:	e8 52 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259b3:	e8 6f e3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01259b8:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01259bb:	74 17                	je     f01259d4 <test_kheap_virt_addr+0x3e2>
f01259bd:	83 ec 04             	sub    $0x4,%esp
f01259c0:	68 94 b5 13 f0       	push   $0xf013b594
f01259c5:	68 fe 08 00 00       	push   $0x8fe
f01259ca:	68 7a b5 13 f0       	push   $0xf013b57a
f01259cf:	e8 31 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259d4:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01259d7:	e8 7d 76 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01259dc:	29 c3                	sub    %eax,%ebx
f01259de:	89 d8                	mov    %ebx,%eax
f01259e0:	83 f8 01             	cmp    $0x1,%eax
f01259e3:	74 17                	je     f01259fc <test_kheap_virt_addr+0x40a>
f01259e5:	83 ec 04             	sub    $0x4,%esp
f01259e8:	68 fc b5 13 f0       	push   $0xf013b5fc
f01259ed:	68 ff 08 00 00       	push   $0x8ff
f01259f2:	68 7a b5 13 f0       	push   $0xf013b57a
f01259f7:	e8 09 a8 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01259fc:	e8 58 76 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125a01:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a04:	e8 1e e3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125a09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125a0c:	83 ec 0c             	sub    $0xc,%esp
f0125a0f:	68 00 08 00 00       	push   $0x800
f0125a14:	e8 51 1f fe ff       	call   f010796a <kmalloc>
f0125a19:	83 c4 10             	add    $0x10,%esp
f0125a1c:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a22:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125a28:	89 c1                	mov    %eax,%ecx
f0125a2a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125a31:	10 00 00 
f0125a34:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125a3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a3f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125a45:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a50:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125a56:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a5c:	29 d0                	sub    %edx,%eax
f0125a5e:	89 c3                	mov    %eax,%ebx
f0125a60:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125a67:	10 00 00 
f0125a6a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125a6f:	0f b6 d0             	movzbl %al,%edx
f0125a72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125a78:	01 d0                	add    %edx,%eax
f0125a7a:	48                   	dec    %eax
f0125a7b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125a81:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125a87:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a8c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125a92:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125a98:	29 d0                	sub    %edx,%eax
f0125a9a:	01 c3                	add    %eax,%ebx
f0125a9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125aa3:	10 00 00 
f0125aa6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125aab:	0f b6 c0             	movzbl %al,%eax
f0125aae:	c1 e0 04             	shl    $0x4,%eax
f0125ab1:	89 c2                	mov    %eax,%edx
f0125ab3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125ab9:	01 d0                	add    %edx,%eax
f0125abb:	48                   	dec    %eax
f0125abc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125ac2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125ac8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125acd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125ad3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125ad9:	29 d0                	sub    %edx,%eax
f0125adb:	01 d8                	add    %ebx,%eax
f0125add:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125ae2:	39 c1                	cmp    %eax,%ecx
f0125ae4:	74 17                	je     f0125afd <test_kheap_virt_addr+0x50b>
f0125ae6:	83 ec 04             	sub    $0x4,%esp
f0125ae9:	68 60 b6 13 f0       	push   $0xf013b660
f0125aee:	68 05 09 00 00       	push   $0x905
f0125af3:	68 7a b5 13 f0       	push   $0xf013b57a
f0125af8:	e8 08 a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125afd:	e8 25 e2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125b02:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b05:	74 17                	je     f0125b1e <test_kheap_virt_addr+0x52c>
f0125b07:	83 ec 04             	sub    $0x4,%esp
f0125b0a:	68 94 b5 13 f0       	push   $0xf013b594
f0125b0f:	68 06 09 00 00       	push   $0x906
f0125b14:	68 7a b5 13 f0       	push   $0xf013b57a
f0125b19:	e8 e7 a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b1e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b21:	e8 33 75 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125b26:	29 c3                	sub    %eax,%ebx
f0125b28:	89 d8                	mov    %ebx,%eax
f0125b2a:	83 f8 01             	cmp    $0x1,%eax
f0125b2d:	74 17                	je     f0125b46 <test_kheap_virt_addr+0x554>
f0125b2f:	83 ec 04             	sub    $0x4,%esp
f0125b32:	68 fc b5 13 f0       	push   $0xf013b5fc
f0125b37:	68 07 09 00 00       	push   $0x907
f0125b3c:	68 7a b5 13 f0       	push   $0xf013b57a
f0125b41:	e8 bf a6 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b46:	e8 0e 75 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125b4b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b4e:	e8 d4 e1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125b53:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125b56:	83 ec 0c             	sub    $0xc,%esp
f0125b59:	68 00 1c 00 00       	push   $0x1c00
f0125b5e:	e8 07 1e fe ff       	call   f010796a <kmalloc>
f0125b63:	83 c4 10             	add    $0x10,%esp
f0125b66:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b6c:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125b72:	89 c1                	mov    %eax,%ecx
f0125b74:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125b7b:	10 00 00 
f0125b7e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125b84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b89:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125b8f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b9a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125ba0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125ba6:	29 d0                	sub    %edx,%eax
f0125ba8:	89 c3                	mov    %eax,%ebx
f0125baa:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125bb1:	10 00 00 
f0125bb4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125bb9:	0f b6 d0             	movzbl %al,%edx
f0125bbc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125bc2:	01 d0                	add    %edx,%eax
f0125bc4:	48                   	dec    %eax
f0125bc5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125bcb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125bd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bd6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125bdc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125be2:	29 d0                	sub    %edx,%eax
f0125be4:	01 c3                	add    %eax,%ebx
f0125be6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125bed:	10 00 00 
f0125bf0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125bf5:	0f b6 c0             	movzbl %al,%eax
f0125bf8:	c1 e0 04             	shl    $0x4,%eax
f0125bfb:	89 c2                	mov    %eax,%edx
f0125bfd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c03:	01 d0                	add    %edx,%eax
f0125c05:	48                   	dec    %eax
f0125c06:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125c0c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c12:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c17:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125c1d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c23:	29 d0                	sub    %edx,%eax
f0125c25:	01 d8                	add    %ebx,%eax
f0125c27:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125c2c:	39 c1                	cmp    %eax,%ecx
f0125c2e:	74 17                	je     f0125c47 <test_kheap_virt_addr+0x655>
f0125c30:	83 ec 04             	sub    $0x4,%esp
f0125c33:	68 60 b6 13 f0       	push   $0xf013b660
f0125c38:	68 0d 09 00 00       	push   $0x90d
f0125c3d:	68 7a b5 13 f0       	push   $0xf013b57a
f0125c42:	e8 be a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c47:	e8 db e0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125c4c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125c4f:	74 17                	je     f0125c68 <test_kheap_virt_addr+0x676>
f0125c51:	83 ec 04             	sub    $0x4,%esp
f0125c54:	68 94 b5 13 f0       	push   $0xf013b594
f0125c59:	68 0e 09 00 00       	push   $0x90e
f0125c5e:	68 7a b5 13 f0       	push   $0xf013b57a
f0125c63:	e8 9d a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c68:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c6b:	e8 e9 73 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125c70:	29 c3                	sub    %eax,%ebx
f0125c72:	89 d8                	mov    %ebx,%eax
f0125c74:	83 f8 02             	cmp    $0x2,%eax
f0125c77:	74 17                	je     f0125c90 <test_kheap_virt_addr+0x69e>
f0125c79:	83 ec 04             	sub    $0x4,%esp
f0125c7c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0125c81:	68 0f 09 00 00       	push   $0x90f
f0125c86:	68 7a b5 13 f0       	push   $0xf013b57a
f0125c8b:	e8 75 a5 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125c90:	e8 c4 73 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125c95:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c98:	e8 8a e0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125c9d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125ca0:	83 ec 0c             	sub    $0xc,%esp
f0125ca3:	68 00 fc 2f 00       	push   $0x2ffc00
f0125ca8:	e8 bd 1c fe ff       	call   f010796a <kmalloc>
f0125cad:	83 c4 10             	add    $0x10,%esp
f0125cb0:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125cb6:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125cbc:	89 c1                	mov    %eax,%ecx
f0125cbe:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125cc5:	10 00 00 
f0125cc8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125cce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cd3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125cd9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ce4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125cea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cf0:	29 d0                	sub    %edx,%eax
f0125cf2:	89 c3                	mov    %eax,%ebx
f0125cf4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125cfb:	10 00 00 
f0125cfe:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125d03:	0f b6 d0             	movzbl %al,%edx
f0125d06:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d0c:	01 d0                	add    %edx,%eax
f0125d0e:	48                   	dec    %eax
f0125d0f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d15:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d20:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d26:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d2c:	29 d0                	sub    %edx,%eax
f0125d2e:	01 c3                	add    %eax,%ebx
f0125d30:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125d37:	10 00 00 
f0125d3a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125d3f:	0f b6 c0             	movzbl %al,%eax
f0125d42:	c1 e0 04             	shl    $0x4,%eax
f0125d45:	89 c2                	mov    %eax,%edx
f0125d47:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125d4d:	01 d0                	add    %edx,%eax
f0125d4f:	48                   	dec    %eax
f0125d50:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125d56:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d61:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125d67:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d6d:	29 d0                	sub    %edx,%eax
f0125d6f:	01 d8                	add    %ebx,%eax
f0125d71:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125d76:	39 c1                	cmp    %eax,%ecx
f0125d78:	74 17                	je     f0125d91 <test_kheap_virt_addr+0x79f>
f0125d7a:	83 ec 04             	sub    $0x4,%esp
f0125d7d:	68 60 b6 13 f0       	push   $0xf013b660
f0125d82:	68 15 09 00 00       	push   $0x915
f0125d87:	68 7a b5 13 f0       	push   $0xf013b57a
f0125d8c:	e8 74 a4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d91:	e8 91 df fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125d96:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125d99:	74 17                	je     f0125db2 <test_kheap_virt_addr+0x7c0>
f0125d9b:	83 ec 04             	sub    $0x4,%esp
f0125d9e:	68 94 b5 13 f0       	push   $0xf013b594
f0125da3:	68 16 09 00 00       	push   $0x916
f0125da8:	68 7a b5 13 f0       	push   $0xf013b57a
f0125dad:	e8 53 a4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125db2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125db5:	e8 9f 72 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125dba:	29 c3                	sub    %eax,%ebx
f0125dbc:	89 d8                	mov    %ebx,%eax
f0125dbe:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125dc3:	74 17                	je     f0125ddc <test_kheap_virt_addr+0x7ea>
f0125dc5:	83 ec 04             	sub    $0x4,%esp
f0125dc8:	68 fc b5 13 f0       	push   $0xf013b5fc
f0125dcd:	68 17 09 00 00       	push   $0x917
f0125dd2:	68 7a b5 13 f0       	push   $0xf013b57a
f0125dd7:	e8 29 a4 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125ddc:	e8 78 72 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125de1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125de4:	e8 3e df fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125de9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125dec:	83 ec 0c             	sub    $0xc,%esp
f0125def:	68 00 fc 5f 00       	push   $0x5ffc00
f0125df4:	e8 71 1b fe ff       	call   f010796a <kmalloc>
f0125df9:	83 c4 10             	add    $0x10,%esp
f0125dfc:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e02:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125e08:	89 c1                	mov    %eax,%ecx
f0125e0a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e11:	10 00 00 
f0125e14:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e1f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e30:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125e36:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e3c:	29 d0                	sub    %edx,%eax
f0125e3e:	89 c3                	mov    %eax,%ebx
f0125e40:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125e47:	10 00 00 
f0125e4a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125e4f:	0f b6 d0             	movzbl %al,%edx
f0125e52:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125e58:	01 d0                	add    %edx,%eax
f0125e5a:	48                   	dec    %eax
f0125e5b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125e61:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125e67:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e6c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125e72:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125e78:	29 d0                	sub    %edx,%eax
f0125e7a:	01 c3                	add    %eax,%ebx
f0125e7c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125e83:	10 00 00 
f0125e86:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125e8b:	0f b6 c0             	movzbl %al,%eax
f0125e8e:	c1 e0 04             	shl    $0x4,%eax
f0125e91:	89 c2                	mov    %eax,%edx
f0125e93:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125e99:	01 d0                	add    %edx,%eax
f0125e9b:	48                   	dec    %eax
f0125e9c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125ea2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ead:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125eb3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125eb9:	29 d0                	sub    %edx,%eax
f0125ebb:	01 d8                	add    %ebx,%eax
f0125ebd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125ec2:	39 c1                	cmp    %eax,%ecx
f0125ec4:	74 17                	je     f0125edd <test_kheap_virt_addr+0x8eb>
f0125ec6:	83 ec 04             	sub    $0x4,%esp
f0125ec9:	68 60 b6 13 f0       	push   $0xf013b660
f0125ece:	68 1d 09 00 00       	push   $0x91d
f0125ed3:	68 7a b5 13 f0       	push   $0xf013b57a
f0125ed8:	e8 28 a3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125edd:	e8 45 de fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125ee2:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125ee5:	74 17                	je     f0125efe <test_kheap_virt_addr+0x90c>
f0125ee7:	83 ec 04             	sub    $0x4,%esp
f0125eea:	68 94 b5 13 f0       	push   $0xf013b594
f0125eef:	68 1e 09 00 00       	push   $0x91e
f0125ef4:	68 7a b5 13 f0       	push   $0xf013b57a
f0125ef9:	e8 07 a3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125efe:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125f01:	e8 53 71 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125f06:	29 c3                	sub    %eax,%ebx
f0125f08:	89 d8                	mov    %ebx,%eax
f0125f0a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125f0f:	74 17                	je     f0125f28 <test_kheap_virt_addr+0x936>
f0125f11:	83 ec 04             	sub    $0x4,%esp
f0125f14:	68 fc b5 13 f0       	push   $0xf013b5fc
f0125f19:	68 1f 09 00 00       	push   $0x91f
f0125f1e:	68 7a b5 13 f0       	push   $0xf013b57a
f0125f23:	e8 dd a2 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f28:	e8 2c 71 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125f2d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f30:	e8 f2 dd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0125f35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125f38:	83 ec 0c             	sub    $0xc,%esp
f0125f3b:	68 00 38 00 00       	push   $0x3800
f0125f40:	e8 25 1a fe ff       	call   f010796a <kmalloc>
f0125f45:	83 c4 10             	add    $0x10,%esp
f0125f48:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f4e:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125f54:	89 c1                	mov    %eax,%ecx
f0125f56:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125f5d:	10 00 00 
f0125f60:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125f66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f6b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125f71:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125f77:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f7c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125f82:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125f88:	29 d0                	sub    %edx,%eax
f0125f8a:	89 c3                	mov    %eax,%ebx
f0125f8c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125f93:	10 00 00 
f0125f96:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125f9b:	0f b6 d0             	movzbl %al,%edx
f0125f9e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125fa4:	01 d0                	add    %edx,%eax
f0125fa6:	48                   	dec    %eax
f0125fa7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125fad:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125fb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fb8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125fbe:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125fc4:	29 d0                	sub    %edx,%eax
f0125fc6:	01 c3                	add    %eax,%ebx
f0125fc8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125fcf:	10 00 00 
f0125fd2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0125fd7:	0f b6 c0             	movzbl %al,%eax
f0125fda:	c1 e0 04             	shl    $0x4,%eax
f0125fdd:	89 c2                	mov    %eax,%edx
f0125fdf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125fe5:	01 d0                	add    %edx,%eax
f0125fe7:	48                   	dec    %eax
f0125fe8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125fee:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125ff4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ff9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125fff:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126005:	29 d0                	sub    %edx,%eax
f0126007:	01 d8                	add    %ebx,%eax
f0126009:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012600e:	39 c1                	cmp    %eax,%ecx
f0126010:	74 17                	je     f0126029 <test_kheap_virt_addr+0xa37>
f0126012:	83 ec 04             	sub    $0x4,%esp
f0126015:	68 60 b6 13 f0       	push   $0xf013b660
f012601a:	68 25 09 00 00       	push   $0x925
f012601f:	68 7a b5 13 f0       	push   $0xf013b57a
f0126024:	e8 dc a1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126029:	e8 f9 dc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012602e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0126031:	74 17                	je     f012604a <test_kheap_virt_addr+0xa58>
f0126033:	83 ec 04             	sub    $0x4,%esp
f0126036:	68 94 b5 13 f0       	push   $0xf013b594
f012603b:	68 26 09 00 00       	push   $0x926
f0126040:	68 7a b5 13 f0       	push   $0xf013b57a
f0126045:	e8 bb a1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012604a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012604d:	e8 07 70 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126052:	29 c3                	sub    %eax,%ebx
f0126054:	89 d8                	mov    %ebx,%eax
f0126056:	83 f8 04             	cmp    $0x4,%eax
f0126059:	74 17                	je     f0126072 <test_kheap_virt_addr+0xa80>
f012605b:	83 ec 04             	sub    $0x4,%esp
f012605e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0126063:	68 27 09 00 00       	push   $0x927
f0126068:	68 7a b5 13 f0       	push   $0xf013b57a
f012606d:	e8 93 a1 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0126072:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126079:	10 00 00 
f012607c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126082:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126087:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012608d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126093:	ba 00 00 00 00       	mov    $0x0,%edx
f0126098:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012609e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01260a4:	29 d0                	sub    %edx,%eax
f01260a6:	89 c1                	mov    %eax,%ecx
f01260a8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01260af:	10 00 00 
f01260b2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01260b7:	0f b6 d0             	movzbl %al,%edx
f01260ba:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01260c0:	01 d0                	add    %edx,%eax
f01260c2:	48                   	dec    %eax
f01260c3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01260c9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01260cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01260d4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01260da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01260e0:	29 d0                	sub    %edx,%eax
f01260e2:	01 c1                	add    %eax,%ecx
f01260e4:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01260eb:	10 00 00 
f01260ee:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01260f3:	0f b6 c0             	movzbl %al,%eax
f01260f6:	c1 e0 04             	shl    $0x4,%eax
f01260f9:	89 c2                	mov    %eax,%edx
f01260fb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126101:	01 d0                	add    %edx,%eax
f0126103:	48                   	dec    %eax
f0126104:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012610a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126110:	ba 00 00 00 00       	mov    $0x0,%edx
f0126115:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012611b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126121:	29 d0                	sub    %edx,%eax
f0126123:	01 c1                	add    %eax,%ecx
f0126125:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012612c:	10 00 00 
f012612f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126135:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012613a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126140:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126146:	ba 00 00 00 00       	mov    $0x0,%edx
f012614b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126151:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126157:	29 d0                	sub    %edx,%eax
f0126159:	29 c1                	sub    %eax,%ecx
f012615b:	89 c8                	mov    %ecx,%eax
f012615d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0126162:	c1 e8 0c             	shr    $0xc,%eax
f0126165:	89 c2                	mov    %eax,%edx
f0126167:	4a                   	dec    %edx
f0126168:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f012616e:	c1 e0 02             	shl    $0x2,%eax
f0126171:	8d 50 03             	lea    0x3(%eax),%edx
f0126174:	b8 10 00 00 00       	mov    $0x10,%eax
f0126179:	48                   	dec    %eax
f012617a:	01 d0                	add    %edx,%eax
f012617c:	bf 10 00 00 00       	mov    $0x10,%edi
f0126181:	ba 00 00 00 00       	mov    $0x0,%edx
f0126186:	f7 f7                	div    %edi
f0126188:	6b c0 10             	imul   $0x10,%eax,%eax
f012618b:	29 c4                	sub    %eax,%esp
f012618d:	89 e0                	mov    %esp,%eax
f012618f:	83 c0 03             	add    $0x3,%eax
f0126192:	c1 e8 02             	shr    $0x2,%eax
f0126195:	c1 e0 02             	shl    $0x2,%eax
f0126198:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f012619e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01261a5:	10 00 00 
f01261a8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01261ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261b3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01261b9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01261bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01261c4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01261ca:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01261d0:	29 d0                	sub    %edx,%eax
f01261d2:	89 c1                	mov    %eax,%ecx
f01261d4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01261db:	10 00 00 
f01261de:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01261e3:	0f b6 d0             	movzbl %al,%edx
f01261e6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01261ec:	01 d0                	add    %edx,%eax
f01261ee:	48                   	dec    %eax
f01261ef:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01261f5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01261fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126200:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126206:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012620c:	29 d0                	sub    %edx,%eax
f012620e:	01 c1                	add    %eax,%ecx
f0126210:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126217:	10 00 00 
f012621a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012621f:	0f b6 c0             	movzbl %al,%eax
f0126222:	c1 e0 04             	shl    $0x4,%eax
f0126225:	89 c2                	mov    %eax,%edx
f0126227:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012622d:	01 d0                	add    %edx,%eax
f012622f:	48                   	dec    %eax
f0126230:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126236:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012623c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126241:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126247:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012624d:	29 d0                	sub    %edx,%eax
f012624f:	01 c1                	add    %eax,%ecx
f0126251:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0126258:	10 00 00 
f012625b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126261:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126266:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012626c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126272:	ba 00 00 00 00       	mov    $0x0,%edx
f0126277:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012627d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126283:	29 d0                	sub    %edx,%eax
f0126285:	29 c1                	sub    %eax,%ecx
f0126287:	89 c8                	mov    %ecx,%eax
f0126289:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012628e:	c1 e8 0c             	shr    $0xc,%eax
f0126291:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126297:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012629e:	10 00 00 
f01262a1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01262a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262ac:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01262b2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01262bd:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01262c3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262c9:	29 d0                	sub    %edx,%eax
f01262cb:	89 c1                	mov    %eax,%ecx
f01262cd:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01262d4:	10 00 00 
f01262d7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01262dc:	0f b6 d0             	movzbl %al,%edx
f01262df:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01262e5:	01 d0                	add    %edx,%eax
f01262e7:	48                   	dec    %eax
f01262e8:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01262ee:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01262f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01262f9:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01262ff:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126305:	29 d0                	sub    %edx,%eax
f0126307:	01 c1                	add    %eax,%ecx
f0126309:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0126310:	10 00 00 
f0126313:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126318:	0f b6 c0             	movzbl %al,%eax
f012631b:	c1 e0 04             	shl    $0x4,%eax
f012631e:	89 c2                	mov    %eax,%edx
f0126320:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0126326:	01 d0                	add    %edx,%eax
f0126328:	48                   	dec    %eax
f0126329:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012632f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126335:	ba 00 00 00 00       	mov    $0x0,%edx
f012633a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0126340:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126346:	29 d0                	sub    %edx,%eax
f0126348:	01 c8                	add    %ecx,%eax
f012634a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012634f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0126355:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012635c:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0126363:	10 00 00 
f0126366:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012636c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126371:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0126377:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012637d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126382:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0126388:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012638e:	29 d0                	sub    %edx,%eax
f0126390:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126395:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0126398:	e9 21 01 00 00       	jmp    f01264be <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012639d:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01263a2:	83 ec 04             	sub    $0x4,%esp
f01263a5:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01263ab:	52                   	push   %edx
f01263ac:	ff 75 e4             	pushl  -0x1c(%ebp)
f01263af:	50                   	push   %eax
f01263b0:	e8 5b 06 fe ff       	call   f0106a10 <get_page_table>
f01263b5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01263b8:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01263be:	85 c0                	test   %eax,%eax
f01263c0:	75 17                	jne    f01263d9 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01263c2:	83 ec 04             	sub    $0x4,%esp
f01263c5:	68 1c bf 13 f0       	push   $0xf013bf1c
f01263ca:	68 38 09 00 00       	push   $0x938
f01263cf:	68 7a b5 13 f0       	push   $0xf013b57a
f01263d4:	e8 2c 9e fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01263d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01263dc:	c1 e8 0c             	shr    $0xc,%eax
f01263df:	25 ff 03 00 00       	and    $0x3ff,%eax
f01263e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01263e7:	e9 ba 00 00 00       	jmp    f01264a6 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f01263ec:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01263f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01263f5:	c1 e2 02             	shl    $0x2,%edx
f01263f8:	01 d0                	add    %edx,%eax
f01263fa:	8b 00                	mov    (%eax),%eax
f01263fc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0126401:	89 c1                	mov    %eax,%ecx
f0126403:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126409:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012640c:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012640f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126415:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126418:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012641b:	83 ec 0c             	sub    $0xc,%esp
f012641e:	50                   	push   %eax
f012641f:	e8 87 17 fe ff       	call   f0107bab <kheap_virtual_address>
f0126424:	83 c4 10             	add    $0x10,%esp
f0126427:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f012642d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126433:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126436:	74 61                	je     f0126499 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126438:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012643e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126441:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126444:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f012644a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012644d:	c1 e1 02             	shl    $0x2,%ecx
f0126450:	01 ca                	add    %ecx,%edx
f0126452:	8b 12                	mov    (%edx),%edx
f0126454:	89 d1                	mov    %edx,%ecx
f0126456:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012645c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012645f:	c1 e2 0c             	shl    $0xc,%edx
f0126462:	89 d3                	mov    %edx,%ebx
f0126464:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126467:	01 da                	add    %ebx,%edx
f0126469:	83 ec 0c             	sub    $0xc,%esp
f012646c:	50                   	push   %eax
f012646d:	51                   	push   %ecx
f012646e:	52                   	push   %edx
f012646f:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0126475:	68 10 c0 13 f0       	push   $0xf013c010
f012647a:	e8 8f a8 fd ff       	call   f0100d0e <cprintf>
f012647f:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0126482:	83 ec 04             	sub    $0x4,%esp
f0126485:	68 53 c0 13 f0       	push   $0xf013c053
f012648a:	68 42 09 00 00       	push   $0x942
f012648f:	68 7a b5 13 f0       	push   $0xf013b57a
f0126494:	e8 6c 9d fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0126499:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01264a0:	ff 45 dc             	incl   -0x24(%ebp)
f01264a3:	ff 45 e0             	incl   -0x20(%ebp)
f01264a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01264a9:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01264af:	7d 0d                	jge    f01264be <test_kheap_virt_addr+0xecc>
f01264b1:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01264b8:	0f 8e 2e ff ff ff    	jle    f01263ec <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01264be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01264c1:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01264c7:	0f 82 d0 fe ff ff    	jb     f012639d <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01264cd:	83 ec 0c             	sub    $0xc,%esp
f01264d0:	68 70 c0 13 f0       	push   $0xf013c070
f01264d5:	e8 34 a8 fd ff       	call   f0100d0e <cprintf>
f01264da:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01264dd:	e8 77 6b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01264e2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01264e8:	e8 3a d8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01264ed:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f01264f3:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01264f9:	83 ec 0c             	sub    $0xc,%esp
f01264fc:	50                   	push   %eax
f01264fd:	e8 b1 15 fe ff       	call   f0107ab3 <kfree>
f0126502:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126505:	e8 1d d8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012650a:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126510:	74 17                	je     f0126529 <test_kheap_virt_addr+0xf37>
f0126512:	83 ec 04             	sub    $0x4,%esp
f0126515:	68 94 b5 13 f0       	push   $0xf013b594
f012651a:	68 50 09 00 00       	push   $0x950
f012651f:	68 7a b5 13 f0       	push   $0xf013b57a
f0126524:	e8 dc 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126529:	e8 2b 6b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012652e:	89 c2                	mov    %eax,%edx
f0126530:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126536:	29 c2                	sub    %eax,%edx
f0126538:	89 d0                	mov    %edx,%eax
f012653a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012653f:	74 17                	je     f0126558 <test_kheap_virt_addr+0xf66>
f0126541:	83 ec 04             	sub    $0x4,%esp
f0126544:	68 04 bd 13 f0       	push   $0xf013bd04
f0126549:	68 51 09 00 00       	push   $0x951
f012654e:	68 7a b5 13 f0       	push   $0xf013b57a
f0126553:	e8 ad 9c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126558:	e8 fc 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012655d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126563:	e8 bf d7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126568:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f012656e:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0126574:	83 ec 0c             	sub    $0xc,%esp
f0126577:	50                   	push   %eax
f0126578:	e8 36 15 fe ff       	call   f0107ab3 <kfree>
f012657d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126580:	e8 a2 d7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126585:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012658b:	74 17                	je     f01265a4 <test_kheap_virt_addr+0xfb2>
f012658d:	83 ec 04             	sub    $0x4,%esp
f0126590:	68 94 b5 13 f0       	push   $0xf013b594
f0126595:	68 57 09 00 00       	push   $0x957
f012659a:	68 7a b5 13 f0       	push   $0xf013b57a
f012659f:	e8 61 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01265a4:	e8 b0 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01265a9:	89 c2                	mov    %eax,%edx
f01265ab:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01265b1:	29 c2                	sub    %eax,%edx
f01265b3:	89 d0                	mov    %edx,%eax
f01265b5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265ba:	74 17                	je     f01265d3 <test_kheap_virt_addr+0xfe1>
f01265bc:	83 ec 04             	sub    $0x4,%esp
f01265bf:	68 04 bd 13 f0       	push   $0xf013bd04
f01265c4:	68 58 09 00 00       	push   $0x958
f01265c9:	68 7a b5 13 f0       	push   $0xf013b57a
f01265ce:	e8 32 9c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01265d3:	e8 81 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01265d8:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265de:	e8 44 d7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01265e3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01265e9:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01265ef:	83 ec 0c             	sub    $0xc,%esp
f01265f2:	50                   	push   %eax
f01265f3:	e8 bb 14 fe ff       	call   f0107ab3 <kfree>
f01265f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265fb:	e8 27 d7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126600:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126606:	74 17                	je     f012661f <test_kheap_virt_addr+0x102d>
f0126608:	83 ec 04             	sub    $0x4,%esp
f012660b:	68 94 b5 13 f0       	push   $0xf013b594
f0126610:	68 5e 09 00 00       	push   $0x95e
f0126615:	68 7a b5 13 f0       	push   $0xf013b57a
f012661a:	e8 e6 9b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012661f:	e8 35 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126624:	89 c2                	mov    %eax,%edx
f0126626:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012662c:	29 c2                	sub    %eax,%edx
f012662e:	89 d0                	mov    %edx,%eax
f0126630:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126635:	74 17                	je     f012664e <test_kheap_virt_addr+0x105c>
f0126637:	83 ec 04             	sub    $0x4,%esp
f012663a:	68 04 bd 13 f0       	push   $0xf013bd04
f012663f:	68 5f 09 00 00       	push   $0x95f
f0126644:	68 7a b5 13 f0       	push   $0xf013b57a
f0126649:	e8 b7 9b fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012664e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126655:	10 00 00 
f0126658:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012665e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126663:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126669:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012666f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126674:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012667a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126680:	29 d0                	sub    %edx,%eax
f0126682:	89 c1                	mov    %eax,%ecx
f0126684:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012668b:	10 00 00 
f012668e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126693:	0f b6 d0             	movzbl %al,%edx
f0126696:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012669c:	01 d0                	add    %edx,%eax
f012669e:	48                   	dec    %eax
f012669f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01266a5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01266b0:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01266b6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266bc:	29 d0                	sub    %edx,%eax
f01266be:	01 c1                	add    %eax,%ecx
f01266c0:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01266c7:	10 00 00 
f01266ca:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01266cf:	0f b6 c0             	movzbl %al,%eax
f01266d2:	c1 e0 04             	shl    $0x4,%eax
f01266d5:	89 c2                	mov    %eax,%edx
f01266d7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01266dd:	01 d0                	add    %edx,%eax
f01266df:	48                   	dec    %eax
f01266e0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01266e6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01266ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01266f1:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01266f7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01266fd:	29 d0                	sub    %edx,%eax
f01266ff:	01 c8                	add    %ecx,%eax
f0126701:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126706:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012670c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0126713:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012671a:	10 00 00 
f012671d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126723:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126728:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012672e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126734:	ba 00 00 00 00       	mov    $0x0,%edx
f0126739:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012673f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126745:	29 d0                	sub    %edx,%eax
f0126747:	89 c1                	mov    %eax,%ecx
f0126749:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126750:	10 00 00 
f0126753:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126758:	0f b6 d0             	movzbl %al,%edx
f012675b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126761:	01 d0                	add    %edx,%eax
f0126763:	48                   	dec    %eax
f0126764:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f012676a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126770:	ba 00 00 00 00       	mov    $0x0,%edx
f0126775:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f012677b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126781:	29 d0                	sub    %edx,%eax
f0126783:	01 c1                	add    %eax,%ecx
f0126785:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012678c:	10 00 00 
f012678f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126794:	0f b6 c0             	movzbl %al,%eax
f0126797:	c1 e0 04             	shl    $0x4,%eax
f012679a:	89 c2                	mov    %eax,%edx
f012679c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01267a2:	01 d0                	add    %edx,%eax
f01267a4:	48                   	dec    %eax
f01267a5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01267ab:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01267b6:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01267bc:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267c2:	29 d0                	sub    %edx,%eax
f01267c4:	01 c1                	add    %eax,%ecx
f01267c6:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01267cd:	10 00 00 
f01267d0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01267d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267db:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01267e1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01267e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01267ec:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01267f2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01267f8:	29 d0                	sub    %edx,%eax
f01267fa:	29 c1                	sub    %eax,%ecx
f01267fc:	89 c8                	mov    %ecx,%eax
f01267fe:	05 00 40 00 00       	add    $0x4000,%eax
f0126803:	c1 e8 0c             	shr    $0xc,%eax
f0126806:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012680c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126812:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126815:	eb 41                	jmp    f0126858 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126817:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012681d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126820:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126823:	83 ec 0c             	sub    $0xc,%esp
f0126826:	50                   	push   %eax
f0126827:	e8 7f 13 fe ff       	call   f0107bab <kheap_virtual_address>
f012682c:	83 c4 10             	add    $0x10,%esp
f012682f:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126835:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012683c:	74 17                	je     f0126855 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012683e:	83 ec 04             	sub    $0x4,%esp
f0126841:	68 53 c0 13 f0       	push   $0xf013c053
f0126846:	68 70 09 00 00       	push   $0x970
f012684b:	68 7a b5 13 f0       	push   $0xf013b57a
f0126850:	e8 b0 99 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126855:	ff 45 d8             	incl   -0x28(%ebp)
f0126858:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012685e:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126864:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126867:	39 c2                	cmp    %eax,%edx
f0126869:	77 ac                	ja     f0126817 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012686b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126871:	05 00 04 00 00       	add    $0x400,%eax
f0126876:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126879:	e9 83 00 00 00       	jmp    f0126901 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012687e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126884:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126887:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012688a:	83 ec 0c             	sub    $0xc,%esp
f012688d:	50                   	push   %eax
f012688e:	e8 18 13 fe ff       	call   f0107bab <kheap_virtual_address>
f0126893:	83 c4 10             	add    $0x10,%esp
f0126896:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012689c:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01268a3:	10 00 00 
f01268a6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01268ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01268b1:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01268b7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01268c2:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01268c8:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268ce:	29 d0                	sub    %edx,%eax
f01268d0:	89 c2                	mov    %eax,%edx
f01268d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01268d5:	c1 e0 0c             	shl    $0xc,%eax
f01268d8:	01 d0                	add    %edx,%eax
f01268da:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01268df:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f01268e5:	74 17                	je     f01268fe <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f01268e7:	83 ec 04             	sub    $0x4,%esp
f01268ea:	68 53 c0 13 f0       	push   $0xf013c053
f01268ef:	68 7a 09 00 00       	push   $0x97a
f01268f4:	68 7a b5 13 f0       	push   $0xf013b57a
f01268f9:	e8 07 99 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01268fe:	ff 45 d8             	incl   -0x28(%ebp)
f0126901:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126907:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012690d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126910:	39 c2                	cmp    %eax,%edx
f0126912:	0f 87 66 ff ff ff    	ja     f012687e <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126918:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012691e:	05 04 07 00 00       	add    $0x704,%eax
f0126923:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126926:	eb 41                	jmp    f0126969 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126928:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012692e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126931:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126934:	83 ec 0c             	sub    $0xc,%esp
f0126937:	50                   	push   %eax
f0126938:	e8 6e 12 fe ff       	call   f0107bab <kheap_virtual_address>
f012693d:	83 c4 10             	add    $0x10,%esp
f0126940:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126946:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012694d:	74 17                	je     f0126966 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012694f:	83 ec 04             	sub    $0x4,%esp
f0126952:	68 53 c0 13 f0       	push   $0xf013c053
f0126957:	68 83 09 00 00       	push   $0x983
f012695c:	68 7a b5 13 f0       	push   $0xf013b57a
f0126961:	e8 9f 98 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126966:	ff 45 d8             	incl   -0x28(%ebp)
f0126969:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012696f:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126975:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126978:	39 c2                	cmp    %eax,%edx
f012697a:	77 ac                	ja     f0126928 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f012697c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126982:	05 04 0d 00 00       	add    $0xd04,%eax
f0126987:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012698a:	e9 83 00 00 00       	jmp    f0126a12 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012698f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126995:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126998:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012699b:	83 ec 0c             	sub    $0xc,%esp
f012699e:	50                   	push   %eax
f012699f:	e8 07 12 fe ff       	call   f0107bab <kheap_virtual_address>
f01269a4:	83 c4 10             	add    $0x10,%esp
f01269a7:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01269ad:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01269b4:	10 00 00 
f01269b7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01269bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269c2:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01269c8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01269ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01269d3:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01269d9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01269df:	29 d0                	sub    %edx,%eax
f01269e1:	89 c2                	mov    %eax,%edx
f01269e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01269e6:	c1 e0 0c             	shl    $0xc,%eax
f01269e9:	01 d0                	add    %edx,%eax
f01269eb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01269f0:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01269f6:	74 17                	je     f0126a0f <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01269f8:	83 ec 04             	sub    $0x4,%esp
f01269fb:	68 53 c0 13 f0       	push   $0xf013c053
f0126a00:	68 8c 09 00 00       	push   $0x98c
f0126a05:	68 7a b5 13 f0       	push   $0xf013b57a
f0126a0a:	e8 f6 97 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126a0f:	ff 45 d8             	incl   -0x28(%ebp)
f0126a12:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126a18:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126a1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a21:	39 c2                	cmp    %eax,%edx
f0126a23:	0f 87 66 ff ff ff    	ja     f012698f <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126a29:	83 ec 0c             	sub    $0xc,%esp
f0126a2c:	68 05 b7 13 f0       	push   $0xf013b705
f0126a31:	e8 d8 a2 fd ff       	call   f0100d0e <cprintf>
f0126a36:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126a39:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126a40:	eb 54                	jmp    f0126a96 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126a42:	83 ec 0c             	sub    $0xc,%esp
f0126a45:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a48:	e8 5e 11 fe ff       	call   f0107bab <kheap_virtual_address>
f0126a4d:	83 c4 10             	add    $0x10,%esp
f0126a50:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126a56:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126a5d:	74 30                	je     f0126a8f <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126a5f:	83 ec 04             	sub    $0x4,%esp
f0126a62:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126a68:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a6b:	68 a1 c0 13 f0       	push   $0xf013c0a1
f0126a70:	e8 99 a2 fd ff       	call   f0100d0e <cprintf>
f0126a75:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126a78:	83 ec 04             	sub    $0x4,%esp
f0126a7b:	68 53 c0 13 f0       	push   $0xf013c053
f0126a80:	68 9c 09 00 00       	push   $0x99c
f0126a85:	68 7a b5 13 f0       	push   $0xf013b57a
f0126a8a:	e8 76 97 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126a8f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126a96:	b8 c0 a2 86 00       	mov    $0x86a2c0,%eax
f0126a9b:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126a9e:	72 a2                	jb     f0126a42 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126aa0:	83 ec 0c             	sub    $0xc,%esp
f0126aa3:	68 5e b7 13 f0       	push   $0xf013b75e
f0126aa8:	e8 61 a2 fd ff       	call   f0100d0e <cprintf>
f0126aad:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126ab0:	83 ec 0c             	sub    $0xc,%esp
f0126ab3:	68 c0 c0 13 f0       	push   $0xf013c0c0
f0126ab8:	e8 51 a2 fd ff       	call   f0100d0e <cprintf>
f0126abd:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126ac0:	b8 01 00 00 00       	mov    $0x1,%eax
f0126ac5:	89 f4                	mov    %esi,%esp

}
f0126ac7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126aca:	5b                   	pop    %ebx
f0126acb:	5e                   	pop    %esi
f0126acc:	5f                   	pop    %edi
f0126acd:	5d                   	pop    %ebp
f0126ace:	c3                   	ret    

f0126acf <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126acf:	55                   	push   %ebp
f0126ad0:	89 e5                	mov    %esp,%ebp
f0126ad2:	57                   	push   %edi
f0126ad3:	56                   	push   %esi
f0126ad4:	53                   	push   %ebx
f0126ad5:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126adb:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f0126ae0:	84 c0                	test   %al,%al
f0126ae2:	74 56                	je     f0126b3a <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126ae4:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126aeb:	e8 69 65 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126af0:	a3 b8 a2 86 f0       	mov    %eax,0xf086a2b8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126af5:	e8 2d d2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126afa:	a3 b4 a2 86 f0       	mov    %eax,0xf086a2b4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126aff:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b05:	bb 1d c2 13 f0       	mov    $0xf013c21d,%ebx
f0126b0a:	ba 11 00 00 00       	mov    $0x11,%edx
f0126b0f:	89 c7                	mov    %eax,%edi
f0126b11:	89 de                	mov    %ebx,%esi
f0126b13:	89 d1                	mov    %edx,%ecx
f0126b15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126b17:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126b1d:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126b22:	b0 00                	mov    $0x0,%al
f0126b24:	89 d7                	mov    %edx,%edi
f0126b26:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126b28:	83 ec 0c             	sub    $0xc,%esp
f0126b2b:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b31:	50                   	push   %eax
f0126b32:	e8 39 a2 fd ff       	call   f0100d70 <execute_command>
f0126b37:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126b3a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126b41:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126b48:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f0126b4d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126b50:	eb 2d                	jmp    f0126b7f <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126b52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b55:	05 5c 05 00 00       	add    $0x55c,%eax
f0126b5a:	83 ec 08             	sub    $0x8,%esp
f0126b5d:	68 07 c1 13 f0       	push   $0xf013c107
f0126b62:	50                   	push   %eax
f0126b63:	e8 79 af 00 00       	call   f0131ae1 <strcmp>
f0126b68:	83 c4 10             	add    $0x10,%esp
f0126b6b:	85 c0                	test   %eax,%eax
f0126b6d:	75 08                	jne    f0126b77 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126b6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126b75:	eb 2f                	jmp    f0126ba6 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126b77:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0126b7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126b7f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126b83:	74 08                	je     f0126b8d <test_three_creation_functions+0xbe>
f0126b85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b88:	8b 40 44             	mov    0x44(%eax),%eax
f0126b8b:	eb 05                	jmp    f0126b92 <test_three_creation_functions+0xc3>
f0126b8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0126b92:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f0126b97:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0126b9c:	85 c0                	test   %eax,%eax
f0126b9e:	75 b2                	jne    f0126b52 <test_three_creation_functions+0x83>
f0126ba0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126ba4:	75 ac                	jne    f0126b52 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126ba6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126ba9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126baf:	85 c0                	test   %eax,%eax
f0126bb1:	74 17                	je     f0126bca <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126bb3:	83 ec 04             	sub    $0x4,%esp
f0126bb6:	68 10 c1 13 f0       	push   $0xf013c110
f0126bbb:	68 c6 09 00 00       	push   $0x9c6
f0126bc0:	68 7a b5 13 f0       	push   $0xf013b57a
f0126bc5:	e8 3b 96 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126bca:	83 ec 0c             	sub    $0xc,%esp
f0126bcd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126bd0:	e8 50 13 fe ff       	call   f0107f25 <env_page_ws_get_size>
f0126bd5:	83 c4 10             	add    $0x10,%esp
f0126bd8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126bdb:	e8 79 64 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126be0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126be3:	e8 3f d1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126be8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126beb:	a1 b4 a2 86 f0       	mov    0xf086a2b4,%eax
f0126bf0:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126bf3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126bf6:	74 17                	je     f0126c0f <test_three_creation_functions+0x140>
f0126bf8:	83 ec 04             	sub    $0x4,%esp
f0126bfb:	68 94 b5 13 f0       	push   $0xf013b594
f0126c00:	68 cc 09 00 00       	push   $0x9cc
f0126c05:	68 7a b5 13 f0       	push   $0xf013b57a
f0126c0a:	e8 f6 95 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c0f:	a1 b8 a2 86 f0       	mov    0xf086a2b8,%eax
f0126c14:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126c17:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126c1a:	83 c2 15             	add    $0x15,%edx
f0126c1d:	39 d0                	cmp    %edx,%eax
f0126c1f:	74 17                	je     f0126c38 <test_three_creation_functions+0x169>
f0126c21:	83 ec 04             	sub    $0x4,%esp
f0126c24:	68 fc b5 13 f0       	push   $0xf013b5fc
f0126c29:	68 ce 09 00 00       	push   $0x9ce
f0126c2e:	68 7a b5 13 f0       	push   $0xf013b57a
f0126c33:	e8 cd 95 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126c38:	83 ec 0c             	sub    $0xc,%esp
f0126c3b:	68 00 10 00 00       	push   $0x1000
f0126c40:	e8 25 0d fe ff       	call   f010796a <kmalloc>
f0126c45:	83 c4 10             	add    $0x10,%esp
f0126c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126c4b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126c52:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126c55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126c5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c65:	f7 75 cc             	divl   -0x34(%ebp)
f0126c68:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c6b:	29 d0                	sub    %edx,%eax
f0126c6d:	89 c1                	mov    %eax,%ecx
f0126c6f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126c76:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126c7b:	0f b6 d0             	movzbl %al,%edx
f0126c7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126c81:	01 d0                	add    %edx,%eax
f0126c83:	48                   	dec    %eax
f0126c84:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126c87:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126c8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c8f:	f7 75 c4             	divl   -0x3c(%ebp)
f0126c92:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126c95:	29 d0                	sub    %edx,%eax
f0126c97:	01 c1                	add    %eax,%ecx
f0126c99:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126ca0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126ca5:	0f b6 c0             	movzbl %al,%eax
f0126ca8:	c1 e0 04             	shl    $0x4,%eax
f0126cab:	89 c2                	mov    %eax,%edx
f0126cad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126cb0:	01 d0                	add    %edx,%eax
f0126cb2:	48                   	dec    %eax
f0126cb3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126cb6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126cb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cbe:	f7 75 bc             	divl   -0x44(%ebp)
f0126cc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126cc4:	29 d0                	sub    %edx,%eax
f0126cc6:	01 c8                	add    %ecx,%eax
f0126cc8:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126cce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126cd1:	39 c2                	cmp    %eax,%edx
f0126cd3:	74 17                	je     f0126cec <test_three_creation_functions+0x21d>
f0126cd5:	83 ec 04             	sub    $0x4,%esp
f0126cd8:	68 60 c1 13 f0       	push   $0xf013c160
f0126cdd:	68 d2 09 00 00       	push   $0x9d2
f0126ce2:	68 7a b5 13 f0       	push   $0xf013b57a
f0126ce7:	e8 19 95 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126cec:	83 ec 0c             	sub    $0xc,%esp
f0126cef:	68 d0 c1 13 f0       	push   $0xf013c1d0
f0126cf4:	e8 15 a0 fd ff       	call   f0100d0e <cprintf>
f0126cf9:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126cfc:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126d01:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126d04:	5b                   	pop    %ebx
f0126d05:	5e                   	pop    %esi
f0126d06:	5f                   	pop    %edi
f0126d07:	5d                   	pop    %ebp
f0126d08:	c3                   	ret    

f0126d09 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126d09:	55                   	push   %ebp
f0126d0a:	89 e5                	mov    %esp,%ebp
f0126d0c:	57                   	push   %edi
f0126d0d:	53                   	push   %ebx
f0126d0e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126d14:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126d18:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126d1c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126d22:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126d28:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126d2f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126d36:	e8 1e 63 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126d3b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126d3e:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126d44:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d49:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d4e:	89 d7                	mov    %edx,%edi
f0126d50:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126d52:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126d58:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d62:	89 d7                	mov    %edx,%edi
f0126d64:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126d66:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126d6c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d71:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d76:	89 d7                	mov    %edx,%edi
f0126d78:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d7a:	e8 da 62 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126d7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d82:	e8 a0 cf fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126d87:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126d8a:	83 ec 0c             	sub    $0xc,%esp
f0126d8d:	68 00 fc 1f 00       	push   $0x1ffc00
f0126d92:	e8 d3 0b fe ff       	call   f010796a <kmalloc>
f0126d97:	83 c4 10             	add    $0x10,%esp
f0126d9a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126da0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126da6:	89 c1                	mov    %eax,%ecx
f0126da8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126daf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126db2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126db7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126dba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dc2:	f7 75 c8             	divl   -0x38(%ebp)
f0126dc5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126dc8:	29 d0                	sub    %edx,%eax
f0126dca:	89 c3                	mov    %eax,%ebx
f0126dcc:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126dd3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126dd8:	0f b6 d0             	movzbl %al,%edx
f0126ddb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126dde:	01 d0                	add    %edx,%eax
f0126de0:	48                   	dec    %eax
f0126de1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126de4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126de7:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dec:	f7 75 c0             	divl   -0x40(%ebp)
f0126def:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126df2:	29 d0                	sub    %edx,%eax
f0126df4:	01 c3                	add    %eax,%ebx
f0126df6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126dfd:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126e02:	0f b6 c0             	movzbl %al,%eax
f0126e05:	c1 e0 04             	shl    $0x4,%eax
f0126e08:	89 c2                	mov    %eax,%edx
f0126e0a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e0d:	01 d0                	add    %edx,%eax
f0126e0f:	48                   	dec    %eax
f0126e10:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126e13:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e16:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e1b:	f7 75 b8             	divl   -0x48(%ebp)
f0126e1e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e21:	29 d0                	sub    %edx,%eax
f0126e23:	01 d8                	add    %ebx,%eax
f0126e25:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126e2a:	39 c1                	cmp    %eax,%ecx
f0126e2c:	74 17                	je     f0126e45 <test_kfreeall+0x13c>
f0126e2e:	83 ec 04             	sub    $0x4,%esp
f0126e31:	68 60 b6 13 f0       	push   $0xf013b660
f0126e36:	68 f9 09 00 00       	push   $0x9f9
f0126e3b:	68 7a b5 13 f0       	push   $0xf013b57a
f0126e40:	e8 c0 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e45:	e8 dd ce fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126e4a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e4d:	74 17                	je     f0126e66 <test_kfreeall+0x15d>
f0126e4f:	83 ec 04             	sub    $0x4,%esp
f0126e52:	68 94 b5 13 f0       	push   $0xf013b594
f0126e57:	68 fa 09 00 00       	push   $0x9fa
f0126e5c:	68 7a b5 13 f0       	push   $0xf013b57a
f0126e61:	e8 9f 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e66:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e69:	e8 eb 61 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126e6e:	29 c3                	sub    %eax,%ebx
f0126e70:	89 d8                	mov    %ebx,%eax
f0126e72:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126e77:	74 17                	je     f0126e90 <test_kfreeall+0x187>
f0126e79:	83 ec 04             	sub    $0x4,%esp
f0126e7c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0126e81:	68 fb 09 00 00       	push   $0x9fb
f0126e86:	68 7a b5 13 f0       	push   $0xf013b57a
f0126e8b:	e8 75 93 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126e90:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126e97:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e9a:	e8 ba 61 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126e9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ea2:	e8 80 ce fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126ea7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126eaa:	83 ec 0c             	sub    $0xc,%esp
f0126ead:	68 00 fc 1f 00       	push   $0x1ffc00
f0126eb2:	e8 b3 0a fe ff       	call   f010796a <kmalloc>
f0126eb7:	83 c4 10             	add    $0x10,%esp
f0126eba:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ec0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126ec6:	89 c1                	mov    %eax,%ecx
f0126ec8:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126ecf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126ed2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ed7:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126eda:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126edd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ee2:	f7 75 b0             	divl   -0x50(%ebp)
f0126ee5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ee8:	29 d0                	sub    %edx,%eax
f0126eea:	89 c3                	mov    %eax,%ebx
f0126eec:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126ef3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126ef8:	0f b6 d0             	movzbl %al,%edx
f0126efb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126efe:	01 d0                	add    %edx,%eax
f0126f00:	48                   	dec    %eax
f0126f01:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126f04:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f07:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f0c:	f7 75 a8             	divl   -0x58(%ebp)
f0126f0f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f12:	29 d0                	sub    %edx,%eax
f0126f14:	01 c3                	add    %eax,%ebx
f0126f16:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126f1d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0126f22:	0f b6 c0             	movzbl %al,%eax
f0126f25:	c1 e0 04             	shl    $0x4,%eax
f0126f28:	89 c2                	mov    %eax,%edx
f0126f2a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126f2d:	01 d0                	add    %edx,%eax
f0126f2f:	48                   	dec    %eax
f0126f30:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126f33:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f36:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f3b:	f7 75 a0             	divl   -0x60(%ebp)
f0126f3e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f41:	29 d0                	sub    %edx,%eax
f0126f43:	01 d8                	add    %ebx,%eax
f0126f45:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126f4a:	39 c1                	cmp    %eax,%ecx
f0126f4c:	74 17                	je     f0126f65 <test_kfreeall+0x25c>
f0126f4e:	83 ec 04             	sub    $0x4,%esp
f0126f51:	68 60 b6 13 f0       	push   $0xf013b660
f0126f56:	68 02 0a 00 00       	push   $0xa02
f0126f5b:	68 7a b5 13 f0       	push   $0xf013b57a
f0126f60:	e8 a0 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f65:	e8 bd cd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126f6a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f6d:	74 17                	je     f0126f86 <test_kfreeall+0x27d>
f0126f6f:	83 ec 04             	sub    $0x4,%esp
f0126f72:	68 94 b5 13 f0       	push   $0xf013b594
f0126f77:	68 03 0a 00 00       	push   $0xa03
f0126f7c:	68 7a b5 13 f0       	push   $0xf013b57a
f0126f81:	e8 7f 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f86:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f89:	e8 cb 60 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126f8e:	29 c3                	sub    %eax,%ebx
f0126f90:	89 d8                	mov    %ebx,%eax
f0126f92:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126f97:	74 17                	je     f0126fb0 <test_kfreeall+0x2a7>
f0126f99:	83 ec 04             	sub    $0x4,%esp
f0126f9c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0126fa1:	68 04 0a 00 00       	push   $0xa04
f0126fa6:	68 7a b5 13 f0       	push   $0xf013b57a
f0126fab:	e8 55 92 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126fb0:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126fb7:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126fba:	e8 9a 60 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126fbf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fc2:	e8 60 cd fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0126fc7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126fca:	83 ec 0c             	sub    $0xc,%esp
f0126fcd:	68 00 08 00 00       	push   $0x800
f0126fd2:	e8 93 09 fe ff       	call   f010796a <kmalloc>
f0126fd7:	83 c4 10             	add    $0x10,%esp
f0126fda:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126fe0:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126fe6:	89 c1                	mov    %eax,%ecx
f0126fe8:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126fef:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126ff2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ff7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126ffa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ffd:	ba 00 00 00 00       	mov    $0x0,%edx
f0127002:	f7 75 98             	divl   -0x68(%ebp)
f0127005:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127008:	29 d0                	sub    %edx,%eax
f012700a:	89 c3                	mov    %eax,%ebx
f012700c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127013:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127018:	0f b6 d0             	movzbl %al,%edx
f012701b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012701e:	01 d0                	add    %edx,%eax
f0127020:	48                   	dec    %eax
f0127021:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127024:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127027:	ba 00 00 00 00       	mov    $0x0,%edx
f012702c:	f7 75 90             	divl   -0x70(%ebp)
f012702f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127032:	29 d0                	sub    %edx,%eax
f0127034:	01 c3                	add    %eax,%ebx
f0127036:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012703d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127042:	0f b6 c0             	movzbl %al,%eax
f0127045:	c1 e0 04             	shl    $0x4,%eax
f0127048:	89 c2                	mov    %eax,%edx
f012704a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012704d:	01 d0                	add    %edx,%eax
f012704f:	48                   	dec    %eax
f0127050:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127053:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127056:	ba 00 00 00 00       	mov    $0x0,%edx
f012705b:	f7 75 88             	divl   -0x78(%ebp)
f012705e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127061:	29 d0                	sub    %edx,%eax
f0127063:	01 d8                	add    %ebx,%eax
f0127065:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012706a:	39 c1                	cmp    %eax,%ecx
f012706c:	74 17                	je     f0127085 <test_kfreeall+0x37c>
f012706e:	83 ec 04             	sub    $0x4,%esp
f0127071:	68 60 b6 13 f0       	push   $0xf013b660
f0127076:	68 0b 0a 00 00       	push   $0xa0b
f012707b:	68 7a b5 13 f0       	push   $0xf013b57a
f0127080:	e8 80 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127085:	e8 9d cc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012708a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012708d:	74 17                	je     f01270a6 <test_kfreeall+0x39d>
f012708f:	83 ec 04             	sub    $0x4,%esp
f0127092:	68 94 b5 13 f0       	push   $0xf013b594
f0127097:	68 0c 0a 00 00       	push   $0xa0c
f012709c:	68 7a b5 13 f0       	push   $0xf013b57a
f01270a1:	e8 5f 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270a6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01270a9:	e8 ab 5f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01270ae:	29 c3                	sub    %eax,%ebx
f01270b0:	89 d8                	mov    %ebx,%eax
f01270b2:	83 f8 01             	cmp    $0x1,%eax
f01270b5:	74 17                	je     f01270ce <test_kfreeall+0x3c5>
f01270b7:	83 ec 04             	sub    $0x4,%esp
f01270ba:	68 fc b5 13 f0       	push   $0xf013b5fc
f01270bf:	68 0d 0a 00 00       	push   $0xa0d
f01270c4:	68 7a b5 13 f0       	push   $0xf013b57a
f01270c9:	e8 37 91 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01270ce:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01270d5:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01270d8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01270de:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01270e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270e8:	eb 0e                	jmp    f01270f8 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f01270ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270ed:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270f0:	01 d0                	add    %edx,%eax
f01270f2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01270f5:	ff 45 f4             	incl   -0xc(%ebp)
f01270f8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01270fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127101:	7f e7                	jg     f01270ea <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127103:	e8 51 5f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127108:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012710b:	e8 17 cc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127110:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127113:	83 ec 0c             	sub    $0xc,%esp
f0127116:	68 00 08 00 00       	push   $0x800
f012711b:	e8 4a 08 fe ff       	call   f010796a <kmalloc>
f0127120:	83 c4 10             	add    $0x10,%esp
f0127123:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127129:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012712f:	89 c1                	mov    %eax,%ecx
f0127131:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0127138:	10 00 00 
f012713b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127146:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012714c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127152:	ba 00 00 00 00       	mov    $0x0,%edx
f0127157:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012715d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127163:	29 d0                	sub    %edx,%eax
f0127165:	89 c3                	mov    %eax,%ebx
f0127167:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012716e:	10 00 00 
f0127171:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127176:	0f b6 d0             	movzbl %al,%edx
f0127179:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012717f:	01 d0                	add    %edx,%eax
f0127181:	48                   	dec    %eax
f0127182:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0127188:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012718e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127193:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0127199:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012719f:	29 d0                	sub    %edx,%eax
f01271a1:	01 c3                	add    %eax,%ebx
f01271a3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01271aa:	10 00 00 
f01271ad:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01271b2:	0f b6 c0             	movzbl %al,%eax
f01271b5:	c1 e0 04             	shl    $0x4,%eax
f01271b8:	89 c2                	mov    %eax,%edx
f01271ba:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01271c0:	01 d0                	add    %edx,%eax
f01271c2:	48                   	dec    %eax
f01271c3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01271c9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01271cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01271d4:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01271da:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01271e0:	29 d0                	sub    %edx,%eax
f01271e2:	01 d8                	add    %ebx,%eax
f01271e4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01271e9:	39 c1                	cmp    %eax,%ecx
f01271eb:	74 17                	je     f0127204 <test_kfreeall+0x4fb>
f01271ed:	83 ec 04             	sub    $0x4,%esp
f01271f0:	68 60 b6 13 f0       	push   $0xf013b660
f01271f5:	68 19 0a 00 00       	push   $0xa19
f01271fa:	68 7a b5 13 f0       	push   $0xf013b57a
f01271ff:	e8 01 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127204:	e8 1e cb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127209:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012720c:	74 17                	je     f0127225 <test_kfreeall+0x51c>
f012720e:	83 ec 04             	sub    $0x4,%esp
f0127211:	68 94 b5 13 f0       	push   $0xf013b594
f0127216:	68 1a 0a 00 00       	push   $0xa1a
f012721b:	68 7a b5 13 f0       	push   $0xf013b57a
f0127220:	e8 e0 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127225:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127228:	e8 2c 5e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012722d:	29 c3                	sub    %eax,%ebx
f012722f:	89 d8                	mov    %ebx,%eax
f0127231:	83 f8 01             	cmp    $0x1,%eax
f0127234:	74 17                	je     f012724d <test_kfreeall+0x544>
f0127236:	83 ec 04             	sub    $0x4,%esp
f0127239:	68 fc b5 13 f0       	push   $0xf013b5fc
f012723e:	68 1b 0a 00 00       	push   $0xa1b
f0127243:	68 7a b5 13 f0       	push   $0xf013b57a
f0127248:	e8 b8 8f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012724d:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0127254:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127257:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012725d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127260:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127267:	eb 0e                	jmp    f0127277 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0127269:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012726c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012726f:	01 d0                	add    %edx,%eax
f0127271:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127274:	ff 45 f4             	incl   -0xc(%ebp)
f0127277:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012727d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127280:	7f e7                	jg     f0127269 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127282:	e8 d2 5d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127287:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012728a:	e8 98 ca fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012728f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127292:	83 ec 0c             	sub    $0xc,%esp
f0127295:	68 00 1c 00 00       	push   $0x1c00
f012729a:	e8 cb 06 fe ff       	call   f010796a <kmalloc>
f012729f:	83 c4 10             	add    $0x10,%esp
f01272a2:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272a8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01272ae:	89 c1                	mov    %eax,%ecx
f01272b0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01272b7:	10 00 00 
f01272ba:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01272c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272c5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01272cb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01272d6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01272dc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272e2:	29 d0                	sub    %edx,%eax
f01272e4:	89 c3                	mov    %eax,%ebx
f01272e6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01272ed:	10 00 00 
f01272f0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01272f5:	0f b6 d0             	movzbl %al,%edx
f01272f8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01272fe:	01 d0                	add    %edx,%eax
f0127300:	48                   	dec    %eax
f0127301:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0127307:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012730d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127312:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0127318:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012731e:	29 d0                	sub    %edx,%eax
f0127320:	01 c3                	add    %eax,%ebx
f0127322:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0127329:	10 00 00 
f012732c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127331:	0f b6 c0             	movzbl %al,%eax
f0127334:	c1 e0 04             	shl    $0x4,%eax
f0127337:	89 c2                	mov    %eax,%edx
f0127339:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012733f:	01 d0                	add    %edx,%eax
f0127341:	48                   	dec    %eax
f0127342:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0127348:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012734e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127353:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0127359:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012735f:	29 d0                	sub    %edx,%eax
f0127361:	01 d8                	add    %ebx,%eax
f0127363:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127368:	39 c1                	cmp    %eax,%ecx
f012736a:	74 17                	je     f0127383 <test_kfreeall+0x67a>
f012736c:	83 ec 04             	sub    $0x4,%esp
f012736f:	68 60 b6 13 f0       	push   $0xf013b660
f0127374:	68 27 0a 00 00       	push   $0xa27
f0127379:	68 7a b5 13 f0       	push   $0xf013b57a
f012737e:	e8 82 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127383:	e8 9f c9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127388:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012738b:	74 17                	je     f01273a4 <test_kfreeall+0x69b>
f012738d:	83 ec 04             	sub    $0x4,%esp
f0127390:	68 94 b5 13 f0       	push   $0xf013b594
f0127395:	68 28 0a 00 00       	push   $0xa28
f012739a:	68 7a b5 13 f0       	push   $0xf013b57a
f012739f:	e8 61 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273a4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273a7:	e8 ad 5c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01273ac:	29 c3                	sub    %eax,%ebx
f01273ae:	89 d8                	mov    %ebx,%eax
f01273b0:	83 f8 02             	cmp    $0x2,%eax
f01273b3:	74 17                	je     f01273cc <test_kfreeall+0x6c3>
f01273b5:	83 ec 04             	sub    $0x4,%esp
f01273b8:	68 fc b5 13 f0       	push   $0xf013b5fc
f01273bd:	68 29 0a 00 00       	push   $0xa29
f01273c2:	68 7a b5 13 f0       	push   $0xf013b57a
f01273c7:	e8 39 8e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01273cc:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01273d3:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01273d6:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01273dc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01273df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273e6:	eb 0e                	jmp    f01273f6 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f01273e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01273eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01273ee:	01 d0                	add    %edx,%eax
f01273f0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01273f3:	ff 45 f4             	incl   -0xc(%ebp)
f01273f6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01273fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01273ff:	7f e7                	jg     f01273e8 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127401:	e8 53 5c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127406:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127409:	e8 19 c9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012740e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127411:	83 ec 0c             	sub    $0xc,%esp
f0127414:	68 00 fc 2f 00       	push   $0x2ffc00
f0127419:	e8 4c 05 fe ff       	call   f010796a <kmalloc>
f012741e:	83 c4 10             	add    $0x10,%esp
f0127421:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127427:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012742d:	89 c1                	mov    %eax,%ecx
f012742f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127436:	10 00 00 
f0127439:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012743f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127444:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012744a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127450:	ba 00 00 00 00       	mov    $0x0,%edx
f0127455:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012745b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127461:	29 d0                	sub    %edx,%eax
f0127463:	89 c3                	mov    %eax,%ebx
f0127465:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012746c:	10 00 00 
f012746f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127474:	0f b6 d0             	movzbl %al,%edx
f0127477:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012747d:	01 d0                	add    %edx,%eax
f012747f:	48                   	dec    %eax
f0127480:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0127486:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012748c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127491:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0127497:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012749d:	29 d0                	sub    %edx,%eax
f012749f:	01 c3                	add    %eax,%ebx
f01274a1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01274a8:	10 00 00 
f01274ab:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01274b0:	0f b6 c0             	movzbl %al,%eax
f01274b3:	c1 e0 04             	shl    $0x4,%eax
f01274b6:	89 c2                	mov    %eax,%edx
f01274b8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01274be:	01 d0                	add    %edx,%eax
f01274c0:	48                   	dec    %eax
f01274c1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01274c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01274cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01274d2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01274d8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01274de:	29 d0                	sub    %edx,%eax
f01274e0:	01 d8                	add    %ebx,%eax
f01274e2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01274e7:	39 c1                	cmp    %eax,%ecx
f01274e9:	74 17                	je     f0127502 <test_kfreeall+0x7f9>
f01274eb:	83 ec 04             	sub    $0x4,%esp
f01274ee:	68 60 b6 13 f0       	push   $0xf013b660
f01274f3:	68 35 0a 00 00       	push   $0xa35
f01274f8:	68 7a b5 13 f0       	push   $0xf013b57a
f01274fd:	e8 03 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127502:	e8 20 c8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127507:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012750a:	74 17                	je     f0127523 <test_kfreeall+0x81a>
f012750c:	83 ec 04             	sub    $0x4,%esp
f012750f:	68 94 b5 13 f0       	push   $0xf013b594
f0127514:	68 36 0a 00 00       	push   $0xa36
f0127519:	68 7a b5 13 f0       	push   $0xf013b57a
f012751e:	e8 e2 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127523:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127526:	e8 2e 5b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012752b:	29 c3                	sub    %eax,%ebx
f012752d:	89 d8                	mov    %ebx,%eax
f012752f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127534:	74 17                	je     f012754d <test_kfreeall+0x844>
f0127536:	83 ec 04             	sub    $0x4,%esp
f0127539:	68 fc b5 13 f0       	push   $0xf013b5fc
f012753e:	68 37 0a 00 00       	push   $0xa37
f0127543:	68 7a b5 13 f0       	push   $0xf013b57a
f0127548:	e8 b8 8c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012754d:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0127554:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127557:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012755d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127560:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127567:	eb 0e                	jmp    f0127577 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127569:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012756c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012756f:	01 d0                	add    %edx,%eax
f0127571:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127574:	ff 45 f4             	incl   -0xc(%ebp)
f0127577:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012757d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127580:	7f e7                	jg     f0127569 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127582:	e8 d2 5a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127587:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012758a:	e8 98 c7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012758f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0127592:	83 ec 0c             	sub    $0xc,%esp
f0127595:	68 00 fc 5f 00       	push   $0x5ffc00
f012759a:	e8 cb 03 fe ff       	call   f010796a <kmalloc>
f012759f:	83 c4 10             	add    $0x10,%esp
f01275a2:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275a8:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01275ae:	89 c1                	mov    %eax,%ecx
f01275b0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01275b7:	10 00 00 
f01275ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01275c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01275c5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01275cb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01275d6:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01275dc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275e2:	29 d0                	sub    %edx,%eax
f01275e4:	89 c3                	mov    %eax,%ebx
f01275e6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01275ed:	10 00 00 
f01275f0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01275f5:	0f b6 d0             	movzbl %al,%edx
f01275f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01275fe:	01 d0                	add    %edx,%eax
f0127600:	48                   	dec    %eax
f0127601:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0127607:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012760d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127612:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0127618:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012761e:	29 d0                	sub    %edx,%eax
f0127620:	01 c3                	add    %eax,%ebx
f0127622:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127629:	10 00 00 
f012762c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127631:	0f b6 c0             	movzbl %al,%eax
f0127634:	c1 e0 04             	shl    $0x4,%eax
f0127637:	89 c2                	mov    %eax,%edx
f0127639:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012763f:	01 d0                	add    %edx,%eax
f0127641:	48                   	dec    %eax
f0127642:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127648:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012764e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127653:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127659:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012765f:	29 d0                	sub    %edx,%eax
f0127661:	01 d8                	add    %ebx,%eax
f0127663:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127668:	39 c1                	cmp    %eax,%ecx
f012766a:	74 17                	je     f0127683 <test_kfreeall+0x97a>
f012766c:	83 ec 04             	sub    $0x4,%esp
f012766f:	68 60 b6 13 f0       	push   $0xf013b660
f0127674:	68 43 0a 00 00       	push   $0xa43
f0127679:	68 7a b5 13 f0       	push   $0xf013b57a
f012767e:	e8 82 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127683:	e8 9f c6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127688:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012768b:	74 17                	je     f01276a4 <test_kfreeall+0x99b>
f012768d:	83 ec 04             	sub    $0x4,%esp
f0127690:	68 94 b5 13 f0       	push   $0xf013b594
f0127695:	68 44 0a 00 00       	push   $0xa44
f012769a:	68 7a b5 13 f0       	push   $0xf013b57a
f012769f:	e8 61 8b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276a4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01276a7:	e8 ad 59 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01276ac:	29 c3                	sub    %eax,%ebx
f01276ae:	89 d8                	mov    %ebx,%eax
f01276b0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01276b5:	74 17                	je     f01276ce <test_kfreeall+0x9c5>
f01276b7:	83 ec 04             	sub    $0x4,%esp
f01276ba:	68 fc b5 13 f0       	push   $0xf013b5fc
f01276bf:	68 45 0a 00 00       	push   $0xa45
f01276c4:	68 7a b5 13 f0       	push   $0xf013b57a
f01276c9:	e8 37 8b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01276ce:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01276d5:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01276d8:	e8 7c 59 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01276dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276e0:	e8 42 c6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01276e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01276e8:	83 ec 0c             	sub    $0xc,%esp
f01276eb:	68 00 38 00 00       	push   $0x3800
f01276f0:	e8 75 02 fe ff       	call   f010796a <kmalloc>
f01276f5:	83 c4 10             	add    $0x10,%esp
f01276f8:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01276fe:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127704:	89 c1                	mov    %eax,%ecx
f0127706:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012770d:	10 00 00 
f0127710:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127716:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012771b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0127721:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127727:	ba 00 00 00 00       	mov    $0x0,%edx
f012772c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0127732:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127738:	29 d0                	sub    %edx,%eax
f012773a:	89 c3                	mov    %eax,%ebx
f012773c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127743:	10 00 00 
f0127746:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012774b:	0f b6 d0             	movzbl %al,%edx
f012774e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127754:	01 d0                	add    %edx,%eax
f0127756:	48                   	dec    %eax
f0127757:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012775d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127763:	ba 00 00 00 00       	mov    $0x0,%edx
f0127768:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012776e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127774:	29 d0                	sub    %edx,%eax
f0127776:	01 c3                	add    %eax,%ebx
f0127778:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012777f:	10 00 00 
f0127782:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127787:	0f b6 c0             	movzbl %al,%eax
f012778a:	c1 e0 04             	shl    $0x4,%eax
f012778d:	89 c2                	mov    %eax,%edx
f012778f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127795:	01 d0                	add    %edx,%eax
f0127797:	48                   	dec    %eax
f0127798:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012779e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01277a9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01277af:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277b5:	29 d0                	sub    %edx,%eax
f01277b7:	01 d8                	add    %ebx,%eax
f01277b9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01277be:	39 c1                	cmp    %eax,%ecx
f01277c0:	74 17                	je     f01277d9 <test_kfreeall+0xad0>
f01277c2:	83 ec 04             	sub    $0x4,%esp
f01277c5:	68 60 b6 13 f0       	push   $0xf013b660
f01277ca:	68 4c 0a 00 00       	push   $0xa4c
f01277cf:	68 7a b5 13 f0       	push   $0xf013b57a
f01277d4:	e8 2c 8a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277d9:	e8 49 c5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01277de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01277e1:	74 17                	je     f01277fa <test_kfreeall+0xaf1>
f01277e3:	83 ec 04             	sub    $0x4,%esp
f01277e6:	68 94 b5 13 f0       	push   $0xf013b594
f01277eb:	68 4d 0a 00 00       	push   $0xa4d
f01277f0:	68 7a b5 13 f0       	push   $0xf013b57a
f01277f5:	e8 0b 8a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01277fd:	e8 57 58 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127802:	29 c3                	sub    %eax,%ebx
f0127804:	89 d8                	mov    %ebx,%eax
f0127806:	83 f8 04             	cmp    $0x4,%eax
f0127809:	74 17                	je     f0127822 <test_kfreeall+0xb19>
f012780b:	83 ec 04             	sub    $0x4,%esp
f012780e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0127813:	68 4e 0a 00 00       	push   $0xa4e
f0127818:	68 7a b5 13 f0       	push   $0xf013b57a
f012781d:	e8 e3 89 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0127822:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127829:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012782c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127832:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127835:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012783c:	eb 0e                	jmp    f012784c <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012783e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127841:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127844:	01 d0                	add    %edx,%eax
f0127846:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127849:	ff 45 f4             	incl   -0xc(%ebp)
f012784c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127852:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127855:	7f e7                	jg     f012783e <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127857:	e8 fd 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012785c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127862:	e8 c0 c4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127867:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012786d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127873:	83 ec 0c             	sub    $0xc,%esp
f0127876:	50                   	push   %eax
f0127877:	e8 37 02 fe ff       	call   f0107ab3 <kfree>
f012787c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012787f:	e8 a3 c4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127884:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012788a:	74 17                	je     f01278a3 <test_kfreeall+0xb9a>
f012788c:	83 ec 04             	sub    $0x4,%esp
f012788f:	68 94 b5 13 f0       	push   $0xf013b594
f0127894:	68 5d 0a 00 00       	push   $0xa5d
f0127899:	68 7a b5 13 f0       	push   $0xf013b57a
f012789e:	e8 62 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01278a3:	e8 b1 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01278a8:	89 c2                	mov    %eax,%edx
f01278aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01278b0:	29 c2                	sub    %eax,%edx
f01278b2:	89 d0                	mov    %edx,%eax
f01278b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278b9:	74 17                	je     f01278d2 <test_kfreeall+0xbc9>
f01278bb:	83 ec 04             	sub    $0x4,%esp
f01278be:	68 04 bd 13 f0       	push   $0xf013bd04
f01278c3:	68 5e 0a 00 00       	push   $0xa5e
f01278c8:	68 7a b5 13 f0       	push   $0xf013b57a
f01278cd:	e8 33 89 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01278d2:	e8 82 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01278d7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278dd:	e8 45 c4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01278e2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01278e8:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01278ee:	83 ec 0c             	sub    $0xc,%esp
f01278f1:	50                   	push   %eax
f01278f2:	e8 bc 01 fe ff       	call   f0107ab3 <kfree>
f01278f7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278fa:	e8 28 c4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01278ff:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127905:	74 17                	je     f012791e <test_kfreeall+0xc15>
f0127907:	83 ec 04             	sub    $0x4,%esp
f012790a:	68 94 b5 13 f0       	push   $0xf013b594
f012790f:	68 64 0a 00 00       	push   $0xa64
f0127914:	68 7a b5 13 f0       	push   $0xf013b57a
f0127919:	e8 e7 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012791e:	e8 36 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127923:	89 c2                	mov    %eax,%edx
f0127925:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012792b:	29 c2                	sub    %eax,%edx
f012792d:	89 d0                	mov    %edx,%eax
f012792f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127934:	74 17                	je     f012794d <test_kfreeall+0xc44>
f0127936:	83 ec 04             	sub    $0x4,%esp
f0127939:	68 04 bd 13 f0       	push   $0xf013bd04
f012793e:	68 65 0a 00 00       	push   $0xa65
f0127943:	68 7a b5 13 f0       	push   $0xf013b57a
f0127948:	e8 b8 88 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012794d:	e8 07 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127952:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127958:	e8 ca c3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012795d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127963:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127969:	83 ec 0c             	sub    $0xc,%esp
f012796c:	50                   	push   %eax
f012796d:	e8 41 01 fe ff       	call   f0107ab3 <kfree>
f0127972:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127975:	e8 ad c3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012797a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127980:	74 17                	je     f0127999 <test_kfreeall+0xc90>
f0127982:	83 ec 04             	sub    $0x4,%esp
f0127985:	68 94 b5 13 f0       	push   $0xf013b594
f012798a:	68 6b 0a 00 00       	push   $0xa6b
f012798f:	68 7a b5 13 f0       	push   $0xf013b57a
f0127994:	e8 6c 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127999:	e8 bb 56 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012799e:	89 c2                	mov    %eax,%edx
f01279a0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01279a6:	29 c2                	sub    %eax,%edx
f01279a8:	89 d0                	mov    %edx,%eax
f01279aa:	3d 00 06 00 00       	cmp    $0x600,%eax
f01279af:	74 17                	je     f01279c8 <test_kfreeall+0xcbf>
f01279b1:	83 ec 04             	sub    $0x4,%esp
f01279b4:	68 04 bd 13 f0       	push   $0xf013bd04
f01279b9:	68 6c 0a 00 00       	push   $0xa6c
f01279be:	68 7a b5 13 f0       	push   $0xf013b57a
f01279c3:	e8 3d 88 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01279c8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01279ce:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01279d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279d8:	eb 1e                	jmp    f01279f8 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01279da:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01279e0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01279e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01279e6:	01 c8                	add    %ecx,%eax
f01279e8:	8a 00                	mov    (%eax),%al
f01279ea:	0f be c0             	movsbl %al,%eax
f01279ed:	01 d0                	add    %edx,%eax
f01279ef:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01279f5:	ff 45 f4             	incl   -0xc(%ebp)
f01279f8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01279fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a01:	7f d7                	jg     f01279da <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127a03:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a09:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a0f:	01 c0                	add    %eax,%eax
f0127a11:	39 c2                	cmp    %eax,%edx
f0127a13:	74 17                	je     f0127a2c <test_kfreeall+0xd23>
f0127a15:	83 ec 04             	sub    $0x4,%esp
f0127a18:	68 60 bd 13 f0       	push   $0xf013bd60
f0127a1d:	68 78 0a 00 00       	push   $0xa78
f0127a22:	68 7a b5 13 f0       	push   $0xf013b57a
f0127a27:	e8 d9 87 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127a2c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127a32:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127a35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a3c:	eb 1e                	jmp    f0127a5c <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127a3e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a44:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a47:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a4a:	01 c8                	add    %ecx,%eax
f0127a4c:	8a 00                	mov    (%eax),%al
f0127a4e:	0f be c0             	movsbl %al,%eax
f0127a51:	01 d0                	add    %edx,%eax
f0127a53:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127a59:	ff 45 f4             	incl   -0xc(%ebp)
f0127a5c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a65:	7f d7                	jg     f0127a3e <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127a67:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a6d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a73:	89 c1                	mov    %eax,%ecx
f0127a75:	01 c9                	add    %ecx,%ecx
f0127a77:	01 c8                	add    %ecx,%eax
f0127a79:	39 c2                	cmp    %eax,%edx
f0127a7b:	74 17                	je     f0127a94 <test_kfreeall+0xd8b>
f0127a7d:	83 ec 04             	sub    $0x4,%esp
f0127a80:	68 60 bd 13 f0       	push   $0xf013bd60
f0127a85:	68 80 0a 00 00       	push   $0xa80
f0127a8a:	68 7a b5 13 f0       	push   $0xf013b57a
f0127a8f:	e8 71 87 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127a94:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127a9a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127a9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127aa4:	eb 1e                	jmp    f0127ac4 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127aa6:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127aac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127aaf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ab2:	01 c8                	add    %ecx,%eax
f0127ab4:	8a 00                	mov    (%eax),%al
f0127ab6:	0f be c0             	movsbl %al,%eax
f0127ab9:	01 d0                	add    %edx,%eax
f0127abb:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127ac1:	ff 45 f4             	incl   -0xc(%ebp)
f0127ac4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127aca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127acd:	7f d7                	jg     f0127aa6 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127acf:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127ad5:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127adb:	c1 e2 02             	shl    $0x2,%edx
f0127ade:	39 d0                	cmp    %edx,%eax
f0127ae0:	74 17                	je     f0127af9 <test_kfreeall+0xdf0>
f0127ae2:	83 ec 04             	sub    $0x4,%esp
f0127ae5:	68 60 bd 13 f0       	push   $0xf013bd60
f0127aea:	68 88 0a 00 00       	push   $0xa88
f0127aef:	68 7a b5 13 f0       	push   $0xf013b57a
f0127af4:	e8 0c 87 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127af9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127aff:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b09:	eb 1e                	jmp    f0127b29 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127b0b:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127b11:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b17:	01 c8                	add    %ecx,%eax
f0127b19:	8a 00                	mov    (%eax),%al
f0127b1b:	0f be c0             	movsbl %al,%eax
f0127b1e:	01 d0                	add    %edx,%eax
f0127b20:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127b26:	ff 45 f4             	incl   -0xc(%ebp)
f0127b29:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b32:	7f d7                	jg     f0127b0b <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127b34:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127b3a:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127b40:	89 d0                	mov    %edx,%eax
f0127b42:	c1 e0 02             	shl    $0x2,%eax
f0127b45:	01 d0                	add    %edx,%eax
f0127b47:	39 c1                	cmp    %eax,%ecx
f0127b49:	74 17                	je     f0127b62 <test_kfreeall+0xe59>
f0127b4b:	83 ec 04             	sub    $0x4,%esp
f0127b4e:	68 60 bd 13 f0       	push   $0xf013bd60
f0127b53:	68 90 0a 00 00       	push   $0xa90
f0127b58:	68 7a b5 13 f0       	push   $0xf013b57a
f0127b5d:	e8 a3 86 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127b62:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127b68:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127b6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b72:	eb 1e                	jmp    f0127b92 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127b74:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127b7a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b80:	01 c8                	add    %ecx,%eax
f0127b82:	8a 00                	mov    (%eax),%al
f0127b84:	0f be c0             	movsbl %al,%eax
f0127b87:	01 d0                	add    %edx,%eax
f0127b89:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127b8f:	ff 45 f4             	incl   -0xc(%ebp)
f0127b92:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127b98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b9b:	7f d7                	jg     f0127b74 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127b9d:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127ba3:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127ba9:	89 d0                	mov    %edx,%eax
f0127bab:	01 c0                	add    %eax,%eax
f0127bad:	01 d0                	add    %edx,%eax
f0127baf:	01 c0                	add    %eax,%eax
f0127bb1:	01 d0                	add    %edx,%eax
f0127bb3:	39 c1                	cmp    %eax,%ecx
f0127bb5:	74 17                	je     f0127bce <test_kfreeall+0xec5>
f0127bb7:	83 ec 04             	sub    $0x4,%esp
f0127bba:	68 60 bd 13 f0       	push   $0xf013bd60
f0127bbf:	68 98 0a 00 00       	push   $0xa98
f0127bc4:	68 7a b5 13 f0       	push   $0xf013b57a
f0127bc9:	e8 37 86 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127bce:	e8 86 54 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127bd3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bd6:	e8 4c c1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127bdb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127bde:	83 ec 0c             	sub    $0xc,%esp
f0127be1:	68 00 50 00 00       	push   $0x5000
f0127be6:	e8 7f fd fd ff       	call   f010796a <kmalloc>
f0127beb:	83 c4 10             	add    $0x10,%esp
f0127bee:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bf4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127bfa:	89 c1                	mov    %eax,%ecx
f0127bfc:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127c03:	10 00 00 
f0127c06:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127c0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c11:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127c17:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c22:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127c28:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c2e:	29 d0                	sub    %edx,%eax
f0127c30:	89 c3                	mov    %eax,%ebx
f0127c32:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127c39:	10 00 00 
f0127c3c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127c41:	0f b6 d0             	movzbl %al,%edx
f0127c44:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127c4a:	01 d0                	add    %edx,%eax
f0127c4c:	48                   	dec    %eax
f0127c4d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127c53:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c59:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c5e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127c64:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c6a:	29 d0                	sub    %edx,%eax
f0127c6c:	01 c3                	add    %eax,%ebx
f0127c6e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127c75:	10 00 00 
f0127c78:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127c7d:	0f b6 c0             	movzbl %al,%eax
f0127c80:	c1 e0 04             	shl    $0x4,%eax
f0127c83:	89 c2                	mov    %eax,%edx
f0127c85:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127c8b:	01 d0                	add    %edx,%eax
f0127c8d:	48                   	dec    %eax
f0127c8e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127c94:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127c9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c9f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127ca5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127cab:	29 d0                	sub    %edx,%eax
f0127cad:	01 d8                	add    %ebx,%eax
f0127caf:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127cb4:	39 c1                	cmp    %eax,%ecx
f0127cb6:	74 17                	je     f0127ccf <test_kfreeall+0xfc6>
f0127cb8:	83 ec 04             	sub    $0x4,%esp
f0127cbb:	68 60 b6 13 f0       	push   $0xf013b660
f0127cc0:	68 a1 0a 00 00       	push   $0xaa1
f0127cc5:	68 7a b5 13 f0       	push   $0xf013b57a
f0127cca:	e8 36 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ccf:	e8 53 c0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127cd4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127cd7:	74 17                	je     f0127cf0 <test_kfreeall+0xfe7>
f0127cd9:	83 ec 04             	sub    $0x4,%esp
f0127cdc:	68 94 b5 13 f0       	push   $0xf013b594
f0127ce1:	68 a2 0a 00 00       	push   $0xaa2
f0127ce6:	68 7a b5 13 f0       	push   $0xf013b57a
f0127ceb:	e8 15 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cf0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127cf3:	e8 61 53 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127cf8:	29 c3                	sub    %eax,%ebx
f0127cfa:	89 d8                	mov    %ebx,%eax
f0127cfc:	83 f8 05             	cmp    $0x5,%eax
f0127cff:	74 17                	je     f0127d18 <test_kfreeall+0x100f>
f0127d01:	83 ec 04             	sub    $0x4,%esp
f0127d04:	68 fc b5 13 f0       	push   $0xf013b5fc
f0127d09:	68 a3 0a 00 00       	push   $0xaa3
f0127d0e:	68 7a b5 13 f0       	push   $0xf013b57a
f0127d13:	e8 ed 84 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127d18:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127d1f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127d22:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127d28:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127d2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d32:	eb 0e                	jmp    f0127d42 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127d34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d37:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d3a:	01 d0                	add    %edx,%eax
f0127d3c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127d3f:	ff 45 f4             	incl   -0xc(%ebp)
f0127d42:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127d48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d4b:	7f e7                	jg     f0127d34 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d4d:	e8 07 53 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127d52:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d55:	e8 cd bf fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127d5a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127d5d:	83 ec 0c             	sub    $0xc,%esp
f0127d60:	68 00 00 10 00       	push   $0x100000
f0127d65:	e8 00 fc fd ff       	call   f010796a <kmalloc>
f0127d6a:	83 c4 10             	add    $0x10,%esp
f0127d6d:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d73:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127d79:	89 c1                	mov    %eax,%ecx
f0127d7b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127d82:	10 00 00 
f0127d85:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127d8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d90:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127d96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127d9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127da1:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127da7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127dad:	29 d0                	sub    %edx,%eax
f0127daf:	89 c3                	mov    %eax,%ebx
f0127db1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127db8:	10 00 00 
f0127dbb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127dc0:	0f b6 d0             	movzbl %al,%edx
f0127dc3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127dc9:	01 d0                	add    %edx,%eax
f0127dcb:	48                   	dec    %eax
f0127dcc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127dd2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ddd:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127de3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127de9:	29 d0                	sub    %edx,%eax
f0127deb:	01 c3                	add    %eax,%ebx
f0127ded:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127df4:	10 00 00 
f0127df7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127dfc:	0f b6 c0             	movzbl %al,%eax
f0127dff:	c1 e0 04             	shl    $0x4,%eax
f0127e02:	89 c2                	mov    %eax,%edx
f0127e04:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127e0a:	01 d0                	add    %edx,%eax
f0127e0c:	48                   	dec    %eax
f0127e0d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127e13:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e1e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127e24:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e2a:	29 d0                	sub    %edx,%eax
f0127e2c:	01 d8                	add    %ebx,%eax
f0127e2e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127e33:	39 c1                	cmp    %eax,%ecx
f0127e35:	74 17                	je     f0127e4e <test_kfreeall+0x1145>
f0127e37:	83 ec 04             	sub    $0x4,%esp
f0127e3a:	68 60 b6 13 f0       	push   $0xf013b660
f0127e3f:	68 af 0a 00 00       	push   $0xaaf
f0127e44:	68 7a b5 13 f0       	push   $0xf013b57a
f0127e49:	e8 b7 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e4e:	e8 d4 be fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127e53:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e56:	74 17                	je     f0127e6f <test_kfreeall+0x1166>
f0127e58:	83 ec 04             	sub    $0x4,%esp
f0127e5b:	68 94 b5 13 f0       	push   $0xf013b594
f0127e60:	68 b0 0a 00 00       	push   $0xab0
f0127e65:	68 7a b5 13 f0       	push   $0xf013b57a
f0127e6a:	e8 96 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e6f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127e72:	e8 e2 51 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127e77:	29 c3                	sub    %eax,%ebx
f0127e79:	89 d8                	mov    %ebx,%eax
f0127e7b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127e80:	74 17                	je     f0127e99 <test_kfreeall+0x1190>
f0127e82:	83 ec 04             	sub    $0x4,%esp
f0127e85:	68 fc b5 13 f0       	push   $0xf013b5fc
f0127e8a:	68 b1 0a 00 00       	push   $0xab1
f0127e8f:	68 7a b5 13 f0       	push   $0xf013b57a
f0127e94:	e8 6c 83 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127e99:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127ea0:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127ea3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ea9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127eac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127eb3:	eb 0e                	jmp    f0127ec3 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127eb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127eb8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ebb:	01 d0                	add    %edx,%eax
f0127ebd:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127ec0:	ff 45 f4             	incl   -0xc(%ebp)
f0127ec3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127ec9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ecc:	7f e7                	jg     f0127eb5 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ece:	e8 86 51 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127ed3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ed6:	e8 4c be fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127edb:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127ede:	e8 3c fd fd ff       	call   f0107c1f <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ee3:	e8 3f be fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0127ee8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127eeb:	74 17                	je     f0127f04 <test_kfreeall+0x11fb>
f0127eed:	83 ec 04             	sub    $0x4,%esp
f0127ef0:	68 94 b5 13 f0       	push   $0xf013b594
f0127ef5:	68 c1 0a 00 00       	push   $0xac1
f0127efa:	68 7a b5 13 f0       	push   $0xf013b57a
f0127eff:	e8 01 83 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127f04:	e8 50 51 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127f09:	89 c2                	mov    %eax,%edx
f0127f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f0e:	89 d1                	mov    %edx,%ecx
f0127f10:	29 c1                	sub    %eax,%ecx
f0127f12:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127f19:	10 00 00 
f0127f1c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127f22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f27:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127f2d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f33:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f38:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127f3e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f44:	29 d0                	sub    %edx,%eax
f0127f46:	89 c3                	mov    %eax,%ebx
f0127f48:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127f4f:	10 00 00 
f0127f52:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127f57:	0f b6 d0             	movzbl %al,%edx
f0127f5a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127f60:	01 d0                	add    %edx,%eax
f0127f62:	48                   	dec    %eax
f0127f63:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127f69:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127f6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f74:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127f7a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127f80:	29 d0                	sub    %edx,%eax
f0127f82:	01 c3                	add    %eax,%ebx
f0127f84:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127f8b:	10 00 00 
f0127f8e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0127f93:	0f b6 c0             	movzbl %al,%eax
f0127f96:	c1 e0 04             	shl    $0x4,%eax
f0127f99:	89 c2                	mov    %eax,%edx
f0127f9b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127fa1:	01 d0                	add    %edx,%eax
f0127fa3:	48                   	dec    %eax
f0127fa4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127faa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127fb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fb5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127fbb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127fc1:	29 d0                	sub    %edx,%eax
f0127fc3:	01 d8                	add    %ebx,%eax
f0127fc5:	05 00 40 00 00       	add    $0x4000,%eax
f0127fca:	c1 e8 0c             	shr    $0xc,%eax
f0127fcd:	05 0d 04 00 00       	add    $0x40d,%eax
f0127fd2:	39 c1                	cmp    %eax,%ecx
f0127fd4:	74 17                	je     f0127fed <test_kfreeall+0x12e4>
f0127fd6:	83 ec 04             	sub    $0x4,%esp
f0127fd9:	68 04 bd 13 f0       	push   $0xf013bd04
f0127fde:	68 c2 0a 00 00       	push   $0xac2
f0127fe3:	68 7a b5 13 f0       	push   $0xf013b57a
f0127fe8:	e8 18 82 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127fed:	83 ec 0c             	sub    $0xc,%esp
f0127ff0:	6a 03                	push   $0x3
f0127ff2:	e8 02 55 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0127ff7:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127ffa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128001:	e9 82 00 00 00       	jmp    f0128088 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0128006:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128009:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0128010:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0128013:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128016:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0128019:	e8 c9 54 fe ff       	call   f010d4e7 <sys_rcr2>
f012801e:	89 c2                	mov    %eax,%edx
f0128020:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128023:	39 c2                	cmp    %eax,%edx
f0128025:	74 17                	je     f012803e <test_kfreeall+0x1335>
f0128027:	83 ec 04             	sub    $0x4,%esp
f012802a:	68 e0 bd 13 f0       	push   $0xf013bde0
f012802f:	68 d0 0a 00 00       	push   $0xad0
f0128034:	68 7a b5 13 f0       	push   $0xf013b57a
f0128039:	e8 c7 81 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012803e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128041:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0128048:	89 c2                	mov    %eax,%edx
f012804a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012804d:	01 d0                	add    %edx,%eax
f012804f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0128052:	e8 90 54 fe ff       	call   f010d4e7 <sys_rcr2>
f0128057:	89 c2                	mov    %eax,%edx
f0128059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012805c:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0128063:	89 c1                	mov    %eax,%ecx
f0128065:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128068:	01 c8                	add    %ecx,%eax
f012806a:	39 c2                	cmp    %eax,%edx
f012806c:	74 17                	je     f0128085 <test_kfreeall+0x137c>
f012806e:	83 ec 04             	sub    $0x4,%esp
f0128071:	68 e0 bd 13 f0       	push   $0xf013bde0
f0128076:	68 d2 0a 00 00       	push   $0xad2
f012807b:	68 7a b5 13 f0       	push   $0xf013b57a
f0128080:	e8 80 81 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0128085:	ff 45 f4             	incl   -0xc(%ebp)
f0128088:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012808c:	0f 8e 74 ff ff ff    	jle    f0128006 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128092:	83 ec 0c             	sub    $0xc,%esp
f0128095:	6a 00                	push   $0x0
f0128097:	e8 5d 54 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012809c:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012809f:	e8 b5 4f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01280a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280a7:	e8 7b bc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01280ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01280af:	83 ec 0c             	sub    $0xc,%esp
f01280b2:	68 00 00 40 00       	push   $0x400000
f01280b7:	e8 ae f8 fd ff       	call   f010796a <kmalloc>
f01280bc:	83 c4 10             	add    $0x10,%esp
f01280bf:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01280c5:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01280cb:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01280d0:	74 17                	je     f01280e9 <test_kfreeall+0x13e0>
f01280d2:	83 ec 04             	sub    $0x4,%esp
f01280d5:	68 84 c2 13 f0       	push   $0xf013c284
f01280da:	68 de 0a 00 00       	push   $0xade
f01280df:	68 7a b5 13 f0       	push   $0xf013b57a
f01280e4:	e8 1c 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280e9:	e8 39 bc fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01280ee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01280f1:	74 17                	je     f012810a <test_kfreeall+0x1401>
f01280f3:	83 ec 04             	sub    $0x4,%esp
f01280f6:	68 94 b5 13 f0       	push   $0xf013b594
f01280fb:	68 df 0a 00 00       	push   $0xadf
f0128100:	68 7a b5 13 f0       	push   $0xf013b57a
f0128105:	e8 fb 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012810a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012810d:	e8 47 4f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128112:	29 c3                	sub    %eax,%ebx
f0128114:	89 d8                	mov    %ebx,%eax
f0128116:	3d 00 04 00 00       	cmp    $0x400,%eax
f012811b:	74 17                	je     f0128134 <test_kfreeall+0x142b>
f012811d:	83 ec 04             	sub    $0x4,%esp
f0128120:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128125:	68 e0 0a 00 00       	push   $0xae0
f012812a:	68 7a b5 13 f0       	push   $0xf013b57a
f012812f:	e8 d1 80 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0128134:	e8 20 4f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128139:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012813c:	e8 e6 bb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128141:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0128144:	83 ec 0c             	sub    $0xc,%esp
f0128147:	68 00 30 00 00       	push   $0x3000
f012814c:	e8 19 f8 fd ff       	call   f010796a <kmalloc>
f0128151:	83 c4 10             	add    $0x10,%esp
f0128154:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012815a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128160:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0128165:	74 17                	je     f012817e <test_kfreeall+0x1475>
f0128167:	83 ec 04             	sub    $0x4,%esp
f012816a:	68 84 c2 13 f0       	push   $0xf013c284
f012816f:	68 e6 0a 00 00       	push   $0xae6
f0128174:	68 7a b5 13 f0       	push   $0xf013b57a
f0128179:	e8 87 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012817e:	e8 a4 bb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128183:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128186:	74 17                	je     f012819f <test_kfreeall+0x1496>
f0128188:	83 ec 04             	sub    $0x4,%esp
f012818b:	68 94 b5 13 f0       	push   $0xf013b594
f0128190:	68 e7 0a 00 00       	push   $0xae7
f0128195:	68 7a b5 13 f0       	push   $0xf013b57a
f012819a:	e8 66 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012819f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01281a2:	e8 b2 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01281a7:	29 c3                	sub    %eax,%ebx
f01281a9:	89 d8                	mov    %ebx,%eax
f01281ab:	83 f8 03             	cmp    $0x3,%eax
f01281ae:	74 17                	je     f01281c7 <test_kfreeall+0x14be>
f01281b0:	83 ec 04             	sub    $0x4,%esp
f01281b3:	68 fc b5 13 f0       	push   $0xf013b5fc
f01281b8:	68 e8 0a 00 00       	push   $0xae8
f01281bd:	68 7a b5 13 f0       	push   $0xf013b57a
f01281c2:	e8 3e 80 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01281c7:	e8 8d 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01281cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281cf:	e8 53 bb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01281d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01281d7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01281dd:	83 ec 0c             	sub    $0xc,%esp
f01281e0:	50                   	push   %eax
f01281e1:	e8 cd f8 fd ff       	call   f0107ab3 <kfree>
f01281e6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281e9:	e8 39 bb fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01281ee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01281f1:	74 17                	je     f012820a <test_kfreeall+0x1501>
f01281f3:	83 ec 04             	sub    $0x4,%esp
f01281f6:	68 94 b5 13 f0       	push   $0xf013b594
f01281fb:	68 f2 0a 00 00       	push   $0xaf2
f0128200:	68 7a b5 13 f0       	push   $0xf013b57a
f0128205:	e8 fb 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012820a:	e8 4a 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012820f:	89 c2                	mov    %eax,%edx
f0128211:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128214:	29 c2                	sub    %eax,%edx
f0128216:	89 d0                	mov    %edx,%eax
f0128218:	83 f8 03             	cmp    $0x3,%eax
f012821b:	74 17                	je     f0128234 <test_kfreeall+0x152b>
f012821d:	83 ec 04             	sub    $0x4,%esp
f0128220:	68 2c be 13 f0       	push   $0xf013be2c
f0128225:	68 f3 0a 00 00       	push   $0xaf3
f012822a:	68 7a b5 13 f0       	push   $0xf013b57a
f012822f:	e8 d1 7f fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128234:	e8 20 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128239:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012823c:	e8 e6 ba fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128241:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0128244:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012824a:	83 ec 0c             	sub    $0xc,%esp
f012824d:	50                   	push   %eax
f012824e:	e8 60 f8 fd ff       	call   f0107ab3 <kfree>
f0128253:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128256:	e8 cc ba fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012825b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012825e:	74 17                	je     f0128277 <test_kfreeall+0x156e>
f0128260:	83 ec 04             	sub    $0x4,%esp
f0128263:	68 94 b5 13 f0       	push   $0xf013b594
f0128268:	68 fc 0a 00 00       	push   $0xafc
f012826d:	68 7a b5 13 f0       	push   $0xf013b57a
f0128272:	e8 8e 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128277:	e8 dd 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012827c:	89 c2                	mov    %eax,%edx
f012827e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128281:	39 c2                	cmp    %eax,%edx
f0128283:	74 17                	je     f012829c <test_kfreeall+0x1593>
f0128285:	83 ec 04             	sub    $0x4,%esp
f0128288:	68 2c be 13 f0       	push   $0xf013be2c
f012828d:	68 fd 0a 00 00       	push   $0xafd
f0128292:	68 7a b5 13 f0       	push   $0xf013b57a
f0128297:	e8 69 7f fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012829c:	e8 b8 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01282a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282a4:	e8 7e ba fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01282a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01282ac:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01282b2:	83 ec 0c             	sub    $0xc,%esp
f01282b5:	50                   	push   %eax
f01282b6:	e8 f8 f7 fd ff       	call   f0107ab3 <kfree>
f01282bb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282be:	e8 64 ba fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01282c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01282c6:	74 17                	je     f01282df <test_kfreeall+0x15d6>
f01282c8:	83 ec 04             	sub    $0x4,%esp
f01282cb:	68 94 b5 13 f0       	push   $0xf013b594
f01282d0:	68 03 0b 00 00       	push   $0xb03
f01282d5:	68 7a b5 13 f0       	push   $0xf013b57a
f01282da:	e8 26 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282df:	e8 75 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01282e4:	89 c2                	mov    %eax,%edx
f01282e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01282e9:	39 c2                	cmp    %eax,%edx
f01282eb:	74 17                	je     f0128304 <test_kfreeall+0x15fb>
f01282ed:	83 ec 04             	sub    $0x4,%esp
f01282f0:	68 2c be 13 f0       	push   $0xf013be2c
f01282f5:	68 04 0b 00 00       	push   $0xb04
f01282fa:	68 7a b5 13 f0       	push   $0xf013b57a
f01282ff:	e8 01 7f fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128304:	e8 50 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128309:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012830c:	e8 16 ba fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128311:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0128314:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012831a:	83 ec 0c             	sub    $0xc,%esp
f012831d:	50                   	push   %eax
f012831e:	e8 90 f7 fd ff       	call   f0107ab3 <kfree>
f0128323:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128326:	e8 fc b9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012832b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012832e:	74 17                	je     f0128347 <test_kfreeall+0x163e>
f0128330:	83 ec 04             	sub    $0x4,%esp
f0128333:	68 94 b5 13 f0       	push   $0xf013b594
f0128338:	68 0a 0b 00 00       	push   $0xb0a
f012833d:	68 7a b5 13 f0       	push   $0xf013b57a
f0128342:	e8 be 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128347:	e8 0d 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012834c:	89 c2                	mov    %eax,%edx
f012834e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128351:	39 c2                	cmp    %eax,%edx
f0128353:	74 17                	je     f012836c <test_kfreeall+0x1663>
f0128355:	83 ec 04             	sub    $0x4,%esp
f0128358:	68 2c be 13 f0       	push   $0xf013be2c
f012835d:	68 0b 0b 00 00       	push   $0xb0b
f0128362:	68 7a b5 13 f0       	push   $0xf013b57a
f0128367:	e8 99 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012836c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0128373:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012837a:	eb 48                	jmp    f01283c4 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012837c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012837f:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0128384:	83 ec 04             	sub    $0x4,%esp
f0128387:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012838d:	51                   	push   %ecx
f012838e:	52                   	push   %edx
f012838f:	50                   	push   %eax
f0128390:	e8 7b e6 fd ff       	call   f0106a10 <get_page_table>
f0128395:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0128398:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012839e:	85 c0                	test   %eax,%eax
f01283a0:	75 17                	jne    f01283b9 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01283a2:	83 ec 04             	sub    $0x4,%esp
f01283a5:	68 7c be 13 f0       	push   $0xf013be7c
f01283aa:	68 18 0b 00 00       	push   $0xb18
f01283af:	68 7a b5 13 f0       	push   $0xf013b57a
f01283b4:	e8 4c 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01283b9:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01283c0:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01283c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283c8:	78 b2                	js     f012837c <test_kfreeall+0x1673>
f01283ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283ce:	7f 09                	jg     f01283d9 <test_kfreeall+0x16d0>
f01283d0:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01283d7:	76 a3                	jbe    f012837c <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01283d9:	83 ec 0c             	sub    $0xc,%esp
f01283dc:	68 d8 c2 13 f0       	push   $0xf013c2d8
f01283e1:	e8 28 89 fd ff       	call   f0100d0e <cprintf>
f01283e6:	83 c4 10             	add    $0x10,%esp

	return 1;
f01283e9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01283ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01283f1:	5b                   	pop    %ebx
f01283f2:	5f                   	pop    %edi
f01283f3:	5d                   	pop    %ebp
f01283f4:	c3                   	ret    

f01283f5 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f01283f5:	55                   	push   %ebp
f01283f6:	89 e5                	mov    %esp,%ebp
f01283f8:	57                   	push   %edi
f01283f9:	53                   	push   %ebx
f01283fa:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0128400:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128404:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128408:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012840e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128414:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012841b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128422:	e8 32 4c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128427:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012842a:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0128430:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128435:	b8 00 00 00 00       	mov    $0x0,%eax
f012843a:	89 d7                	mov    %edx,%edi
f012843c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012843e:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0128444:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128449:	b8 00 00 00 00       	mov    $0x0,%eax
f012844e:	89 d7                	mov    %edx,%edi
f0128450:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128452:	e8 02 4c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128457:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012845a:	e8 c8 b8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012845f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128462:	83 ec 0c             	sub    $0xc,%esp
f0128465:	68 00 fc 1f 00       	push   $0x1ffc00
f012846a:	e8 fb f4 fd ff       	call   f010796a <kmalloc>
f012846f:	83 c4 10             	add    $0x10,%esp
f0128472:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128478:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012847e:	89 c1                	mov    %eax,%ecx
f0128480:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128487:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012848a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012848f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128492:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128495:	ba 00 00 00 00       	mov    $0x0,%edx
f012849a:	f7 75 d4             	divl   -0x2c(%ebp)
f012849d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284a0:	29 d0                	sub    %edx,%eax
f01284a2:	89 c3                	mov    %eax,%ebx
f01284a4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01284ab:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01284b0:	0f b6 d0             	movzbl %al,%edx
f01284b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01284b6:	01 d0                	add    %edx,%eax
f01284b8:	48                   	dec    %eax
f01284b9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01284bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01284c4:	f7 75 cc             	divl   -0x34(%ebp)
f01284c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284ca:	29 d0                	sub    %edx,%eax
f01284cc:	01 c3                	add    %eax,%ebx
f01284ce:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01284d5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01284da:	0f b6 c0             	movzbl %al,%eax
f01284dd:	c1 e0 04             	shl    $0x4,%eax
f01284e0:	89 c2                	mov    %eax,%edx
f01284e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01284e5:	01 d0                	add    %edx,%eax
f01284e7:	48                   	dec    %eax
f01284e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01284eb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01284ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01284f3:	f7 75 c4             	divl   -0x3c(%ebp)
f01284f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01284f9:	29 d0                	sub    %edx,%eax
f01284fb:	01 d8                	add    %ebx,%eax
f01284fd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128502:	39 c1                	cmp    %eax,%ecx
f0128504:	74 17                	je     f012851d <test_kexpand+0x128>
f0128506:	83 ec 04             	sub    $0x4,%esp
f0128509:	68 60 b6 13 f0       	push   $0xf013b660
f012850e:	68 43 0b 00 00       	push   $0xb43
f0128513:	68 7a b5 13 f0       	push   $0xf013b57a
f0128518:	e8 e8 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012851d:	e8 05 b8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128522:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128525:	74 17                	je     f012853e <test_kexpand+0x149>
f0128527:	83 ec 04             	sub    $0x4,%esp
f012852a:	68 94 b5 13 f0       	push   $0xf013b594
f012852f:	68 44 0b 00 00       	push   $0xb44
f0128534:	68 7a b5 13 f0       	push   $0xf013b57a
f0128539:	e8 c7 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012853e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128541:	e8 13 4b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128546:	29 c3                	sub    %eax,%ebx
f0128548:	89 d8                	mov    %ebx,%eax
f012854a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012854f:	74 17                	je     f0128568 <test_kexpand+0x173>
f0128551:	83 ec 04             	sub    $0x4,%esp
f0128554:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128559:	68 45 0b 00 00       	push   $0xb45
f012855e:	68 7a b5 13 f0       	push   $0xf013b57a
f0128563:	e8 9d 7c fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128568:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012856f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128572:	e8 e2 4a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128577:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012857a:	e8 a8 b7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012857f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128582:	83 ec 0c             	sub    $0xc,%esp
f0128585:	68 00 fc 1f 00       	push   $0x1ffc00
f012858a:	e8 db f3 fd ff       	call   f010796a <kmalloc>
f012858f:	83 c4 10             	add    $0x10,%esp
f0128592:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128598:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012859e:	89 c1                	mov    %eax,%ecx
f01285a0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01285a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01285aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285af:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01285b2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ba:	f7 75 bc             	divl   -0x44(%ebp)
f01285bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285c0:	29 d0                	sub    %edx,%eax
f01285c2:	89 c3                	mov    %eax,%ebx
f01285c4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01285cb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01285d0:	0f b6 d0             	movzbl %al,%edx
f01285d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01285d6:	01 d0                	add    %edx,%eax
f01285d8:	48                   	dec    %eax
f01285d9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01285dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01285df:	ba 00 00 00 00       	mov    $0x0,%edx
f01285e4:	f7 75 b4             	divl   -0x4c(%ebp)
f01285e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01285ea:	29 d0                	sub    %edx,%eax
f01285ec:	01 c3                	add    %eax,%ebx
f01285ee:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01285f5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01285fa:	0f b6 c0             	movzbl %al,%eax
f01285fd:	c1 e0 04             	shl    $0x4,%eax
f0128600:	89 c2                	mov    %eax,%edx
f0128602:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128605:	01 d0                	add    %edx,%eax
f0128607:	48                   	dec    %eax
f0128608:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012860b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012860e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128613:	f7 75 ac             	divl   -0x54(%ebp)
f0128616:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128619:	29 d0                	sub    %edx,%eax
f012861b:	01 d8                	add    %ebx,%eax
f012861d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128622:	39 c1                	cmp    %eax,%ecx
f0128624:	74 17                	je     f012863d <test_kexpand+0x248>
f0128626:	83 ec 04             	sub    $0x4,%esp
f0128629:	68 60 b6 13 f0       	push   $0xf013b660
f012862e:	68 4c 0b 00 00       	push   $0xb4c
f0128633:	68 7a b5 13 f0       	push   $0xf013b57a
f0128638:	e8 c8 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012863d:	e8 e5 b6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128642:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128645:	74 17                	je     f012865e <test_kexpand+0x269>
f0128647:	83 ec 04             	sub    $0x4,%esp
f012864a:	68 94 b5 13 f0       	push   $0xf013b594
f012864f:	68 4d 0b 00 00       	push   $0xb4d
f0128654:	68 7a b5 13 f0       	push   $0xf013b57a
f0128659:	e8 a7 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012865e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128661:	e8 f3 49 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128666:	29 c3                	sub    %eax,%ebx
f0128668:	89 d8                	mov    %ebx,%eax
f012866a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012866f:	74 17                	je     f0128688 <test_kexpand+0x293>
f0128671:	83 ec 04             	sub    $0x4,%esp
f0128674:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128679:	68 4e 0b 00 00       	push   $0xb4e
f012867e:	68 7a b5 13 f0       	push   $0xf013b57a
f0128683:	e8 7d 7b fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128688:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012868f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128692:	e8 c2 49 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128697:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012869a:	e8 88 b6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012869f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01286a2:	83 ec 0c             	sub    $0xc,%esp
f01286a5:	68 00 08 00 00       	push   $0x800
f01286aa:	e8 bb f2 fd ff       	call   f010796a <kmalloc>
f01286af:	83 c4 10             	add    $0x10,%esp
f01286b2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286b8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01286be:	89 c1                	mov    %eax,%ecx
f01286c0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01286c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01286ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286cf:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01286d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01286d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01286da:	f7 75 a4             	divl   -0x5c(%ebp)
f01286dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01286e0:	29 d0                	sub    %edx,%eax
f01286e2:	89 c3                	mov    %eax,%ebx
f01286e4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01286eb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01286f0:	0f b6 d0             	movzbl %al,%edx
f01286f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01286f6:	01 d0                	add    %edx,%eax
f01286f8:	48                   	dec    %eax
f01286f9:	89 45 98             	mov    %eax,-0x68(%ebp)
f01286fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01286ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0128704:	f7 75 9c             	divl   -0x64(%ebp)
f0128707:	8b 45 98             	mov    -0x68(%ebp),%eax
f012870a:	29 d0                	sub    %edx,%eax
f012870c:	01 c3                	add    %eax,%ebx
f012870e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128715:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012871a:	0f b6 c0             	movzbl %al,%eax
f012871d:	c1 e0 04             	shl    $0x4,%eax
f0128720:	89 c2                	mov    %eax,%edx
f0128722:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128725:	01 d0                	add    %edx,%eax
f0128727:	48                   	dec    %eax
f0128728:	89 45 90             	mov    %eax,-0x70(%ebp)
f012872b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012872e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128733:	f7 75 94             	divl   -0x6c(%ebp)
f0128736:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128739:	29 d0                	sub    %edx,%eax
f012873b:	01 d8                	add    %ebx,%eax
f012873d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128742:	39 c1                	cmp    %eax,%ecx
f0128744:	74 17                	je     f012875d <test_kexpand+0x368>
f0128746:	83 ec 04             	sub    $0x4,%esp
f0128749:	68 60 b6 13 f0       	push   $0xf013b660
f012874e:	68 55 0b 00 00       	push   $0xb55
f0128753:	68 7a b5 13 f0       	push   $0xf013b57a
f0128758:	e8 a8 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012875d:	e8 c5 b5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128762:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128765:	74 17                	je     f012877e <test_kexpand+0x389>
f0128767:	83 ec 04             	sub    $0x4,%esp
f012876a:	68 94 b5 13 f0       	push   $0xf013b594
f012876f:	68 56 0b 00 00       	push   $0xb56
f0128774:	68 7a b5 13 f0       	push   $0xf013b57a
f0128779:	e8 87 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012877e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128781:	e8 d3 48 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128786:	29 c3                	sub    %eax,%ebx
f0128788:	89 d8                	mov    %ebx,%eax
f012878a:	83 f8 01             	cmp    $0x1,%eax
f012878d:	74 17                	je     f01287a6 <test_kexpand+0x3b1>
f012878f:	83 ec 04             	sub    $0x4,%esp
f0128792:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128797:	68 57 0b 00 00       	push   $0xb57
f012879c:	68 7a b5 13 f0       	push   $0xf013b57a
f01287a1:	e8 5f 7a fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01287a6:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01287ad:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01287b0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01287b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01287b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287c0:	eb 0e                	jmp    f01287d0 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01287c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01287c8:	01 d0                	add    %edx,%eax
f01287ca:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01287cd:	ff 45 f4             	incl   -0xc(%ebp)
f01287d0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01287d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287d9:	7f e7                	jg     f01287c2 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01287db:	e8 79 48 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01287e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287e3:	e8 3f b5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01287e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01287eb:	83 ec 0c             	sub    $0xc,%esp
f01287ee:	68 00 08 00 00       	push   $0x800
f01287f3:	e8 72 f1 fd ff       	call   f010796a <kmalloc>
f01287f8:	83 c4 10             	add    $0x10,%esp
f01287fb:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128801:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128807:	89 c1                	mov    %eax,%ecx
f0128809:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128810:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128813:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128818:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012881b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012881e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128823:	f7 75 88             	divl   -0x78(%ebp)
f0128826:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128829:	29 d0                	sub    %edx,%eax
f012882b:	89 c3                	mov    %eax,%ebx
f012882d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128834:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128839:	0f b6 d0             	movzbl %al,%edx
f012883c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012883f:	01 d0                	add    %edx,%eax
f0128841:	48                   	dec    %eax
f0128842:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128848:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012884e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128853:	f7 75 80             	divl   -0x80(%ebp)
f0128856:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012885c:	29 d0                	sub    %edx,%eax
f012885e:	01 c3                	add    %eax,%ebx
f0128860:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128867:	10 00 00 
f012886a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012886f:	0f b6 c0             	movzbl %al,%eax
f0128872:	c1 e0 04             	shl    $0x4,%eax
f0128875:	89 c2                	mov    %eax,%edx
f0128877:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012887d:	01 d0                	add    %edx,%eax
f012887f:	48                   	dec    %eax
f0128880:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128886:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012888c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128891:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128897:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012889d:	29 d0                	sub    %edx,%eax
f012889f:	01 d8                	add    %ebx,%eax
f01288a1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01288a6:	39 c1                	cmp    %eax,%ecx
f01288a8:	74 17                	je     f01288c1 <test_kexpand+0x4cc>
f01288aa:	83 ec 04             	sub    $0x4,%esp
f01288ad:	68 60 b6 13 f0       	push   $0xf013b660
f01288b2:	68 63 0b 00 00       	push   $0xb63
f01288b7:	68 7a b5 13 f0       	push   $0xf013b57a
f01288bc:	e8 44 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288c1:	e8 61 b4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01288c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288c9:	74 17                	je     f01288e2 <test_kexpand+0x4ed>
f01288cb:	83 ec 04             	sub    $0x4,%esp
f01288ce:	68 94 b5 13 f0       	push   $0xf013b594
f01288d3:	68 64 0b 00 00       	push   $0xb64
f01288d8:	68 7a b5 13 f0       	push   $0xf013b57a
f01288dd:	e8 23 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288e2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288e5:	e8 6f 47 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01288ea:	29 c3                	sub    %eax,%ebx
f01288ec:	89 d8                	mov    %ebx,%eax
f01288ee:	83 f8 01             	cmp    $0x1,%eax
f01288f1:	74 17                	je     f012890a <test_kexpand+0x515>
f01288f3:	83 ec 04             	sub    $0x4,%esp
f01288f6:	68 fc b5 13 f0       	push   $0xf013b5fc
f01288fb:	68 65 0b 00 00       	push   $0xb65
f0128900:	68 7a b5 13 f0       	push   $0xf013b57a
f0128905:	e8 fb 78 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012890a:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0128911:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128914:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012891a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012891d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128924:	eb 0e                	jmp    f0128934 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128926:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128929:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012892c:	01 d0                	add    %edx,%eax
f012892e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128931:	ff 45 f4             	incl   -0xc(%ebp)
f0128934:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012893a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012893d:	7f e7                	jg     f0128926 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012893f:	e8 15 47 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128944:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128947:	e8 db b3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012894c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012894f:	83 ec 0c             	sub    $0xc,%esp
f0128952:	68 00 1c 00 00       	push   $0x1c00
f0128957:	e8 0e f0 fd ff       	call   f010796a <kmalloc>
f012895c:	83 c4 10             	add    $0x10,%esp
f012895f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128965:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012896b:	89 c1                	mov    %eax,%ecx
f012896d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128974:	10 00 00 
f0128977:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012897d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128982:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128988:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012898e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128993:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128999:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012899f:	29 d0                	sub    %edx,%eax
f01289a1:	89 c3                	mov    %eax,%ebx
f01289a3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01289aa:	10 00 00 
f01289ad:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01289b2:	0f b6 d0             	movzbl %al,%edx
f01289b5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01289bb:	01 d0                	add    %edx,%eax
f01289bd:	48                   	dec    %eax
f01289be:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01289c4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01289ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01289cf:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01289d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01289db:	29 d0                	sub    %edx,%eax
f01289dd:	01 c3                	add    %eax,%ebx
f01289df:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01289e6:	10 00 00 
f01289e9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01289ee:	0f b6 c0             	movzbl %al,%eax
f01289f1:	c1 e0 04             	shl    $0x4,%eax
f01289f4:	89 c2                	mov    %eax,%edx
f01289f6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01289fc:	01 d0                	add    %edx,%eax
f01289fe:	48                   	dec    %eax
f01289ff:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128a05:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a10:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128a16:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a1c:	29 d0                	sub    %edx,%eax
f0128a1e:	01 d8                	add    %ebx,%eax
f0128a20:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128a25:	39 c1                	cmp    %eax,%ecx
f0128a27:	74 17                	je     f0128a40 <test_kexpand+0x64b>
f0128a29:	83 ec 04             	sub    $0x4,%esp
f0128a2c:	68 60 b6 13 f0       	push   $0xf013b660
f0128a31:	68 71 0b 00 00       	push   $0xb71
f0128a36:	68 7a b5 13 f0       	push   $0xf013b57a
f0128a3b:	e8 c5 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a40:	e8 e2 b2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128a45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a48:	74 17                	je     f0128a61 <test_kexpand+0x66c>
f0128a4a:	83 ec 04             	sub    $0x4,%esp
f0128a4d:	68 94 b5 13 f0       	push   $0xf013b594
f0128a52:	68 72 0b 00 00       	push   $0xb72
f0128a57:	68 7a b5 13 f0       	push   $0xf013b57a
f0128a5c:	e8 a4 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a61:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a64:	e8 f0 45 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128a69:	29 c3                	sub    %eax,%ebx
f0128a6b:	89 d8                	mov    %ebx,%eax
f0128a6d:	83 f8 02             	cmp    $0x2,%eax
f0128a70:	74 17                	je     f0128a89 <test_kexpand+0x694>
f0128a72:	83 ec 04             	sub    $0x4,%esp
f0128a75:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128a7a:	68 73 0b 00 00       	push   $0xb73
f0128a7f:	68 7a b5 13 f0       	push   $0xf013b57a
f0128a84:	e8 7c 77 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128a89:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128a90:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128a93:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128a99:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128a9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128aa3:	eb 0e                	jmp    f0128ab3 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128aa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128aa8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128aab:	01 d0                	add    %edx,%eax
f0128aad:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128ab0:	ff 45 f4             	incl   -0xc(%ebp)
f0128ab3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128ab9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128abc:	7f e7                	jg     f0128aa5 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128abe:	e8 96 45 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128ac3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ac6:	e8 5c b2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128acb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128ace:	83 ec 0c             	sub    $0xc,%esp
f0128ad1:	68 00 fc 2f 00       	push   $0x2ffc00
f0128ad6:	e8 8f ee fd ff       	call   f010796a <kmalloc>
f0128adb:	83 c4 10             	add    $0x10,%esp
f0128ade:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ae4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128aea:	89 c1                	mov    %eax,%ecx
f0128aec:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128af3:	10 00 00 
f0128af6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128afc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b01:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128b07:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b12:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128b18:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b1e:	29 d0                	sub    %edx,%eax
f0128b20:	89 c3                	mov    %eax,%ebx
f0128b22:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128b29:	10 00 00 
f0128b2c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128b31:	0f b6 d0             	movzbl %al,%edx
f0128b34:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128b3a:	01 d0                	add    %edx,%eax
f0128b3c:	48                   	dec    %eax
f0128b3d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128b43:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b49:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b4e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128b54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b5a:	29 d0                	sub    %edx,%eax
f0128b5c:	01 c3                	add    %eax,%ebx
f0128b5e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128b65:	10 00 00 
f0128b68:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128b6d:	0f b6 c0             	movzbl %al,%eax
f0128b70:	c1 e0 04             	shl    $0x4,%eax
f0128b73:	89 c2                	mov    %eax,%edx
f0128b75:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128b7b:	01 d0                	add    %edx,%eax
f0128b7d:	48                   	dec    %eax
f0128b7e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128b84:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b8f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128b95:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b9b:	29 d0                	sub    %edx,%eax
f0128b9d:	01 d8                	add    %ebx,%eax
f0128b9f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128ba4:	39 c1                	cmp    %eax,%ecx
f0128ba6:	74 17                	je     f0128bbf <test_kexpand+0x7ca>
f0128ba8:	83 ec 04             	sub    $0x4,%esp
f0128bab:	68 60 b6 13 f0       	push   $0xf013b660
f0128bb0:	68 7f 0b 00 00       	push   $0xb7f
f0128bb5:	68 7a b5 13 f0       	push   $0xf013b57a
f0128bba:	e8 46 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bbf:	e8 63 b1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128bc4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bc7:	74 17                	je     f0128be0 <test_kexpand+0x7eb>
f0128bc9:	83 ec 04             	sub    $0x4,%esp
f0128bcc:	68 94 b5 13 f0       	push   $0xf013b594
f0128bd1:	68 80 0b 00 00       	push   $0xb80
f0128bd6:	68 7a b5 13 f0       	push   $0xf013b57a
f0128bdb:	e8 25 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128be0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128be3:	e8 71 44 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128be8:	29 c3                	sub    %eax,%ebx
f0128bea:	89 d8                	mov    %ebx,%eax
f0128bec:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128bf1:	74 17                	je     f0128c0a <test_kexpand+0x815>
f0128bf3:	83 ec 04             	sub    $0x4,%esp
f0128bf6:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128bfb:	68 81 0b 00 00       	push   $0xb81
f0128c00:	68 7a b5 13 f0       	push   $0xf013b57a
f0128c05:	e8 fb 75 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128c0a:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128c11:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128c14:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128c1a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128c1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c24:	eb 0e                	jmp    f0128c34 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128c26:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c29:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c2c:	01 d0                	add    %edx,%eax
f0128c2e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128c31:	ff 45 f4             	incl   -0xc(%ebp)
f0128c34:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128c3a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c3d:	7f e7                	jg     f0128c26 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c3f:	e8 15 44 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128c44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c47:	e8 db b0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128c4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128c4f:	83 ec 0c             	sub    $0xc,%esp
f0128c52:	68 00 00 60 00       	push   $0x600000
f0128c57:	e8 0e ed fd ff       	call   f010796a <kmalloc>
f0128c5c:	83 c4 10             	add    $0x10,%esp
f0128c5f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c65:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128c6b:	89 c1                	mov    %eax,%ecx
f0128c6d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128c74:	10 00 00 
f0128c77:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128c7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c82:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128c88:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c93:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128c99:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c9f:	29 d0                	sub    %edx,%eax
f0128ca1:	89 c3                	mov    %eax,%ebx
f0128ca3:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128caa:	10 00 00 
f0128cad:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128cb2:	0f b6 d0             	movzbl %al,%edx
f0128cb5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128cbb:	01 d0                	add    %edx,%eax
f0128cbd:	48                   	dec    %eax
f0128cbe:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128cc4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cca:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ccf:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128cd5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cdb:	29 d0                	sub    %edx,%eax
f0128cdd:	01 c3                	add    %eax,%ebx
f0128cdf:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128ce6:	10 00 00 
f0128ce9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128cee:	0f b6 c0             	movzbl %al,%eax
f0128cf1:	c1 e0 04             	shl    $0x4,%eax
f0128cf4:	89 c2                	mov    %eax,%edx
f0128cf6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128cfc:	01 d0                	add    %edx,%eax
f0128cfe:	48                   	dec    %eax
f0128cff:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128d05:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d10:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128d16:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d1c:	29 d0                	sub    %edx,%eax
f0128d1e:	01 d8                	add    %ebx,%eax
f0128d20:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128d25:	39 c1                	cmp    %eax,%ecx
f0128d27:	74 17                	je     f0128d40 <test_kexpand+0x94b>
f0128d29:	83 ec 04             	sub    $0x4,%esp
f0128d2c:	68 60 b6 13 f0       	push   $0xf013b660
f0128d31:	68 8d 0b 00 00       	push   $0xb8d
f0128d36:	68 7a b5 13 f0       	push   $0xf013b57a
f0128d3b:	e8 c5 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d40:	e8 e2 af fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128d45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d48:	74 17                	je     f0128d61 <test_kexpand+0x96c>
f0128d4a:	83 ec 04             	sub    $0x4,%esp
f0128d4d:	68 94 b5 13 f0       	push   $0xf013b594
f0128d52:	68 8e 0b 00 00       	push   $0xb8e
f0128d57:	68 7a b5 13 f0       	push   $0xf013b57a
f0128d5c:	e8 a4 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d61:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d64:	e8 f0 42 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128d69:	29 c3                	sub    %eax,%ebx
f0128d6b:	89 d8                	mov    %ebx,%eax
f0128d6d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128d72:	74 17                	je     f0128d8b <test_kexpand+0x996>
f0128d74:	83 ec 04             	sub    $0x4,%esp
f0128d77:	68 fc b5 13 f0       	push   $0xf013b5fc
f0128d7c:	68 8f 0b 00 00       	push   $0xb8f
f0128d81:	68 7a b5 13 f0       	push   $0xf013b57a
f0128d86:	e8 7a 74 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128d8b:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128d92:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128d95:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128d9b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128da1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128da8:	eb 1a                	jmp    f0128dc4 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128db4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128dba:	01 c2                	add    %eax,%edx
f0128dbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dbf:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128dc1:	ff 45 f4             	incl   -0xc(%ebp)
f0128dc4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128dca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128dcd:	7d db                	jge    f0128daa <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128dcf:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128dd6:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128dd9:	e8 7b 42 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128dde:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128de1:	e8 41 af fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128de6:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128de9:	83 ec 0c             	sub    $0xc,%esp
f0128dec:	68 00 00 70 00       	push   $0x700000
f0128df1:	e8 63 ee fd ff       	call   f0107c59 <kexpand>
f0128df6:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128df9:	e8 29 af fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128dfe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e01:	74 19                	je     f0128e1c <test_kexpand+0xa27>
f0128e03:	68 14 c3 13 f0       	push   $0xf013c314
f0128e08:	68 45 c3 13 f0       	push   $0xf013c345
f0128e0d:	68 a0 0b 00 00       	push   $0xba0
f0128e12:	68 7a b5 13 f0       	push   $0xf013b57a
f0128e17:	e8 e9 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128e1c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e1f:	e8 35 42 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128e24:	29 c3                	sub    %eax,%ebx
f0128e26:	89 d8                	mov    %ebx,%eax
f0128e28:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128e2d:	74 19                	je     f0128e48 <test_kexpand+0xa53>
f0128e2f:	68 5c c3 13 f0       	push   $0xf013c35c
f0128e34:	68 45 c3 13 f0       	push   $0xf013c345
f0128e39:	68 a1 0b 00 00       	push   $0xba1
f0128e3e:	68 7a b5 13 f0       	push   $0xf013b57a
f0128e43:	e8 bd 73 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e48:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128e51:	eb 1a                	jmp    f0128e6d <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e56:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e5d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e63:	01 c2                	add    %eax,%edx
f0128e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e68:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e6a:	ff 45 f4             	incl   -0xc(%ebp)
f0128e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e70:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128e76:	7c db                	jl     f0128e53 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e7f:	eb 37                	jmp    f0128eb8 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e8b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e91:	01 d0                	add    %edx,%eax
f0128e93:	8b 10                	mov    (%eax),%edx
f0128e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e98:	39 c2                	cmp    %eax,%edx
f0128e9a:	74 19                	je     f0128eb5 <test_kexpand+0xac0>
f0128e9c:	68 8c c3 13 f0       	push   $0xf013c38c
f0128ea1:	68 45 c3 13 f0       	push   $0xf013c345
f0128ea6:	68 ad 0b 00 00       	push   $0xbad
f0128eab:	68 7a b5 13 f0       	push   $0xf013b57a
f0128eb0:	e8 50 73 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128eb5:	ff 45 f4             	incl   -0xc(%ebp)
f0128eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ebb:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128ec1:	7c be                	jl     f0128e81 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ec3:	e8 91 41 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ecb:	e8 57 ae fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128ed0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128ed3:	83 ec 0c             	sub    $0xc,%esp
f0128ed6:	68 00 00 a0 00       	push   $0xa00000
f0128edb:	e8 79 ed fd ff       	call   f0107c59 <kexpand>
f0128ee0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128ee3:	e8 3f ae fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128ee8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128eeb:	74 19                	je     f0128f06 <test_kexpand+0xb11>
f0128eed:	68 14 c3 13 f0       	push   $0xf013c314
f0128ef2:	68 45 c3 13 f0       	push   $0xf013c345
f0128ef7:	68 b8 0b 00 00       	push   $0xbb8
f0128efc:	68 7a b5 13 f0       	push   $0xf013b57a
f0128f01:	e8 ff 72 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128f06:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f09:	e8 4b 41 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128f0e:	29 c3                	sub    %eax,%ebx
f0128f10:	89 d8                	mov    %ebx,%eax
f0128f12:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128f17:	74 19                	je     f0128f32 <test_kexpand+0xb3d>
f0128f19:	68 98 c3 13 f0       	push   $0xf013c398
f0128f1e:	68 45 c3 13 f0       	push   $0xf013c345
f0128f23:	68 b9 0b 00 00       	push   $0xbb9
f0128f28:	68 7a b5 13 f0       	push   $0xf013b57a
f0128f2d:	e8 d3 72 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f32:	e8 22 41 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128f37:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f3a:	e8 e8 ad fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0128f3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128f42:	83 ec 0c             	sub    $0xc,%esp
f0128f45:	68 00 00 40 00       	push   $0x400000
f0128f4a:	e8 1b ea fd ff       	call   f010796a <kmalloc>
f0128f4f:	83 c4 10             	add    $0x10,%esp
f0128f52:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128f58:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128f5e:	89 c1                	mov    %eax,%ecx
f0128f60:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f67:	10 00 00 
f0128f6a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128f70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f75:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128f7b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128f81:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f86:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128f8c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128f92:	29 d0                	sub    %edx,%eax
f0128f94:	89 c3                	mov    %eax,%ebx
f0128f96:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128f9d:	10 00 00 
f0128fa0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128fa5:	0f b6 d0             	movzbl %al,%edx
f0128fa8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fae:	01 d0                	add    %edx,%eax
f0128fb0:	48                   	dec    %eax
f0128fb1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fb7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fc2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128fc8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fce:	29 d0                	sub    %edx,%eax
f0128fd0:	01 c3                	add    %eax,%ebx
f0128fd2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128fd9:	10 00 00 
f0128fdc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0128fe1:	0f b6 c0             	movzbl %al,%eax
f0128fe4:	c1 e0 04             	shl    $0x4,%eax
f0128fe7:	89 c2                	mov    %eax,%edx
f0128fe9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128fef:	01 d0                	add    %edx,%eax
f0128ff1:	48                   	dec    %eax
f0128ff2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128ff8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f0129003:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129009:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012900f:	29 d0                	sub    %edx,%eax
f0129011:	01 d8                	add    %ebx,%eax
f0129013:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0129018:	39 c1                	cmp    %eax,%ecx
f012901a:	74 17                	je     f0129033 <test_kexpand+0xc3e>
f012901c:	83 ec 04             	sub    $0x4,%esp
f012901f:	68 c8 c3 13 f0       	push   $0xf013c3c8
f0129024:	68 c4 0b 00 00       	push   $0xbc4
f0129029:	68 7a b5 13 f0       	push   $0xf013b57a
f012902e:	e8 d2 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129033:	e8 ef ac fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129038:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012903b:	74 17                	je     f0129054 <test_kexpand+0xc5f>
f012903d:	83 ec 04             	sub    $0x4,%esp
f0129040:	68 94 b5 13 f0       	push   $0xf013b594
f0129045:	68 c5 0b 00 00       	push   $0xbc5
f012904a:	68 7a b5 13 f0       	push   $0xf013b57a
f012904f:	e8 b1 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129054:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129057:	e8 fd 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012905c:	29 c3                	sub    %eax,%ebx
f012905e:	89 d8                	mov    %ebx,%eax
f0129060:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129065:	74 17                	je     f012907e <test_kexpand+0xc89>
f0129067:	83 ec 04             	sub    $0x4,%esp
f012906a:	68 fc b5 13 f0       	push   $0xf013b5fc
f012906f:	68 c6 0b 00 00       	push   $0xbc6
f0129074:	68 7a b5 13 f0       	push   $0xf013b57a
f0129079:	e8 87 71 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f012907e:	e8 d6 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129083:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129086:	e8 9c ac fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012908b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012908e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0129094:	83 ec 0c             	sub    $0xc,%esp
f0129097:	50                   	push   %eax
f0129098:	e8 16 ea fd ff       	call   f0107ab3 <kfree>
f012909d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290a0:	e8 82 ac fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01290a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290a8:	74 17                	je     f01290c1 <test_kexpand+0xccc>
f01290aa:	83 ec 04             	sub    $0x4,%esp
f01290ad:	68 94 b5 13 f0       	push   $0xf013b594
f01290b2:	68 cf 0b 00 00       	push   $0xbcf
f01290b7:	68 7a b5 13 f0       	push   $0xf013b57a
f01290bc:	e8 44 71 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01290c1:	e8 93 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01290c6:	89 c2                	mov    %eax,%edx
f01290c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01290cb:	29 c2                	sub    %eax,%edx
f01290cd:	89 d0                	mov    %edx,%eax
f01290cf:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01290d4:	74 17                	je     f01290ed <test_kexpand+0xcf8>
f01290d6:	83 ec 04             	sub    $0x4,%esp
f01290d9:	68 2c be 13 f0       	push   $0xf013be2c
f01290de:	68 d0 0b 00 00       	push   $0xbd0
f01290e3:	68 7a b5 13 f0       	push   $0xf013b57a
f01290e8:	e8 18 71 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01290ed:	e8 67 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01290f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290f5:	e8 2d ac fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01290fa:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01290fd:	83 ec 0c             	sub    $0xc,%esp
f0129100:	68 00 50 40 00       	push   $0x405000
f0129105:	e8 4f eb fd ff       	call   f0107c59 <kexpand>
f012910a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012910d:	e8 15 ac fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129112:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129115:	74 19                	je     f0129130 <test_kexpand+0xd3b>
f0129117:	68 14 c3 13 f0       	push   $0xf013c314
f012911c:	68 45 c3 13 f0       	push   $0xf013c345
f0129121:	68 da 0b 00 00       	push   $0xbda
f0129126:	68 7a b5 13 f0       	push   $0xf013b57a
f012912b:	e8 d5 70 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0129130:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129133:	e8 21 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129138:	29 c3                	sub    %eax,%ebx
f012913a:	89 d8                	mov    %ebx,%eax
f012913c:	83 f8 05             	cmp    $0x5,%eax
f012913f:	74 19                	je     f012915a <test_kexpand+0xd65>
f0129141:	68 f0 c3 13 f0       	push   $0xf013c3f0
f0129146:	68 45 c3 13 f0       	push   $0xf013c345
f012914b:	68 db 0b 00 00       	push   $0xbdb
f0129150:	68 7a b5 13 f0       	push   $0xf013b57a
f0129155:	e8 ab 70 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012915a:	83 ec 0c             	sub    $0xc,%esp
f012915d:	68 d8 c2 13 f0       	push   $0xf013c2d8
f0129162:	e8 a7 7b fd ff       	call   f0100d0e <cprintf>
f0129167:	83 c4 10             	add    $0x10,%esp

	return 1;
f012916a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012916f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129172:	5b                   	pop    %ebx
f0129173:	5f                   	pop    %edi
f0129174:	5d                   	pop    %ebp
f0129175:	c3                   	ret    

f0129176 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0129176:	55                   	push   %ebp
f0129177:	89 e5                	mov    %esp,%ebp
f0129179:	57                   	push   %edi
f012917a:	53                   	push   %ebx
f012917b:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0129181:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0129185:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0129189:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012918f:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0129195:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012919c:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01291a3:	e8 b1 3e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01291a8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01291ab:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01291b1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01291bb:	89 d7                	mov    %edx,%edi
f01291bd:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01291bf:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01291c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01291cf:	89 d7                	mov    %edx,%edi
f01291d1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01291d3:	e8 81 3e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01291d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291db:	e8 47 ab fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01291e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01291e3:	83 ec 0c             	sub    $0xc,%esp
f01291e6:	68 00 fc 1f 00       	push   $0x1ffc00
f01291eb:	e8 7a e7 fd ff       	call   f010796a <kmalloc>
f01291f0:	83 c4 10             	add    $0x10,%esp
f01291f3:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01291f9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01291ff:	89 c1                	mov    %eax,%ecx
f0129201:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0129208:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012920b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129210:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0129213:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129216:	ba 00 00 00 00       	mov    $0x0,%edx
f012921b:	f7 75 d4             	divl   -0x2c(%ebp)
f012921e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129221:	29 d0                	sub    %edx,%eax
f0129223:	89 c3                	mov    %eax,%ebx
f0129225:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012922c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129231:	0f b6 d0             	movzbl %al,%edx
f0129234:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129237:	01 d0                	add    %edx,%eax
f0129239:	48                   	dec    %eax
f012923a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012923d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129240:	ba 00 00 00 00       	mov    $0x0,%edx
f0129245:	f7 75 cc             	divl   -0x34(%ebp)
f0129248:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012924b:	29 d0                	sub    %edx,%eax
f012924d:	01 c3                	add    %eax,%ebx
f012924f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129256:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012925b:	0f b6 c0             	movzbl %al,%eax
f012925e:	c1 e0 04             	shl    $0x4,%eax
f0129261:	89 c2                	mov    %eax,%edx
f0129263:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129266:	01 d0                	add    %edx,%eax
f0129268:	48                   	dec    %eax
f0129269:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012926c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012926f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129274:	f7 75 c4             	divl   -0x3c(%ebp)
f0129277:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012927a:	29 d0                	sub    %edx,%eax
f012927c:	01 d8                	add    %ebx,%eax
f012927e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129283:	39 c1                	cmp    %eax,%ecx
f0129285:	74 17                	je     f012929e <test_kshrink+0x128>
f0129287:	83 ec 04             	sub    $0x4,%esp
f012928a:	68 60 b6 13 f0       	push   $0xf013b660
f012928f:	68 01 0c 00 00       	push   $0xc01
f0129294:	68 7a b5 13 f0       	push   $0xf013b57a
f0129299:	e8 67 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012929e:	e8 84 aa fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01292a3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292a6:	74 17                	je     f01292bf <test_kshrink+0x149>
f01292a8:	83 ec 04             	sub    $0x4,%esp
f01292ab:	68 94 b5 13 f0       	push   $0xf013b594
f01292b0:	68 02 0c 00 00       	push   $0xc02
f01292b5:	68 7a b5 13 f0       	push   $0xf013b57a
f01292ba:	e8 46 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292bf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01292c2:	e8 92 3d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01292c7:	29 c3                	sub    %eax,%ebx
f01292c9:	89 d8                	mov    %ebx,%eax
f01292cb:	3d 00 02 00 00       	cmp    $0x200,%eax
f01292d0:	74 17                	je     f01292e9 <test_kshrink+0x173>
f01292d2:	83 ec 04             	sub    $0x4,%esp
f01292d5:	68 fc b5 13 f0       	push   $0xf013b5fc
f01292da:	68 03 0c 00 00       	push   $0xc03
f01292df:	68 7a b5 13 f0       	push   $0xf013b57a
f01292e4:	e8 1c 6f fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01292e9:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f01292f0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01292f3:	e8 61 3d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01292f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292fb:	e8 27 aa fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129300:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129303:	83 ec 0c             	sub    $0xc,%esp
f0129306:	68 00 fc 1f 00       	push   $0x1ffc00
f012930b:	e8 5a e6 fd ff       	call   f010796a <kmalloc>
f0129310:	83 c4 10             	add    $0x10,%esp
f0129313:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129319:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012931f:	89 c1                	mov    %eax,%ecx
f0129321:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129328:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012932b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129330:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129333:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129336:	ba 00 00 00 00       	mov    $0x0,%edx
f012933b:	f7 75 bc             	divl   -0x44(%ebp)
f012933e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129341:	29 d0                	sub    %edx,%eax
f0129343:	89 c3                	mov    %eax,%ebx
f0129345:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012934c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129351:	0f b6 d0             	movzbl %al,%edx
f0129354:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129357:	01 d0                	add    %edx,%eax
f0129359:	48                   	dec    %eax
f012935a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012935d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129360:	ba 00 00 00 00       	mov    $0x0,%edx
f0129365:	f7 75 b4             	divl   -0x4c(%ebp)
f0129368:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012936b:	29 d0                	sub    %edx,%eax
f012936d:	01 c3                	add    %eax,%ebx
f012936f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129376:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012937b:	0f b6 c0             	movzbl %al,%eax
f012937e:	c1 e0 04             	shl    $0x4,%eax
f0129381:	89 c2                	mov    %eax,%edx
f0129383:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129386:	01 d0                	add    %edx,%eax
f0129388:	48                   	dec    %eax
f0129389:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012938c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012938f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129394:	f7 75 ac             	divl   -0x54(%ebp)
f0129397:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012939a:	29 d0                	sub    %edx,%eax
f012939c:	01 d8                	add    %ebx,%eax
f012939e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01293a3:	39 c1                	cmp    %eax,%ecx
f01293a5:	74 17                	je     f01293be <test_kshrink+0x248>
f01293a7:	83 ec 04             	sub    $0x4,%esp
f01293aa:	68 60 b6 13 f0       	push   $0xf013b660
f01293af:	68 0a 0c 00 00       	push   $0xc0a
f01293b4:	68 7a b5 13 f0       	push   $0xf013b57a
f01293b9:	e8 47 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293be:	e8 64 a9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01293c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293c6:	74 17                	je     f01293df <test_kshrink+0x269>
f01293c8:	83 ec 04             	sub    $0x4,%esp
f01293cb:	68 94 b5 13 f0       	push   $0xf013b594
f01293d0:	68 0b 0c 00 00       	push   $0xc0b
f01293d5:	68 7a b5 13 f0       	push   $0xf013b57a
f01293da:	e8 26 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293df:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01293e2:	e8 72 3c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01293e7:	29 c3                	sub    %eax,%ebx
f01293e9:	89 d8                	mov    %ebx,%eax
f01293eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f01293f0:	74 17                	je     f0129409 <test_kshrink+0x293>
f01293f2:	83 ec 04             	sub    $0x4,%esp
f01293f5:	68 fc b5 13 f0       	push   $0xf013b5fc
f01293fa:	68 0c 0c 00 00       	push   $0xc0c
f01293ff:	68 7a b5 13 f0       	push   $0xf013b57a
f0129404:	e8 fc 6d fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129409:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0129410:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129413:	e8 41 3c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129418:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012941b:	e8 07 a9 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129420:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129423:	83 ec 0c             	sub    $0xc,%esp
f0129426:	68 00 08 00 00       	push   $0x800
f012942b:	e8 3a e5 fd ff       	call   f010796a <kmalloc>
f0129430:	83 c4 10             	add    $0x10,%esp
f0129433:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129439:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012943f:	89 c1                	mov    %eax,%ecx
f0129441:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129448:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012944b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129450:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129453:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129456:	ba 00 00 00 00       	mov    $0x0,%edx
f012945b:	f7 75 a4             	divl   -0x5c(%ebp)
f012945e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129461:	29 d0                	sub    %edx,%eax
f0129463:	89 c3                	mov    %eax,%ebx
f0129465:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012946c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129471:	0f b6 d0             	movzbl %al,%edx
f0129474:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129477:	01 d0                	add    %edx,%eax
f0129479:	48                   	dec    %eax
f012947a:	89 45 98             	mov    %eax,-0x68(%ebp)
f012947d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129480:	ba 00 00 00 00       	mov    $0x0,%edx
f0129485:	f7 75 9c             	divl   -0x64(%ebp)
f0129488:	8b 45 98             	mov    -0x68(%ebp),%eax
f012948b:	29 d0                	sub    %edx,%eax
f012948d:	01 c3                	add    %eax,%ebx
f012948f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129496:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012949b:	0f b6 c0             	movzbl %al,%eax
f012949e:	c1 e0 04             	shl    $0x4,%eax
f01294a1:	89 c2                	mov    %eax,%edx
f01294a3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01294a6:	01 d0                	add    %edx,%eax
f01294a8:	48                   	dec    %eax
f01294a9:	89 45 90             	mov    %eax,-0x70(%ebp)
f01294ac:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294af:	ba 00 00 00 00       	mov    $0x0,%edx
f01294b4:	f7 75 94             	divl   -0x6c(%ebp)
f01294b7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294ba:	29 d0                	sub    %edx,%eax
f01294bc:	01 d8                	add    %ebx,%eax
f01294be:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01294c3:	39 c1                	cmp    %eax,%ecx
f01294c5:	74 17                	je     f01294de <test_kshrink+0x368>
f01294c7:	83 ec 04             	sub    $0x4,%esp
f01294ca:	68 60 b6 13 f0       	push   $0xf013b660
f01294cf:	68 13 0c 00 00       	push   $0xc13
f01294d4:	68 7a b5 13 f0       	push   $0xf013b57a
f01294d9:	e8 27 6d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294de:	e8 44 a8 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01294e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01294e6:	74 17                	je     f01294ff <test_kshrink+0x389>
f01294e8:	83 ec 04             	sub    $0x4,%esp
f01294eb:	68 94 b5 13 f0       	push   $0xf013b594
f01294f0:	68 14 0c 00 00       	push   $0xc14
f01294f5:	68 7a b5 13 f0       	push   $0xf013b57a
f01294fa:	e8 06 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294ff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129502:	e8 52 3b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129507:	29 c3                	sub    %eax,%ebx
f0129509:	89 d8                	mov    %ebx,%eax
f012950b:	83 f8 01             	cmp    $0x1,%eax
f012950e:	74 17                	je     f0129527 <test_kshrink+0x3b1>
f0129510:	83 ec 04             	sub    $0x4,%esp
f0129513:	68 fc b5 13 f0       	push   $0xf013b5fc
f0129518:	68 15 0c 00 00       	push   $0xc15
f012951d:	68 7a b5 13 f0       	push   $0xf013b57a
f0129522:	e8 de 6c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129527:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f012952e:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129531:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129537:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012953a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129541:	eb 0e                	jmp    f0129551 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0129543:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129546:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129549:	01 d0                	add    %edx,%eax
f012954b:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012954e:	ff 45 f4             	incl   -0xc(%ebp)
f0129551:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129557:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012955a:	7f e7                	jg     f0129543 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012955c:	e8 f8 3a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129561:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129564:	e8 be a7 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129569:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012956c:	83 ec 0c             	sub    $0xc,%esp
f012956f:	68 00 08 00 00       	push   $0x800
f0129574:	e8 f1 e3 fd ff       	call   f010796a <kmalloc>
f0129579:	83 c4 10             	add    $0x10,%esp
f012957c:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129582:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129588:	89 c1                	mov    %eax,%ecx
f012958a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0129591:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129594:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129599:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012959c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012959f:	ba 00 00 00 00       	mov    $0x0,%edx
f01295a4:	f7 75 88             	divl   -0x78(%ebp)
f01295a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295aa:	29 d0                	sub    %edx,%eax
f01295ac:	89 c3                	mov    %eax,%ebx
f01295ae:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01295b5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01295ba:	0f b6 d0             	movzbl %al,%edx
f01295bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01295c0:	01 d0                	add    %edx,%eax
f01295c2:	48                   	dec    %eax
f01295c3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01295c9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01295cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01295d4:	f7 75 80             	divl   -0x80(%ebp)
f01295d7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01295dd:	29 d0                	sub    %edx,%eax
f01295df:	01 c3                	add    %eax,%ebx
f01295e1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01295e8:	10 00 00 
f01295eb:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01295f0:	0f b6 c0             	movzbl %al,%eax
f01295f3:	c1 e0 04             	shl    $0x4,%eax
f01295f6:	89 c2                	mov    %eax,%edx
f01295f8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01295fe:	01 d0                	add    %edx,%eax
f0129600:	48                   	dec    %eax
f0129601:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129607:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012960d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129612:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129618:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012961e:	29 d0                	sub    %edx,%eax
f0129620:	01 d8                	add    %ebx,%eax
f0129622:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129627:	39 c1                	cmp    %eax,%ecx
f0129629:	74 17                	je     f0129642 <test_kshrink+0x4cc>
f012962b:	83 ec 04             	sub    $0x4,%esp
f012962e:	68 60 b6 13 f0       	push   $0xf013b660
f0129633:	68 21 0c 00 00       	push   $0xc21
f0129638:	68 7a b5 13 f0       	push   $0xf013b57a
f012963d:	e8 c3 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129642:	e8 e0 a6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129647:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012964a:	74 17                	je     f0129663 <test_kshrink+0x4ed>
f012964c:	83 ec 04             	sub    $0x4,%esp
f012964f:	68 94 b5 13 f0       	push   $0xf013b594
f0129654:	68 22 0c 00 00       	push   $0xc22
f0129659:	68 7a b5 13 f0       	push   $0xf013b57a
f012965e:	e8 a2 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129663:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129666:	e8 ee 39 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012966b:	29 c3                	sub    %eax,%ebx
f012966d:	89 d8                	mov    %ebx,%eax
f012966f:	83 f8 01             	cmp    $0x1,%eax
f0129672:	74 17                	je     f012968b <test_kshrink+0x515>
f0129674:	83 ec 04             	sub    $0x4,%esp
f0129677:	68 fc b5 13 f0       	push   $0xf013b5fc
f012967c:	68 23 0c 00 00       	push   $0xc23
f0129681:	68 7a b5 13 f0       	push   $0xf013b57a
f0129686:	e8 7a 6b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012968b:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0129692:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129695:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012969b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012969e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296a5:	eb 0e                	jmp    f01296b5 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01296a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01296aa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01296ad:	01 d0                	add    %edx,%eax
f01296af:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01296b2:	ff 45 f4             	incl   -0xc(%ebp)
f01296b5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01296bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296be:	7f e7                	jg     f01296a7 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01296c0:	e8 94 39 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01296c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296c8:	e8 5a a6 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01296cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01296d0:	83 ec 0c             	sub    $0xc,%esp
f01296d3:	68 00 1c 00 00       	push   $0x1c00
f01296d8:	e8 8d e2 fd ff       	call   f010796a <kmalloc>
f01296dd:	83 c4 10             	add    $0x10,%esp
f01296e0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296e6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01296ec:	89 c1                	mov    %eax,%ecx
f01296ee:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01296f5:	10 00 00 
f01296f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01296fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129703:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129709:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012970f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129714:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012971a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129720:	29 d0                	sub    %edx,%eax
f0129722:	89 c3                	mov    %eax,%ebx
f0129724:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012972b:	10 00 00 
f012972e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129733:	0f b6 d0             	movzbl %al,%edx
f0129736:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012973c:	01 d0                	add    %edx,%eax
f012973e:	48                   	dec    %eax
f012973f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129745:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012974b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129750:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129756:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012975c:	29 d0                	sub    %edx,%eax
f012975e:	01 c3                	add    %eax,%ebx
f0129760:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129767:	10 00 00 
f012976a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012976f:	0f b6 c0             	movzbl %al,%eax
f0129772:	c1 e0 04             	shl    $0x4,%eax
f0129775:	89 c2                	mov    %eax,%edx
f0129777:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012977d:	01 d0                	add    %edx,%eax
f012977f:	48                   	dec    %eax
f0129780:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129786:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012978c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129791:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129797:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012979d:	29 d0                	sub    %edx,%eax
f012979f:	01 d8                	add    %ebx,%eax
f01297a1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01297a6:	39 c1                	cmp    %eax,%ecx
f01297a8:	74 17                	je     f01297c1 <test_kshrink+0x64b>
f01297aa:	83 ec 04             	sub    $0x4,%esp
f01297ad:	68 60 b6 13 f0       	push   $0xf013b660
f01297b2:	68 2f 0c 00 00       	push   $0xc2f
f01297b7:	68 7a b5 13 f0       	push   $0xf013b57a
f01297bc:	e8 44 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297c1:	e8 61 a5 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01297c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297c9:	74 17                	je     f01297e2 <test_kshrink+0x66c>
f01297cb:	83 ec 04             	sub    $0x4,%esp
f01297ce:	68 94 b5 13 f0       	push   $0xf013b594
f01297d3:	68 30 0c 00 00       	push   $0xc30
f01297d8:	68 7a b5 13 f0       	push   $0xf013b57a
f01297dd:	e8 23 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297e2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01297e5:	e8 6f 38 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01297ea:	29 c3                	sub    %eax,%ebx
f01297ec:	89 d8                	mov    %ebx,%eax
f01297ee:	83 f8 02             	cmp    $0x2,%eax
f01297f1:	74 17                	je     f012980a <test_kshrink+0x694>
f01297f3:	83 ec 04             	sub    $0x4,%esp
f01297f6:	68 fc b5 13 f0       	push   $0xf013b5fc
f01297fb:	68 31 0c 00 00       	push   $0xc31
f0129800:	68 7a b5 13 f0       	push   $0xf013b57a
f0129805:	e8 fb 69 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012980a:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0129811:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129814:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012981a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012981d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129824:	eb 0e                	jmp    f0129834 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129829:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012982c:	01 d0                	add    %edx,%eax
f012982e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129831:	ff 45 f4             	incl   -0xc(%ebp)
f0129834:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012983a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012983d:	7f e7                	jg     f0129826 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012983f:	e8 15 38 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129844:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129847:	e8 db a4 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012984c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012984f:	83 ec 0c             	sub    $0xc,%esp
f0129852:	68 00 fc 2f 00       	push   $0x2ffc00
f0129857:	e8 0e e1 fd ff       	call   f010796a <kmalloc>
f012985c:	83 c4 10             	add    $0x10,%esp
f012985f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129865:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012986b:	89 c1                	mov    %eax,%ecx
f012986d:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129874:	10 00 00 
f0129877:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012987d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129882:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129888:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012988e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129893:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129899:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012989f:	29 d0                	sub    %edx,%eax
f01298a1:	89 c3                	mov    %eax,%ebx
f01298a3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01298aa:	10 00 00 
f01298ad:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01298b2:	0f b6 d0             	movzbl %al,%edx
f01298b5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01298bb:	01 d0                	add    %edx,%eax
f01298bd:	48                   	dec    %eax
f01298be:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01298c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01298ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01298cf:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01298d5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01298db:	29 d0                	sub    %edx,%eax
f01298dd:	01 c3                	add    %eax,%ebx
f01298df:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01298e6:	10 00 00 
f01298e9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01298ee:	0f b6 c0             	movzbl %al,%eax
f01298f1:	c1 e0 04             	shl    $0x4,%eax
f01298f4:	89 c2                	mov    %eax,%edx
f01298f6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01298fc:	01 d0                	add    %edx,%eax
f01298fe:	48                   	dec    %eax
f01298ff:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129905:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012990b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129910:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129916:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012991c:	29 d0                	sub    %edx,%eax
f012991e:	01 d8                	add    %ebx,%eax
f0129920:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129925:	39 c1                	cmp    %eax,%ecx
f0129927:	74 17                	je     f0129940 <test_kshrink+0x7ca>
f0129929:	83 ec 04             	sub    $0x4,%esp
f012992c:	68 60 b6 13 f0       	push   $0xf013b660
f0129931:	68 3d 0c 00 00       	push   $0xc3d
f0129936:	68 7a b5 13 f0       	push   $0xf013b57a
f012993b:	e8 c5 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129940:	e8 e2 a3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129945:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129948:	74 17                	je     f0129961 <test_kshrink+0x7eb>
f012994a:	83 ec 04             	sub    $0x4,%esp
f012994d:	68 94 b5 13 f0       	push   $0xf013b594
f0129952:	68 3e 0c 00 00       	push   $0xc3e
f0129957:	68 7a b5 13 f0       	push   $0xf013b57a
f012995c:	e8 a4 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129961:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129964:	e8 f0 36 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129969:	29 c3                	sub    %eax,%ebx
f012996b:	89 d8                	mov    %ebx,%eax
f012996d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129972:	74 17                	je     f012998b <test_kshrink+0x815>
f0129974:	83 ec 04             	sub    $0x4,%esp
f0129977:	68 fc b5 13 f0       	push   $0xf013b5fc
f012997c:	68 3f 0c 00 00       	push   $0xc3f
f0129981:	68 7a b5 13 f0       	push   $0xf013b57a
f0129986:	e8 7a 68 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012998b:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0129992:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129995:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012999b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012999e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299a5:	eb 0e                	jmp    f01299b5 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01299a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01299aa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01299ad:	01 d0                	add    %edx,%eax
f01299af:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01299b2:	ff 45 f4             	incl   -0xc(%ebp)
f01299b5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01299bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01299be:	7f e7                	jg     f01299a7 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01299c0:	e8 94 36 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01299c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299c8:	e8 5a a3 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01299cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01299d0:	83 ec 0c             	sub    $0xc,%esp
f01299d3:	68 00 00 60 00       	push   $0x600000
f01299d8:	e8 8d df fd ff       	call   f010796a <kmalloc>
f01299dd:	83 c4 10             	add    $0x10,%esp
f01299e0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01299e6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01299ec:	89 c1                	mov    %eax,%ecx
f01299ee:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01299f5:	10 00 00 
f01299f8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01299fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a03:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a09:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a14:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129a1a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a20:	29 d0                	sub    %edx,%eax
f0129a22:	89 c3                	mov    %eax,%ebx
f0129a24:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129a2b:	10 00 00 
f0129a2e:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129a33:	0f b6 d0             	movzbl %al,%edx
f0129a36:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129a3c:	01 d0                	add    %edx,%eax
f0129a3e:	48                   	dec    %eax
f0129a3f:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129a45:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a50:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129a56:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a5c:	29 d0                	sub    %edx,%eax
f0129a5e:	01 c3                	add    %eax,%ebx
f0129a60:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129a67:	10 00 00 
f0129a6a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129a6f:	0f b6 c0             	movzbl %al,%eax
f0129a72:	c1 e0 04             	shl    $0x4,%eax
f0129a75:	89 c2                	mov    %eax,%edx
f0129a77:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129a7d:	01 d0                	add    %edx,%eax
f0129a7f:	48                   	dec    %eax
f0129a80:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129a86:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129a8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a91:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129a97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129a9d:	29 d0                	sub    %edx,%eax
f0129a9f:	01 d8                	add    %ebx,%eax
f0129aa1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129aa6:	39 c1                	cmp    %eax,%ecx
f0129aa8:	74 17                	je     f0129ac1 <test_kshrink+0x94b>
f0129aaa:	83 ec 04             	sub    $0x4,%esp
f0129aad:	68 60 b6 13 f0       	push   $0xf013b660
f0129ab2:	68 4b 0c 00 00       	push   $0xc4b
f0129ab7:	68 7a b5 13 f0       	push   $0xf013b57a
f0129abc:	e8 44 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ac1:	e8 61 a2 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129ac6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129ac9:	74 17                	je     f0129ae2 <test_kshrink+0x96c>
f0129acb:	83 ec 04             	sub    $0x4,%esp
f0129ace:	68 94 b5 13 f0       	push   $0xf013b594
f0129ad3:	68 4c 0c 00 00       	push   $0xc4c
f0129ad8:	68 7a b5 13 f0       	push   $0xf013b57a
f0129add:	e8 23 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129ae2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129ae5:	e8 6f 35 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129aea:	29 c3                	sub    %eax,%ebx
f0129aec:	89 d8                	mov    %ebx,%eax
f0129aee:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129af3:	74 17                	je     f0129b0c <test_kshrink+0x996>
f0129af5:	83 ec 04             	sub    $0x4,%esp
f0129af8:	68 fc b5 13 f0       	push   $0xf013b5fc
f0129afd:	68 4d 0c 00 00       	push   $0xc4d
f0129b02:	68 7a b5 13 f0       	push   $0xf013b57a
f0129b07:	e8 f9 66 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129b0c:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129b13:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129b16:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b1c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b29:	eb 1a                	jmp    f0129b45 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129b35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129b3b:	01 c2                	add    %eax,%edx
f0129b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b40:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b42:	ff 45 f4             	incl   -0xc(%ebp)
f0129b45:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129b4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b4e:	7d db                	jge    f0129b2b <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129b50:	e8 04 35 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129b55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b58:	e8 ca a1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129b5d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129b60:	83 ec 0c             	sub    $0xc,%esp
f0129b63:	68 00 00 50 00       	push   $0x500000
f0129b68:	e8 cf e0 fd ff       	call   f0107c3c <kshrink>
f0129b6d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129b70:	e8 b2 a1 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129b75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b78:	74 19                	je     f0129b93 <test_kshrink+0xa1d>
f0129b7a:	68 14 c3 13 f0       	push   $0xf013c314
f0129b7f:	68 45 c3 13 f0       	push   $0xf013c345
f0129b84:	68 5d 0c 00 00       	push   $0xc5d
f0129b89:	68 7a b5 13 f0       	push   $0xf013b57a
f0129b8e:	e8 72 66 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129b93:	e8 c1 34 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129b98:	89 c2                	mov    %eax,%edx
f0129b9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129b9d:	29 c2                	sub    %eax,%edx
f0129b9f:	89 d0                	mov    %edx,%eax
f0129ba1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129ba6:	74 19                	je     f0129bc1 <test_kshrink+0xa4b>
f0129ba8:	68 20 c4 13 f0       	push   $0xf013c420
f0129bad:	68 45 c3 13 f0       	push   $0xf013c345
f0129bb2:	68 5e 0c 00 00       	push   $0xc5e
f0129bb7:	68 7a b5 13 f0       	push   $0xf013b57a
f0129bbc:	e8 44 66 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129bc1:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129bc8:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129bcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bd2:	eb 37                	jmp    f0129c0b <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bd7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129bde:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129be4:	01 d0                	add    %edx,%eax
f0129be6:	8b 10                	mov    (%eax),%edx
f0129be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129beb:	39 c2                	cmp    %eax,%edx
f0129bed:	74 19                	je     f0129c08 <test_kshrink+0xa92>
f0129bef:	68 50 c4 13 f0       	push   $0xf013c450
f0129bf4:	68 45 c3 13 f0       	push   $0xf013c345
f0129bf9:	68 66 0c 00 00       	push   $0xc66
f0129bfe:	68 7a b5 13 f0       	push   $0xf013b57a
f0129c03:	e8 fd 65 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129c08:	ff 45 f4             	incl   -0xc(%ebp)
f0129c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c0e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129c14:	7e be                	jle    f0129bd4 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129c16:	83 ec 0c             	sub    $0xc,%esp
f0129c19:	6a 03                	push   $0x3
f0129c1b:	e8 d9 38 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0129c20:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129c23:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129c29:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129c2c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c2f:	05 00 00 50 00       	add    $0x500000,%eax
f0129c34:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129c37:	e8 ab 38 fe ff       	call   f010d4e7 <sys_rcr2>
f0129c3c:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129c3f:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129c45:	39 d0                	cmp    %edx,%eax
f0129c47:	74 19                	je     f0129c62 <test_kshrink+0xaec>
f0129c49:	68 5c c4 13 f0       	push   $0xf013c45c
f0129c4e:	68 45 c3 13 f0       	push   $0xf013c345
f0129c53:	68 6f 0c 00 00       	push   $0xc6f
f0129c58:	68 7a b5 13 f0       	push   $0xf013b57a
f0129c5d:	e8 a3 65 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129c62:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c65:	05 00 10 50 00       	add    $0x501000,%eax
f0129c6a:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129c6d:	e8 75 38 fe ff       	call   f010d4e7 <sys_rcr2>
f0129c72:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129c75:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129c7b:	39 d0                	cmp    %edx,%eax
f0129c7d:	74 19                	je     f0129c98 <test_kshrink+0xb22>
f0129c7f:	68 84 c4 13 f0       	push   $0xf013c484
f0129c84:	68 45 c3 13 f0       	push   $0xf013c345
f0129c89:	68 72 0c 00 00       	push   $0xc72
f0129c8e:	68 7a b5 13 f0       	push   $0xf013b57a
f0129c93:	e8 6d 65 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129c98:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c9b:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129ca0:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129ca3:	e8 3f 38 fe ff       	call   f010d4e7 <sys_rcr2>
f0129ca8:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129cab:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129cb1:	39 d0                	cmp    %edx,%eax
f0129cb3:	74 19                	je     f0129cce <test_kshrink+0xb58>
f0129cb5:	68 b0 c4 13 f0       	push   $0xf013c4b0
f0129cba:	68 45 c3 13 f0       	push   $0xf013c345
f0129cbf:	68 75 0c 00 00       	push   $0xc75
f0129cc4:	68 7a b5 13 f0       	push   $0xf013b57a
f0129cc9:	e8 37 65 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129cce:	83 ec 0c             	sub    $0xc,%esp
f0129cd1:	6a 00                	push   $0x0
f0129cd3:	e8 21 38 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0129cd8:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129cdb:	e8 79 33 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129ce0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ce3:	e8 3f a0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129ce8:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129ceb:	83 ec 0c             	sub    $0xc,%esp
f0129cee:	68 00 00 20 00       	push   $0x200000
f0129cf3:	e8 44 df fd ff       	call   f0107c3c <kshrink>
f0129cf8:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129cfb:	e8 27 a0 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129d00:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129d03:	74 19                	je     f0129d1e <test_kshrink+0xba8>
f0129d05:	68 14 c3 13 f0       	push   $0xf013c314
f0129d0a:	68 45 c3 13 f0       	push   $0xf013c345
f0129d0f:	68 82 0c 00 00       	push   $0xc82
f0129d14:	68 7a b5 13 f0       	push   $0xf013b57a
f0129d19:	e8 e7 64 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129d1e:	e8 36 33 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129d23:	89 c2                	mov    %eax,%edx
f0129d25:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129d28:	29 c2                	sub    %eax,%edx
f0129d2a:	89 d0                	mov    %edx,%eax
f0129d2c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d31:	74 19                	je     f0129d4c <test_kshrink+0xbd6>
f0129d33:	68 dc c4 13 f0       	push   $0xf013c4dc
f0129d38:	68 45 c3 13 f0       	push   $0xf013c345
f0129d3d:	68 83 0c 00 00       	push   $0xc83
f0129d42:	68 7a b5 13 f0       	push   $0xf013b57a
f0129d47:	e8 b9 64 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d4c:	e8 08 33 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129d51:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d54:	e8 ce 9f fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129d59:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129d5c:	83 ec 0c             	sub    $0xc,%esp
f0129d5f:	68 00 00 40 00       	push   $0x400000
f0129d64:	e8 01 dc fd ff       	call   f010796a <kmalloc>
f0129d69:	83 c4 10             	add    $0x10,%esp
f0129d6c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129d72:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129d79:	10 00 00 
f0129d7c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129d82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d87:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129d8d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129d93:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d98:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129d9e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129da4:	29 d0                	sub    %edx,%eax
f0129da6:	89 c1                	mov    %eax,%ecx
f0129da8:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129daf:	10 00 00 
f0129db2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129db7:	0f b6 d0             	movzbl %al,%edx
f0129dba:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129dc0:	01 d0                	add    %edx,%eax
f0129dc2:	48                   	dec    %eax
f0129dc3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129dc9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129dcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dd4:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129dda:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129de0:	29 d0                	sub    %edx,%eax
f0129de2:	01 c1                	add    %eax,%ecx
f0129de4:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129deb:	10 00 00 
f0129dee:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129df3:	0f b6 c0             	movzbl %al,%eax
f0129df6:	c1 e0 04             	shl    $0x4,%eax
f0129df9:	89 c2                	mov    %eax,%edx
f0129dfb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129e01:	01 d0                	add    %edx,%eax
f0129e03:	48                   	dec    %eax
f0129e04:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129e0a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e15:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129e1b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e21:	29 d0                	sub    %edx,%eax
f0129e23:	01 c8                	add    %ecx,%eax
f0129e25:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129e2b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e31:	83 ec 04             	sub    $0x4,%esp
f0129e34:	52                   	push   %edx
f0129e35:	50                   	push   %eax
f0129e36:	68 0c c5 13 f0       	push   $0xf013c50c
f0129e3b:	e8 ce 6e fd ff       	call   f0100d0e <cprintf>
f0129e40:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129e43:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e49:	89 c1                	mov    %eax,%ecx
f0129e4b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129e52:	10 00 00 
f0129e55:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e60:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129e66:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e71:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129e77:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129e7d:	29 d0                	sub    %edx,%eax
f0129e7f:	89 c3                	mov    %eax,%ebx
f0129e81:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129e88:	10 00 00 
f0129e8b:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129e90:	0f b6 d0             	movzbl %al,%edx
f0129e93:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129e99:	01 d0                	add    %edx,%eax
f0129e9b:	48                   	dec    %eax
f0129e9c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129ea2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ead:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129eb3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129eb9:	29 d0                	sub    %edx,%eax
f0129ebb:	01 c3                	add    %eax,%ebx
f0129ebd:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129ec4:	10 00 00 
f0129ec7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0129ecc:	0f b6 c0             	movzbl %al,%eax
f0129ecf:	c1 e0 04             	shl    $0x4,%eax
f0129ed2:	89 c2                	mov    %eax,%edx
f0129ed4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129eda:	01 d0                	add    %edx,%eax
f0129edc:	48                   	dec    %eax
f0129edd:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129ee3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0129eee:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129ef4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129efa:	29 d0                	sub    %edx,%eax
f0129efc:	01 d8                	add    %ebx,%eax
f0129efe:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129f03:	39 c1                	cmp    %eax,%ecx
f0129f05:	74 17                	je     f0129f1e <test_kshrink+0xda8>
f0129f07:	83 ec 04             	sub    $0x4,%esp
f0129f0a:	68 28 c5 13 f0       	push   $0xf013c528
f0129f0f:	68 8e 0c 00 00       	push   $0xc8e
f0129f14:	68 7a b5 13 f0       	push   $0xf013b57a
f0129f19:	e8 e7 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f1e:	e8 04 9e fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129f23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129f26:	74 17                	je     f0129f3f <test_kshrink+0xdc9>
f0129f28:	83 ec 04             	sub    $0x4,%esp
f0129f2b:	68 94 b5 13 f0       	push   $0xf013b594
f0129f30:	68 8f 0c 00 00       	push   $0xc8f
f0129f35:	68 7a b5 13 f0       	push   $0xf013b57a
f0129f3a:	e8 c6 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129f3f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129f42:	e8 12 31 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129f47:	29 c3                	sub    %eax,%ebx
f0129f49:	89 d8                	mov    %ebx,%eax
f0129f4b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129f50:	74 17                	je     f0129f69 <test_kshrink+0xdf3>
f0129f52:	83 ec 04             	sub    $0x4,%esp
f0129f55:	68 fc b5 13 f0       	push   $0xf013b5fc
f0129f5a:	68 90 0c 00 00       	push   $0xc90
f0129f5f:	68 7a b5 13 f0       	push   $0xf013b57a
f0129f64:	e8 9c 62 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129f69:	e8 eb 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129f6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f71:	e8 b1 9d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129f76:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129f79:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129f7f:	83 ec 0c             	sub    $0xc,%esp
f0129f82:	50                   	push   %eax
f0129f83:	e8 2b db fd ff       	call   f0107ab3 <kfree>
f0129f88:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f8b:	e8 97 9d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129f90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129f93:	74 17                	je     f0129fac <test_kshrink+0xe36>
f0129f95:	83 ec 04             	sub    $0x4,%esp
f0129f98:	68 94 b5 13 f0       	push   $0xf013b594
f0129f9d:	68 9a 0c 00 00       	push   $0xc9a
f0129fa2:	68 7a b5 13 f0       	push   $0xf013b57a
f0129fa7:	e8 59 62 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129fac:	e8 a8 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129fb1:	89 c2                	mov    %eax,%edx
f0129fb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129fb6:	29 c2                	sub    %eax,%edx
f0129fb8:	89 d0                	mov    %edx,%eax
f0129fba:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129fbf:	74 17                	je     f0129fd8 <test_kshrink+0xe62>
f0129fc1:	83 ec 04             	sub    $0x4,%esp
f0129fc4:	68 2c be 13 f0       	push   $0xf013be2c
f0129fc9:	68 9b 0c 00 00       	push   $0xc9b
f0129fce:	68 7a b5 13 f0       	push   $0xf013b57a
f0129fd3:	e8 2d 62 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129fd8:	e8 7c 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129fdd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fe0:	e8 42 9d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129fe5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129fe8:	83 ec 0c             	sub    $0xc,%esp
f0129feb:	68 00 b0 3f 00       	push   $0x3fb000
f0129ff0:	e8 47 dc fd ff       	call   f0107c3c <kshrink>
f0129ff5:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129ff8:	e8 2a 9d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0129ffd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012a000:	74 19                	je     f012a01b <test_kshrink+0xea5>
f012a002:	68 14 c3 13 f0       	push   $0xf013c314
f012a007:	68 45 c3 13 f0       	push   $0xf013c345
f012a00c:	68 a5 0c 00 00       	push   $0xca5
f012a011:	68 7a b5 13 f0       	push   $0xf013b57a
f012a016:	e8 ea 61 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012a01b:	e8 39 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a020:	89 c2                	mov    %eax,%edx
f012a022:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012a025:	29 c2                	sub    %eax,%edx
f012a027:	89 d0                	mov    %edx,%eax
f012a029:	83 f8 05             	cmp    $0x5,%eax
f012a02c:	74 19                	je     f012a047 <test_kshrink+0xed1>
f012a02e:	68 7c c5 13 f0       	push   $0xf013c57c
f012a033:	68 45 c3 13 f0       	push   $0xf013c345
f012a038:	68 a6 0c 00 00       	push   $0xca6
f012a03d:	68 7a b5 13 f0       	push   $0xf013b57a
f012a042:	e8 be 61 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012a047:	83 ec 0c             	sub    $0xc,%esp
f012a04a:	68 d8 c2 13 f0       	push   $0xf013c2d8
f012a04f:	e8 ba 6c fd ff       	call   f0100d0e <cprintf>
f012a054:	83 c4 10             	add    $0x10,%esp

	return 1;
f012a057:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a05c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a05f:	5b                   	pop    %ebx
f012a060:	5f                   	pop    %edi
f012a061:	5d                   	pop    %ebp
f012a062:	c3                   	ret    

f012a063 <test_kfreelast>:


int test_kfreelast()
{
f012a063:	55                   	push   %ebp
f012a064:	89 e5                	mov    %esp,%ebp
f012a066:	57                   	push   %edi
f012a067:	53                   	push   %ebx
f012a068:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012a06e:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012a072:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012a076:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012a07c:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012a082:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a089:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012a090:	e8 c4 2f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a095:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012a098:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012a09e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0a3:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0a8:	89 d7                	mov    %edx,%edi
f012a0aa:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012a0ac:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012a0b2:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0b7:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0bc:	89 d7                	mov    %edx,%edi
f012a0be:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012a0c0:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012a0c6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0cb:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0d0:	89 d7                	mov    %edx,%edi
f012a0d2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a0d4:	e8 80 2f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a0d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a0dc:	e8 46 9c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a0e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012a0e4:	83 ec 0c             	sub    $0xc,%esp
f012a0e7:	68 00 fc 1f 00       	push   $0x1ffc00
f012a0ec:	e8 79 d8 fd ff       	call   f010796a <kmalloc>
f012a0f1:	83 c4 10             	add    $0x10,%esp
f012a0f4:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a0fa:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a100:	89 c1                	mov    %eax,%ecx
f012a102:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012a109:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012a10c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a111:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012a114:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a117:	ba 00 00 00 00       	mov    $0x0,%edx
f012a11c:	f7 75 cc             	divl   -0x34(%ebp)
f012a11f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a122:	29 d0                	sub    %edx,%eax
f012a124:	89 c3                	mov    %eax,%ebx
f012a126:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012a12d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a132:	0f b6 d0             	movzbl %al,%edx
f012a135:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012a138:	01 d0                	add    %edx,%eax
f012a13a:	48                   	dec    %eax
f012a13b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012a13e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a141:	ba 00 00 00 00       	mov    $0x0,%edx
f012a146:	f7 75 c4             	divl   -0x3c(%ebp)
f012a149:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a14c:	29 d0                	sub    %edx,%eax
f012a14e:	01 c3                	add    %eax,%ebx
f012a150:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012a157:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a15c:	0f b6 c0             	movzbl %al,%eax
f012a15f:	c1 e0 04             	shl    $0x4,%eax
f012a162:	89 c2                	mov    %eax,%edx
f012a164:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012a167:	01 d0                	add    %edx,%eax
f012a169:	48                   	dec    %eax
f012a16a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012a16d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a170:	ba 00 00 00 00       	mov    $0x0,%edx
f012a175:	f7 75 bc             	divl   -0x44(%ebp)
f012a178:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a17b:	29 d0                	sub    %edx,%eax
f012a17d:	01 d8                	add    %ebx,%eax
f012a17f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a184:	39 c1                	cmp    %eax,%ecx
f012a186:	74 17                	je     f012a19f <test_kfreelast+0x13c>
f012a188:	83 ec 04             	sub    $0x4,%esp
f012a18b:	68 60 b6 13 f0       	push   $0xf013b660
f012a190:	68 ca 0c 00 00       	push   $0xcca
f012a195:	68 7a b5 13 f0       	push   $0xf013b57a
f012a19a:	e8 66 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a19f:	e8 83 9b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a1a4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1a7:	74 17                	je     f012a1c0 <test_kfreelast+0x15d>
f012a1a9:	83 ec 04             	sub    $0x4,%esp
f012a1ac:	68 94 b5 13 f0       	push   $0xf013b594
f012a1b1:	68 cb 0c 00 00       	push   $0xccb
f012a1b6:	68 7a b5 13 f0       	push   $0xf013b57a
f012a1bb:	e8 45 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1c0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1c3:	e8 91 2e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a1c8:	29 c3                	sub    %eax,%ebx
f012a1ca:	89 d8                	mov    %ebx,%eax
f012a1cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a1d1:	74 17                	je     f012a1ea <test_kfreelast+0x187>
f012a1d3:	83 ec 04             	sub    $0x4,%esp
f012a1d6:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a1db:	68 cc 0c 00 00       	push   $0xccc
f012a1e0:	68 7a b5 13 f0       	push   $0xf013b57a
f012a1e5:	e8 1b 60 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012a1ea:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012a1f1:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a1f4:	e8 60 2e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a1f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a1fc:	e8 26 9b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a201:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012a204:	83 ec 0c             	sub    $0xc,%esp
f012a207:	68 00 fc 1f 00       	push   $0x1ffc00
f012a20c:	e8 59 d7 fd ff       	call   f010796a <kmalloc>
f012a211:	83 c4 10             	add    $0x10,%esp
f012a214:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a21a:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a220:	89 c1                	mov    %eax,%ecx
f012a222:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a229:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a22c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a231:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a234:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a237:	ba 00 00 00 00       	mov    $0x0,%edx
f012a23c:	f7 75 b4             	divl   -0x4c(%ebp)
f012a23f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a242:	29 d0                	sub    %edx,%eax
f012a244:	89 c3                	mov    %eax,%ebx
f012a246:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a24d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a252:	0f b6 d0             	movzbl %al,%edx
f012a255:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a258:	01 d0                	add    %edx,%eax
f012a25a:	48                   	dec    %eax
f012a25b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a25e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a261:	ba 00 00 00 00       	mov    $0x0,%edx
f012a266:	f7 75 ac             	divl   -0x54(%ebp)
f012a269:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a26c:	29 d0                	sub    %edx,%eax
f012a26e:	01 c3                	add    %eax,%ebx
f012a270:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a277:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a27c:	0f b6 c0             	movzbl %al,%eax
f012a27f:	c1 e0 04             	shl    $0x4,%eax
f012a282:	89 c2                	mov    %eax,%edx
f012a284:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a287:	01 d0                	add    %edx,%eax
f012a289:	48                   	dec    %eax
f012a28a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a28d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a290:	ba 00 00 00 00       	mov    $0x0,%edx
f012a295:	f7 75 a4             	divl   -0x5c(%ebp)
f012a298:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a29b:	29 d0                	sub    %edx,%eax
f012a29d:	01 d8                	add    %ebx,%eax
f012a29f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a2a4:	39 c1                	cmp    %eax,%ecx
f012a2a6:	74 17                	je     f012a2bf <test_kfreelast+0x25c>
f012a2a8:	83 ec 04             	sub    $0x4,%esp
f012a2ab:	68 60 b6 13 f0       	push   $0xf013b660
f012a2b0:	68 d3 0c 00 00       	push   $0xcd3
f012a2b5:	68 7a b5 13 f0       	push   $0xf013b57a
f012a2ba:	e8 46 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2bf:	e8 63 9a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a2c4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2c7:	74 17                	je     f012a2e0 <test_kfreelast+0x27d>
f012a2c9:	83 ec 04             	sub    $0x4,%esp
f012a2cc:	68 94 b5 13 f0       	push   $0xf013b594
f012a2d1:	68 d4 0c 00 00       	push   $0xcd4
f012a2d6:	68 7a b5 13 f0       	push   $0xf013b57a
f012a2db:	e8 25 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2e0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2e3:	e8 71 2d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a2e8:	29 c3                	sub    %eax,%ebx
f012a2ea:	89 d8                	mov    %ebx,%eax
f012a2ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a2f1:	74 17                	je     f012a30a <test_kfreelast+0x2a7>
f012a2f3:	83 ec 04             	sub    $0x4,%esp
f012a2f6:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a2fb:	68 d5 0c 00 00       	push   $0xcd5
f012a300:	68 7a b5 13 f0       	push   $0xf013b57a
f012a305:	e8 fb 5e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012a30a:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012a311:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a314:	e8 40 2d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a319:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a31c:	e8 06 9a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a321:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012a324:	83 ec 0c             	sub    $0xc,%esp
f012a327:	68 00 08 00 00       	push   $0x800
f012a32c:	e8 39 d6 fd ff       	call   f010796a <kmalloc>
f012a331:	83 c4 10             	add    $0x10,%esp
f012a334:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a33a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a340:	89 c1                	mov    %eax,%ecx
f012a342:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a349:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a34c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a351:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a354:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a357:	ba 00 00 00 00       	mov    $0x0,%edx
f012a35c:	f7 75 9c             	divl   -0x64(%ebp)
f012a35f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a362:	29 d0                	sub    %edx,%eax
f012a364:	89 c3                	mov    %eax,%ebx
f012a366:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a36d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a372:	0f b6 d0             	movzbl %al,%edx
f012a375:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a378:	01 d0                	add    %edx,%eax
f012a37a:	48                   	dec    %eax
f012a37b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a37e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a381:	ba 00 00 00 00       	mov    $0x0,%edx
f012a386:	f7 75 94             	divl   -0x6c(%ebp)
f012a389:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a38c:	29 d0                	sub    %edx,%eax
f012a38e:	01 c3                	add    %eax,%ebx
f012a390:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a397:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a39c:	0f b6 c0             	movzbl %al,%eax
f012a39f:	c1 e0 04             	shl    $0x4,%eax
f012a3a2:	89 c2                	mov    %eax,%edx
f012a3a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a3a7:	01 d0                	add    %edx,%eax
f012a3a9:	48                   	dec    %eax
f012a3aa:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a3ad:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3b5:	f7 75 8c             	divl   -0x74(%ebp)
f012a3b8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3bb:	29 d0                	sub    %edx,%eax
f012a3bd:	01 d8                	add    %ebx,%eax
f012a3bf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a3c4:	39 c1                	cmp    %eax,%ecx
f012a3c6:	74 17                	je     f012a3df <test_kfreelast+0x37c>
f012a3c8:	83 ec 04             	sub    $0x4,%esp
f012a3cb:	68 60 b6 13 f0       	push   $0xf013b660
f012a3d0:	68 dc 0c 00 00       	push   $0xcdc
f012a3d5:	68 7a b5 13 f0       	push   $0xf013b57a
f012a3da:	e8 26 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3df:	e8 43 99 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a3e4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3e7:	74 17                	je     f012a400 <test_kfreelast+0x39d>
f012a3e9:	83 ec 04             	sub    $0x4,%esp
f012a3ec:	68 94 b5 13 f0       	push   $0xf013b594
f012a3f1:	68 dd 0c 00 00       	push   $0xcdd
f012a3f6:	68 7a b5 13 f0       	push   $0xf013b57a
f012a3fb:	e8 05 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a400:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a403:	e8 51 2c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a408:	29 c3                	sub    %eax,%ebx
f012a40a:	89 d8                	mov    %ebx,%eax
f012a40c:	83 f8 01             	cmp    $0x1,%eax
f012a40f:	74 17                	je     f012a428 <test_kfreelast+0x3c5>
f012a411:	83 ec 04             	sub    $0x4,%esp
f012a414:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a419:	68 de 0c 00 00       	push   $0xcde
f012a41e:	68 7a b5 13 f0       	push   $0xf013b57a
f012a423:	e8 dd 5d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a428:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a42f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a432:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a438:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a43b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a442:	eb 0e                	jmp    f012a452 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a447:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a44a:	01 d0                	add    %edx,%eax
f012a44c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a44f:	ff 45 f4             	incl   -0xc(%ebp)
f012a452:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a458:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a45b:	7f e7                	jg     f012a444 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a45d:	e8 f7 2b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a462:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a465:	e8 bd 98 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a46a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a46d:	83 ec 0c             	sub    $0xc,%esp
f012a470:	68 00 08 00 00       	push   $0x800
f012a475:	e8 f0 d4 fd ff       	call   f010796a <kmalloc>
f012a47a:	83 c4 10             	add    $0x10,%esp
f012a47d:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a483:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a489:	89 c1                	mov    %eax,%ecx
f012a48b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a492:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a495:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a49a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a4a0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4ab:	f7 75 80             	divl   -0x80(%ebp)
f012a4ae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4b4:	29 d0                	sub    %edx,%eax
f012a4b6:	89 c3                	mov    %eax,%ebx
f012a4b8:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a4bf:	10 00 00 
f012a4c2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a4c7:	0f b6 d0             	movzbl %al,%edx
f012a4ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a4d0:	01 d0                	add    %edx,%eax
f012a4d2:	48                   	dec    %eax
f012a4d3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a4d9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a4df:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4e4:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a4ea:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a4f0:	29 d0                	sub    %edx,%eax
f012a4f2:	01 c3                	add    %eax,%ebx
f012a4f4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a4fb:	10 00 00 
f012a4fe:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a503:	0f b6 c0             	movzbl %al,%eax
f012a506:	c1 e0 04             	shl    $0x4,%eax
f012a509:	89 c2                	mov    %eax,%edx
f012a50b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a511:	01 d0                	add    %edx,%eax
f012a513:	48                   	dec    %eax
f012a514:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a51a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a520:	ba 00 00 00 00       	mov    $0x0,%edx
f012a525:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a52b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a531:	29 d0                	sub    %edx,%eax
f012a533:	01 d8                	add    %ebx,%eax
f012a535:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a53a:	39 c1                	cmp    %eax,%ecx
f012a53c:	74 17                	je     f012a555 <test_kfreelast+0x4f2>
f012a53e:	83 ec 04             	sub    $0x4,%esp
f012a541:	68 60 b6 13 f0       	push   $0xf013b660
f012a546:	68 ea 0c 00 00       	push   $0xcea
f012a54b:	68 7a b5 13 f0       	push   $0xf013b57a
f012a550:	e8 b0 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a555:	e8 cd 97 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a55a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a55d:	74 17                	je     f012a576 <test_kfreelast+0x513>
f012a55f:	83 ec 04             	sub    $0x4,%esp
f012a562:	68 94 b5 13 f0       	push   $0xf013b594
f012a567:	68 eb 0c 00 00       	push   $0xceb
f012a56c:	68 7a b5 13 f0       	push   $0xf013b57a
f012a571:	e8 8f 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a576:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a579:	e8 db 2a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a57e:	29 c3                	sub    %eax,%ebx
f012a580:	89 d8                	mov    %ebx,%eax
f012a582:	83 f8 01             	cmp    $0x1,%eax
f012a585:	74 17                	je     f012a59e <test_kfreelast+0x53b>
f012a587:	83 ec 04             	sub    $0x4,%esp
f012a58a:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a58f:	68 ec 0c 00 00       	push   $0xcec
f012a594:	68 7a b5 13 f0       	push   $0xf013b57a
f012a599:	e8 67 5c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a59e:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a5a5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a5a8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a5ae:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a5b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5b8:	eb 0e                	jmp    f012a5c8 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a5ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a5bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5c0:	01 d0                	add    %edx,%eax
f012a5c2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a5c5:	ff 45 f4             	incl   -0xc(%ebp)
f012a5c8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a5ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5d1:	7f e7                	jg     f012a5ba <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5d3:	e8 81 2a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a5d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5db:	e8 47 97 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a5e3:	83 ec 0c             	sub    $0xc,%esp
f012a5e6:	68 00 1c 00 00       	push   $0x1c00
f012a5eb:	e8 7a d3 fd ff       	call   f010796a <kmalloc>
f012a5f0:	83 c4 10             	add    $0x10,%esp
f012a5f3:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a5f9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a5ff:	89 c1                	mov    %eax,%ecx
f012a601:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a608:	10 00 00 
f012a60b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a611:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a616:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a61c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a622:	ba 00 00 00 00       	mov    $0x0,%edx
f012a627:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a62d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a633:	29 d0                	sub    %edx,%eax
f012a635:	89 c3                	mov    %eax,%ebx
f012a637:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a63e:	10 00 00 
f012a641:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a646:	0f b6 d0             	movzbl %al,%edx
f012a649:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a64f:	01 d0                	add    %edx,%eax
f012a651:	48                   	dec    %eax
f012a652:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a658:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a65e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a663:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a669:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a66f:	29 d0                	sub    %edx,%eax
f012a671:	01 c3                	add    %eax,%ebx
f012a673:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a67a:	10 00 00 
f012a67d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a682:	0f b6 c0             	movzbl %al,%eax
f012a685:	c1 e0 04             	shl    $0x4,%eax
f012a688:	89 c2                	mov    %eax,%edx
f012a68a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a690:	01 d0                	add    %edx,%eax
f012a692:	48                   	dec    %eax
f012a693:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a699:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a69f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6a4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a6aa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a6b0:	29 d0                	sub    %edx,%eax
f012a6b2:	01 d8                	add    %ebx,%eax
f012a6b4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a6b9:	39 c1                	cmp    %eax,%ecx
f012a6bb:	74 17                	je     f012a6d4 <test_kfreelast+0x671>
f012a6bd:	83 ec 04             	sub    $0x4,%esp
f012a6c0:	68 60 b6 13 f0       	push   $0xf013b660
f012a6c5:	68 f8 0c 00 00       	push   $0xcf8
f012a6ca:	68 7a b5 13 f0       	push   $0xf013b57a
f012a6cf:	e8 31 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a6d4:	e8 4e 96 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a6d9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6dc:	74 17                	je     f012a6f5 <test_kfreelast+0x692>
f012a6de:	83 ec 04             	sub    $0x4,%esp
f012a6e1:	68 94 b5 13 f0       	push   $0xf013b594
f012a6e6:	68 f9 0c 00 00       	push   $0xcf9
f012a6eb:	68 7a b5 13 f0       	push   $0xf013b57a
f012a6f0:	e8 10 5b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a6f5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a6f8:	e8 5c 29 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a6fd:	29 c3                	sub    %eax,%ebx
f012a6ff:	89 d8                	mov    %ebx,%eax
f012a701:	83 f8 02             	cmp    $0x2,%eax
f012a704:	74 17                	je     f012a71d <test_kfreelast+0x6ba>
f012a706:	83 ec 04             	sub    $0x4,%esp
f012a709:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a70e:	68 fa 0c 00 00       	push   $0xcfa
f012a713:	68 7a b5 13 f0       	push   $0xf013b57a
f012a718:	e8 e8 5a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a71d:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a724:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a727:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a72d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a730:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a737:	eb 0e                	jmp    f012a747 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a739:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a73c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a73f:	01 d0                	add    %edx,%eax
f012a741:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a744:	ff 45 f4             	incl   -0xc(%ebp)
f012a747:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a74d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a750:	7f e7                	jg     f012a739 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a752:	e8 02 29 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a757:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a75a:	e8 c8 95 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a75f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a762:	83 ec 0c             	sub    $0xc,%esp
f012a765:	68 00 fc 2f 00       	push   $0x2ffc00
f012a76a:	e8 fb d1 fd ff       	call   f010796a <kmalloc>
f012a76f:	83 c4 10             	add    $0x10,%esp
f012a772:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a778:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a77e:	89 c1                	mov    %eax,%ecx
f012a780:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a787:	10 00 00 
f012a78a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a790:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a795:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a79b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7a6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a7ac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7b2:	29 d0                	sub    %edx,%eax
f012a7b4:	89 c3                	mov    %eax,%ebx
f012a7b6:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a7bd:	10 00 00 
f012a7c0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a7c5:	0f b6 d0             	movzbl %al,%edx
f012a7c8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a7ce:	01 d0                	add    %edx,%eax
f012a7d0:	48                   	dec    %eax
f012a7d1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a7d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a7dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7e2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a7e8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a7ee:	29 d0                	sub    %edx,%eax
f012a7f0:	01 c3                	add    %eax,%ebx
f012a7f2:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a7f9:	10 00 00 
f012a7fc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a801:	0f b6 c0             	movzbl %al,%eax
f012a804:	c1 e0 04             	shl    $0x4,%eax
f012a807:	89 c2                	mov    %eax,%edx
f012a809:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a80f:	01 d0                	add    %edx,%eax
f012a811:	48                   	dec    %eax
f012a812:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a818:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a81e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a823:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a829:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a82f:	29 d0                	sub    %edx,%eax
f012a831:	01 d8                	add    %ebx,%eax
f012a833:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a838:	39 c1                	cmp    %eax,%ecx
f012a83a:	74 17                	je     f012a853 <test_kfreelast+0x7f0>
f012a83c:	83 ec 04             	sub    $0x4,%esp
f012a83f:	68 60 b6 13 f0       	push   $0xf013b660
f012a844:	68 06 0d 00 00       	push   $0xd06
f012a849:	68 7a b5 13 f0       	push   $0xf013b57a
f012a84e:	e8 b2 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a853:	e8 cf 94 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a858:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a85b:	74 17                	je     f012a874 <test_kfreelast+0x811>
f012a85d:	83 ec 04             	sub    $0x4,%esp
f012a860:	68 94 b5 13 f0       	push   $0xf013b594
f012a865:	68 07 0d 00 00       	push   $0xd07
f012a86a:	68 7a b5 13 f0       	push   $0xf013b57a
f012a86f:	e8 91 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a874:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a877:	e8 dd 27 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a87c:	29 c3                	sub    %eax,%ebx
f012a87e:	89 d8                	mov    %ebx,%eax
f012a880:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a885:	74 17                	je     f012a89e <test_kfreelast+0x83b>
f012a887:	83 ec 04             	sub    $0x4,%esp
f012a88a:	68 fc b5 13 f0       	push   $0xf013b5fc
f012a88f:	68 08 0d 00 00       	push   $0xd08
f012a894:	68 7a b5 13 f0       	push   $0xf013b57a
f012a899:	e8 67 59 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a89e:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a8a5:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a8a8:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a8ae:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a8b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8b8:	eb 0e                	jmp    f012a8c8 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a8ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8c0:	01 d0                	add    %edx,%eax
f012a8c2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a8c5:	ff 45 f4             	incl   -0xc(%ebp)
f012a8c8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a8ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8d1:	7f e7                	jg     f012a8ba <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8d3:	e8 81 27 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a8d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8db:	e8 47 94 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a8e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a8e3:	83 ec 0c             	sub    $0xc,%esp
f012a8e6:	68 00 fc 5f 00       	push   $0x5ffc00
f012a8eb:	e8 7a d0 fd ff       	call   f010796a <kmalloc>
f012a8f0:	83 c4 10             	add    $0x10,%esp
f012a8f3:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a8f9:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a8ff:	89 c1                	mov    %eax,%ecx
f012a901:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a908:	10 00 00 
f012a90b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a911:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a916:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a91c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a922:	ba 00 00 00 00       	mov    $0x0,%edx
f012a927:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a92d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a933:	29 d0                	sub    %edx,%eax
f012a935:	89 c3                	mov    %eax,%ebx
f012a937:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a93e:	10 00 00 
f012a941:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a946:	0f b6 d0             	movzbl %al,%edx
f012a949:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a94f:	01 d0                	add    %edx,%eax
f012a951:	48                   	dec    %eax
f012a952:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a958:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a95e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a963:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a969:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a96f:	29 d0                	sub    %edx,%eax
f012a971:	01 c3                	add    %eax,%ebx
f012a973:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a97a:	10 00 00 
f012a97d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012a982:	0f b6 c0             	movzbl %al,%eax
f012a985:	c1 e0 04             	shl    $0x4,%eax
f012a988:	89 c2                	mov    %eax,%edx
f012a98a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a990:	01 d0                	add    %edx,%eax
f012a992:	48                   	dec    %eax
f012a993:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a999:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a99f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9a4:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a9aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a9b0:	29 d0                	sub    %edx,%eax
f012a9b2:	01 d8                	add    %ebx,%eax
f012a9b4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a9b9:	39 c1                	cmp    %eax,%ecx
f012a9bb:	74 17                	je     f012a9d4 <test_kfreelast+0x971>
f012a9bd:	83 ec 04             	sub    $0x4,%esp
f012a9c0:	68 60 b6 13 f0       	push   $0xf013b660
f012a9c5:	68 14 0d 00 00       	push   $0xd14
f012a9ca:	68 7a b5 13 f0       	push   $0xf013b57a
f012a9cf:	e8 31 58 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a9d4:	e8 4e 93 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012a9d9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9dc:	74 17                	je     f012a9f5 <test_kfreelast+0x992>
f012a9de:	83 ec 04             	sub    $0x4,%esp
f012a9e1:	68 94 b5 13 f0       	push   $0xf013b594
f012a9e6:	68 15 0d 00 00       	push   $0xd15
f012a9eb:	68 7a b5 13 f0       	push   $0xf013b57a
f012a9f0:	e8 10 58 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a9f5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a9f8:	e8 5c 26 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a9fd:	29 c3                	sub    %eax,%ebx
f012a9ff:	89 d8                	mov    %ebx,%eax
f012aa01:	3d 00 06 00 00       	cmp    $0x600,%eax
f012aa06:	74 17                	je     f012aa1f <test_kfreelast+0x9bc>
f012aa08:	83 ec 04             	sub    $0x4,%esp
f012aa0b:	68 fc b5 13 f0       	push   $0xf013b5fc
f012aa10:	68 16 0d 00 00       	push   $0xd16
f012aa15:	68 7a b5 13 f0       	push   $0xf013b57a
f012aa1a:	e8 e6 57 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012aa1f:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012aa26:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa29:	e8 2b 26 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012aa2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa31:	e8 f1 92 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012aa36:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012aa39:	83 ec 0c             	sub    $0xc,%esp
f012aa3c:	68 00 38 00 00       	push   $0x3800
f012aa41:	e8 24 cf fd ff       	call   f010796a <kmalloc>
f012aa46:	83 c4 10             	add    $0x10,%esp
f012aa49:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aa4f:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa55:	89 c1                	mov    %eax,%ecx
f012aa57:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012aa5e:	10 00 00 
f012aa61:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aa67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa6c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012aa72:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aa78:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa7d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012aa83:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aa89:	29 d0                	sub    %edx,%eax
f012aa8b:	89 c3                	mov    %eax,%ebx
f012aa8d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012aa94:	10 00 00 
f012aa97:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012aa9c:	0f b6 d0             	movzbl %al,%edx
f012aa9f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012aaa5:	01 d0                	add    %edx,%eax
f012aaa7:	48                   	dec    %eax
f012aaa8:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012aaae:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aab4:	ba 00 00 00 00       	mov    $0x0,%edx
f012aab9:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012aabf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aac5:	29 d0                	sub    %edx,%eax
f012aac7:	01 c3                	add    %eax,%ebx
f012aac9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012aad0:	10 00 00 
f012aad3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012aad8:	0f b6 c0             	movzbl %al,%eax
f012aadb:	c1 e0 04             	shl    $0x4,%eax
f012aade:	89 c2                	mov    %eax,%edx
f012aae0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012aae6:	01 d0                	add    %edx,%eax
f012aae8:	48                   	dec    %eax
f012aae9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012aaef:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012aaf5:	ba 00 00 00 00       	mov    $0x0,%edx
f012aafa:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012ab00:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab06:	29 d0                	sub    %edx,%eax
f012ab08:	01 d8                	add    %ebx,%eax
f012ab0a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012ab0f:	39 c1                	cmp    %eax,%ecx
f012ab11:	74 17                	je     f012ab2a <test_kfreelast+0xac7>
f012ab13:	83 ec 04             	sub    $0x4,%esp
f012ab16:	68 60 b6 13 f0       	push   $0xf013b660
f012ab1b:	68 1d 0d 00 00       	push   $0xd1d
f012ab20:	68 7a b5 13 f0       	push   $0xf013b57a
f012ab25:	e8 db 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ab2a:	e8 f8 91 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ab2f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab32:	74 17                	je     f012ab4b <test_kfreelast+0xae8>
f012ab34:	83 ec 04             	sub    $0x4,%esp
f012ab37:	68 94 b5 13 f0       	push   $0xf013b594
f012ab3c:	68 1e 0d 00 00       	push   $0xd1e
f012ab41:	68 7a b5 13 f0       	push   $0xf013b57a
f012ab46:	e8 ba 56 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ab4b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ab4e:	e8 06 25 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ab53:	29 c3                	sub    %eax,%ebx
f012ab55:	89 d8                	mov    %ebx,%eax
f012ab57:	83 f8 04             	cmp    $0x4,%eax
f012ab5a:	74 17                	je     f012ab73 <test_kfreelast+0xb10>
f012ab5c:	83 ec 04             	sub    $0x4,%esp
f012ab5f:	68 fc b5 13 f0       	push   $0xf013b5fc
f012ab64:	68 1f 0d 00 00       	push   $0xd1f
f012ab69:	68 7a b5 13 f0       	push   $0xf013b57a
f012ab6e:	e8 92 56 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012ab73:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012ab7a:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012ab7d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ab83:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012ab86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab8d:	eb 0e                	jmp    f012ab9d <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012ab8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab95:	01 d0                	add    %edx,%eax
f012ab97:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012ab9a:	ff 45 f4             	incl   -0xc(%ebp)
f012ab9d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012aba3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aba6:	7f e7                	jg     f012ab8f <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012aba8:	e8 ac 24 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012abad:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012abb3:	e8 6f 91 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012abb8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012abbe:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012abc4:	83 ec 0c             	sub    $0xc,%esp
f012abc7:	50                   	push   %eax
f012abc8:	e8 e6 ce fd ff       	call   f0107ab3 <kfree>
f012abcd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abd0:	e8 52 91 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012abd5:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012abdb:	74 17                	je     f012abf4 <test_kfreelast+0xb91>
f012abdd:	83 ec 04             	sub    $0x4,%esp
f012abe0:	68 94 b5 13 f0       	push   $0xf013b594
f012abe5:	68 2e 0d 00 00       	push   $0xd2e
f012abea:	68 7a b5 13 f0       	push   $0xf013b57a
f012abef:	e8 11 56 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012abf4:	e8 60 24 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012abf9:	89 c2                	mov    %eax,%edx
f012abfb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac01:	29 c2                	sub    %eax,%edx
f012ac03:	89 d0                	mov    %edx,%eax
f012ac05:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ac0a:	74 17                	je     f012ac23 <test_kfreelast+0xbc0>
f012ac0c:	83 ec 04             	sub    $0x4,%esp
f012ac0f:	68 04 bd 13 f0       	push   $0xf013bd04
f012ac14:	68 2f 0d 00 00       	push   $0xd2f
f012ac19:	68 7a b5 13 f0       	push   $0xf013b57a
f012ac1e:	e8 e2 55 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac23:	e8 31 24 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ac28:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac2e:	e8 f4 90 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ac33:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012ac39:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012ac3f:	83 ec 0c             	sub    $0xc,%esp
f012ac42:	50                   	push   %eax
f012ac43:	e8 6b ce fd ff       	call   f0107ab3 <kfree>
f012ac48:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac4b:	e8 d7 90 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ac50:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ac56:	74 17                	je     f012ac6f <test_kfreelast+0xc0c>
f012ac58:	83 ec 04             	sub    $0x4,%esp
f012ac5b:	68 94 b5 13 f0       	push   $0xf013b594
f012ac60:	68 35 0d 00 00       	push   $0xd35
f012ac65:	68 7a b5 13 f0       	push   $0xf013b57a
f012ac6a:	e8 96 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac6f:	e8 e5 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ac74:	89 c2                	mov    %eax,%edx
f012ac76:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac7c:	29 c2                	sub    %eax,%edx
f012ac7e:	89 d0                	mov    %edx,%eax
f012ac80:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ac85:	74 17                	je     f012ac9e <test_kfreelast+0xc3b>
f012ac87:	83 ec 04             	sub    $0x4,%esp
f012ac8a:	68 04 bd 13 f0       	push   $0xf013bd04
f012ac8f:	68 36 0d 00 00       	push   $0xd36
f012ac94:	68 7a b5 13 f0       	push   $0xf013b57a
f012ac99:	e8 67 55 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac9e:	e8 b6 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012aca3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aca9:	e8 79 90 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012acae:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012acb4:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012acba:	83 ec 0c             	sub    $0xc,%esp
f012acbd:	50                   	push   %eax
f012acbe:	e8 f0 cd fd ff       	call   f0107ab3 <kfree>
f012acc3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012acc6:	e8 5c 90 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012accb:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012acd1:	74 17                	je     f012acea <test_kfreelast+0xc87>
f012acd3:	83 ec 04             	sub    $0x4,%esp
f012acd6:	68 94 b5 13 f0       	push   $0xf013b594
f012acdb:	68 3c 0d 00 00       	push   $0xd3c
f012ace0:	68 7a b5 13 f0       	push   $0xf013b57a
f012ace5:	e8 1b 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012acea:	e8 6a 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012acef:	89 c2                	mov    %eax,%edx
f012acf1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012acf7:	29 c2                	sub    %eax,%edx
f012acf9:	89 d0                	mov    %edx,%eax
f012acfb:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ad00:	74 17                	je     f012ad19 <test_kfreelast+0xcb6>
f012ad02:	83 ec 04             	sub    $0x4,%esp
f012ad05:	68 04 bd 13 f0       	push   $0xf013bd04
f012ad0a:	68 3d 0d 00 00       	push   $0xd3d
f012ad0f:	68 7a b5 13 f0       	push   $0xf013b57a
f012ad14:	e8 ec 54 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012ad19:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ad1f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012ad22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad29:	eb 1e                	jmp    f012ad49 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012ad2b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad31:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad34:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad37:	01 c8                	add    %ecx,%eax
f012ad39:	8a 00                	mov    (%eax),%al
f012ad3b:	0f be c0             	movsbl %al,%eax
f012ad3e:	01 d0                	add    %edx,%eax
f012ad40:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012ad46:	ff 45 f4             	incl   -0xc(%ebp)
f012ad49:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad52:	7f d7                	jg     f012ad2b <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012ad54:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad5a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad60:	01 c0                	add    %eax,%eax
f012ad62:	39 c2                	cmp    %eax,%edx
f012ad64:	74 17                	je     f012ad7d <test_kfreelast+0xd1a>
f012ad66:	83 ec 04             	sub    $0x4,%esp
f012ad69:	68 60 bd 13 f0       	push   $0xf013bd60
f012ad6e:	68 48 0d 00 00       	push   $0xd48
f012ad73:	68 7a b5 13 f0       	push   $0xf013b57a
f012ad78:	e8 88 54 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012ad7d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ad83:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012ad86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad8d:	eb 1e                	jmp    f012adad <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012ad8f:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012ad95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad98:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad9b:	01 c8                	add    %ecx,%eax
f012ad9d:	8a 00                	mov    (%eax),%al
f012ad9f:	0f be c0             	movsbl %al,%eax
f012ada2:	01 d0                	add    %edx,%eax
f012ada4:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012adaa:	ff 45 f4             	incl   -0xc(%ebp)
f012adad:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012adb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012adb6:	7f d7                	jg     f012ad8f <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012adb8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012adbe:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012adc4:	89 c1                	mov    %eax,%ecx
f012adc6:	01 c9                	add    %ecx,%ecx
f012adc8:	01 c8                	add    %ecx,%eax
f012adca:	39 c2                	cmp    %eax,%edx
f012adcc:	74 17                	je     f012ade5 <test_kfreelast+0xd82>
f012adce:	83 ec 04             	sub    $0x4,%esp
f012add1:	68 60 bd 13 f0       	push   $0xf013bd60
f012add6:	68 50 0d 00 00       	push   $0xd50
f012addb:	68 7a b5 13 f0       	push   $0xf013b57a
f012ade0:	e8 20 54 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012ade5:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012adeb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012adee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012adf5:	eb 1e                	jmp    f012ae15 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012adf7:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012adfd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae00:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae03:	01 c8                	add    %ecx,%eax
f012ae05:	8a 00                	mov    (%eax),%al
f012ae07:	0f be c0             	movsbl %al,%eax
f012ae0a:	01 d0                	add    %edx,%eax
f012ae0c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012ae12:	ff 45 f4             	incl   -0xc(%ebp)
f012ae15:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ae1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae1e:	7f d7                	jg     f012adf7 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012ae20:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012ae26:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ae2c:	c1 e2 02             	shl    $0x2,%edx
f012ae2f:	39 d0                	cmp    %edx,%eax
f012ae31:	74 17                	je     f012ae4a <test_kfreelast+0xde7>
f012ae33:	83 ec 04             	sub    $0x4,%esp
f012ae36:	68 60 bd 13 f0       	push   $0xf013bd60
f012ae3b:	68 58 0d 00 00       	push   $0xd58
f012ae40:	68 7a b5 13 f0       	push   $0xf013b57a
f012ae45:	e8 bb 53 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012ae4a:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ae50:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012ae53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae5a:	eb 1e                	jmp    f012ae7a <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012ae5c:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012ae62:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae65:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae68:	01 c8                	add    %ecx,%eax
f012ae6a:	8a 00                	mov    (%eax),%al
f012ae6c:	0f be c0             	movsbl %al,%eax
f012ae6f:	01 d0                	add    %edx,%eax
f012ae71:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012ae77:	ff 45 f4             	incl   -0xc(%ebp)
f012ae7a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ae80:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae83:	7f d7                	jg     f012ae5c <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012ae85:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012ae8b:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012ae91:	89 d0                	mov    %edx,%eax
f012ae93:	c1 e0 02             	shl    $0x2,%eax
f012ae96:	01 d0                	add    %edx,%eax
f012ae98:	39 c1                	cmp    %eax,%ecx
f012ae9a:	74 17                	je     f012aeb3 <test_kfreelast+0xe50>
f012ae9c:	83 ec 04             	sub    $0x4,%esp
f012ae9f:	68 60 bd 13 f0       	push   $0xf013bd60
f012aea4:	68 60 0d 00 00       	push   $0xd60
f012aea9:	68 7a b5 13 f0       	push   $0xf013b57a
f012aeae:	e8 52 53 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aeb3:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aeb9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aebc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aec3:	eb 1e                	jmp    f012aee3 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aec5:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aecb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aece:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aed1:	01 c8                	add    %ecx,%eax
f012aed3:	8a 00                	mov    (%eax),%al
f012aed5:	0f be c0             	movsbl %al,%eax
f012aed8:	01 d0                	add    %edx,%eax
f012aeda:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012aee0:	ff 45 f4             	incl   -0xc(%ebp)
f012aee3:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012aee9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aeec:	7f d7                	jg     f012aec5 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012aeee:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012aef4:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012aefa:	89 d0                	mov    %edx,%eax
f012aefc:	01 c0                	add    %eax,%eax
f012aefe:	01 d0                	add    %edx,%eax
f012af00:	01 c0                	add    %eax,%eax
f012af02:	01 d0                	add    %edx,%eax
f012af04:	39 c1                	cmp    %eax,%ecx
f012af06:	74 17                	je     f012af1f <test_kfreelast+0xebc>
f012af08:	83 ec 04             	sub    $0x4,%esp
f012af0b:	68 60 bd 13 f0       	push   $0xf013bd60
f012af10:	68 68 0d 00 00       	push   $0xd68
f012af15:	68 7a b5 13 f0       	push   $0xf013b57a
f012af1a:	e8 e6 52 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012af1f:	e8 35 21 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012af24:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af27:	e8 fb 8d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012af2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012af2f:	83 ec 0c             	sub    $0xc,%esp
f012af32:	68 00 50 00 00       	push   $0x5000
f012af37:	e8 2e ca fd ff       	call   f010796a <kmalloc>
f012af3c:	83 c4 10             	add    $0x10,%esp
f012af3f:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012af45:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012af4b:	89 c1                	mov    %eax,%ecx
f012af4d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012af54:	10 00 00 
f012af57:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012af5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af62:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012af68:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012af6e:	ba 00 00 00 00       	mov    $0x0,%edx
f012af73:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012af79:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012af7f:	29 d0                	sub    %edx,%eax
f012af81:	89 c3                	mov    %eax,%ebx
f012af83:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012af8a:	10 00 00 
f012af8d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012af92:	0f b6 d0             	movzbl %al,%edx
f012af95:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012af9b:	01 d0                	add    %edx,%eax
f012af9d:	48                   	dec    %eax
f012af9e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012afa4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afaa:	ba 00 00 00 00       	mov    $0x0,%edx
f012afaf:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012afb5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afbb:	29 d0                	sub    %edx,%eax
f012afbd:	01 c3                	add    %eax,%ebx
f012afbf:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012afc6:	10 00 00 
f012afc9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012afce:	0f b6 c0             	movzbl %al,%eax
f012afd1:	c1 e0 04             	shl    $0x4,%eax
f012afd4:	89 c2                	mov    %eax,%edx
f012afd6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012afdc:	01 d0                	add    %edx,%eax
f012afde:	48                   	dec    %eax
f012afdf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012afe5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012afeb:	ba 00 00 00 00       	mov    $0x0,%edx
f012aff0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012aff6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012affc:	29 d0                	sub    %edx,%eax
f012affe:	01 d8                	add    %ebx,%eax
f012b000:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012b005:	39 c1                	cmp    %eax,%ecx
f012b007:	74 17                	je     f012b020 <test_kfreelast+0xfbd>
f012b009:	83 ec 04             	sub    $0x4,%esp
f012b00c:	68 60 b6 13 f0       	push   $0xf013b660
f012b011:	68 71 0d 00 00       	push   $0xd71
f012b016:	68 7a b5 13 f0       	push   $0xf013b57a
f012b01b:	e8 e5 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b020:	e8 02 8d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b025:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b028:	74 17                	je     f012b041 <test_kfreelast+0xfde>
f012b02a:	83 ec 04             	sub    $0x4,%esp
f012b02d:	68 94 b5 13 f0       	push   $0xf013b594
f012b032:	68 72 0d 00 00       	push   $0xd72
f012b037:	68 7a b5 13 f0       	push   $0xf013b57a
f012b03c:	e8 c4 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b041:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b044:	e8 10 20 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b049:	29 c3                	sub    %eax,%ebx
f012b04b:	89 d8                	mov    %ebx,%eax
f012b04d:	83 f8 05             	cmp    $0x5,%eax
f012b050:	74 17                	je     f012b069 <test_kfreelast+0x1006>
f012b052:	83 ec 04             	sub    $0x4,%esp
f012b055:	68 fc b5 13 f0       	push   $0xf013b5fc
f012b05a:	68 73 0d 00 00       	push   $0xd73
f012b05f:	68 7a b5 13 f0       	push   $0xf013b57a
f012b064:	e8 9c 51 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012b069:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012b070:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012b073:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b079:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012b07c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b083:	eb 0e                	jmp    f012b093 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012b085:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b088:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b08b:	01 d0                	add    %edx,%eax
f012b08d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012b090:	ff 45 f4             	incl   -0xc(%ebp)
f012b093:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012b099:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b09c:	7f e7                	jg     f012b085 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b09e:	e8 b6 1f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b0a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0a6:	e8 7c 8c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b0ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012b0ae:	83 ec 0c             	sub    $0xc,%esp
f012b0b1:	68 00 00 10 00       	push   $0x100000
f012b0b6:	e8 af c8 fd ff       	call   f010796a <kmalloc>
f012b0bb:	83 c4 10             	add    $0x10,%esp
f012b0be:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b0c4:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b0ca:	89 c1                	mov    %eax,%ecx
f012b0cc:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012b0d3:	10 00 00 
f012b0d6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b0dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b0e1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012b0e7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b0ed:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0f2:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012b0f8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b0fe:	29 d0                	sub    %edx,%eax
f012b100:	89 c3                	mov    %eax,%ebx
f012b102:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012b109:	10 00 00 
f012b10c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b111:	0f b6 d0             	movzbl %al,%edx
f012b114:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b11a:	01 d0                	add    %edx,%eax
f012b11c:	48                   	dec    %eax
f012b11d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012b123:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b129:	ba 00 00 00 00       	mov    $0x0,%edx
f012b12e:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012b134:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b13a:	29 d0                	sub    %edx,%eax
f012b13c:	01 c3                	add    %eax,%ebx
f012b13e:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012b145:	10 00 00 
f012b148:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b14d:	0f b6 c0             	movzbl %al,%eax
f012b150:	c1 e0 04             	shl    $0x4,%eax
f012b153:	89 c2                	mov    %eax,%edx
f012b155:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012b15b:	01 d0                	add    %edx,%eax
f012b15d:	48                   	dec    %eax
f012b15e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012b164:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b16a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b16f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012b175:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b17b:	29 d0                	sub    %edx,%eax
f012b17d:	01 d8                	add    %ebx,%eax
f012b17f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b184:	39 c1                	cmp    %eax,%ecx
f012b186:	74 17                	je     f012b19f <test_kfreelast+0x113c>
f012b188:	83 ec 04             	sub    $0x4,%esp
f012b18b:	68 60 b6 13 f0       	push   $0xf013b660
f012b190:	68 7f 0d 00 00       	push   $0xd7f
f012b195:	68 7a b5 13 f0       	push   $0xf013b57a
f012b19a:	e8 66 50 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b19f:	e8 83 8b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b1a4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1a7:	74 17                	je     f012b1c0 <test_kfreelast+0x115d>
f012b1a9:	83 ec 04             	sub    $0x4,%esp
f012b1ac:	68 94 b5 13 f0       	push   $0xf013b594
f012b1b1:	68 80 0d 00 00       	push   $0xd80
f012b1b6:	68 7a b5 13 f0       	push   $0xf013b57a
f012b1bb:	e8 45 50 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b1c0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b1c3:	e8 91 1e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b1c8:	29 c3                	sub    %eax,%ebx
f012b1ca:	89 d8                	mov    %ebx,%eax
f012b1cc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b1d1:	74 17                	je     f012b1ea <test_kfreelast+0x1187>
f012b1d3:	83 ec 04             	sub    $0x4,%esp
f012b1d6:	68 fc b5 13 f0       	push   $0xf013b5fc
f012b1db:	68 81 0d 00 00       	push   $0xd81
f012b1e0:	68 7a b5 13 f0       	push   $0xf013b57a
f012b1e5:	e8 1b 50 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012b1ea:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012b1f1:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012b1f4:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b1fa:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012b1fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b204:	eb 0e                	jmp    f012b214 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012b206:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b209:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b20c:	01 d0                	add    %edx,%eax
f012b20e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012b211:	ff 45 f4             	incl   -0xc(%ebp)
f012b214:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012b21a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b21d:	7f e7                	jg     f012b206 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012b21f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b226:	e8 2e 1e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b22b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b22e:	e8 f4 8a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b233:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b236:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b23c:	83 ec 0c             	sub    $0xc,%esp
f012b23f:	50                   	push   %eax
f012b240:	e8 6e c8 fd ff       	call   f0107ab3 <kfree>
f012b245:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b248:	e8 da 8a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b24d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b250:	74 17                	je     f012b269 <test_kfreelast+0x1206>
f012b252:	83 ec 04             	sub    $0x4,%esp
f012b255:	68 94 b5 13 f0       	push   $0xf013b594
f012b25a:	68 91 0d 00 00       	push   $0xd91
f012b25f:	68 7a b5 13 f0       	push   $0xf013b57a
f012b264:	e8 9c 4f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012b269:	e8 eb 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b26e:	89 c2                	mov    %eax,%edx
f012b270:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b273:	29 c2                	sub    %eax,%edx
f012b275:	89 d0                	mov    %edx,%eax
f012b277:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b27c:	74 17                	je     f012b295 <test_kfreelast+0x1232>
f012b27e:	83 ec 04             	sub    $0x4,%esp
f012b281:	68 04 bd 13 f0       	push   $0xf013bd04
f012b286:	68 92 0d 00 00       	push   $0xd92
f012b28b:	68 7a b5 13 f0       	push   $0xf013b57a
f012b290:	e8 70 4f fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b295:	e8 bf 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b29a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b29d:	e8 85 8a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b2a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012b2a5:	83 ec 0c             	sub    $0xc,%esp
f012b2a8:	68 00 78 00 00       	push   $0x7800
f012b2ad:	e8 b8 c6 fd ff       	call   f010796a <kmalloc>
f012b2b2:	83 c4 10             	add    $0x10,%esp
f012b2b5:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b2bb:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b2c1:	89 c1                	mov    %eax,%ecx
f012b2c3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012b2ca:	10 00 00 
f012b2cd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012b2d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b2d8:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012b2de:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b2e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2e9:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012b2ef:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b2f5:	29 d0                	sub    %edx,%eax
f012b2f7:	89 c3                	mov    %eax,%ebx
f012b2f9:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012b300:	10 00 00 
f012b303:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b308:	0f b6 d0             	movzbl %al,%edx
f012b30b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012b311:	01 d0                	add    %edx,%eax
f012b313:	48                   	dec    %eax
f012b314:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012b31a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b320:	ba 00 00 00 00       	mov    $0x0,%edx
f012b325:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b32b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b331:	29 d0                	sub    %edx,%eax
f012b333:	01 c3                	add    %eax,%ebx
f012b335:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b33c:	10 00 00 
f012b33f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b344:	0f b6 c0             	movzbl %al,%eax
f012b347:	c1 e0 04             	shl    $0x4,%eax
f012b34a:	89 c2                	mov    %eax,%edx
f012b34c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b352:	01 d0                	add    %edx,%eax
f012b354:	48                   	dec    %eax
f012b355:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b35b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b361:	ba 00 00 00 00       	mov    $0x0,%edx
f012b366:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b36c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b372:	29 d0                	sub    %edx,%eax
f012b374:	01 d8                	add    %ebx,%eax
f012b376:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b37b:	39 c1                	cmp    %eax,%ecx
f012b37d:	74 17                	je     f012b396 <test_kfreelast+0x1333>
f012b37f:	83 ec 04             	sub    $0x4,%esp
f012b382:	68 60 b6 13 f0       	push   $0xf013b660
f012b387:	68 9b 0d 00 00       	push   $0xd9b
f012b38c:	68 7a b5 13 f0       	push   $0xf013b57a
f012b391:	e8 6f 4e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b396:	e8 8c 89 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b39b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b39e:	74 17                	je     f012b3b7 <test_kfreelast+0x1354>
f012b3a0:	83 ec 04             	sub    $0x4,%esp
f012b3a3:	68 94 b5 13 f0       	push   $0xf013b594
f012b3a8:	68 9c 0d 00 00       	push   $0xd9c
f012b3ad:	68 7a b5 13 f0       	push   $0xf013b57a
f012b3b2:	e8 4e 4e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b3b7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b3ba:	e8 9a 1c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b3bf:	29 c3                	sub    %eax,%ebx
f012b3c1:	89 d8                	mov    %ebx,%eax
f012b3c3:	83 f8 08             	cmp    $0x8,%eax
f012b3c6:	74 17                	je     f012b3df <test_kfreelast+0x137c>
f012b3c8:	83 ec 04             	sub    $0x4,%esp
f012b3cb:	68 fc b5 13 f0       	push   $0xf013b5fc
f012b3d0:	68 9d 0d 00 00       	push   $0xd9d
f012b3d5:	68 7a b5 13 f0       	push   $0xf013b57a
f012b3da:	e8 26 4e fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b3df:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b3e6:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b3e9:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b3ef:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b3f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b3f9:	eb 0e                	jmp    f012b409 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b3fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b3fe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b401:	01 d0                	add    %edx,%eax
f012b403:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b406:	ff 45 f4             	incl   -0xc(%ebp)
f012b409:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b40f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b412:	7f e7                	jg     f012b3fb <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b414:	e8 40 1c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b419:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b41c:	e8 06 89 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b421:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b424:	83 ec 0c             	sub    $0xc,%esp
f012b427:	68 00 00 10 00       	push   $0x100000
f012b42c:	e8 39 c5 fd ff       	call   f010796a <kmalloc>
f012b431:	83 c4 10             	add    $0x10,%esp
f012b434:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b43a:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b440:	89 c1                	mov    %eax,%ecx
f012b442:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b449:	10 00 00 
f012b44c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b457:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b45d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b463:	ba 00 00 00 00       	mov    $0x0,%edx
f012b468:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b46e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b474:	29 d0                	sub    %edx,%eax
f012b476:	89 c3                	mov    %eax,%ebx
f012b478:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b47f:	10 00 00 
f012b482:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b487:	0f b6 d0             	movzbl %al,%edx
f012b48a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b490:	01 d0                	add    %edx,%eax
f012b492:	48                   	dec    %eax
f012b493:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b499:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b49f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4a4:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b4aa:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4b0:	29 d0                	sub    %edx,%eax
f012b4b2:	01 c3                	add    %eax,%ebx
f012b4b4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b4bb:	10 00 00 
f012b4be:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b4c3:	0f b6 c0             	movzbl %al,%eax
f012b4c6:	c1 e0 04             	shl    $0x4,%eax
f012b4c9:	89 c2                	mov    %eax,%edx
f012b4cb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b4d1:	01 d0                	add    %edx,%eax
f012b4d3:	48                   	dec    %eax
f012b4d4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b4da:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b4e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4e5:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b4eb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b4f1:	29 d0                	sub    %edx,%eax
f012b4f3:	01 d8                	add    %ebx,%eax
f012b4f5:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b4fa:	39 c1                	cmp    %eax,%ecx
f012b4fc:	74 17                	je     f012b515 <test_kfreelast+0x14b2>
f012b4fe:	83 ec 04             	sub    $0x4,%esp
f012b501:	68 60 b6 13 f0       	push   $0xf013b660
f012b506:	68 a9 0d 00 00       	push   $0xda9
f012b50b:	68 7a b5 13 f0       	push   $0xf013b57a
f012b510:	e8 f0 4c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b515:	e8 0d 88 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b51a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b51d:	74 17                	je     f012b536 <test_kfreelast+0x14d3>
f012b51f:	83 ec 04             	sub    $0x4,%esp
f012b522:	68 94 b5 13 f0       	push   $0xf013b594
f012b527:	68 aa 0d 00 00       	push   $0xdaa
f012b52c:	68 7a b5 13 f0       	push   $0xf013b57a
f012b531:	e8 cf 4c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b536:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b539:	e8 1b 1b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b53e:	29 c3                	sub    %eax,%ebx
f012b540:	89 d8                	mov    %ebx,%eax
f012b542:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b547:	74 17                	je     f012b560 <test_kfreelast+0x14fd>
f012b549:	83 ec 04             	sub    $0x4,%esp
f012b54c:	68 fc b5 13 f0       	push   $0xf013b5fc
f012b551:	68 ab 0d 00 00       	push   $0xdab
f012b556:	68 7a b5 13 f0       	push   $0xf013b57a
f012b55b:	e8 a5 4c fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b560:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b567:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b56a:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b570:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b573:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b57a:	eb 0e                	jmp    f012b58a <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b57c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b57f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b582:	01 d0                	add    %edx,%eax
f012b584:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b587:	ff 45 f4             	incl   -0xc(%ebp)
f012b58a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b590:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b593:	7f e7                	jg     f012b57c <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b595:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b599:	83 ec 08             	sub    $0x8,%esp
f012b59c:	ff 75 f0             	pushl  -0x10(%ebp)
f012b59f:	68 ac c5 13 f0       	push   $0xf013c5ac
f012b5a4:	e8 65 57 fd ff       	call   f0100d0e <cprintf>
f012b5a9:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b5ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b5b3:	e8 a1 1a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b5b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5bb:	e8 67 87 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b5c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b5c3:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b5c9:	83 ec 0c             	sub    $0xc,%esp
f012b5cc:	50                   	push   %eax
f012b5cd:	e8 e1 c4 fd ff       	call   f0107ab3 <kfree>
f012b5d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5d5:	e8 4d 87 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b5da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5dd:	74 1d                	je     f012b5fc <test_kfreelast+0x1599>
f012b5df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5e3:	75 17                	jne    f012b5fc <test_kfreelast+0x1599>
f012b5e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5ec:	83 ec 0c             	sub    $0xc,%esp
f012b5ef:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012b5f4:	e8 15 57 fd ff       	call   f0100d0e <cprintf>
f012b5f9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b5fc:	e8 58 1a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b601:	89 c2                	mov    %eax,%edx
f012b603:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b606:	29 c2                	sub    %eax,%edx
f012b608:	89 d0                	mov    %edx,%eax
f012b60a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b60f:	74 1d                	je     f012b62e <test_kfreelast+0x15cb>
f012b611:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b615:	75 17                	jne    f012b62e <test_kfreelast+0x15cb>
f012b617:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b61e:	83 ec 0c             	sub    $0xc,%esp
f012b621:	68 40 c6 13 f0       	push   $0xf013c640
f012b626:	e8 e3 56 fd ff       	call   f0100d0e <cprintf>
f012b62b:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b62e:	e8 26 1a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b633:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b636:	e8 ec 86 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b63b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b63e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b644:	83 ec 0c             	sub    $0xc,%esp
f012b647:	50                   	push   %eax
f012b648:	e8 66 c4 fd ff       	call   f0107ab3 <kfree>
f012b64d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b650:	e8 d2 86 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b655:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b658:	74 1d                	je     f012b677 <test_kfreelast+0x1614>
f012b65a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b65e:	75 17                	jne    f012b677 <test_kfreelast+0x1614>
f012b660:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b667:	83 ec 0c             	sub    $0xc,%esp
f012b66a:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012b66f:	e8 9a 56 fd ff       	call   f0100d0e <cprintf>
f012b674:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b677:	e8 dd 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b67c:	89 c2                	mov    %eax,%edx
f012b67e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b681:	29 c2                	sub    %eax,%edx
f012b683:	89 d0                	mov    %edx,%eax
f012b685:	83 f8 08             	cmp    $0x8,%eax
f012b688:	74 1d                	je     f012b6a7 <test_kfreelast+0x1644>
f012b68a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b68e:	75 17                	jne    f012b6a7 <test_kfreelast+0x1644>
f012b690:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b697:	83 ec 0c             	sub    $0xc,%esp
f012b69a:	68 40 c6 13 f0       	push   $0xf013c640
f012b69f:	e8 6a 56 fd ff       	call   f0100d0e <cprintf>
f012b6a4:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6a7:	e8 ad 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b6ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6af:	e8 73 86 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b6b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b6b7:	83 ec 0c             	sub    $0xc,%esp
f012b6ba:	68 00 28 00 00       	push   $0x2800
f012b6bf:	e8 a6 c2 fd ff       	call   f010796a <kmalloc>
f012b6c4:	83 c4 10             	add    $0x10,%esp
f012b6c7:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b6cd:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b6d3:	89 c1                	mov    %eax,%ecx
f012b6d5:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b6dc:	10 00 00 
f012b6df:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b6e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b6ea:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b6f0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b6f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b6fb:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b701:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b707:	29 d0                	sub    %edx,%eax
f012b709:	89 c3                	mov    %eax,%ebx
f012b70b:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b712:	10 00 00 
f012b715:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b71a:	0f b6 d0             	movzbl %al,%edx
f012b71d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b723:	01 d0                	add    %edx,%eax
f012b725:	48                   	dec    %eax
f012b726:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b72c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b732:	ba 00 00 00 00       	mov    $0x0,%edx
f012b737:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b73d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b743:	29 d0                	sub    %edx,%eax
f012b745:	01 c3                	add    %eax,%ebx
f012b747:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b74e:	10 00 00 
f012b751:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012b756:	0f b6 c0             	movzbl %al,%eax
f012b759:	c1 e0 04             	shl    $0x4,%eax
f012b75c:	89 c2                	mov    %eax,%edx
f012b75e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b764:	01 d0                	add    %edx,%eax
f012b766:	48                   	dec    %eax
f012b767:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b76d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b773:	ba 00 00 00 00       	mov    $0x0,%edx
f012b778:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b77e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b784:	29 d0                	sub    %edx,%eax
f012b786:	01 d8                	add    %ebx,%eax
f012b788:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b78d:	39 c1                	cmp    %eax,%ecx
f012b78f:	74 1d                	je     f012b7ae <test_kfreelast+0x174b>
f012b791:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b795:	75 17                	jne    f012b7ae <test_kfreelast+0x174b>
f012b797:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b79e:	83 ec 0c             	sub    $0xc,%esp
f012b7a1:	68 78 c6 13 f0       	push   $0xf013c678
f012b7a6:	e8 63 55 fd ff       	call   f0100d0e <cprintf>
f012b7ab:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7ae:	e8 74 85 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b7b3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7b6:	74 1d                	je     f012b7d5 <test_kfreelast+0x1772>
f012b7b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7bc:	75 17                	jne    f012b7d5 <test_kfreelast+0x1772>
f012b7be:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7c5:	83 ec 0c             	sub    $0xc,%esp
f012b7c8:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012b7cd:	e8 3c 55 fd ff       	call   f0100d0e <cprintf>
f012b7d2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b7d5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b7d8:	e8 7c 18 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b7dd:	29 c3                	sub    %eax,%ebx
f012b7df:	89 d8                	mov    %ebx,%eax
f012b7e1:	83 f8 03             	cmp    $0x3,%eax
f012b7e4:	74 1d                	je     f012b803 <test_kfreelast+0x17a0>
f012b7e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7ea:	75 17                	jne    f012b803 <test_kfreelast+0x17a0>
f012b7ec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7f3:	83 ec 0c             	sub    $0xc,%esp
f012b7f6:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012b7fb:	e8 0e 55 fd ff       	call   f0100d0e <cprintf>
f012b800:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b803:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b80a:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b80d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b813:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b816:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b81d:	eb 0e                	jmp    f012b82d <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b81f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b822:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b825:	01 d0                	add    %edx,%eax
f012b827:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b82a:	ff 45 f4             	incl   -0xc(%ebp)
f012b82d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b833:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b836:	7f e7                	jg     f012b81f <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b838:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b83c:	75 17                	jne    f012b855 <test_kfreelast+0x17f2>
f012b83e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b842:	83 ec 08             	sub    $0x8,%esp
f012b845:	ff 75 f0             	pushl  -0x10(%ebp)
f012b848:	68 ac c5 13 f0       	push   $0xf013c5ac
f012b84d:	e8 bc 54 fd ff       	call   f0100d0e <cprintf>
f012b852:	83 c4 10             	add    $0x10,%esp
f012b855:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b85c:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b862:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b865:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b86c:	eb 1e                	jmp    f012b88c <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b86e:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b874:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b877:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b87a:	01 c8                	add    %ecx,%eax
f012b87c:	8a 00                	mov    (%eax),%al
f012b87e:	0f be c0             	movsbl %al,%eax
f012b881:	01 d0                	add    %edx,%eax
f012b883:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b889:	ff 45 f4             	incl   -0xc(%ebp)
f012b88c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b892:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b895:	7f d7                	jg     f012b86e <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b897:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b89d:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b8a3:	89 d0                	mov    %edx,%eax
f012b8a5:	01 c0                	add    %eax,%eax
f012b8a7:	01 d0                	add    %edx,%eax
f012b8a9:	c1 e0 02             	shl    $0x2,%eax
f012b8ac:	39 c1                	cmp    %eax,%ecx
f012b8ae:	74 1d                	je     f012b8cd <test_kfreelast+0x186a>
f012b8b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8b4:	75 17                	jne    f012b8cd <test_kfreelast+0x186a>
f012b8b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8bd:	83 ec 0c             	sub    $0xc,%esp
f012b8c0:	68 24 c7 13 f0       	push   $0xf013c724
f012b8c5:	e8 44 54 fd ff       	call   f0100d0e <cprintf>
f012b8ca:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b8cd:	83 ec 0c             	sub    $0xc,%esp
f012b8d0:	6a 03                	push   $0x3
f012b8d2:	e8 22 1c fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012b8d7:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b8da:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b8e0:	05 00 30 00 00       	add    $0x3000,%eax
f012b8e5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b8e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b8ef:	eb 3c                	jmp    f012b92d <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b8f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b8f4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b8f7:	01 d0                	add    %edx,%eax
f012b8f9:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b8fc:	e8 e6 1b fe ff       	call   f010d4e7 <sys_rcr2>
f012b901:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b904:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b907:	01 ca                	add    %ecx,%edx
f012b909:	39 d0                	cmp    %edx,%eax
f012b90b:	74 1d                	je     f012b92a <test_kfreelast+0x18c7>
f012b90d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b911:	75 17                	jne    f012b92a <test_kfreelast+0x18c7>
f012b913:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b91a:	83 ec 0c             	sub    $0xc,%esp
f012b91d:	68 58 c7 13 f0       	push   $0xf013c758
f012b922:	e8 e7 53 fd ff       	call   f0100d0e <cprintf>
f012b927:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b92a:	ff 45 f4             	incl   -0xc(%ebp)
f012b92d:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b934:	7e bb                	jle    f012b8f1 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b936:	83 ec 0c             	sub    $0xc,%esp
f012b939:	6a 00                	push   $0x0
f012b93b:	e8 b9 1b fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012b940:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b943:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b947:	75 17                	jne    f012b960 <test_kfreelast+0x18fd>
f012b949:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b94d:	83 ec 08             	sub    $0x8,%esp
f012b950:	ff 75 f0             	pushl  -0x10(%ebp)
f012b953:	68 ac c5 13 f0       	push   $0xf013c5ac
f012b958:	e8 b1 53 fd ff       	call   f0100d0e <cprintf>
f012b95d:	83 c4 10             	add    $0x10,%esp
f012b960:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b967:	e8 ed 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b96c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b96f:	e8 b3 83 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b974:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b977:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b97d:	83 ec 0c             	sub    $0xc,%esp
f012b980:	50                   	push   %eax
f012b981:	e8 2d c1 fd ff       	call   f0107ab3 <kfree>
f012b986:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b989:	e8 99 83 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b98e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b991:	74 1d                	je     f012b9b0 <test_kfreelast+0x194d>
f012b993:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b997:	75 17                	jne    f012b9b0 <test_kfreelast+0x194d>
f012b999:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9a0:	83 ec 0c             	sub    $0xc,%esp
f012b9a3:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012b9a8:	e8 61 53 fd ff       	call   f0100d0e <cprintf>
f012b9ad:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b9b0:	e8 a4 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b9b5:	89 c2                	mov    %eax,%edx
f012b9b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9ba:	29 c2                	sub    %eax,%edx
f012b9bc:	89 d0                	mov    %edx,%eax
f012b9be:	83 f8 03             	cmp    $0x3,%eax
f012b9c1:	74 1d                	je     f012b9e0 <test_kfreelast+0x197d>
f012b9c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9c7:	75 17                	jne    f012b9e0 <test_kfreelast+0x197d>
f012b9c9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9d0:	83 ec 0c             	sub    $0xc,%esp
f012b9d3:	68 40 c6 13 f0       	push   $0xf013c640
f012b9d8:	e8 31 53 fd ff       	call   f0100d0e <cprintf>
f012b9dd:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9e0:	e8 74 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b9e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b9e8:	e8 3a 83 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012b9ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b9f0:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b9f6:	83 ec 0c             	sub    $0xc,%esp
f012b9f9:	50                   	push   %eax
f012b9fa:	e8 b4 c0 fd ff       	call   f0107ab3 <kfree>
f012b9ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba02:	e8 20 83 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ba07:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba0a:	74 1d                	je     f012ba29 <test_kfreelast+0x19c6>
f012ba0c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba10:	75 17                	jne    f012ba29 <test_kfreelast+0x19c6>
f012ba12:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba19:	83 ec 0c             	sub    $0xc,%esp
f012ba1c:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012ba21:	e8 e8 52 fd ff       	call   f0100d0e <cprintf>
f012ba26:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba29:	e8 2b 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ba2e:	89 c2                	mov    %eax,%edx
f012ba30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba33:	29 c2                	sub    %eax,%edx
f012ba35:	89 d0                	mov    %edx,%eax
f012ba37:	83 f8 04             	cmp    $0x4,%eax
f012ba3a:	74 1d                	je     f012ba59 <test_kfreelast+0x19f6>
f012ba3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba40:	75 17                	jne    f012ba59 <test_kfreelast+0x19f6>
f012ba42:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba49:	83 ec 0c             	sub    $0xc,%esp
f012ba4c:	68 40 c6 13 f0       	push   $0xf013c640
f012ba51:	e8 b8 52 fd ff       	call   f0100d0e <cprintf>
f012ba56:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba59:	e8 fb 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ba5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba61:	e8 c1 82 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ba66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ba69:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ba6f:	83 ec 0c             	sub    $0xc,%esp
f012ba72:	50                   	push   %eax
f012ba73:	e8 3b c0 fd ff       	call   f0107ab3 <kfree>
f012ba78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba7b:	e8 a7 82 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012ba80:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba83:	74 1d                	je     f012baa2 <test_kfreelast+0x1a3f>
f012ba85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba89:	75 17                	jne    f012baa2 <test_kfreelast+0x1a3f>
f012ba8b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba92:	83 ec 0c             	sub    $0xc,%esp
f012ba95:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012ba9a:	e8 6f 52 fd ff       	call   f0100d0e <cprintf>
f012ba9f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012baa2:	e8 b2 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012baa7:	89 c2                	mov    %eax,%edx
f012baa9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012baac:	29 c2                	sub    %eax,%edx
f012baae:	89 d0                	mov    %edx,%eax
f012bab0:	83 f8 05             	cmp    $0x5,%eax
f012bab3:	74 1d                	je     f012bad2 <test_kfreelast+0x1a6f>
f012bab5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bab9:	75 17                	jne    f012bad2 <test_kfreelast+0x1a6f>
f012babb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bac2:	83 ec 0c             	sub    $0xc,%esp
f012bac5:	68 40 c6 13 f0       	push   $0xf013c640
f012baca:	e8 3f 52 fd ff       	call   f0100d0e <cprintf>
f012bacf:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012bad2:	e8 82 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bad7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bada:	e8 48 82 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012badf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012bae2:	83 ec 0c             	sub    $0xc,%esp
f012bae5:	68 00 c8 00 00       	push   $0xc800
f012baea:	e8 7b be fd ff       	call   f010796a <kmalloc>
f012baef:	83 c4 10             	add    $0x10,%esp
f012baf2:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012baf8:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bafe:	89 c1                	mov    %eax,%ecx
f012bb00:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012bb07:	10 00 00 
f012bb0a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012bb10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb15:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012bb1b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb21:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb26:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012bb2c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb32:	29 d0                	sub    %edx,%eax
f012bb34:	89 c3                	mov    %eax,%ebx
f012bb36:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012bb3d:	10 00 00 
f012bb40:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012bb45:	0f b6 d0             	movzbl %al,%edx
f012bb48:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012bb4e:	01 d0                	add    %edx,%eax
f012bb50:	48                   	dec    %eax
f012bb51:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012bb57:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb5d:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb62:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012bb68:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb6e:	29 d0                	sub    %edx,%eax
f012bb70:	01 c3                	add    %eax,%ebx
f012bb72:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012bb79:	10 00 00 
f012bb7c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012bb81:	0f b6 c0             	movzbl %al,%eax
f012bb84:	c1 e0 04             	shl    $0x4,%eax
f012bb87:	89 c2                	mov    %eax,%edx
f012bb89:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012bb8f:	01 d0                	add    %edx,%eax
f012bb91:	48                   	dec    %eax
f012bb92:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012bb98:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bb9e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bba3:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012bba9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bbaf:	29 d0                	sub    %edx,%eax
f012bbb1:	01 d8                	add    %ebx,%eax
f012bbb3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012bbb8:	39 c1                	cmp    %eax,%ecx
f012bbba:	74 1d                	je     f012bbd9 <test_kfreelast+0x1b76>
f012bbbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbc0:	75 17                	jne    f012bbd9 <test_kfreelast+0x1b76>
f012bbc2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbc9:	83 ec 0c             	sub    $0xc,%esp
f012bbcc:	68 78 c6 13 f0       	push   $0xf013c678
f012bbd1:	e8 38 51 fd ff       	call   f0100d0e <cprintf>
f012bbd6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bbd9:	e8 49 81 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012bbde:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbe1:	74 1d                	je     f012bc00 <test_kfreelast+0x1b9d>
f012bbe3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbe7:	75 17                	jne    f012bc00 <test_kfreelast+0x1b9d>
f012bbe9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbf0:	83 ec 0c             	sub    $0xc,%esp
f012bbf3:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012bbf8:	e8 11 51 fd ff       	call   f0100d0e <cprintf>
f012bbfd:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bc00:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bc03:	e8 51 14 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bc08:	29 c3                	sub    %eax,%ebx
f012bc0a:	89 d8                	mov    %ebx,%eax
f012bc0c:	83 f8 0d             	cmp    $0xd,%eax
f012bc0f:	74 1d                	je     f012bc2e <test_kfreelast+0x1bcb>
f012bc11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc15:	75 17                	jne    f012bc2e <test_kfreelast+0x1bcb>
f012bc17:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc1e:	83 ec 0c             	sub    $0xc,%esp
f012bc21:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bc26:	e8 e3 50 fd ff       	call   f0100d0e <cprintf>
f012bc2b:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012bc2e:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012bc35:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012bc38:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bc3e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012bc41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bc48:	eb 0e                	jmp    f012bc58 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012bc4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bc4d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bc50:	01 d0                	add    %edx,%eax
f012bc52:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012bc55:	ff 45 f4             	incl   -0xc(%ebp)
f012bc58:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012bc5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc61:	7f e7                	jg     f012bc4a <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc63:	e8 f1 13 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bc68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc6b:	e8 b7 80 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012bc70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012bc73:	83 ec 0c             	sub    $0xc,%esp
f012bc76:	68 00 fc 2f 00       	push   $0x2ffc00
f012bc7b:	e8 ea bc fd ff       	call   f010796a <kmalloc>
f012bc80:	83 c4 10             	add    $0x10,%esp
f012bc83:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bc89:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bc8f:	89 c1                	mov    %eax,%ecx
f012bc91:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012bc98:	10 00 00 
f012bc9b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bca1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bca6:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012bcac:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bcb2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcb7:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012bcbd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bcc3:	29 d0                	sub    %edx,%eax
f012bcc5:	89 c3                	mov    %eax,%ebx
f012bcc7:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012bcce:	10 00 00 
f012bcd1:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012bcd6:	0f b6 d0             	movzbl %al,%edx
f012bcd9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcdf:	01 d0                	add    %edx,%eax
f012bce1:	48                   	dec    %eax
f012bce2:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012bce8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bcee:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcf3:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012bcf9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bcff:	29 d0                	sub    %edx,%eax
f012bd01:	01 c3                	add    %eax,%ebx
f012bd03:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012bd0a:	10 00 00 
f012bd0d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012bd12:	0f b6 c0             	movzbl %al,%eax
f012bd15:	c1 e0 04             	shl    $0x4,%eax
f012bd18:	89 c2                	mov    %eax,%edx
f012bd1a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bd20:	01 d0                	add    %edx,%eax
f012bd22:	48                   	dec    %eax
f012bd23:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012bd29:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd2f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd34:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012bd3a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd40:	29 d0                	sub    %edx,%eax
f012bd42:	01 d8                	add    %ebx,%eax
f012bd44:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012bd49:	39 c1                	cmp    %eax,%ecx
f012bd4b:	74 1d                	je     f012bd6a <test_kfreelast+0x1d07>
f012bd4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd51:	75 17                	jne    f012bd6a <test_kfreelast+0x1d07>
f012bd53:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd5a:	83 ec 0c             	sub    $0xc,%esp
f012bd5d:	68 78 c6 13 f0       	push   $0xf013c678
f012bd62:	e8 a7 4f fd ff       	call   f0100d0e <cprintf>
f012bd67:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd6a:	e8 b8 7f fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012bd6f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd72:	74 1d                	je     f012bd91 <test_kfreelast+0x1d2e>
f012bd74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd78:	75 17                	jne    f012bd91 <test_kfreelast+0x1d2e>
f012bd7a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd81:	83 ec 0c             	sub    $0xc,%esp
f012bd84:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012bd89:	e8 80 4f fd ff       	call   f0100d0e <cprintf>
f012bd8e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bd91:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bd94:	e8 c0 12 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bd99:	29 c3                	sub    %eax,%ebx
f012bd9b:	89 d8                	mov    %ebx,%eax
f012bd9d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bda2:	74 1d                	je     f012bdc1 <test_kfreelast+0x1d5e>
f012bda4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bda8:	75 17                	jne    f012bdc1 <test_kfreelast+0x1d5e>
f012bdaa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdb1:	83 ec 0c             	sub    $0xc,%esp
f012bdb4:	68 e0 c6 13 f0       	push   $0xf013c6e0
f012bdb9:	e8 50 4f fd ff       	call   f0100d0e <cprintf>
f012bdbe:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012bdc1:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012bdc8:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012bdcb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bdd1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bdd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bddb:	eb 0e                	jmp    f012bdeb <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012bddd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bde0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bde3:	01 d0                	add    %edx,%eax
f012bde5:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bde8:	ff 45 f4             	incl   -0xc(%ebp)
f012bdeb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bdf1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bdf4:	7f e7                	jg     f012bddd <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bdf6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdfa:	75 17                	jne    f012be13 <test_kfreelast+0x1db0>
f012bdfc:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012be00:	83 ec 08             	sub    $0x8,%esp
f012be03:	ff 75 f0             	pushl  -0x10(%ebp)
f012be06:	68 ac c5 13 f0       	push   $0xf013c5ac
f012be0b:	e8 fe 4e fd ff       	call   f0100d0e <cprintf>
f012be10:	83 c4 10             	add    $0x10,%esp
f012be13:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012be1a:	e8 3a 12 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012be1f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be22:	e8 00 7f fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012be27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012be2a:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012be30:	83 ec 0c             	sub    $0xc,%esp
f012be33:	50                   	push   %eax
f012be34:	e8 7a bc fd ff       	call   f0107ab3 <kfree>
f012be39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be3c:	e8 e6 7e fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012be41:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be44:	74 1d                	je     f012be63 <test_kfreelast+0x1e00>
f012be46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be4a:	75 17                	jne    f012be63 <test_kfreelast+0x1e00>
f012be4c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be53:	83 ec 0c             	sub    $0xc,%esp
f012be56:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012be5b:	e8 ae 4e fd ff       	call   f0100d0e <cprintf>
f012be60:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012be63:	e8 f1 11 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012be68:	89 c2                	mov    %eax,%edx
f012be6a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be6d:	29 c2                	sub    %eax,%edx
f012be6f:	89 d0                	mov    %edx,%eax
f012be71:	83 f8 0d             	cmp    $0xd,%eax
f012be74:	74 1d                	je     f012be93 <test_kfreelast+0x1e30>
f012be76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be7a:	75 17                	jne    f012be93 <test_kfreelast+0x1e30>
f012be7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be83:	83 ec 0c             	sub    $0xc,%esp
f012be86:	68 40 c6 13 f0       	push   $0xf013c640
f012be8b:	e8 7e 4e fd ff       	call   f0100d0e <cprintf>
f012be90:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012be93:	83 ec 0c             	sub    $0xc,%esp
f012be96:	6a 03                	push   $0x3
f012be98:	e8 5c 16 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012be9d:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bea0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bea6:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bea9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012beb0:	eb 3c                	jmp    f012beee <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012beb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012beb5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012beb8:	01 d0                	add    %edx,%eax
f012beba:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bebd:	e8 25 16 fe ff       	call   f010d4e7 <sys_rcr2>
f012bec2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bec5:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bec8:	01 ca                	add    %ecx,%edx
f012beca:	39 d0                	cmp    %edx,%eax
f012becc:	74 1d                	je     f012beeb <test_kfreelast+0x1e88>
f012bece:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bed2:	75 17                	jne    f012beeb <test_kfreelast+0x1e88>
f012bed4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bedb:	83 ec 0c             	sub    $0xc,%esp
f012bede:	68 58 c7 13 f0       	push   $0xf013c758
f012bee3:	e8 26 4e fd ff       	call   f0100d0e <cprintf>
f012bee8:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012beeb:	ff 45 f4             	incl   -0xc(%ebp)
f012beee:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bef5:	7e bb                	jle    f012beb2 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bef7:	83 ec 0c             	sub    $0xc,%esp
f012befa:	6a 00                	push   $0x0
f012befc:	e8 f8 15 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012bf01:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bf04:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bf0a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bf0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf14:	eb 1e                	jmp    f012bf34 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bf16:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bf1c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bf1f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf22:	01 c8                	add    %ecx,%eax
f012bf24:	8a 00                	mov    (%eax),%al
f012bf26:	0f be c0             	movsbl %al,%eax
f012bf29:	01 d0                	add    %edx,%eax
f012bf2b:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bf31:	ff 45 f4             	incl   -0xc(%ebp)
f012bf34:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bf3a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bf3d:	7f d7                	jg     f012bf16 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bf3f:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bf45:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bf4b:	89 d0                	mov    %edx,%eax
f012bf4d:	01 c0                	add    %eax,%eax
f012bf4f:	01 d0                	add    %edx,%eax
f012bf51:	01 c0                	add    %eax,%eax
f012bf53:	01 d0                	add    %edx,%eax
f012bf55:	01 c0                	add    %eax,%eax
f012bf57:	39 c1                	cmp    %eax,%ecx
f012bf59:	74 1d                	je     f012bf78 <test_kfreelast+0x1f15>
f012bf5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf5f:	75 17                	jne    f012bf78 <test_kfreelast+0x1f15>
f012bf61:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf68:	83 ec 0c             	sub    $0xc,%esp
f012bf6b:	68 24 c7 13 f0       	push   $0xf013c724
f012bf70:	e8 99 4d fd ff       	call   f0100d0e <cprintf>
f012bf75:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bf78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf7c:	75 17                	jne    f012bf95 <test_kfreelast+0x1f32>
f012bf7e:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bf82:	83 ec 08             	sub    $0x8,%esp
f012bf85:	ff 75 f0             	pushl  -0x10(%ebp)
f012bf88:	68 ac c5 13 f0       	push   $0xf013c5ac
f012bf8d:	e8 7c 4d fd ff       	call   f0100d0e <cprintf>
f012bf92:	83 c4 10             	add    $0x10,%esp
f012bf95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bf9c:	e8 b8 10 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bfa1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfa4:	e8 7e 7d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012bfa9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bfac:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bfb2:	83 ec 0c             	sub    $0xc,%esp
f012bfb5:	50                   	push   %eax
f012bfb6:	e8 f8 ba fd ff       	call   f0107ab3 <kfree>
f012bfbb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfbe:	e8 64 7d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012bfc3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfc6:	74 1d                	je     f012bfe5 <test_kfreelast+0x1f82>
f012bfc8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfcc:	75 17                	jne    f012bfe5 <test_kfreelast+0x1f82>
f012bfce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bfd5:	83 ec 0c             	sub    $0xc,%esp
f012bfd8:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012bfdd:	e8 2c 4d fd ff       	call   f0100d0e <cprintf>
f012bfe2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bfe5:	e8 6f 10 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bfea:	89 c2                	mov    %eax,%edx
f012bfec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bfef:	29 c2                	sub    %eax,%edx
f012bff1:	89 d0                	mov    %edx,%eax
f012bff3:	83 f8 02             	cmp    $0x2,%eax
f012bff6:	74 1d                	je     f012c015 <test_kfreelast+0x1fb2>
f012bff8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bffc:	75 17                	jne    f012c015 <test_kfreelast+0x1fb2>
f012bffe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c005:	83 ec 0c             	sub    $0xc,%esp
f012c008:	68 40 c6 13 f0       	push   $0xf013c640
f012c00d:	e8 fc 4c fd ff       	call   f0100d0e <cprintf>
f012c012:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c015:	e8 3f 10 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c01a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c01d:	e8 05 7d fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c022:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012c025:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012c02b:	83 ec 0c             	sub    $0xc,%esp
f012c02e:	50                   	push   %eax
f012c02f:	e8 7f ba fd ff       	call   f0107ab3 <kfree>
f012c034:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c037:	e8 eb 7c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c03c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c03f:	74 1d                	je     f012c05e <test_kfreelast+0x1ffb>
f012c041:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c045:	75 17                	jne    f012c05e <test_kfreelast+0x1ffb>
f012c047:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c04e:	83 ec 0c             	sub    $0xc,%esp
f012c051:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c056:	e8 b3 4c fd ff       	call   f0100d0e <cprintf>
f012c05b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c05e:	e8 f6 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c063:	89 c2                	mov    %eax,%edx
f012c065:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c068:	29 c2                	sub    %eax,%edx
f012c06a:	89 d0                	mov    %edx,%eax
f012c06c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c071:	74 1d                	je     f012c090 <test_kfreelast+0x202d>
f012c073:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c077:	75 17                	jne    f012c090 <test_kfreelast+0x202d>
f012c079:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c080:	83 ec 0c             	sub    $0xc,%esp
f012c083:	68 40 c6 13 f0       	push   $0xf013c640
f012c088:	e8 81 4c fd ff       	call   f0100d0e <cprintf>
f012c08d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c090:	e8 c4 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c095:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c098:	e8 8a 7c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c09d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012c0a0:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012c0a6:	83 ec 0c             	sub    $0xc,%esp
f012c0a9:	50                   	push   %eax
f012c0aa:	e8 04 ba fd ff       	call   f0107ab3 <kfree>
f012c0af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0b2:	e8 70 7c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c0b7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0ba:	74 1d                	je     f012c0d9 <test_kfreelast+0x2076>
f012c0bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0c0:	75 17                	jne    f012c0d9 <test_kfreelast+0x2076>
f012c0c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0c9:	83 ec 0c             	sub    $0xc,%esp
f012c0cc:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c0d1:	e8 38 4c fd ff       	call   f0100d0e <cprintf>
f012c0d6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c0d9:	e8 7b 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c0de:	89 c2                	mov    %eax,%edx
f012c0e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0e3:	29 c2                	sub    %eax,%edx
f012c0e5:	89 d0                	mov    %edx,%eax
f012c0e7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c0ec:	74 1d                	je     f012c10b <test_kfreelast+0x20a8>
f012c0ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0f2:	75 17                	jne    f012c10b <test_kfreelast+0x20a8>
f012c0f4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0fb:	83 ec 0c             	sub    $0xc,%esp
f012c0fe:	68 40 c6 13 f0       	push   $0xf013c640
f012c103:	e8 06 4c fd ff       	call   f0100d0e <cprintf>
f012c108:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c10b:	e8 49 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c110:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c113:	e8 0f 7c fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c118:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c11b:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c121:	83 ec 0c             	sub    $0xc,%esp
f012c124:	50                   	push   %eax
f012c125:	e8 89 b9 fd ff       	call   f0107ab3 <kfree>
f012c12a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c12d:	e8 f5 7b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c132:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c135:	74 1d                	je     f012c154 <test_kfreelast+0x20f1>
f012c137:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c13b:	75 17                	jne    f012c154 <test_kfreelast+0x20f1>
f012c13d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c144:	83 ec 0c             	sub    $0xc,%esp
f012c147:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c14c:	e8 bd 4b fd ff       	call   f0100d0e <cprintf>
f012c151:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c154:	e8 00 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c159:	89 c2                	mov    %eax,%edx
f012c15b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c15e:	29 c2                	sub    %eax,%edx
f012c160:	89 d0                	mov    %edx,%eax
f012c162:	83 f8 01             	cmp    $0x1,%eax
f012c165:	74 1d                	je     f012c184 <test_kfreelast+0x2121>
f012c167:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c16b:	75 17                	jne    f012c184 <test_kfreelast+0x2121>
f012c16d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c174:	83 ec 0c             	sub    $0xc,%esp
f012c177:	68 40 c6 13 f0       	push   $0xf013c640
f012c17c:	e8 8d 4b fd ff       	call   f0100d0e <cprintf>
f012c181:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c184:	e8 d0 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c189:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c18c:	e8 96 7b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c191:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012c194:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012c19a:	83 ec 0c             	sub    $0xc,%esp
f012c19d:	50                   	push   %eax
f012c19e:	e8 10 b9 fd ff       	call   f0107ab3 <kfree>
f012c1a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c1a6:	e8 7c 7b fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c1ab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c1ae:	74 1d                	je     f012c1cd <test_kfreelast+0x216a>
f012c1b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1b4:	75 17                	jne    f012c1cd <test_kfreelast+0x216a>
f012c1b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1bd:	83 ec 0c             	sub    $0xc,%esp
f012c1c0:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c1c5:	e8 44 4b fd ff       	call   f0100d0e <cprintf>
f012c1ca:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c1cd:	e8 87 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c1d2:	89 c2                	mov    %eax,%edx
f012c1d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c1d7:	29 c2                	sub    %eax,%edx
f012c1d9:	89 d0                	mov    %edx,%eax
f012c1db:	83 f8 01             	cmp    $0x1,%eax
f012c1de:	74 1d                	je     f012c1fd <test_kfreelast+0x219a>
f012c1e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1e4:	75 17                	jne    f012c1fd <test_kfreelast+0x219a>
f012c1e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1ed:	83 ec 0c             	sub    $0xc,%esp
f012c1f0:	68 40 c6 13 f0       	push   $0xf013c640
f012c1f5:	e8 14 4b fd ff       	call   f0100d0e <cprintf>
f012c1fa:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012c1fd:	e8 57 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c202:	89 c2                	mov    %eax,%edx
f012c204:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c207:	39 c2                	cmp    %eax,%edx
f012c209:	74 1d                	je     f012c228 <test_kfreelast+0x21c5>
f012c20b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c20f:	75 17                	jne    f012c228 <test_kfreelast+0x21c5>
f012c211:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c218:	83 ec 0c             	sub    $0xc,%esp
f012c21b:	68 a0 c7 13 f0       	push   $0xf013c7a0
f012c220:	e8 e9 4a fd ff       	call   f0100d0e <cprintf>
f012c225:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012c228:	83 ec 0c             	sub    $0xc,%esp
f012c22b:	6a 03                	push   $0x3
f012c22d:	e8 c7 12 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012c232:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012c235:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c23c:	e9 8e 00 00 00       	jmp    f012c2cf <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012c241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c244:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012c24b:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012c24e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c251:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c254:	e8 8e 12 fe ff       	call   f010d4e7 <sys_rcr2>
f012c259:	89 c2                	mov    %eax,%edx
f012c25b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c25e:	39 c2                	cmp    %eax,%edx
f012c260:	74 1d                	je     f012c27f <test_kfreelast+0x221c>
f012c262:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c266:	75 17                	jne    f012c27f <test_kfreelast+0x221c>
f012c268:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c26f:	83 ec 0c             	sub    $0xc,%esp
f012c272:	68 58 c7 13 f0       	push   $0xf013c758
f012c277:	e8 92 4a fd ff       	call   f0100d0e <cprintf>
f012c27c:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012c27f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c282:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c289:	89 c2                	mov    %eax,%edx
f012c28b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c28e:	01 d0                	add    %edx,%eax
f012c290:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c293:	e8 4f 12 fe ff       	call   f010d4e7 <sys_rcr2>
f012c298:	89 c2                	mov    %eax,%edx
f012c29a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c29d:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c2a4:	89 c1                	mov    %eax,%ecx
f012c2a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2a9:	01 c8                	add    %ecx,%eax
f012c2ab:	39 c2                	cmp    %eax,%edx
f012c2ad:	74 1d                	je     f012c2cc <test_kfreelast+0x2269>
f012c2af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2b3:	75 17                	jne    f012c2cc <test_kfreelast+0x2269>
f012c2b5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2bc:	83 ec 0c             	sub    $0xc,%esp
f012c2bf:	68 58 c7 13 f0       	push   $0xf013c758
f012c2c4:	e8 45 4a fd ff       	call   f0100d0e <cprintf>
f012c2c9:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012c2cc:	ff 45 f4             	incl   -0xc(%ebp)
f012c2cf:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012c2d3:	0f 8e 68 ff ff ff    	jle    f012c241 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012c2d9:	83 ec 0c             	sub    $0xc,%esp
f012c2dc:	6a 00                	push   $0x0
f012c2de:	e8 16 12 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012c2e3:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012c2e6:	e8 6e 0d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c2eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c2ee:	e8 34 7a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c2f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012c2f6:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012c2fc:	83 ec 0c             	sub    $0xc,%esp
f012c2ff:	50                   	push   %eax
f012c300:	e8 ae b7 fd ff       	call   f0107ab3 <kfree>
f012c305:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c308:	e8 1a 7a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c30d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c310:	74 1d                	je     f012c32f <test_kfreelast+0x22cc>
f012c312:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c316:	75 17                	jne    f012c32f <test_kfreelast+0x22cc>
f012c318:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c31f:	83 ec 0c             	sub    $0xc,%esp
f012c322:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c327:	e8 e2 49 fd ff       	call   f0100d0e <cprintf>
f012c32c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c32f:	e8 25 0d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c334:	89 c2                	mov    %eax,%edx
f012c336:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c339:	39 c2                	cmp    %eax,%edx
f012c33b:	74 1d                	je     f012c35a <test_kfreelast+0x22f7>
f012c33d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c341:	75 17                	jne    f012c35a <test_kfreelast+0x22f7>
f012c343:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c34a:	83 ec 0c             	sub    $0xc,%esp
f012c34d:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c352:	e8 b7 49 fd ff       	call   f0100d0e <cprintf>
f012c357:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c35a:	e8 fa 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c35f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c362:	e8 c0 79 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c367:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c36a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c370:	83 ec 0c             	sub    $0xc,%esp
f012c373:	50                   	push   %eax
f012c374:	e8 3a b7 fd ff       	call   f0107ab3 <kfree>
f012c379:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c37c:	e8 a6 79 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c381:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c384:	74 1d                	je     f012c3a3 <test_kfreelast+0x2340>
f012c386:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c38a:	75 17                	jne    f012c3a3 <test_kfreelast+0x2340>
f012c38c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c393:	83 ec 0c             	sub    $0xc,%esp
f012c396:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c39b:	e8 6e 49 fd ff       	call   f0100d0e <cprintf>
f012c3a0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c3a3:	e8 b1 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c3a8:	89 c2                	mov    %eax,%edx
f012c3aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c3ad:	39 c2                	cmp    %eax,%edx
f012c3af:	74 1d                	je     f012c3ce <test_kfreelast+0x236b>
f012c3b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3b5:	75 17                	jne    f012c3ce <test_kfreelast+0x236b>
f012c3b7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3be:	83 ec 0c             	sub    $0xc,%esp
f012c3c1:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c3c6:	e8 43 49 fd ff       	call   f0100d0e <cprintf>
f012c3cb:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c3ce:	e8 86 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c3d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c3d6:	e8 4c 79 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c3db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c3de:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c3e4:	83 ec 0c             	sub    $0xc,%esp
f012c3e7:	50                   	push   %eax
f012c3e8:	e8 c6 b6 fd ff       	call   f0107ab3 <kfree>
f012c3ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c3f0:	e8 32 79 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c3f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c3f8:	74 1d                	je     f012c417 <test_kfreelast+0x23b4>
f012c3fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3fe:	75 17                	jne    f012c417 <test_kfreelast+0x23b4>
f012c400:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c407:	83 ec 0c             	sub    $0xc,%esp
f012c40a:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c40f:	e8 fa 48 fd ff       	call   f0100d0e <cprintf>
f012c414:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c417:	e8 3d 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c41c:	89 c2                	mov    %eax,%edx
f012c41e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c421:	39 c2                	cmp    %eax,%edx
f012c423:	74 1d                	je     f012c442 <test_kfreelast+0x23df>
f012c425:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c429:	75 17                	jne    f012c442 <test_kfreelast+0x23df>
f012c42b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c432:	83 ec 0c             	sub    $0xc,%esp
f012c435:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c43a:	e8 cf 48 fd ff       	call   f0100d0e <cprintf>
f012c43f:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c442:	e8 12 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c447:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c44a:	e8 d8 78 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c44f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c452:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c458:	83 ec 0c             	sub    $0xc,%esp
f012c45b:	50                   	push   %eax
f012c45c:	e8 52 b6 fd ff       	call   f0107ab3 <kfree>
f012c461:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c464:	e8 be 78 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012c469:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c46c:	74 1d                	je     f012c48b <test_kfreelast+0x2428>
f012c46e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c472:	75 17                	jne    f012c48b <test_kfreelast+0x2428>
f012c474:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c47b:	83 ec 0c             	sub    $0xc,%esp
f012c47e:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012c483:	e8 86 48 fd ff       	call   f0100d0e <cprintf>
f012c488:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c48b:	e8 c9 0b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c490:	89 c2                	mov    %eax,%edx
f012c492:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c495:	39 c2                	cmp    %eax,%edx
f012c497:	74 1d                	je     f012c4b6 <test_kfreelast+0x2453>
f012c499:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c49d:	75 17                	jne    f012c4b6 <test_kfreelast+0x2453>
f012c49f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c4a6:	83 ec 0c             	sub    $0xc,%esp
f012c4a9:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c4ae:	e8 5b 48 fd ff       	call   f0100d0e <cprintf>
f012c4b3:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c4b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4ba:	75 17                	jne    f012c4d3 <test_kfreelast+0x2470>
f012c4bc:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c4c0:	83 ec 08             	sub    $0x8,%esp
f012c4c3:	ff 75 f0             	pushl  -0x10(%ebp)
f012c4c6:	68 ac c5 13 f0       	push   $0xf013c5ac
f012c4cb:	e8 3e 48 fd ff       	call   f0100d0e <cprintf>
f012c4d0:	83 c4 10             	add    $0x10,%esp
f012c4d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c4da:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c4df:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c4e2:	5b                   	pop    %ebx
f012c4e3:	5f                   	pop    %edi
f012c4e4:	5d                   	pop    %ebp
f012c4e5:	c3                   	ret    

f012c4e6 <test_krealloc>:

int test_krealloc() {
f012c4e6:	55                   	push   %ebp
f012c4e7:	89 e5                	mov    %esp,%ebp
f012c4e9:	57                   	push   %edi
f012c4ea:	53                   	push   %ebx
f012c4eb:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c4f1:	83 ec 0c             	sub    $0xc,%esp
f012c4f4:	68 bc b4 13 f0       	push   $0xf013b4bc
f012c4f9:	e8 10 48 fd ff       	call   f0100d0e <cprintf>
f012c4fe:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c501:	83 ec 0c             	sub    $0xc,%esp
f012c504:	68 ec b4 13 f0       	push   $0xf013b4ec
f012c509:	e8 00 48 fd ff       	call   f0100d0e <cprintf>
f012c50e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c511:	83 ec 0c             	sub    $0xc,%esp
f012c514:	68 bc b4 13 f0       	push   $0xf013b4bc
f012c519:	e8 f0 47 fd ff       	call   f0100d0e <cprintf>
f012c51e:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c521:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c525:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c529:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c52f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c535:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c53c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c543:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c549:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c54e:	b8 00 00 00 00       	mov    $0x0,%eax
f012c553:	89 d7                	mov    %edx,%edi
f012c555:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c557:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c55e:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c564:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c569:	b8 00 00 00 00       	mov    $0x0,%eax
f012c56e:	89 d7                	mov    %edx,%edi
f012c570:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c572:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c578:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c57d:	b8 00 00 00 00       	mov    $0x0,%eax
f012c582:	89 d7                	mov    %edx,%edi
f012c584:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c586:	e8 ce 0a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c58b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c58e:	83 ec 08             	sub    $0x8,%esp
f012c591:	68 00 fc 0f 00       	push   $0xffc00
f012c596:	6a 00                	push   $0x0
f012c598:	e8 d9 b6 fd ff       	call   f0107c76 <krealloc>
f012c59d:	83 c4 10             	add    $0x10,%esp
f012c5a0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c5a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5ac:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c5b1:	77 17                	ja     f012c5ca <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5b3:	83 ec 04             	sub    $0x4,%esp
f012c5b6:	68 20 c8 13 f0       	push   $0xf013c820
f012c5bb:	68 e2 0e 00 00       	push   $0xee2
f012c5c0:	68 7a b5 13 f0       	push   $0xf013b57a
f012c5c5:	e8 3b 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c5ca:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5d0:	89 c1                	mov    %eax,%ecx
f012c5d2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c5d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c5dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c5e1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c5e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c5e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5ec:	f7 75 b4             	divl   -0x4c(%ebp)
f012c5ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c5f2:	29 d0                	sub    %edx,%eax
f012c5f4:	89 c3                	mov    %eax,%ebx
f012c5f6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c5fd:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c602:	0f b6 d0             	movzbl %al,%edx
f012c605:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c608:	01 d0                	add    %edx,%eax
f012c60a:	48                   	dec    %eax
f012c60b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c60e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c611:	ba 00 00 00 00       	mov    $0x0,%edx
f012c616:	f7 75 ac             	divl   -0x54(%ebp)
f012c619:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c61c:	29 d0                	sub    %edx,%eax
f012c61e:	01 c3                	add    %eax,%ebx
f012c620:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c627:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c62c:	0f b6 c0             	movzbl %al,%eax
f012c62f:	c1 e0 04             	shl    $0x4,%eax
f012c632:	89 c2                	mov    %eax,%edx
f012c634:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c637:	01 d0                	add    %edx,%eax
f012c639:	48                   	dec    %eax
f012c63a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c63d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c640:	ba 00 00 00 00       	mov    $0x0,%edx
f012c645:	f7 75 a4             	divl   -0x5c(%ebp)
f012c648:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c64b:	29 d0                	sub    %edx,%eax
f012c64d:	01 d8                	add    %ebx,%eax
f012c64f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c654:	39 c1                	cmp    %eax,%ecx
f012c656:	74 17                	je     f012c66f <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c658:	83 ec 04             	sub    $0x4,%esp
f012c65b:	68 5c c8 13 f0       	push   $0xf013c85c
f012c660:	68 e4 0e 00 00       	push   $0xee4
f012c665:	68 7a b5 13 f0       	push   $0xf013b57a
f012c66a:	e8 96 3b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c66f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c672:	e8 e2 09 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c677:	29 c3                	sub    %eax,%ebx
f012c679:	89 d8                	mov    %ebx,%eax
f012c67b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c680:	74 17                	je     f012c699 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c682:	83 ec 04             	sub    $0x4,%esp
f012c685:	68 8e c8 13 f0       	push   $0xf013c88e
f012c68a:	68 e7 0e 00 00       	push   $0xee7
f012c68f:	68 7a b5 13 f0       	push   $0xf013b57a
f012c694:	e8 6c 3b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c699:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c6a0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c6a3:	e8 b1 09 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c6a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c6ab:	83 ec 08             	sub    $0x8,%esp
f012c6ae:	68 00 fc 0f 00       	push   $0xffc00
f012c6b3:	6a 00                	push   $0x0
f012c6b5:	e8 bc b5 fd ff       	call   f0107c76 <krealloc>
f012c6ba:	83 c4 10             	add    $0x10,%esp
f012c6bd:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c6c3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6c9:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c6ce:	77 17                	ja     f012c6e7 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6d0:	83 ec 04             	sub    $0x4,%esp
f012c6d3:	68 20 c8 13 f0       	push   $0xf013c820
f012c6d8:	68 ef 0e 00 00       	push   $0xeef
f012c6dd:	68 7a b5 13 f0       	push   $0xf013b57a
f012c6e2:	e8 1e 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c6e7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6ed:	89 c1                	mov    %eax,%ecx
f012c6ef:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c6f6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c6f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c6fe:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c701:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c704:	ba 00 00 00 00       	mov    $0x0,%edx
f012c709:	f7 75 9c             	divl   -0x64(%ebp)
f012c70c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c70f:	29 d0                	sub    %edx,%eax
f012c711:	89 c3                	mov    %eax,%ebx
f012c713:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c71a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c71f:	0f b6 d0             	movzbl %al,%edx
f012c722:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c725:	01 d0                	add    %edx,%eax
f012c727:	48                   	dec    %eax
f012c728:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c72b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c72e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c733:	f7 75 94             	divl   -0x6c(%ebp)
f012c736:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c739:	29 d0                	sub    %edx,%eax
f012c73b:	01 c3                	add    %eax,%ebx
f012c73d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c744:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c749:	0f b6 c0             	movzbl %al,%eax
f012c74c:	c1 e0 04             	shl    $0x4,%eax
f012c74f:	89 c2                	mov    %eax,%edx
f012c751:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c754:	01 d0                	add    %edx,%eax
f012c756:	48                   	dec    %eax
f012c757:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c75a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c75d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c762:	f7 75 8c             	divl   -0x74(%ebp)
f012c765:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c768:	29 d0                	sub    %edx,%eax
f012c76a:	01 d8                	add    %ebx,%eax
f012c76c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c771:	39 c1                	cmp    %eax,%ecx
f012c773:	74 17                	je     f012c78c <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c775:	83 ec 04             	sub    $0x4,%esp
f012c778:	68 5c c8 13 f0       	push   $0xf013c85c
f012c77d:	68 f1 0e 00 00       	push   $0xef1
f012c782:	68 7a b5 13 f0       	push   $0xf013b57a
f012c787:	e8 79 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c78c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c78f:	e8 c5 08 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c794:	29 c3                	sub    %eax,%ebx
f012c796:	89 d8                	mov    %ebx,%eax
f012c798:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c79d:	74 17                	je     f012c7b6 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c79f:	83 ec 04             	sub    $0x4,%esp
f012c7a2:	68 8e c8 13 f0       	push   $0xf013c88e
f012c7a7:	68 f3 0e 00 00       	push   $0xef3
f012c7ac:	68 7a b5 13 f0       	push   $0xf013b57a
f012c7b1:	e8 4f 3a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c7b6:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c7bd:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7c0:	e8 94 08 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c7c5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c7c8:	83 ec 08             	sub    $0x8,%esp
f012c7cb:	68 00 fc 0f 00       	push   $0xffc00
f012c7d0:	6a 00                	push   $0x0
f012c7d2:	e8 9f b4 fd ff       	call   f0107c76 <krealloc>
f012c7d7:	83 c4 10             	add    $0x10,%esp
f012c7da:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c7e0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c7e6:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c7eb:	77 17                	ja     f012c804 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7ed:	83 ec 04             	sub    $0x4,%esp
f012c7f0:	68 20 c8 13 f0       	push   $0xf013c820
f012c7f5:	68 fb 0e 00 00       	push   $0xefb
f012c7fa:	68 7a b5 13 f0       	push   $0xf013b57a
f012c7ff:	e8 01 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c804:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c80a:	89 c1                	mov    %eax,%ecx
f012c80c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c813:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c816:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c81b:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c81e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c821:	ba 00 00 00 00       	mov    $0x0,%edx
f012c826:	f7 75 84             	divl   -0x7c(%ebp)
f012c829:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c82c:	29 d0                	sub    %edx,%eax
f012c82e:	89 c3                	mov    %eax,%ebx
f012c830:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c837:	10 00 00 
f012c83a:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c83f:	0f b6 d0             	movzbl %al,%edx
f012c842:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c848:	01 d0                	add    %edx,%eax
f012c84a:	48                   	dec    %eax
f012c84b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c851:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c857:	ba 00 00 00 00       	mov    $0x0,%edx
f012c85c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c862:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c868:	29 d0                	sub    %edx,%eax
f012c86a:	01 c3                	add    %eax,%ebx
f012c86c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c873:	10 00 00 
f012c876:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c87b:	0f b6 c0             	movzbl %al,%eax
f012c87e:	c1 e0 04             	shl    $0x4,%eax
f012c881:	89 c2                	mov    %eax,%edx
f012c883:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c889:	01 d0                	add    %edx,%eax
f012c88b:	48                   	dec    %eax
f012c88c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c892:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c898:	ba 00 00 00 00       	mov    $0x0,%edx
f012c89d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c8a3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c8a9:	29 d0                	sub    %edx,%eax
f012c8ab:	01 d8                	add    %ebx,%eax
f012c8ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c8b2:	39 c1                	cmp    %eax,%ecx
f012c8b4:	74 17                	je     f012c8cd <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c8b6:	83 ec 04             	sub    $0x4,%esp
f012c8b9:	68 5c c8 13 f0       	push   $0xf013c85c
f012c8be:	68 fd 0e 00 00       	push   $0xefd
f012c8c3:	68 7a b5 13 f0       	push   $0xf013b57a
f012c8c8:	e8 38 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c8cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c8d0:	e8 84 07 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c8d5:	29 c3                	sub    %eax,%ebx
f012c8d7:	89 d8                	mov    %ebx,%eax
f012c8d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c8de:	74 17                	je     f012c8f7 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c8e0:	83 ec 04             	sub    $0x4,%esp
f012c8e3:	68 8e c8 13 f0       	push   $0xf013c88e
f012c8e8:	68 ff 0e 00 00       	push   $0xeff
f012c8ed:	68 7a b5 13 f0       	push   $0xf013b57a
f012c8f2:	e8 0e 39 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c8f7:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c8fe:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c901:	e8 53 07 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c906:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c909:	83 ec 08             	sub    $0x8,%esp
f012c90c:	68 00 fc 0f 00       	push   $0xffc00
f012c911:	6a 00                	push   $0x0
f012c913:	e8 5e b3 fd ff       	call   f0107c76 <krealloc>
f012c918:	83 c4 10             	add    $0x10,%esp
f012c91b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c921:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c927:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c92c:	77 17                	ja     f012c945 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c92e:	83 ec 04             	sub    $0x4,%esp
f012c931:	68 20 c8 13 f0       	push   $0xf013c820
f012c936:	68 06 0f 00 00       	push   $0xf06
f012c93b:	68 7a b5 13 f0       	push   $0xf013b57a
f012c940:	e8 c0 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c945:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c94b:	89 c1                	mov    %eax,%ecx
f012c94d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c954:	10 00 00 
f012c957:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c95d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c962:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c968:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c96e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c973:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c979:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c97f:	29 d0                	sub    %edx,%eax
f012c981:	89 c3                	mov    %eax,%ebx
f012c983:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c98a:	10 00 00 
f012c98d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c992:	0f b6 d0             	movzbl %al,%edx
f012c995:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c99b:	01 d0                	add    %edx,%eax
f012c99d:	48                   	dec    %eax
f012c99e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c9a4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9af:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c9b5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9bb:	29 d0                	sub    %edx,%eax
f012c9bd:	01 c3                	add    %eax,%ebx
f012c9bf:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c9c6:	10 00 00 
f012c9c9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012c9ce:	0f b6 c0             	movzbl %al,%eax
f012c9d1:	c1 e0 04             	shl    $0x4,%eax
f012c9d4:	89 c2                	mov    %eax,%edx
f012c9d6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c9dc:	01 d0                	add    %edx,%eax
f012c9de:	48                   	dec    %eax
f012c9df:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c9e5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c9eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9f0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c9f6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c9fc:	29 d0                	sub    %edx,%eax
f012c9fe:	01 d8                	add    %ebx,%eax
f012ca00:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012ca05:	39 c1                	cmp    %eax,%ecx
f012ca07:	74 17                	je     f012ca20 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012ca09:	83 ec 04             	sub    $0x4,%esp
f012ca0c:	68 5c c8 13 f0       	push   $0xf013c85c
f012ca11:	68 08 0f 00 00       	push   $0xf08
f012ca16:	68 7a b5 13 f0       	push   $0xf013b57a
f012ca1b:	e8 e5 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ca20:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca23:	e8 31 06 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ca28:	29 c3                	sub    %eax,%ebx
f012ca2a:	89 d8                	mov    %ebx,%eax
f012ca2c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ca31:	74 17                	je     f012ca4a <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012ca33:	83 ec 04             	sub    $0x4,%esp
f012ca36:	68 8e c8 13 f0       	push   $0xf013c88e
f012ca3b:	68 0a 0f 00 00       	push   $0xf0a
f012ca40:	68 7a b5 13 f0       	push   $0xf013b57a
f012ca45:	e8 bb 37 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ca4a:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012ca51:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ca54:	e8 00 06 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ca59:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ca5c:	83 ec 08             	sub    $0x8,%esp
f012ca5f:	68 00 fc 1f 00       	push   $0x1ffc00
f012ca64:	6a 00                	push   $0x0
f012ca66:	e8 0b b2 fd ff       	call   f0107c76 <krealloc>
f012ca6b:	83 c4 10             	add    $0x10,%esp
f012ca6e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ca74:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca7a:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ca7f:	77 17                	ja     f012ca98 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca81:	83 ec 04             	sub    $0x4,%esp
f012ca84:	68 20 c8 13 f0       	push   $0xf013c820
f012ca89:	68 11 0f 00 00       	push   $0xf11
f012ca8e:	68 7a b5 13 f0       	push   $0xf013b57a
f012ca93:	e8 6d 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ca98:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca9e:	89 c1                	mov    %eax,%ecx
f012caa0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012caa7:	10 00 00 
f012caaa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012cab0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cab5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012cabb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cac1:	ba 00 00 00 00       	mov    $0x0,%edx
f012cac6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012cacc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cad2:	29 d0                	sub    %edx,%eax
f012cad4:	89 c3                	mov    %eax,%ebx
f012cad6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012cadd:	10 00 00 
f012cae0:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cae5:	0f b6 d0             	movzbl %al,%edx
f012cae8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012caee:	01 d0                	add    %edx,%eax
f012caf0:	48                   	dec    %eax
f012caf1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012caf7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cafd:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb02:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012cb08:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb0e:	29 d0                	sub    %edx,%eax
f012cb10:	01 c3                	add    %eax,%ebx
f012cb12:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012cb19:	10 00 00 
f012cb1c:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cb21:	0f b6 c0             	movzbl %al,%eax
f012cb24:	c1 e0 04             	shl    $0x4,%eax
f012cb27:	89 c2                	mov    %eax,%edx
f012cb29:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012cb2f:	01 d0                	add    %edx,%eax
f012cb31:	48                   	dec    %eax
f012cb32:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012cb38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb3e:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb43:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012cb49:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb4f:	29 d0                	sub    %edx,%eax
f012cb51:	01 d8                	add    %ebx,%eax
f012cb53:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012cb58:	39 c1                	cmp    %eax,%ecx
f012cb5a:	74 17                	je     f012cb73 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012cb5c:	83 ec 04             	sub    $0x4,%esp
f012cb5f:	68 5c c8 13 f0       	push   $0xf013c85c
f012cb64:	68 13 0f 00 00       	push   $0xf13
f012cb69:	68 7a b5 13 f0       	push   $0xf013b57a
f012cb6e:	e8 92 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cb73:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb76:	e8 de 04 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cb7b:	29 c3                	sub    %eax,%ebx
f012cb7d:	89 d8                	mov    %ebx,%eax
f012cb7f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cb84:	74 17                	je     f012cb9d <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012cb86:	83 ec 04             	sub    $0x4,%esp
f012cb89:	68 8e c8 13 f0       	push   $0xf013c88e
f012cb8e:	68 15 0f 00 00       	push   $0xf15
f012cb93:	68 7a b5 13 f0       	push   $0xf013b57a
f012cb98:	e8 68 36 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cb9d:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012cba4:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cba7:	e8 ad 04 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cbac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012cbaf:	83 ec 08             	sub    $0x8,%esp
f012cbb2:	68 00 fc 1f 00       	push   $0x1ffc00
f012cbb7:	6a 00                	push   $0x0
f012cbb9:	e8 b8 b0 fd ff       	call   f0107c76 <krealloc>
f012cbbe:	83 c4 10             	add    $0x10,%esp
f012cbc1:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012cbc7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cbcd:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012cbd2:	77 17                	ja     f012cbeb <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cbd4:	83 ec 04             	sub    $0x4,%esp
f012cbd7:	68 20 c8 13 f0       	push   $0xf013c820
f012cbdc:	68 1c 0f 00 00       	push   $0xf1c
f012cbe1:	68 7a b5 13 f0       	push   $0xf013b57a
f012cbe6:	e8 1a 36 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012cbeb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cbf1:	89 c1                	mov    %eax,%ecx
f012cbf3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012cbfa:	10 00 00 
f012cbfd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cc03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc08:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cc0e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc14:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc19:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012cc1f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc25:	29 d0                	sub    %edx,%eax
f012cc27:	89 c3                	mov    %eax,%ebx
f012cc29:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012cc30:	10 00 00 
f012cc33:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cc38:	0f b6 d0             	movzbl %al,%edx
f012cc3b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012cc41:	01 d0                	add    %edx,%eax
f012cc43:	48                   	dec    %eax
f012cc44:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012cc4a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc50:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc55:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012cc5b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc61:	29 d0                	sub    %edx,%eax
f012cc63:	01 c3                	add    %eax,%ebx
f012cc65:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012cc6c:	10 00 00 
f012cc6f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cc74:	0f b6 c0             	movzbl %al,%eax
f012cc77:	c1 e0 04             	shl    $0x4,%eax
f012cc7a:	89 c2                	mov    %eax,%edx
f012cc7c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cc82:	01 d0                	add    %edx,%eax
f012cc84:	48                   	dec    %eax
f012cc85:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012cc8b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cc91:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc96:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012cc9c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cca2:	29 d0                	sub    %edx,%eax
f012cca4:	01 d8                	add    %ebx,%eax
f012cca6:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ccab:	39 c1                	cmp    %eax,%ecx
f012ccad:	74 17                	je     f012ccc6 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ccaf:	83 ec 04             	sub    $0x4,%esp
f012ccb2:	68 5c c8 13 f0       	push   $0xf013c85c
f012ccb7:	68 1e 0f 00 00       	push   $0xf1e
f012ccbc:	68 7a b5 13 f0       	push   $0xf013b57a
f012ccc1:	e8 3f 35 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ccc6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ccc9:	e8 8b 03 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ccce:	29 c3                	sub    %eax,%ebx
f012ccd0:	89 d8                	mov    %ebx,%eax
f012ccd2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ccd7:	74 17                	je     f012ccf0 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012ccd9:	83 ec 04             	sub    $0x4,%esp
f012ccdc:	68 8e c8 13 f0       	push   $0xf013c88e
f012cce1:	68 20 0f 00 00       	push   $0xf20
f012cce6:	68 7a b5 13 f0       	push   $0xf013b57a
f012cceb:	e8 15 35 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ccf0:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012ccf7:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ccfa:	e8 5a 03 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ccff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012cd02:	83 ec 08             	sub    $0x8,%esp
f012cd05:	68 00 fc 2f 00       	push   $0x2ffc00
f012cd0a:	6a 00                	push   $0x0
f012cd0c:	e8 65 af fd ff       	call   f0107c76 <krealloc>
f012cd11:	83 c4 10             	add    $0x10,%esp
f012cd14:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012cd1a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd20:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012cd25:	77 17                	ja     f012cd3e <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd27:	83 ec 04             	sub    $0x4,%esp
f012cd2a:	68 20 c8 13 f0       	push   $0xf013c820
f012cd2f:	68 27 0f 00 00       	push   $0xf27
f012cd34:	68 7a b5 13 f0       	push   $0xf013b57a
f012cd39:	e8 c7 34 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012cd3e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd44:	89 c1                	mov    %eax,%ecx
f012cd46:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012cd4d:	10 00 00 
f012cd50:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cd56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cd5b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012cd61:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd67:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd6c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012cd72:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd78:	29 d0                	sub    %edx,%eax
f012cd7a:	89 c3                	mov    %eax,%ebx
f012cd7c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012cd83:	10 00 00 
f012cd86:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cd8b:	0f b6 d0             	movzbl %al,%edx
f012cd8e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012cd94:	01 d0                	add    %edx,%eax
f012cd96:	48                   	dec    %eax
f012cd97:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012cd9d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cda3:	ba 00 00 00 00       	mov    $0x0,%edx
f012cda8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012cdae:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cdb4:	29 d0                	sub    %edx,%eax
f012cdb6:	01 c3                	add    %eax,%ebx
f012cdb8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cdbf:	10 00 00 
f012cdc2:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cdc7:	0f b6 c0             	movzbl %al,%eax
f012cdca:	c1 e0 04             	shl    $0x4,%eax
f012cdcd:	89 c2                	mov    %eax,%edx
f012cdcf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012cdd5:	01 d0                	add    %edx,%eax
f012cdd7:	48                   	dec    %eax
f012cdd8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012cdde:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cde4:	ba 00 00 00 00       	mov    $0x0,%edx
f012cde9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012cdef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cdf5:	29 d0                	sub    %edx,%eax
f012cdf7:	01 d8                	add    %ebx,%eax
f012cdf9:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012cdfe:	39 c1                	cmp    %eax,%ecx
f012ce00:	74 17                	je     f012ce19 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ce02:	83 ec 04             	sub    $0x4,%esp
f012ce05:	68 5c c8 13 f0       	push   $0xf013c85c
f012ce0a:	68 29 0f 00 00       	push   $0xf29
f012ce0f:	68 7a b5 13 f0       	push   $0xf013b57a
f012ce14:	e8 ec 33 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ce19:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce1c:	e8 38 02 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ce21:	29 c3                	sub    %eax,%ebx
f012ce23:	89 d8                	mov    %ebx,%eax
f012ce25:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce2a:	74 17                	je     f012ce43 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ce2c:	83 ec 04             	sub    $0x4,%esp
f012ce2f:	68 c4 b9 13 f0       	push   $0xf013b9c4
f012ce34:	68 2b 0f 00 00       	push   $0xf2b
f012ce39:	68 7a b5 13 f0       	push   $0xf013b57a
f012ce3e:	e8 c2 33 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ce43:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ce4a:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ce4d:	e8 07 02 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ce52:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ce55:	83 ec 08             	sub    $0x8,%esp
f012ce58:	68 00 fc 2f 00       	push   $0x2ffc00
f012ce5d:	6a 00                	push   $0x0
f012ce5f:	e8 12 ae fd ff       	call   f0107c76 <krealloc>
f012ce64:	83 c4 10             	add    $0x10,%esp
f012ce67:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ce6d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ce73:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ce78:	77 17                	ja     f012ce91 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce7a:	83 ec 04             	sub    $0x4,%esp
f012ce7d:	68 20 c8 13 f0       	push   $0xf013c820
f012ce82:	68 32 0f 00 00       	push   $0xf32
f012ce87:	68 7a b5 13 f0       	push   $0xf013b57a
f012ce8c:	e8 74 33 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ce91:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ce97:	89 c1                	mov    %eax,%ecx
f012ce99:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cea0:	10 00 00 
f012cea3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cea9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ceae:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ceb4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ceba:	ba 00 00 00 00       	mov    $0x0,%edx
f012cebf:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cec5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cecb:	29 d0                	sub    %edx,%eax
f012cecd:	89 c3                	mov    %eax,%ebx
f012cecf:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ced6:	10 00 00 
f012ced9:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cede:	0f b6 d0             	movzbl %al,%edx
f012cee1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cee7:	01 d0                	add    %edx,%eax
f012cee9:	48                   	dec    %eax
f012ceea:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cef0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cef6:	ba 00 00 00 00       	mov    $0x0,%edx
f012cefb:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cf01:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf07:	29 d0                	sub    %edx,%eax
f012cf09:	01 c3                	add    %eax,%ebx
f012cf0b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cf12:	10 00 00 
f012cf15:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012cf1a:	0f b6 c0             	movzbl %al,%eax
f012cf1d:	c1 e0 04             	shl    $0x4,%eax
f012cf20:	89 c2                	mov    %eax,%edx
f012cf22:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cf28:	01 d0                	add    %edx,%eax
f012cf2a:	48                   	dec    %eax
f012cf2b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cf31:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf37:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf3c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cf42:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf48:	29 d0                	sub    %edx,%eax
f012cf4a:	01 d8                	add    %ebx,%eax
f012cf4c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cf51:	39 c1                	cmp    %eax,%ecx
f012cf53:	74 17                	je     f012cf6c <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cf55:	83 ec 04             	sub    $0x4,%esp
f012cf58:	68 5c c8 13 f0       	push   $0xf013c85c
f012cf5d:	68 34 0f 00 00       	push   $0xf34
f012cf62:	68 7a b5 13 f0       	push   $0xf013b57a
f012cf67:	e8 99 32 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cf6c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf6f:	e8 e5 00 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cf74:	29 c3                	sub    %eax,%ebx
f012cf76:	89 d8                	mov    %ebx,%eax
f012cf78:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cf7d:	74 17                	je     f012cf96 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cf7f:	83 ec 04             	sub    $0x4,%esp
f012cf82:	68 8e c8 13 f0       	push   $0xf013c88e
f012cf87:	68 36 0f 00 00       	push   $0xf36
f012cf8c:	68 7a b5 13 f0       	push   $0xf013b57a
f012cf91:	e8 6f 32 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cf96:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cf9d:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cfa0:	e8 b4 00 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cfa5:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cfa8:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cfaf:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cfb2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cfb8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cfbe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cfc4:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cfc7:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cfc9:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cfcf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cfd5:	01 c2                	add    %eax,%edx
f012cfd7:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cfda:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cfdc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cfe2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cfe8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cfef:	eb 11                	jmp    f012d002 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012cff1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cff4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cffa:	01 d0                	add    %edx,%eax
f012cffc:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cfff:	ff 45 f4             	incl   -0xc(%ebp)
f012d002:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d008:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d00b:	7d e4                	jge    f012cff1 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d00d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d013:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d019:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d01f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d025:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d02b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d032:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d038:	01 d0                	add    %edx,%eax
f012d03a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d040:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d046:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d04c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d053:	eb 1b                	jmp    f012d070 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012d055:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d058:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d05f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d065:	01 d0                	add    %edx,%eax
f012d067:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d06d:	ff 45 f0             	incl   -0x10(%ebp)
f012d070:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d076:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d079:	7d da                	jge    f012d055 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d07b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d081:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d087:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d08e:	eb 17                	jmp    f012d0a7 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012d090:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d093:	01 c0                	add    %eax,%eax
f012d095:	89 c2                	mov    %eax,%edx
f012d097:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d09d:	01 d0                	add    %edx,%eax
f012d09f:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d0a4:	ff 45 ec             	incl   -0x14(%ebp)
f012d0a7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d0ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d0b0:	7d de                	jge    f012d090 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d0b2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d0b8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d0be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0c4:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d0c9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d0cf:	01 c0                	add    %eax,%eax
f012d0d1:	89 c2                	mov    %eax,%edx
f012d0d3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0d9:	01 d0                	add    %edx,%eax
f012d0db:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d0e0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d0e6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d0ec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d0f3:	eb 49                	jmp    f012d13e <test_krealloc+0xc58>
			structArr[i].a = 7;
f012d0f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d0f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0ff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d105:	01 d0                	add    %edx,%eax
f012d107:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d10a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d10d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d114:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d11a:	01 d0                	add    %edx,%eax
f012d11c:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d122:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d125:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d12c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d132:	01 d0                	add    %edx,%eax
f012d134:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d13b:	ff 45 e8             	incl   -0x18(%ebp)
f012d13e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d144:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d147:	7d ac                	jge    f012d0f5 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d149:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d14f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d155:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d15b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d15e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d164:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d16a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d170:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d177:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d17d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d184:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d18a:	01 d0                	add    %edx,%eax
f012d18c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d18f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d195:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d19c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1a2:	01 d0                	add    %edx,%eax
f012d1a4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012d1aa:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1bd:	01 d0                	add    %edx,%eax
f012d1bf:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012d1c6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d1cc:	8a 00                	mov    (%eax),%al
f012d1ce:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012d1d1:	75 17                	jne    f012d1ea <test_krealloc+0xd04>
f012d1d3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d1d9:	89 c2                	mov    %eax,%edx
f012d1db:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d1e1:	01 d0                	add    %edx,%eax
f012d1e3:	8a 00                	mov    (%eax),%al
f012d1e5:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012d1e8:	74 17                	je     f012d201 <test_krealloc+0xd1b>
			panic(
f012d1ea:	83 ec 04             	sub    $0x4,%esp
f012d1ed:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d1f2:	68 79 0f 00 00       	push   $0xf79
f012d1f7:	68 7a b5 13 f0       	push   $0xf013b57a
f012d1fc:	e8 04 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012d201:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d207:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012d20d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d213:	8a 00                	mov    (%eax),%al
f012d215:	3c 02                	cmp    $0x2,%al
f012d217:	75 16                	jne    f012d22f <test_krealloc+0xd49>
f012d219:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d21f:	89 c2                	mov    %eax,%edx
f012d221:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d227:	01 d0                	add    %edx,%eax
f012d229:	8a 00                	mov    (%eax),%al
f012d22b:	3c 02                	cmp    $0x2,%al
f012d22d:	74 20                	je     f012d24f <test_krealloc+0xd69>
			panic(
f012d22f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d235:	8a 00                	mov    (%eax),%al
f012d237:	0f be c0             	movsbl %al,%eax
f012d23a:	50                   	push   %eax
f012d23b:	68 ec c8 13 f0       	push   $0xf013c8ec
f012d240:	68 7f 0f 00 00       	push   $0xf7f
f012d245:	68 7a b5 13 f0       	push   $0xf013b57a
f012d24a:	e8 b6 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012d24f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d255:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012d25b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d261:	8b 00                	mov    (%eax),%eax
f012d263:	83 f8 03             	cmp    $0x3,%eax
f012d266:	75 1c                	jne    f012d284 <test_krealloc+0xd9e>
f012d268:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d26e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d275:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d27b:	01 d0                	add    %edx,%eax
f012d27d:	8b 00                	mov    (%eax),%eax
f012d27f:	83 f8 03             	cmp    $0x3,%eax
f012d282:	74 17                	je     f012d29b <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012d284:	83 ec 04             	sub    $0x4,%esp
f012d287:	68 38 c9 13 f0       	push   $0xf013c938
f012d28c:	68 83 0f 00 00       	push   $0xf83
f012d291:	68 7a b5 13 f0       	push   $0xf013b57a
f012d296:	e8 6a 2f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012d29b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d2a1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012d2a7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2ad:	8b 00                	mov    (%eax),%eax
f012d2af:	83 f8 04             	cmp    $0x4,%eax
f012d2b2:	75 1c                	jne    f012d2d0 <test_krealloc+0xdea>
f012d2b4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d2ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d2c1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2c7:	01 d0                	add    %edx,%eax
f012d2c9:	8b 00                	mov    (%eax),%eax
f012d2cb:	83 f8 04             	cmp    $0x4,%eax
f012d2ce:	74 17                	je     f012d2e7 <test_krealloc+0xe01>
			panic(
f012d2d0:	83 ec 04             	sub    $0x4,%esp
f012d2d3:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d2d8:	68 88 0f 00 00       	push   $0xf88
f012d2dd:	68 7a b5 13 f0       	push   $0xf013b57a
f012d2e2:	e8 1e 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012d2e7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d2ed:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012d2f3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d2f9:	66 8b 00             	mov    (%eax),%ax
f012d2fc:	66 83 f8 05          	cmp    $0x5,%ax
f012d300:	75 1b                	jne    f012d31d <test_krealloc+0xe37>
f012d302:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d308:	01 c0                	add    %eax,%eax
f012d30a:	89 c2                	mov    %eax,%edx
f012d30c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d312:	01 d0                	add    %edx,%eax
f012d314:	66 8b 00             	mov    (%eax),%ax
f012d317:	66 83 f8 05          	cmp    $0x5,%ax
f012d31b:	74 17                	je     f012d334 <test_krealloc+0xe4e>
			panic(
f012d31d:	83 ec 04             	sub    $0x4,%esp
f012d320:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d325:	68 8d 0f 00 00       	push   $0xf8d
f012d32a:	68 7a b5 13 f0       	push   $0xf013b57a
f012d32f:	e8 d1 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d334:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d33a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d340:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d346:	66 8b 00             	mov    (%eax),%ax
f012d349:	66 83 f8 06          	cmp    $0x6,%ax
f012d34d:	75 1b                	jne    f012d36a <test_krealloc+0xe84>
f012d34f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d355:	01 c0                	add    %eax,%eax
f012d357:	89 c2                	mov    %eax,%edx
f012d359:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d35f:	01 d0                	add    %edx,%eax
f012d361:	66 8b 00             	mov    (%eax),%ax
f012d364:	66 83 f8 06          	cmp    $0x6,%ax
f012d368:	74 17                	je     f012d381 <test_krealloc+0xe9b>
			panic(
f012d36a:	83 ec 04             	sub    $0x4,%esp
f012d36d:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d372:	68 92 0f 00 00       	push   $0xf92
f012d377:	68 7a b5 13 f0       	push   $0xf013b57a
f012d37c:	e8 84 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d381:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d387:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d38d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d393:	8a 00                	mov    (%eax),%al
f012d395:	3c 07                	cmp    $0x7,%al
f012d397:	75 1b                	jne    f012d3b4 <test_krealloc+0xece>
f012d399:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d39f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d3a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3ac:	01 d0                	add    %edx,%eax
f012d3ae:	8a 00                	mov    (%eax),%al
f012d3b0:	3c 07                	cmp    $0x7,%al
f012d3b2:	74 17                	je     f012d3cb <test_krealloc+0xee5>
			panic(
f012d3b4:	83 ec 04             	sub    $0x4,%esp
f012d3b7:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d3bc:	68 97 0f 00 00       	push   $0xf97
f012d3c1:	68 7a b5 13 f0       	push   $0xf013b57a
f012d3c6:	e8 3a 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d3cb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3d1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3d5:	66 83 f8 07          	cmp    $0x7,%ax
f012d3d9:	75 1f                	jne    f012d3fa <test_krealloc+0xf14>
f012d3db:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d3e1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d3e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3ee:	01 d0                	add    %edx,%eax
f012d3f0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3f4:	66 83 f8 07          	cmp    $0x7,%ax
f012d3f8:	74 17                	je     f012d411 <test_krealloc+0xf2b>
			panic(
f012d3fa:	83 ec 04             	sub    $0x4,%esp
f012d3fd:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d402:	68 9a 0f 00 00       	push   $0xf9a
f012d407:	68 7a b5 13 f0       	push   $0xf013b57a
f012d40c:	e8 f4 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d411:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d417:	8b 40 04             	mov    0x4(%eax),%eax
f012d41a:	83 f8 07             	cmp    $0x7,%eax
f012d41d:	75 1d                	jne    f012d43c <test_krealloc+0xf56>
f012d41f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d425:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d42c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d432:	01 d0                	add    %edx,%eax
f012d434:	8b 40 04             	mov    0x4(%eax),%eax
f012d437:	83 f8 07             	cmp    $0x7,%eax
f012d43a:	74 17                	je     f012d453 <test_krealloc+0xf6d>
			panic(
f012d43c:	83 ec 04             	sub    $0x4,%esp
f012d43f:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d444:	68 9d 0f 00 00       	push   $0xf9d
f012d449:	68 7a b5 13 f0       	push   $0xf013b57a
f012d44e:	e8 b2 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d453:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d459:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d45f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d465:	8a 00                	mov    (%eax),%al
f012d467:	3c 08                	cmp    $0x8,%al
f012d469:	75 1b                	jne    f012d486 <test_krealloc+0xfa0>
f012d46b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d471:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d478:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d47e:	01 d0                	add    %edx,%eax
f012d480:	8a 00                	mov    (%eax),%al
f012d482:	3c 08                	cmp    $0x8,%al
f012d484:	74 17                	je     f012d49d <test_krealloc+0xfb7>
			panic(
f012d486:	83 ec 04             	sub    $0x4,%esp
f012d489:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d48e:	68 a2 0f 00 00       	push   $0xfa2
f012d493:	68 7a b5 13 f0       	push   $0xf013b57a
f012d498:	e8 68 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d49d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4a3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4a7:	66 83 f8 08          	cmp    $0x8,%ax
f012d4ab:	75 1f                	jne    f012d4cc <test_krealloc+0xfe6>
f012d4ad:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d4b3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4c0:	01 d0                	add    %edx,%eax
f012d4c2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4c6:	66 83 f8 08          	cmp    $0x8,%ax
f012d4ca:	74 17                	je     f012d4e3 <test_krealloc+0xffd>
			panic(
f012d4cc:	83 ec 04             	sub    $0x4,%esp
f012d4cf:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d4d4:	68 a5 0f 00 00       	push   $0xfa5
f012d4d9:	68 7a b5 13 f0       	push   $0xf013b57a
f012d4de:	e8 22 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d4e3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4e9:	8b 40 04             	mov    0x4(%eax),%eax
f012d4ec:	83 f8 08             	cmp    $0x8,%eax
f012d4ef:	75 1d                	jne    f012d50e <test_krealloc+0x1028>
f012d4f1:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d4f7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d504:	01 d0                	add    %edx,%eax
f012d506:	8b 40 04             	mov    0x4(%eax),%eax
f012d509:	83 f8 08             	cmp    $0x8,%eax
f012d50c:	74 17                	je     f012d525 <test_krealloc+0x103f>
			panic(
f012d50e:	83 ec 04             	sub    $0x4,%esp
f012d511:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d516:	68 a8 0f 00 00       	push   $0xfa8
f012d51b:	68 7a b5 13 f0       	push   $0xf013b57a
f012d520:	e8 e0 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d525:	e8 2f fb fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d52a:	89 c2                	mov    %eax,%edx
f012d52c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d52f:	39 c2                	cmp    %eax,%edx
f012d531:	74 17                	je     f012d54a <test_krealloc+0x1064>
			panic(
f012d533:	83 ec 04             	sub    $0x4,%esp
f012d536:	68 6c c9 13 f0       	push   $0xf013c96c
f012d53b:	68 ac 0f 00 00       	push   $0xfac
f012d540:	68 7a b5 13 f0       	push   $0xf013b57a
f012d545:	e8 bb 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d54a:	83 ec 0c             	sub    $0xc,%esp
f012d54d:	68 b8 c9 13 f0       	push   $0xf013c9b8
f012d552:	e8 b7 37 fd ff       	call   f0100d0e <cprintf>
f012d557:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d55a:	e8 fa fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d55f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d562:	e8 c0 67 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d567:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d56d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d573:	83 ec 08             	sub    $0x8,%esp
f012d576:	6a 00                	push   $0x0
f012d578:	50                   	push   %eax
f012d579:	e8 f8 a6 fd ff       	call   f0107c76 <krealloc>
f012d57e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d581:	e8 a1 67 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d586:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d58c:	74 17                	je     f012d5a5 <test_krealloc+0x10bf>
			panic(
f012d58e:	83 ec 04             	sub    $0x4,%esp
f012d591:	68 dc c9 13 f0       	push   $0xf013c9dc
f012d596:	68 b9 0f 00 00       	push   $0xfb9
f012d59b:	68 7a b5 13 f0       	push   $0xf013b57a
f012d5a0:	e8 60 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d5a5:	e8 af fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d5aa:	89 c2                	mov    %eax,%edx
f012d5ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5af:	29 c2                	sub    %eax,%edx
f012d5b1:	89 d0                	mov    %edx,%eax
f012d5b3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d5b8:	74 17                	je     f012d5d1 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d5ba:	83 ec 04             	sub    $0x4,%esp
f012d5bd:	68 50 ca 13 f0       	push   $0xf013ca50
f012d5c2:	68 bb 0f 00 00       	push   $0xfbb
f012d5c7:	68 7a b5 13 f0       	push   $0xf013b57a
f012d5cc:	e8 34 2c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d5d1:	e8 83 fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d5d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5d9:	e8 49 67 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d5de:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d5e4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d5ea:	83 ec 08             	sub    $0x8,%esp
f012d5ed:	6a 00                	push   $0x0
f012d5ef:	50                   	push   %eax
f012d5f0:	e8 81 a6 fd ff       	call   f0107c76 <krealloc>
f012d5f5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5f8:	e8 2a 67 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d5fd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d603:	74 17                	je     f012d61c <test_krealloc+0x1136>
			panic(
f012d605:	83 ec 04             	sub    $0x4,%esp
f012d608:	68 dc c9 13 f0       	push   $0xf013c9dc
f012d60d:	68 c4 0f 00 00       	push   $0xfc4
f012d612:	68 7a b5 13 f0       	push   $0xf013b57a
f012d617:	e8 e9 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d61c:	e8 38 fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d621:	89 c2                	mov    %eax,%edx
f012d623:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d626:	29 c2                	sub    %eax,%edx
f012d628:	89 d0                	mov    %edx,%eax
f012d62a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d62f:	74 17                	je     f012d648 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d631:	83 ec 04             	sub    $0x4,%esp
f012d634:	68 50 ca 13 f0       	push   $0xf013ca50
f012d639:	68 c6 0f 00 00       	push   $0xfc6
f012d63e:	68 7a b5 13 f0       	push   $0xf013b57a
f012d643:	e8 bd 2b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d648:	e8 0c fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d64d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d650:	e8 d2 66 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d655:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d65b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d661:	83 ec 08             	sub    $0x8,%esp
f012d664:	6a 00                	push   $0x0
f012d666:	50                   	push   %eax
f012d667:	e8 0a a6 fd ff       	call   f0107c76 <krealloc>
f012d66c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d66f:	e8 b3 66 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d674:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d67a:	74 17                	je     f012d693 <test_krealloc+0x11ad>
			panic(
f012d67c:	83 ec 04             	sub    $0x4,%esp
f012d67f:	68 94 b5 13 f0       	push   $0xf013b594
f012d684:	68 ce 0f 00 00       	push   $0xfce
f012d689:	68 7a b5 13 f0       	push   $0xf013b57a
f012d68e:	e8 72 2b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d693:	e8 c1 f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d698:	89 c2                	mov    %eax,%edx
f012d69a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d69d:	29 c2                	sub    %eax,%edx
f012d69f:	89 d0                	mov    %edx,%eax
f012d6a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d6a6:	74 17                	je     f012d6bf <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d6a8:	83 ec 04             	sub    $0x4,%esp
f012d6ab:	68 50 ca 13 f0       	push   $0xf013ca50
f012d6b0:	68 d0 0f 00 00       	push   $0xfd0
f012d6b5:	68 7a b5 13 f0       	push   $0xf013b57a
f012d6ba:	e8 46 2b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d6bf:	e8 95 f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d6c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d6c7:	e8 5b 66 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d6cc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d6d2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d6d8:	83 ec 08             	sub    $0x8,%esp
f012d6db:	6a 00                	push   $0x0
f012d6dd:	50                   	push   %eax
f012d6de:	e8 93 a5 fd ff       	call   f0107c76 <krealloc>
f012d6e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d6e6:	e8 3c 66 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012d6eb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d6f1:	74 17                	je     f012d70a <test_krealloc+0x1224>
			panic(
f012d6f3:	83 ec 04             	sub    $0x4,%esp
f012d6f6:	68 dc c9 13 f0       	push   $0xf013c9dc
f012d6fb:	68 d8 0f 00 00       	push   $0xfd8
f012d700:	68 7a b5 13 f0       	push   $0xf013b57a
f012d705:	e8 fb 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d70a:	e8 4a f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d70f:	89 c2                	mov    %eax,%edx
f012d711:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d714:	29 c2                	sub    %eax,%edx
f012d716:	89 d0                	mov    %edx,%eax
f012d718:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d71d:	74 17                	je     f012d736 <test_krealloc+0x1250>
			panic(
f012d71f:	83 ec 04             	sub    $0x4,%esp
f012d722:	68 84 ca 13 f0       	push   $0xf013ca84
f012d727:	68 db 0f 00 00       	push   $0xfdb
f012d72c:	68 7a b5 13 f0       	push   $0xf013b57a
f012d731:	e8 cf 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d736:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d73d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d744:	eb 48                	jmp    f012d78e <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d746:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d749:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f012d74e:	83 ec 04             	sub    $0x4,%esp
f012d751:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d757:	51                   	push   %ecx
f012d758:	52                   	push   %edx
f012d759:	50                   	push   %eax
f012d75a:	e8 b1 92 fd ff       	call   f0106a10 <get_page_table>
f012d75f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d762:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d768:	85 c0                	test   %eax,%eax
f012d76a:	75 17                	jne    f012d783 <test_krealloc+0x129d>
					panic(
f012d76c:	83 ec 04             	sub    $0x4,%esp
f012d76f:	68 7c be 13 f0       	push   $0xf013be7c
f012d774:	68 e7 0f 00 00       	push   $0xfe7
f012d779:	68 7a b5 13 f0       	push   $0xf013b57a
f012d77e:	e8 82 2a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d783:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d78a:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d78e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d792:	78 b2                	js     f012d746 <test_krealloc+0x1260>
f012d794:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d798:	7f 09                	jg     f012d7a3 <test_krealloc+0x12bd>
f012d79a:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d7a1:	76 a3                	jbe    f012d746 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d7a3:	83 ec 0c             	sub    $0xc,%esp
f012d7a6:	68 c3 ca 13 f0       	push   $0xf013cac3
f012d7ab:	e8 5e 35 fd ff       	call   f0100d0e <cprintf>
f012d7b0:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d7b3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d7b9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d7bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d7c6:	eb 21                	jmp    f012d7e9 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d7c8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d7ce:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d7d1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d7d7:	01 c8                	add    %ecx,%eax
f012d7d9:	8a 00                	mov    (%eax),%al
f012d7db:	0f be c0             	movsbl %al,%eax
f012d7de:	01 d0                	add    %edx,%eax
f012d7e0:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d7e6:	ff 45 dc             	incl   -0x24(%ebp)
f012d7e9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d7ef:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d7f2:	7d d4                	jge    f012d7c8 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d7f4:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d7fa:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d800:	42                   	inc    %edx
f012d801:	01 d2                	add    %edx,%edx
f012d803:	39 d0                	cmp    %edx,%eax
f012d805:	74 17                	je     f012d81e <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d807:	83 ec 04             	sub    $0x4,%esp
f012d80a:	68 cc ca 13 f0       	push   $0xf013cacc
f012d80f:	68 f9 0f 00 00       	push   $0xff9
f012d814:	68 7a b5 13 f0       	push   $0xf013b57a
f012d819:	e8 e7 29 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d81e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d824:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d82a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d831:	eb 25                	jmp    f012d858 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d833:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d839:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d83c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d843:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d849:	01 c8                	add    %ecx,%eax
f012d84b:	8b 00                	mov    (%eax),%eax
f012d84d:	01 d0                	add    %edx,%eax
f012d84f:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d855:	ff 45 dc             	incl   -0x24(%ebp)
f012d858:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d85e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d861:	7d d0                	jge    f012d833 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d863:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d869:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d86f:	42                   	inc    %edx
f012d870:	c1 e2 02             	shl    $0x2,%edx
f012d873:	39 d0                	cmp    %edx,%eax
f012d875:	74 17                	je     f012d88e <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d877:	83 ec 04             	sub    $0x4,%esp
f012d87a:	68 cc ca 13 f0       	push   $0xf013cacc
f012d87f:	68 03 10 00 00       	push   $0x1003
f012d884:	68 7a b5 13 f0       	push   $0xf013b57a
f012d889:	e8 77 29 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d88e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d894:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d89a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d8a1:	eb 24                	jmp    f012d8c7 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d8a3:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d8a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d8ac:	01 c0                	add    %eax,%eax
f012d8ae:	89 c1                	mov    %eax,%ecx
f012d8b0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d8b6:	01 c8                	add    %ecx,%eax
f012d8b8:	66 8b 00             	mov    (%eax),%ax
f012d8bb:	98                   	cwtl   
f012d8bc:	01 d0                	add    %edx,%eax
f012d8be:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8c4:	ff 45 dc             	incl   -0x24(%ebp)
f012d8c7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d8cd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d8d0:	7d d1                	jge    f012d8a3 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d8d2:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d8d8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d8de:	8d 48 01             	lea    0x1(%eax),%ecx
f012d8e1:	89 c8                	mov    %ecx,%eax
f012d8e3:	c1 e0 02             	shl    $0x2,%eax
f012d8e6:	01 c8                	add    %ecx,%eax
f012d8e8:	39 c2                	cmp    %eax,%edx
f012d8ea:	74 17                	je     f012d903 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d8ec:	83 ec 04             	sub    $0x4,%esp
f012d8ef:	68 cc ca 13 f0       	push   $0xf013cacc
f012d8f4:	68 0d 10 00 00       	push   $0x100d
f012d8f9:	68 7a b5 13 f0       	push   $0xf013b57a
f012d8fe:	e8 02 29 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d903:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d909:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d90f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d916:	eb 70                	jmp    f012d988 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d918:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d91e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d921:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d928:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d92e:	01 c8                	add    %ecx,%eax
f012d930:	8a 00                	mov    (%eax),%al
f012d932:	0f be c0             	movsbl %al,%eax
f012d935:	01 d0                	add    %edx,%eax
f012d937:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d93d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d943:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d946:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d94d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d953:	01 c8                	add    %ecx,%eax
f012d955:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d959:	98                   	cwtl   
f012d95a:	01 d0                	add    %edx,%eax
f012d95c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d962:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d968:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d96b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d972:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d978:	01 c8                	add    %ecx,%eax
f012d97a:	8b 40 04             	mov    0x4(%eax),%eax
f012d97d:	01 d0                	add    %edx,%eax
f012d97f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d985:	ff 45 dc             	incl   -0x24(%ebp)
f012d988:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d98e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d991:	7d 85                	jge    f012d918 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d993:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d999:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d99f:	8d 50 01             	lea    0x1(%eax),%edx
f012d9a2:	89 d0                	mov    %edx,%eax
f012d9a4:	01 c0                	add    %eax,%eax
f012d9a6:	01 d0                	add    %edx,%eax
f012d9a8:	01 c0                	add    %eax,%eax
f012d9aa:	01 d0                	add    %edx,%eax
f012d9ac:	39 c1                	cmp    %eax,%ecx
f012d9ae:	75 3a                	jne    f012d9ea <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d9b0:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d9b6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9bc:	8d 50 01             	lea    0x1(%eax),%edx
f012d9bf:	89 d0                	mov    %edx,%eax
f012d9c1:	01 c0                	add    %eax,%eax
f012d9c3:	01 d0                	add    %edx,%eax
f012d9c5:	01 c0                	add    %eax,%eax
f012d9c7:	01 d0                	add    %edx,%eax
f012d9c9:	39 c1                	cmp    %eax,%ecx
f012d9cb:	75 1d                	jne    f012d9ea <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d9cd:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d9d3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9d9:	8d 50 01             	lea    0x1(%eax),%edx
f012d9dc:	89 d0                	mov    %edx,%eax
f012d9de:	01 c0                	add    %eax,%eax
f012d9e0:	01 d0                	add    %edx,%eax
f012d9e2:	01 c0                	add    %eax,%eax
f012d9e4:	01 d0                	add    %edx,%eax
f012d9e6:	39 c1                	cmp    %eax,%ecx
f012d9e8:	74 17                	je     f012da01 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d9ea:	83 ec 04             	sub    $0x4,%esp
f012d9ed:	68 cc ca 13 f0       	push   $0xf013cacc
f012d9f2:	68 1b 10 00 00       	push   $0x101b
f012d9f7:	68 7a b5 13 f0       	push   $0xf013b57a
f012d9fc:	e8 04 28 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012da01:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012da08:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012da0b:	e8 49 f6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012da10:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012da13:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da19:	83 ec 08             	sub    $0x8,%esp
f012da1c:	68 00 3c 00 00       	push   $0x3c00
f012da21:	50                   	push   %eax
f012da22:	e8 4f a2 fd ff       	call   f0107c76 <krealloc>
f012da27:	83 c4 10             	add    $0x10,%esp
f012da2a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da30:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012da36:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da3b:	77 17                	ja     f012da54 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da3d:	83 ec 04             	sub    $0x4,%esp
f012da40:	68 20 c8 13 f0       	push   $0xf013c820
f012da45:	68 27 10 00 00       	push   $0x1027
f012da4a:	68 7a b5 13 f0       	push   $0xf013b57a
f012da4f:	e8 b1 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012da54:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da5a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012da60:	74 17                	je     f012da79 <test_krealloc+0x1593>
			panic(
f012da62:	83 ec 04             	sub    $0x4,%esp
f012da65:	68 04 cb 13 f0       	push   $0xf013cb04
f012da6a:	68 2a 10 00 00       	push   $0x102a
f012da6f:	68 7a b5 13 f0       	push   $0xf013b57a
f012da74:	e8 8c 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012da79:	e8 db f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012da7e:	89 c2                	mov    %eax,%edx
f012da80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012da83:	39 c2                	cmp    %eax,%edx
f012da85:	74 17                	je     f012da9e <test_krealloc+0x15b8>
			panic(
f012da87:	83 ec 04             	sub    $0x4,%esp
f012da8a:	68 70 cb 13 f0       	push   $0xf013cb70
f012da8f:	68 2d 10 00 00       	push   $0x102d
f012da94:	68 7a b5 13 f0       	push   $0xf013b57a
f012da99:	e8 67 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012da9e:	e8 b6 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012daa3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012daa6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012daac:	83 ec 08             	sub    $0x8,%esp
f012daaf:	68 00 fc 0f 00       	push   $0xffc00
f012dab4:	50                   	push   %eax
f012dab5:	e8 bc a1 fd ff       	call   f0107c76 <krealloc>
f012daba:	83 c4 10             	add    $0x10,%esp
f012dabd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dac3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dac9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dace:	77 17                	ja     f012dae7 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dad0:	83 ec 04             	sub    $0x4,%esp
f012dad3:	68 20 c8 13 f0       	push   $0xf013c820
f012dad8:	68 33 10 00 00       	push   $0x1033
f012dadd:	68 7a b5 13 f0       	push   $0xf013b57a
f012dae2:	e8 1e 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012dae7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012daed:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012daf3:	74 17                	je     f012db0c <test_krealloc+0x1626>
			panic(
f012daf5:	83 ec 04             	sub    $0x4,%esp
f012daf8:	68 04 cb 13 f0       	push   $0xf013cb04
f012dafd:	68 36 10 00 00       	push   $0x1036
f012db02:	68 7a b5 13 f0       	push   $0xf013b57a
f012db07:	e8 f9 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db0c:	e8 48 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012db11:	89 c2                	mov    %eax,%edx
f012db13:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db16:	39 c2                	cmp    %eax,%edx
f012db18:	74 17                	je     f012db31 <test_krealloc+0x164b>
			panic(
f012db1a:	83 ec 04             	sub    $0x4,%esp
f012db1d:	68 70 cb 13 f0       	push   $0xf013cb70
f012db22:	68 39 10 00 00       	push   $0x1039
f012db27:	68 7a b5 13 f0       	push   $0xf013b57a
f012db2c:	e8 d4 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012db31:	e8 23 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012db36:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012db39:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db3f:	83 ec 08             	sub    $0x8,%esp
f012db42:	68 00 fc 0f 00       	push   $0xffc00
f012db47:	50                   	push   %eax
f012db48:	e8 29 a1 fd ff       	call   f0107c76 <krealloc>
f012db4d:	83 c4 10             	add    $0x10,%esp
f012db50:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db56:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012db5c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db61:	77 17                	ja     f012db7a <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db63:	83 ec 04             	sub    $0x4,%esp
f012db66:	68 20 c8 13 f0       	push   $0xf013c820
f012db6b:	68 3f 10 00 00       	push   $0x103f
f012db70:	68 7a b5 13 f0       	push   $0xf013b57a
f012db75:	e8 8b 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012db7a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db80:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012db86:	74 17                	je     f012db9f <test_krealloc+0x16b9>
			panic(
f012db88:	83 ec 04             	sub    $0x4,%esp
f012db8b:	68 04 cb 13 f0       	push   $0xf013cb04
f012db90:	68 42 10 00 00       	push   $0x1042
f012db95:	68 7a b5 13 f0       	push   $0xf013b57a
f012db9a:	e8 66 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db9f:	e8 b5 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dba4:	89 c2                	mov    %eax,%edx
f012dba6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dba9:	39 c2                	cmp    %eax,%edx
f012dbab:	74 17                	je     f012dbc4 <test_krealloc+0x16de>
			panic(
f012dbad:	83 ec 04             	sub    $0x4,%esp
f012dbb0:	68 70 cb 13 f0       	push   $0xf013cb70
f012dbb5:	68 45 10 00 00       	push   $0x1045
f012dbba:	68 7a b5 13 f0       	push   $0xf013b57a
f012dbbf:	e8 41 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dbc4:	e8 90 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dbc9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012dbcc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dbd2:	83 ec 08             	sub    $0x8,%esp
f012dbd5:	68 00 fc 0f 00       	push   $0xffc00
f012dbda:	50                   	push   %eax
f012dbdb:	e8 96 a0 fd ff       	call   f0107c76 <krealloc>
f012dbe0:	83 c4 10             	add    $0x10,%esp
f012dbe3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dbe9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dbef:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dbf4:	77 17                	ja     f012dc0d <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dbf6:	83 ec 04             	sub    $0x4,%esp
f012dbf9:	68 20 c8 13 f0       	push   $0xf013c820
f012dbfe:	68 4d 10 00 00       	push   $0x104d
f012dc03:	68 7a b5 13 f0       	push   $0xf013b57a
f012dc08:	e8 f8 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012dc0d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dc13:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dc19:	74 17                	je     f012dc32 <test_krealloc+0x174c>
			panic(
f012dc1b:	83 ec 04             	sub    $0x4,%esp
f012dc1e:	68 b4 cb 13 f0       	push   $0xf013cbb4
f012dc23:	68 50 10 00 00       	push   $0x1050
f012dc28:	68 7a b5 13 f0       	push   $0xf013b57a
f012dc2d:	e8 d3 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dc32:	e8 22 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dc37:	89 c2                	mov    %eax,%edx
f012dc39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc3c:	39 c2                	cmp    %eax,%edx
f012dc3e:	74 17                	je     f012dc57 <test_krealloc+0x1771>
			panic(
f012dc40:	83 ec 04             	sub    $0x4,%esp
f012dc43:	68 70 cb 13 f0       	push   $0xf013cb70
f012dc48:	68 53 10 00 00       	push   $0x1053
f012dc4d:	68 7a b5 13 f0       	push   $0xf013b57a
f012dc52:	e8 ae 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012dc57:	83 ec 0c             	sub    $0xc,%esp
f012dc5a:	68 93 bd 13 f0       	push   $0xf013bd93
f012dc5f:	e8 aa 30 fd ff       	call   f0100d0e <cprintf>
f012dc64:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012dc67:	e8 ed f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dc6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012dc6f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dc75:	83 ec 08             	sub    $0x8,%esp
f012dc78:	68 00 18 10 00       	push   $0x101800
f012dc7d:	50                   	push   %eax
f012dc7e:	e8 f3 9f fd ff       	call   f0107c76 <krealloc>
f012dc83:	83 c4 10             	add    $0x10,%esp
f012dc86:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc89:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc8c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc91:	77 17                	ja     f012dcaa <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc93:	83 ec 04             	sub    $0x4,%esp
f012dc96:	68 20 c8 13 f0       	push   $0xf013c820
f012dc9b:	68 5c 10 00 00       	push   $0x105c
f012dca0:	68 7a b5 13 f0       	push   $0xf013b57a
f012dca5:	e8 5b 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dcaa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dcb0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dcb3:	74 17                	je     f012dccc <test_krealloc+0x17e6>
			panic(
f012dcb5:	83 ec 04             	sub    $0x4,%esp
f012dcb8:	68 14 cc 13 f0       	push   $0xf013cc14
f012dcbd:	68 5f 10 00 00       	push   $0x105f
f012dcc2:	68 7a b5 13 f0       	push   $0xf013b57a
f012dcc7:	e8 39 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012dccc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dccf:	e8 85 f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dcd4:	29 c3                	sub    %eax,%ebx
f012dcd6:	89 d8                	mov    %ebx,%eax
f012dcd8:	83 f8 02             	cmp    $0x2,%eax
f012dcdb:	74 17                	je     f012dcf4 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012dcdd:	83 ec 04             	sub    $0x4,%esp
f012dce0:	68 90 cc 13 f0       	push   $0xf013cc90
f012dce5:	68 61 10 00 00       	push   $0x1061
f012dcea:	68 7a b5 13 f0       	push   $0xf013b57a
f012dcef:	e8 11 25 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012dcf4:	e8 60 f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dcf9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012dcfc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd02:	83 ec 08             	sub    $0x8,%esp
f012dd05:	68 00 fc 3f 00       	push   $0x3ffc00
f012dd0a:	50                   	push   %eax
f012dd0b:	e8 66 9f fd ff       	call   f0107c76 <krealloc>
f012dd10:	83 c4 10             	add    $0x10,%esp
f012dd13:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dd16:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd19:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dd1e:	77 17                	ja     f012dd37 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd20:	83 ec 04             	sub    $0x4,%esp
f012dd23:	68 20 c8 13 f0       	push   $0xf013c820
f012dd28:	68 67 10 00 00       	push   $0x1067
f012dd2d:	68 7a b5 13 f0       	push   $0xf013b57a
f012dd32:	e8 ce 24 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012dd37:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd3d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dd40:	74 17                	je     f012dd59 <test_krealloc+0x1873>
			panic(
f012dd42:	83 ec 04             	sub    $0x4,%esp
f012dd45:	68 14 cc 13 f0       	push   $0xf013cc14
f012dd4a:	68 6a 10 00 00       	push   $0x106a
f012dd4f:	68 7a b5 13 f0       	push   $0xf013b57a
f012dd54:	e8 ac 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012dd59:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd5c:	e8 f8 f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dd61:	29 c3                	sub    %eax,%ebx
f012dd63:	89 d8                	mov    %ebx,%eax
f012dd65:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd6a:	74 17                	je     f012dd83 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd6c:	83 ec 04             	sub    $0x4,%esp
f012dd6f:	68 90 cc 13 f0       	push   $0xf013cc90
f012dd74:	68 6d 10 00 00       	push   $0x106d
f012dd79:	68 7a b5 13 f0       	push   $0xf013b57a
f012dd7e:	e8 82 24 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012dd83:	83 ec 0c             	sub    $0xc,%esp
f012dd86:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012dd8b:	e8 7e 2f fd ff       	call   f0100d0e <cprintf>
f012dd90:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012dd93:	e8 c1 f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dd98:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012dd9b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dda1:	83 ec 08             	sub    $0x8,%esp
f012dda4:	68 00 fc 9f 00       	push   $0x9ffc00
f012dda9:	50                   	push   %eax
f012ddaa:	e8 c7 9e fd ff       	call   f0107c76 <krealloc>
f012ddaf:	83 c4 10             	add    $0x10,%esp
f012ddb2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ddb5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ddb8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ddbd:	77 17                	ja     f012ddd6 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddbf:	83 ec 04             	sub    $0x4,%esp
f012ddc2:	68 20 c8 13 f0       	push   $0xf013c820
f012ddc7:	68 78 10 00 00       	push   $0x1078
f012ddcc:	68 7a b5 13 f0       	push   $0xf013b57a
f012ddd1:	e8 2f 24 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012ddd6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012dddd:	10 00 00 
f012dde0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012dde6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ddeb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ddf1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ddf7:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddfc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012de02:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de08:	29 d0                	sub    %edx,%eax
f012de0a:	89 c1                	mov    %eax,%ecx
f012de0c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012de13:	10 00 00 
f012de16:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012de1b:	0f b6 d0             	movzbl %al,%edx
f012de1e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012de24:	01 d0                	add    %edx,%eax
f012de26:	48                   	dec    %eax
f012de27:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012de2d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de33:	ba 00 00 00 00       	mov    $0x0,%edx
f012de38:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012de3e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de44:	29 d0                	sub    %edx,%eax
f012de46:	01 c1                	add    %eax,%ecx
f012de48:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012de4f:	10 00 00 
f012de52:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012de57:	0f b6 c0             	movzbl %al,%eax
f012de5a:	c1 e0 04             	shl    $0x4,%eax
f012de5d:	89 c2                	mov    %eax,%edx
f012de5f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012de65:	01 d0                	add    %edx,%eax
f012de67:	48                   	dec    %eax
f012de68:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012de6e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012de74:	ba 00 00 00 00       	mov    $0x0,%edx
f012de79:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012de7f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012de85:	29 d0                	sub    %edx,%eax
f012de87:	01 c8                	add    %ecx,%eax
f012de89:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012de8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012de92:	39 c2                	cmp    %eax,%edx
f012de94:	74 18                	je     f012deae <test_krealloc+0x19c8>
			panic(
f012de96:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012de99:	50                   	push   %eax
f012de9a:	68 c4 cc 13 f0       	push   $0xf013ccc4
f012de9f:	68 7c 10 00 00       	push   $0x107c
f012dea4:	68 7a b5 13 f0       	push   $0xf013b57a
f012dea9:	e8 57 23 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012deae:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012deb4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012deb7:	75 17                	jne    f012ded0 <test_krealloc+0x19ea>
			panic(
f012deb9:	83 ec 04             	sub    $0x4,%esp
f012debc:	68 08 cd 13 f0       	push   $0xf013cd08
f012dec1:	68 7f 10 00 00       	push   $0x107f
f012dec6:	68 7a b5 13 f0       	push   $0xf013b57a
f012decb:	e8 35 23 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012ded0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ded3:	e8 81 f1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ded8:	29 c3                	sub    %eax,%ebx
f012deda:	89 d8                	mov    %ebx,%eax
f012dedc:	3d 00 06 00 00       	cmp    $0x600,%eax
f012dee1:	74 17                	je     f012defa <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012dee3:	83 ec 04             	sub    $0x4,%esp
f012dee6:	68 90 cc 13 f0       	push   $0xf013cc90
f012deeb:	68 82 10 00 00       	push   $0x1082
f012def0:	68 7a b5 13 f0       	push   $0xf013b57a
f012def5:	e8 0b 23 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012defa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012defd:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012df03:	e8 51 f1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012df08:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012df0b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df11:	83 ec 08             	sub    $0x8,%esp
f012df14:	68 00 fc 5f 00       	push   $0x5ffc00
f012df19:	50                   	push   %eax
f012df1a:	e8 57 9d fd ff       	call   f0107c76 <krealloc>
f012df1f:	83 c4 10             	add    $0x10,%esp
f012df22:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012df25:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df28:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012df2d:	77 17                	ja     f012df46 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df2f:	83 ec 04             	sub    $0x4,%esp
f012df32:	68 20 c8 13 f0       	push   $0xf013c820
f012df37:	68 8b 10 00 00       	push   $0x108b
f012df3c:	68 7a b5 13 f0       	push   $0xf013b57a
f012df41:	e8 bf 22 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012df46:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df4c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012df4f:	74 17                	je     f012df68 <test_krealloc+0x1a82>
			panic(
f012df51:	83 ec 04             	sub    $0x4,%esp
f012df54:	68 14 cc 13 f0       	push   $0xf013cc14
f012df59:	68 8e 10 00 00       	push   $0x108e
f012df5e:	68 7a b5 13 f0       	push   $0xf013b57a
f012df63:	e8 9d 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012df68:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df6b:	e8 e9 f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012df70:	29 c3                	sub    %eax,%ebx
f012df72:	89 d8                	mov    %ebx,%eax
f012df74:	3d 00 03 00 00       	cmp    $0x300,%eax
f012df79:	74 17                	je     f012df92 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012df7b:	83 ec 04             	sub    $0x4,%esp
f012df7e:	68 90 cc 13 f0       	push   $0xf013cc90
f012df83:	68 91 10 00 00       	push   $0x1091
f012df88:	68 7a b5 13 f0       	push   $0xf013b57a
f012df8d:	e8 73 22 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012df92:	e8 c2 f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012df97:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012df9a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfa0:	83 ec 08             	sub    $0x8,%esp
f012dfa3:	68 00 fc 3f 01       	push   $0x13ffc00
f012dfa8:	50                   	push   %eax
f012dfa9:	e8 c8 9c fd ff       	call   f0107c76 <krealloc>
f012dfae:	83 c4 10             	add    $0x10,%esp
f012dfb1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dfb4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dfb7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dfbc:	77 17                	ja     f012dfd5 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dfbe:	83 ec 04             	sub    $0x4,%esp
f012dfc1:	68 20 c8 13 f0       	push   $0xf013c820
f012dfc6:	68 98 10 00 00       	push   $0x1098
f012dfcb:	68 7a b5 13 f0       	push   $0xf013b57a
f012dfd0:	e8 30 22 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dfd5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfdb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dfde:	75 17                	jne    f012dff7 <test_krealloc+0x1b11>
			panic(
f012dfe0:	83 ec 04             	sub    $0x4,%esp
f012dfe3:	68 08 cd 13 f0       	push   $0xf013cd08
f012dfe8:	68 9b 10 00 00       	push   $0x109b
f012dfed:	68 7a b5 13 f0       	push   $0xf013b57a
f012dff2:	e8 0e 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012dff7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dffe:	10 00 00 
f012e001:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e007:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e00c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e012:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e018:	ba 00 00 00 00       	mov    $0x0,%edx
f012e01d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e023:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e029:	29 d0                	sub    %edx,%eax
f012e02b:	89 c1                	mov    %eax,%ecx
f012e02d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e034:	10 00 00 
f012e037:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e03c:	0f b6 d0             	movzbl %al,%edx
f012e03f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e045:	01 d0                	add    %edx,%eax
f012e047:	48                   	dec    %eax
f012e048:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e04e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e054:	ba 00 00 00 00       	mov    $0x0,%edx
f012e059:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e05f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e065:	29 d0                	sub    %edx,%eax
f012e067:	01 c1                	add    %eax,%ecx
f012e069:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e070:	10 00 00 
f012e073:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e078:	0f b6 c0             	movzbl %al,%eax
f012e07b:	c1 e0 04             	shl    $0x4,%eax
f012e07e:	89 c2                	mov    %eax,%edx
f012e080:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e086:	01 d0                	add    %edx,%eax
f012e088:	48                   	dec    %eax
f012e089:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e08f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e095:	ba 00 00 00 00       	mov    $0x0,%edx
f012e09a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e0a0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e0a6:	29 d0                	sub    %edx,%eax
f012e0a8:	01 c8                	add    %ecx,%eax
f012e0aa:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012e0b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e0b3:	39 c2                	cmp    %eax,%edx
f012e0b5:	74 17                	je     f012e0ce <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012e0b7:	83 ec 04             	sub    $0x4,%esp
f012e0ba:	68 8c cd 13 f0       	push   $0xf013cd8c
f012e0bf:	68 9d 10 00 00       	push   $0x109d
f012e0c4:	68 7a b5 13 f0       	push   $0xf013b57a
f012e0c9:	e8 37 21 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012e0ce:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e0d1:	e8 83 ef fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e0d6:	29 c3                	sub    %eax,%ebx
f012e0d8:	89 d8                	mov    %ebx,%eax
f012e0da:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012e0df:	74 17                	je     f012e0f8 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012e0e1:	83 ec 04             	sub    $0x4,%esp
f012e0e4:	68 90 cc 13 f0       	push   $0xf013cc90
f012e0e9:	68 a0 10 00 00       	push   $0x10a0
f012e0ee:	68 7a b5 13 f0       	push   $0xf013b57a
f012e0f3:	e8 0d 21 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012e0f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e0fb:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e101:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e107:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012e10d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e114:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e117:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e11e:	eb 21                	jmp    f012e141 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012e120:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e126:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012e129:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e12f:	01 c8                	add    %ecx,%eax
f012e131:	8a 00                	mov    (%eax),%al
f012e133:	0f be c0             	movsbl %al,%eax
f012e136:	01 d0                	add    %edx,%eax
f012e138:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e13e:	ff 45 d8             	incl   -0x28(%ebp)
f012e141:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e147:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e14a:	7d d4                	jge    f012e120 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e14c:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012e152:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012e158:	42                   	inc    %edx
f012e159:	01 d2                	add    %edx,%edx
f012e15b:	39 d0                	cmp    %edx,%eax
f012e15d:	74 17                	je     f012e176 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012e15f:	83 ec 04             	sub    $0x4,%esp
f012e162:	68 c0 cd 13 f0       	push   $0xf013cdc0
f012e167:	68 ae 10 00 00       	push   $0x10ae
f012e16c:	68 7a b5 13 f0       	push   $0xf013b57a
f012e171:	e8 8f 20 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e176:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e17c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012e182:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e189:	00 00 00 
		sums[1] = 0;
f012e18c:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012e193:	00 00 00 
		sums[2] = 0;
f012e196:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012e19d:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e1a0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e1a7:	eb 70                	jmp    f012e219 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012e1a9:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1b2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1b9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1bf:	01 c8                	add    %ecx,%eax
f012e1c1:	8a 00                	mov    (%eax),%al
f012e1c3:	0f be c0             	movsbl %al,%eax
f012e1c6:	01 d0                	add    %edx,%eax
f012e1c8:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012e1ce:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012e1d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1d7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1e4:	01 c8                	add    %ecx,%eax
f012e1e6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e1ea:	98                   	cwtl   
f012e1eb:	01 d0                	add    %edx,%eax
f012e1ed:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012e1f3:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012e1f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1fc:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e203:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e209:	01 c8                	add    %ecx,%eax
f012e20b:	8b 40 04             	mov    0x4(%eax),%eax
f012e20e:	01 d0                	add    %edx,%eax
f012e210:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e216:	ff 45 d8             	incl   -0x28(%ebp)
f012e219:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e21f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e222:	7d 85                	jge    f012e1a9 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012e224:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012e22a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e230:	8d 50 01             	lea    0x1(%eax),%edx
f012e233:	89 d0                	mov    %edx,%eax
f012e235:	01 c0                	add    %eax,%eax
f012e237:	01 d0                	add    %edx,%eax
f012e239:	01 c0                	add    %eax,%eax
f012e23b:	01 d0                	add    %edx,%eax
f012e23d:	39 c1                	cmp    %eax,%ecx
f012e23f:	75 3a                	jne    f012e27b <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012e241:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012e247:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e24d:	8d 50 01             	lea    0x1(%eax),%edx
f012e250:	89 d0                	mov    %edx,%eax
f012e252:	01 c0                	add    %eax,%eax
f012e254:	01 d0                	add    %edx,%eax
f012e256:	01 c0                	add    %eax,%eax
f012e258:	01 d0                	add    %edx,%eax
f012e25a:	39 c1                	cmp    %eax,%ecx
f012e25c:	75 1d                	jne    f012e27b <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012e25e:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012e264:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e26a:	8d 50 01             	lea    0x1(%eax),%edx
f012e26d:	89 d0                	mov    %edx,%eax
f012e26f:	01 c0                	add    %eax,%eax
f012e271:	01 d0                	add    %edx,%eax
f012e273:	01 c0                	add    %eax,%eax
f012e275:	01 d0                	add    %edx,%eax
f012e277:	39 c1                	cmp    %eax,%ecx
f012e279:	74 17                	je     f012e292 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012e27b:	83 ec 04             	sub    $0x4,%esp
f012e27e:	68 c0 cd 13 f0       	push   $0xf013cdc0
f012e283:	68 c0 10 00 00       	push   $0x10c0
f012e288:	68 7a b5 13 f0       	push   $0xf013b57a
f012e28d:	e8 73 1f fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e292:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e298:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012e29e:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e2a5:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e2a8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e2af:	eb 24                	jmp    f012e2d5 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012e2b1:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e2b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e2ba:	01 c0                	add    %eax,%eax
f012e2bc:	89 c1                	mov    %eax,%ecx
f012e2be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e2c4:	01 c8                	add    %ecx,%eax
f012e2c6:	66 8b 00             	mov    (%eax),%ax
f012e2c9:	98                   	cwtl   
f012e2ca:	01 d0                	add    %edx,%eax
f012e2cc:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e2d2:	ff 45 d8             	incl   -0x28(%ebp)
f012e2d5:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e2db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e2de:	7d d1                	jge    f012e2b1 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012e2e0:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e2e6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e2ec:	8d 48 01             	lea    0x1(%eax),%ecx
f012e2ef:	89 c8                	mov    %ecx,%eax
f012e2f1:	c1 e0 02             	shl    $0x2,%eax
f012e2f4:	01 c8                	add    %ecx,%eax
f012e2f6:	39 c2                	cmp    %eax,%edx
f012e2f8:	74 17                	je     f012e311 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012e2fa:	83 ec 04             	sub    $0x4,%esp
f012e2fd:	68 c0 cd 13 f0       	push   $0xf013cdc0
f012e302:	68 ca 10 00 00       	push   $0x10ca
f012e307:	68 7a b5 13 f0       	push   $0xf013b57a
f012e30c:	e8 f4 1e fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012e311:	e8 43 ed fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e316:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e319:	e8 09 5a fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012e31e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012e324:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e32a:	83 ec 08             	sub    $0x8,%esp
f012e32d:	6a 00                	push   $0x0
f012e32f:	50                   	push   %eax
f012e330:	e8 41 99 fd ff       	call   f0107c76 <krealloc>
f012e335:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e338:	e8 ea 59 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012e33d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e343:	74 17                	je     f012e35c <test_krealloc+0x1e76>
			panic(
f012e345:	83 ec 04             	sub    $0x4,%esp
f012e348:	68 94 b5 13 f0       	push   $0xf013b594
f012e34d:	68 d2 10 00 00       	push   $0x10d2
f012e352:	68 7a b5 13 f0       	push   $0xf013b57a
f012e357:	e8 a9 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e35c:	e8 f8 ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e361:	89 c2                	mov    %eax,%edx
f012e363:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e366:	29 c2                	sub    %eax,%edx
f012e368:	89 d0                	mov    %edx,%eax
f012e36a:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e36f:	74 17                	je     f012e388 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e371:	83 ec 04             	sub    $0x4,%esp
f012e374:	68 50 ca 13 f0       	push   $0xf013ca50
f012e379:	68 d4 10 00 00       	push   $0x10d4
f012e37e:	68 7a b5 13 f0       	push   $0xf013b57a
f012e383:	e8 7d 1e fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e388:	e8 cc ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e38d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e390:	e8 92 59 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012e395:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e39b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e3a1:	83 ec 0c             	sub    $0xc,%esp
f012e3a4:	50                   	push   %eax
f012e3a5:	e8 09 97 fd ff       	call   f0107ab3 <kfree>
f012e3aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e3ad:	e8 75 59 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012e3b2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e3b8:	74 17                	je     f012e3d1 <test_krealloc+0x1eeb>
			panic(
f012e3ba:	83 ec 04             	sub    $0x4,%esp
f012e3bd:	68 94 b5 13 f0       	push   $0xf013b594
f012e3c2:	68 dc 10 00 00       	push   $0x10dc
f012e3c7:	68 7a b5 13 f0       	push   $0xf013b57a
f012e3cc:	e8 34 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e3d1:	e8 83 ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e3d6:	89 c2                	mov    %eax,%edx
f012e3d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e3db:	29 c2                	sub    %eax,%edx
f012e3dd:	89 d0                	mov    %edx,%eax
f012e3df:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e3e4:	74 17                	je     f012e3fd <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e3e6:	83 ec 04             	sub    $0x4,%esp
f012e3e9:	68 50 ca 13 f0       	push   $0xf013ca50
f012e3ee:	68 de 10 00 00       	push   $0x10de
f012e3f3:	68 7a b5 13 f0       	push   $0xf013b57a
f012e3f8:	e8 08 1e fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e3fd:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e404:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e40b:	eb 48                	jmp    f012e455 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e40d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e410:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f012e415:	83 ec 04             	sub    $0x4,%esp
f012e418:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e41e:	51                   	push   %ecx
f012e41f:	52                   	push   %edx
f012e420:	50                   	push   %eax
f012e421:	e8 ea 85 fd ff       	call   f0106a10 <get_page_table>
f012e426:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e429:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e42f:	85 c0                	test   %eax,%eax
f012e431:	75 17                	jne    f012e44a <test_krealloc+0x1f64>
					panic(
f012e433:	83 ec 04             	sub    $0x4,%esp
f012e436:	68 7c be 13 f0       	push   $0xf013be7c
f012e43b:	68 eb 10 00 00       	push   $0x10eb
f012e440:	68 7a b5 13 f0       	push   $0xf013b57a
f012e445:	e8 bb 1d fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e44a:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e451:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e455:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e459:	78 b2                	js     f012e40d <test_krealloc+0x1f27>
f012e45b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e45f:	7f 09                	jg     f012e46a <test_krealloc+0x1f84>
f012e461:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e468:	76 a3                	jbe    f012e40d <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e46a:	83 ec 0c             	sub    $0xc,%esp
f012e46d:	68 5e b7 13 f0       	push   $0xf013b75e
f012e472:	e8 97 28 fd ff       	call   f0100d0e <cprintf>
f012e477:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e47a:	83 ec 0c             	sub    $0xc,%esp
f012e47d:	68 ec cd 13 f0       	push   $0xf013cdec
f012e482:	e8 87 28 fd ff       	call   f0100d0e <cprintf>
f012e487:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e48a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e48f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e492:	5b                   	pop    %ebx
f012e493:	5f                   	pop    %edi
f012e494:	5d                   	pop    %ebp
f012e495:	c3                   	ret    

f012e496 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e496:	55                   	push   %ebp
f012e497:	89 e5                	mov    %esp,%ebp
f012e499:	57                   	push   %edi
f012e49a:	53                   	push   %ebx
f012e49b:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e4a1:	83 ec 0c             	sub    $0xc,%esp
f012e4a4:	68 bc b4 13 f0       	push   $0xf013b4bc
f012e4a9:	e8 60 28 fd ff       	call   f0100d0e <cprintf>
f012e4ae:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e4b1:	83 ec 0c             	sub    $0xc,%esp
f012e4b4:	68 ec b4 13 f0       	push   $0xf013b4ec
f012e4b9:	e8 50 28 fd ff       	call   f0100d0e <cprintf>
f012e4be:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e4c1:	83 ec 0c             	sub    $0xc,%esp
f012e4c4:	68 bc b4 13 f0       	push   $0xf013b4bc
f012e4c9:	e8 40 28 fd ff       	call   f0100d0e <cprintf>
f012e4ce:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e4d1:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e4d5:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e4d9:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e4df:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e4e5:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e4ec:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e4f3:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e4f9:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e4fe:	b8 00 00 00 00       	mov    $0x0,%eax
f012e503:	89 d7                	mov    %edx,%edi
f012e505:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e507:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e50e:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e514:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e519:	b8 00 00 00 00       	mov    $0x0,%eax
f012e51e:	89 d7                	mov    %edx,%edi
f012e520:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e522:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e528:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e52d:	b8 00 00 00 00       	mov    $0x0,%eax
f012e532:	89 d7                	mov    %edx,%edi
f012e534:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e536:	e8 1e eb fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e53b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e53e:	83 ec 08             	sub    $0x8,%esp
f012e541:	68 00 fc 0f 00       	push   $0xffc00
f012e546:	6a 00                	push   $0x0
f012e548:	e8 29 97 fd ff       	call   f0107c76 <krealloc>
f012e54d:	83 c4 10             	add    $0x10,%esp
f012e550:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e556:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e55c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e561:	77 17                	ja     f012e57a <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e563:	83 ec 04             	sub    $0x4,%esp
f012e566:	68 20 c8 13 f0       	push   $0xf013c820
f012e56b:	68 1a 11 00 00       	push   $0x111a
f012e570:	68 7a b5 13 f0       	push   $0xf013b57a
f012e575:	e8 8b 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e57a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e580:	89 c1                	mov    %eax,%ecx
f012e582:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e589:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e58c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e591:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e594:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e597:	ba 00 00 00 00       	mov    $0x0,%edx
f012e59c:	f7 75 b4             	divl   -0x4c(%ebp)
f012e59f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e5a2:	29 d0                	sub    %edx,%eax
f012e5a4:	89 c3                	mov    %eax,%ebx
f012e5a6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e5ad:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e5b2:	0f b6 d0             	movzbl %al,%edx
f012e5b5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e5b8:	01 d0                	add    %edx,%eax
f012e5ba:	48                   	dec    %eax
f012e5bb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e5be:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5c6:	f7 75 ac             	divl   -0x54(%ebp)
f012e5c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5cc:	29 d0                	sub    %edx,%eax
f012e5ce:	01 c3                	add    %eax,%ebx
f012e5d0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e5d7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e5dc:	0f b6 c0             	movzbl %al,%eax
f012e5df:	c1 e0 04             	shl    $0x4,%eax
f012e5e2:	89 c2                	mov    %eax,%edx
f012e5e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e5e7:	01 d0                	add    %edx,%eax
f012e5e9:	48                   	dec    %eax
f012e5ea:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e5ed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e5f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5f5:	f7 75 a4             	divl   -0x5c(%ebp)
f012e5f8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e5fb:	29 d0                	sub    %edx,%eax
f012e5fd:	01 d8                	add    %ebx,%eax
f012e5ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e604:	39 c1                	cmp    %eax,%ecx
f012e606:	74 17                	je     f012e61f <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e608:	83 ec 04             	sub    $0x4,%esp
f012e60b:	68 5c c8 13 f0       	push   $0xf013c85c
f012e610:	68 1c 11 00 00       	push   $0x111c
f012e615:	68 7a b5 13 f0       	push   $0xf013b57a
f012e61a:	e8 e6 1b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e61f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e622:	e8 32 ea fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e627:	29 c3                	sub    %eax,%ebx
f012e629:	89 d8                	mov    %ebx,%eax
f012e62b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e630:	74 17                	je     f012e649 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e632:	83 ec 04             	sub    $0x4,%esp
f012e635:	68 8e c8 13 f0       	push   $0xf013c88e
f012e63a:	68 1f 11 00 00       	push   $0x111f
f012e63f:	68 7a b5 13 f0       	push   $0xf013b57a
f012e644:	e8 bc 1b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e649:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e650:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e653:	e8 01 ea fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e658:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e65b:	83 ec 08             	sub    $0x8,%esp
f012e65e:	68 00 fc 0f 00       	push   $0xffc00
f012e663:	6a 00                	push   $0x0
f012e665:	e8 0c 96 fd ff       	call   f0107c76 <krealloc>
f012e66a:	83 c4 10             	add    $0x10,%esp
f012e66d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e673:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e679:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e67e:	77 17                	ja     f012e697 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e680:	83 ec 04             	sub    $0x4,%esp
f012e683:	68 20 c8 13 f0       	push   $0xf013c820
f012e688:	68 27 11 00 00       	push   $0x1127
f012e68d:	68 7a b5 13 f0       	push   $0xf013b57a
f012e692:	e8 6e 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e697:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e69d:	89 c1                	mov    %eax,%ecx
f012e69f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e6a6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e6a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e6ae:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e6b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6b9:	f7 75 9c             	divl   -0x64(%ebp)
f012e6bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6bf:	29 d0                	sub    %edx,%eax
f012e6c1:	89 c3                	mov    %eax,%ebx
f012e6c3:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e6ca:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e6cf:	0f b6 d0             	movzbl %al,%edx
f012e6d2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e6d5:	01 d0                	add    %edx,%eax
f012e6d7:	48                   	dec    %eax
f012e6d8:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e6db:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e6de:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6e3:	f7 75 94             	divl   -0x6c(%ebp)
f012e6e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e6e9:	29 d0                	sub    %edx,%eax
f012e6eb:	01 c3                	add    %eax,%ebx
f012e6ed:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e6f4:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e6f9:	0f b6 c0             	movzbl %al,%eax
f012e6fc:	c1 e0 04             	shl    $0x4,%eax
f012e6ff:	89 c2                	mov    %eax,%edx
f012e701:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e704:	01 d0                	add    %edx,%eax
f012e706:	48                   	dec    %eax
f012e707:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e70a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e70d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e712:	f7 75 8c             	divl   -0x74(%ebp)
f012e715:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e718:	29 d0                	sub    %edx,%eax
f012e71a:	01 d8                	add    %ebx,%eax
f012e71c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e721:	39 c1                	cmp    %eax,%ecx
f012e723:	74 17                	je     f012e73c <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e725:	83 ec 04             	sub    $0x4,%esp
f012e728:	68 5c c8 13 f0       	push   $0xf013c85c
f012e72d:	68 29 11 00 00       	push   $0x1129
f012e732:	68 7a b5 13 f0       	push   $0xf013b57a
f012e737:	e8 c9 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e73c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e73f:	e8 15 e9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e744:	29 c3                	sub    %eax,%ebx
f012e746:	89 d8                	mov    %ebx,%eax
f012e748:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e74d:	74 17                	je     f012e766 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e74f:	83 ec 04             	sub    $0x4,%esp
f012e752:	68 8e c8 13 f0       	push   $0xf013c88e
f012e757:	68 2b 11 00 00       	push   $0x112b
f012e75c:	68 7a b5 13 f0       	push   $0xf013b57a
f012e761:	e8 9f 1a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e766:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e76d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e770:	e8 e4 e8 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e775:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e778:	83 ec 08             	sub    $0x8,%esp
f012e77b:	68 00 fc 0f 00       	push   $0xffc00
f012e780:	6a 00                	push   $0x0
f012e782:	e8 ef 94 fd ff       	call   f0107c76 <krealloc>
f012e787:	83 c4 10             	add    $0x10,%esp
f012e78a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e790:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e796:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e79b:	77 17                	ja     f012e7b4 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e79d:	83 ec 04             	sub    $0x4,%esp
f012e7a0:	68 20 c8 13 f0       	push   $0xf013c820
f012e7a5:	68 33 11 00 00       	push   $0x1133
f012e7aa:	68 7a b5 13 f0       	push   $0xf013b57a
f012e7af:	e8 51 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e7b4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7ba:	89 c1                	mov    %eax,%ecx
f012e7bc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e7c3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e7c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7cb:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e7ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e7d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7d6:	f7 75 84             	divl   -0x7c(%ebp)
f012e7d9:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e7dc:	29 d0                	sub    %edx,%eax
f012e7de:	89 c3                	mov    %eax,%ebx
f012e7e0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e7e7:	10 00 00 
f012e7ea:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e7ef:	0f b6 d0             	movzbl %al,%edx
f012e7f2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e7f8:	01 d0                	add    %edx,%eax
f012e7fa:	48                   	dec    %eax
f012e7fb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e801:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e807:	ba 00 00 00 00       	mov    $0x0,%edx
f012e80c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e812:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e818:	29 d0                	sub    %edx,%eax
f012e81a:	01 c3                	add    %eax,%ebx
f012e81c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e823:	10 00 00 
f012e826:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e82b:	0f b6 c0             	movzbl %al,%eax
f012e82e:	c1 e0 04             	shl    $0x4,%eax
f012e831:	89 c2                	mov    %eax,%edx
f012e833:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e839:	01 d0                	add    %edx,%eax
f012e83b:	48                   	dec    %eax
f012e83c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e842:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e848:	ba 00 00 00 00       	mov    $0x0,%edx
f012e84d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e853:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e859:	29 d0                	sub    %edx,%eax
f012e85b:	01 d8                	add    %ebx,%eax
f012e85d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e862:	39 c1                	cmp    %eax,%ecx
f012e864:	74 17                	je     f012e87d <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e866:	83 ec 04             	sub    $0x4,%esp
f012e869:	68 5c c8 13 f0       	push   $0xf013c85c
f012e86e:	68 35 11 00 00       	push   $0x1135
f012e873:	68 7a b5 13 f0       	push   $0xf013b57a
f012e878:	e8 88 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e87d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e880:	e8 d4 e7 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e885:	29 c3                	sub    %eax,%ebx
f012e887:	89 d8                	mov    %ebx,%eax
f012e889:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e88e:	74 17                	je     f012e8a7 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e890:	83 ec 04             	sub    $0x4,%esp
f012e893:	68 8e c8 13 f0       	push   $0xf013c88e
f012e898:	68 37 11 00 00       	push   $0x1137
f012e89d:	68 7a b5 13 f0       	push   $0xf013b57a
f012e8a2:	e8 5e 19 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e8a7:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e8ae:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e8b1:	e8 a3 e7 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e8b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e8b9:	83 ec 08             	sub    $0x8,%esp
f012e8bc:	68 00 fc 0f 00       	push   $0xffc00
f012e8c1:	6a 00                	push   $0x0
f012e8c3:	e8 ae 93 fd ff       	call   f0107c76 <krealloc>
f012e8c8:	83 c4 10             	add    $0x10,%esp
f012e8cb:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e8d1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e8d7:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e8dc:	77 17                	ja     f012e8f5 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8de:	83 ec 04             	sub    $0x4,%esp
f012e8e1:	68 20 c8 13 f0       	push   $0xf013c820
f012e8e6:	68 3e 11 00 00       	push   $0x113e
f012e8eb:	68 7a b5 13 f0       	push   $0xf013b57a
f012e8f0:	e8 10 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e8f5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e8fb:	89 c1                	mov    %eax,%ecx
f012e8fd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e904:	10 00 00 
f012e907:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e90d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e912:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e918:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e91e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e923:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e929:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e92f:	29 d0                	sub    %edx,%eax
f012e931:	89 c3                	mov    %eax,%ebx
f012e933:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e93a:	10 00 00 
f012e93d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e942:	0f b6 d0             	movzbl %al,%edx
f012e945:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e94b:	01 d0                	add    %edx,%eax
f012e94d:	48                   	dec    %eax
f012e94e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e954:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e95a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e95f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e965:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e96b:	29 d0                	sub    %edx,%eax
f012e96d:	01 c3                	add    %eax,%ebx
f012e96f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e976:	10 00 00 
f012e979:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012e97e:	0f b6 c0             	movzbl %al,%eax
f012e981:	c1 e0 04             	shl    $0x4,%eax
f012e984:	89 c2                	mov    %eax,%edx
f012e986:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e98c:	01 d0                	add    %edx,%eax
f012e98e:	48                   	dec    %eax
f012e98f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e995:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e99b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9a0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e9a6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e9ac:	29 d0                	sub    %edx,%eax
f012e9ae:	01 d8                	add    %ebx,%eax
f012e9b0:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e9b5:	39 c1                	cmp    %eax,%ecx
f012e9b7:	74 17                	je     f012e9d0 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e9b9:	83 ec 04             	sub    $0x4,%esp
f012e9bc:	68 5c c8 13 f0       	push   $0xf013c85c
f012e9c1:	68 40 11 00 00       	push   $0x1140
f012e9c6:	68 7a b5 13 f0       	push   $0xf013b57a
f012e9cb:	e8 35 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e9d0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e9d3:	e8 81 e6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e9d8:	29 c3                	sub    %eax,%ebx
f012e9da:	89 d8                	mov    %ebx,%eax
f012e9dc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e9e1:	74 17                	je     f012e9fa <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e9e3:	83 ec 04             	sub    $0x4,%esp
f012e9e6:	68 8e c8 13 f0       	push   $0xf013c88e
f012e9eb:	68 42 11 00 00       	push   $0x1142
f012e9f0:	68 7a b5 13 f0       	push   $0xf013b57a
f012e9f5:	e8 0b 18 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e9fa:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012ea01:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ea04:	e8 50 e6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ea09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ea0c:	83 ec 08             	sub    $0x8,%esp
f012ea0f:	68 00 fc 1f 00       	push   $0x1ffc00
f012ea14:	6a 00                	push   $0x0
f012ea16:	e8 5b 92 fd ff       	call   f0107c76 <krealloc>
f012ea1b:	83 c4 10             	add    $0x10,%esp
f012ea1e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ea24:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea2a:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ea2f:	77 17                	ja     f012ea48 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea31:	83 ec 04             	sub    $0x4,%esp
f012ea34:	68 20 c8 13 f0       	push   $0xf013c820
f012ea39:	68 49 11 00 00       	push   $0x1149
f012ea3e:	68 7a b5 13 f0       	push   $0xf013b57a
f012ea43:	e8 bd 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ea48:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea4e:	89 c1                	mov    %eax,%ecx
f012ea50:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012ea57:	10 00 00 
f012ea5a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012ea60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea65:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012ea6b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ea71:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea76:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012ea7c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ea82:	29 d0                	sub    %edx,%eax
f012ea84:	89 c3                	mov    %eax,%ebx
f012ea86:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012ea8d:	10 00 00 
f012ea90:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ea95:	0f b6 d0             	movzbl %al,%edx
f012ea98:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012ea9e:	01 d0                	add    %edx,%eax
f012eaa0:	48                   	dec    %eax
f012eaa1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012eaa7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eaad:	ba 00 00 00 00       	mov    $0x0,%edx
f012eab2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012eab8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eabe:	29 d0                	sub    %edx,%eax
f012eac0:	01 c3                	add    %eax,%ebx
f012eac2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012eac9:	10 00 00 
f012eacc:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ead1:	0f b6 c0             	movzbl %al,%eax
f012ead4:	c1 e0 04             	shl    $0x4,%eax
f012ead7:	89 c2                	mov    %eax,%edx
f012ead9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012eadf:	01 d0                	add    %edx,%eax
f012eae1:	48                   	dec    %eax
f012eae2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012eae8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eaee:	ba 00 00 00 00       	mov    $0x0,%edx
f012eaf3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012eaf9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eaff:	29 d0                	sub    %edx,%eax
f012eb01:	01 d8                	add    %ebx,%eax
f012eb03:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012eb08:	39 c1                	cmp    %eax,%ecx
f012eb0a:	74 17                	je     f012eb23 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012eb0c:	83 ec 04             	sub    $0x4,%esp
f012eb0f:	68 5c c8 13 f0       	push   $0xf013c85c
f012eb14:	68 4b 11 00 00       	push   $0x114b
f012eb19:	68 7a b5 13 f0       	push   $0xf013b57a
f012eb1e:	e8 e2 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012eb23:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb26:	e8 2e e5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012eb2b:	29 c3                	sub    %eax,%ebx
f012eb2d:	89 d8                	mov    %ebx,%eax
f012eb2f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eb34:	74 17                	je     f012eb4d <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012eb36:	83 ec 04             	sub    $0x4,%esp
f012eb39:	68 8e c8 13 f0       	push   $0xf013c88e
f012eb3e:	68 4d 11 00 00       	push   $0x114d
f012eb43:	68 7a b5 13 f0       	push   $0xf013b57a
f012eb48:	e8 b8 16 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012eb4d:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012eb54:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012eb57:	e8 fd e4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012eb5c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012eb5f:	83 ec 08             	sub    $0x8,%esp
f012eb62:	68 00 fc 1f 00       	push   $0x1ffc00
f012eb67:	6a 00                	push   $0x0
f012eb69:	e8 08 91 fd ff       	call   f0107c76 <krealloc>
f012eb6e:	83 c4 10             	add    $0x10,%esp
f012eb71:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012eb77:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eb7d:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012eb82:	77 17                	ja     f012eb9b <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb84:	83 ec 04             	sub    $0x4,%esp
f012eb87:	68 20 c8 13 f0       	push   $0xf013c820
f012eb8c:	68 54 11 00 00       	push   $0x1154
f012eb91:	68 7a b5 13 f0       	push   $0xf013b57a
f012eb96:	e8 6a 16 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012eb9b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eba1:	89 c1                	mov    %eax,%ecx
f012eba3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ebaa:	10 00 00 
f012ebad:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ebb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ebb8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ebbe:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ebc4:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebc9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ebcf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ebd5:	29 d0                	sub    %edx,%eax
f012ebd7:	89 c3                	mov    %eax,%ebx
f012ebd9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ebe0:	10 00 00 
f012ebe3:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ebe8:	0f b6 d0             	movzbl %al,%edx
f012ebeb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012ebf1:	01 d0                	add    %edx,%eax
f012ebf3:	48                   	dec    %eax
f012ebf4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012ebfa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec00:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec05:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012ec0b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec11:	29 d0                	sub    %edx,%eax
f012ec13:	01 c3                	add    %eax,%ebx
f012ec15:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ec1c:	10 00 00 
f012ec1f:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ec24:	0f b6 c0             	movzbl %al,%eax
f012ec27:	c1 e0 04             	shl    $0x4,%eax
f012ec2a:	89 c2                	mov    %eax,%edx
f012ec2c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ec32:	01 d0                	add    %edx,%eax
f012ec34:	48                   	dec    %eax
f012ec35:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012ec3b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec41:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec46:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012ec4c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec52:	29 d0                	sub    %edx,%eax
f012ec54:	01 d8                	add    %ebx,%eax
f012ec56:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ec5b:	39 c1                	cmp    %eax,%ecx
f012ec5d:	74 17                	je     f012ec76 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ec5f:	83 ec 04             	sub    $0x4,%esp
f012ec62:	68 5c c8 13 f0       	push   $0xf013c85c
f012ec67:	68 56 11 00 00       	push   $0x1156
f012ec6c:	68 7a b5 13 f0       	push   $0xf013b57a
f012ec71:	e8 8f 15 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ec76:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ec79:	e8 db e3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ec7e:	29 c3                	sub    %eax,%ebx
f012ec80:	89 d8                	mov    %ebx,%eax
f012ec82:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ec87:	74 17                	je     f012eca0 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012ec89:	83 ec 04             	sub    $0x4,%esp
f012ec8c:	68 8e c8 13 f0       	push   $0xf013c88e
f012ec91:	68 58 11 00 00       	push   $0x1158
f012ec96:	68 7a b5 13 f0       	push   $0xf013b57a
f012ec9b:	e8 65 15 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012eca0:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012eca7:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ecaa:	e8 aa e3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ecaf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012ecb2:	83 ec 08             	sub    $0x8,%esp
f012ecb5:	68 00 fc 2f 00       	push   $0x2ffc00
f012ecba:	6a 00                	push   $0x0
f012ecbc:	e8 b5 8f fd ff       	call   f0107c76 <krealloc>
f012ecc1:	83 c4 10             	add    $0x10,%esp
f012ecc4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012ecca:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecd0:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012ecd5:	77 17                	ja     f012ecee <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ecd7:	83 ec 04             	sub    $0x4,%esp
f012ecda:	68 20 c8 13 f0       	push   $0xf013c820
f012ecdf:	68 5f 11 00 00       	push   $0x115f
f012ece4:	68 7a b5 13 f0       	push   $0xf013b57a
f012ece9:	e8 17 15 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ecee:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecf4:	89 c1                	mov    %eax,%ecx
f012ecf6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ecfd:	10 00 00 
f012ed00:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ed06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed0b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ed11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed17:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed1c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ed22:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed28:	29 d0                	sub    %edx,%eax
f012ed2a:	89 c3                	mov    %eax,%ebx
f012ed2c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ed33:	10 00 00 
f012ed36:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ed3b:	0f b6 d0             	movzbl %al,%edx
f012ed3e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ed44:	01 d0                	add    %edx,%eax
f012ed46:	48                   	dec    %eax
f012ed47:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ed4d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed53:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed58:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ed5e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed64:	29 d0                	sub    %edx,%eax
f012ed66:	01 c3                	add    %eax,%ebx
f012ed68:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ed6f:	10 00 00 
f012ed72:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ed77:	0f b6 c0             	movzbl %al,%eax
f012ed7a:	c1 e0 04             	shl    $0x4,%eax
f012ed7d:	89 c2                	mov    %eax,%edx
f012ed7f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ed85:	01 d0                	add    %edx,%eax
f012ed87:	48                   	dec    %eax
f012ed88:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ed8e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ed94:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed99:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ed9f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012eda5:	29 d0                	sub    %edx,%eax
f012eda7:	01 d8                	add    %ebx,%eax
f012eda9:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012edae:	39 c1                	cmp    %eax,%ecx
f012edb0:	74 17                	je     f012edc9 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012edb2:	83 ec 04             	sub    $0x4,%esp
f012edb5:	68 5c c8 13 f0       	push   $0xf013c85c
f012edba:	68 61 11 00 00       	push   $0x1161
f012edbf:	68 7a b5 13 f0       	push   $0xf013b57a
f012edc4:	e8 3c 14 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012edc9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012edcc:	e8 88 e2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012edd1:	29 c3                	sub    %eax,%ebx
f012edd3:	89 d8                	mov    %ebx,%eax
f012edd5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012edda:	74 17                	je     f012edf3 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012eddc:	83 ec 04             	sub    $0x4,%esp
f012eddf:	68 c4 b9 13 f0       	push   $0xf013b9c4
f012ede4:	68 63 11 00 00       	push   $0x1163
f012ede9:	68 7a b5 13 f0       	push   $0xf013b57a
f012edee:	e8 12 14 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012edf3:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012edfa:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012edfd:	e8 57 e2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ee02:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ee05:	83 ec 08             	sub    $0x8,%esp
f012ee08:	68 00 fc 2f 00       	push   $0x2ffc00
f012ee0d:	6a 00                	push   $0x0
f012ee0f:	e8 62 8e fd ff       	call   f0107c76 <krealloc>
f012ee14:	83 c4 10             	add    $0x10,%esp
f012ee17:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ee1d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee23:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ee28:	77 17                	ja     f012ee41 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee2a:	83 ec 04             	sub    $0x4,%esp
f012ee2d:	68 20 c8 13 f0       	push   $0xf013c820
f012ee32:	68 6a 11 00 00       	push   $0x116a
f012ee37:	68 7a b5 13 f0       	push   $0xf013b57a
f012ee3c:	e8 c4 13 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ee41:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee47:	89 c1                	mov    %eax,%ecx
f012ee49:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ee50:	10 00 00 
f012ee53:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ee59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ee5e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ee64:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ee6a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee6f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ee75:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ee7b:	29 d0                	sub    %edx,%eax
f012ee7d:	89 c3                	mov    %eax,%ebx
f012ee7f:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ee86:	10 00 00 
f012ee89:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ee8e:	0f b6 d0             	movzbl %al,%edx
f012ee91:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012ee97:	01 d0                	add    %edx,%eax
f012ee99:	48                   	dec    %eax
f012ee9a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012eea0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eea6:	ba 00 00 00 00       	mov    $0x0,%edx
f012eeab:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012eeb1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eeb7:	29 d0                	sub    %edx,%eax
f012eeb9:	01 c3                	add    %eax,%ebx
f012eebb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012eec2:	10 00 00 
f012eec5:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012eeca:	0f b6 c0             	movzbl %al,%eax
f012eecd:	c1 e0 04             	shl    $0x4,%eax
f012eed0:	89 c2                	mov    %eax,%edx
f012eed2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012eed8:	01 d0                	add    %edx,%eax
f012eeda:	48                   	dec    %eax
f012eedb:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012eee1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eee7:	ba 00 00 00 00       	mov    $0x0,%edx
f012eeec:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012eef2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012eef8:	29 d0                	sub    %edx,%eax
f012eefa:	01 d8                	add    %ebx,%eax
f012eefc:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ef01:	39 c1                	cmp    %eax,%ecx
f012ef03:	74 17                	je     f012ef1c <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ef05:	83 ec 04             	sub    $0x4,%esp
f012ef08:	68 5c c8 13 f0       	push   $0xf013c85c
f012ef0d:	68 6c 11 00 00       	push   $0x116c
f012ef12:	68 7a b5 13 f0       	push   $0xf013b57a
f012ef17:	e8 e9 12 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ef1c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef1f:	e8 35 e1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ef24:	29 c3                	sub    %eax,%ebx
f012ef26:	89 d8                	mov    %ebx,%eax
f012ef28:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ef2d:	74 17                	je     f012ef46 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ef2f:	83 ec 04             	sub    $0x4,%esp
f012ef32:	68 8e c8 13 f0       	push   $0xf013c88e
f012ef37:	68 6e 11 00 00       	push   $0x116e
f012ef3c:	68 7a b5 13 f0       	push   $0xf013b57a
f012ef41:	e8 bf 12 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ef46:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ef4d:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ef50:	e8 04 e1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ef55:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ef58:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ef5f:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ef62:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ef68:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ef6e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ef74:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ef77:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ef79:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ef7f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ef85:	01 c2                	add    %eax,%edx
f012ef87:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ef8a:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ef8c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ef92:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ef98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ef9f:	eb 11                	jmp    f012efb2 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012efa1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efa4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012efaa:	01 d0                	add    %edx,%eax
f012efac:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012efaf:	ff 45 f4             	incl   -0xc(%ebp)
f012efb2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012efb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012efbb:	7d e4                	jge    f012efa1 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012efbd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012efc3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012efc9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012efcf:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012efd5:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012efdb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012efe2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012efe8:	01 d0                	add    %edx,%eax
f012efea:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012eff0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eff6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012effc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f003:	eb 1b                	jmp    f012f020 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012f005:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f008:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f00f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f015:	01 d0                	add    %edx,%eax
f012f017:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f01d:	ff 45 f0             	incl   -0x10(%ebp)
f012f020:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f026:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f029:	7d da                	jge    f012f005 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f02b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f031:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f037:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012f03e:	eb 17                	jmp    f012f057 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012f040:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f043:	01 c0                	add    %eax,%eax
f012f045:	89 c2                	mov    %eax,%edx
f012f047:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f04d:	01 d0                	add    %edx,%eax
f012f04f:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f054:	ff 45 ec             	incl   -0x14(%ebp)
f012f057:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f05d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012f060:	7d de                	jge    f012f040 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012f062:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f068:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012f06e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f074:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012f079:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f07f:	01 c0                	add    %eax,%eax
f012f081:	89 c2                	mov    %eax,%edx
f012f083:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f089:	01 d0                	add    %edx,%eax
f012f08b:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012f090:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f096:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f09c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f0a3:	eb 49                	jmp    f012f0ee <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012f0a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0a8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0af:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0b5:	01 d0                	add    %edx,%eax
f012f0b7:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012f0ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0bd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0c4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0ca:	01 d0                	add    %edx,%eax
f012f0cc:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012f0d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0e2:	01 d0                	add    %edx,%eax
f012f0e4:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f0eb:	ff 45 e8             	incl   -0x18(%ebp)
f012f0ee:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f0f4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f0f7:	7d ac                	jge    f012f0a5 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012f0f9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f0ff:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012f105:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f10b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012f10e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f114:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012f11a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f120:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012f127:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f12d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f134:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f13a:	01 d0                	add    %edx,%eax
f012f13c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012f13f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f145:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f14c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f152:	01 d0                	add    %edx,%eax
f012f154:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012f15a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f160:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f167:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f16d:	01 d0                	add    %edx,%eax
f012f16f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012f176:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f17c:	8a 00                	mov    (%eax),%al
f012f17e:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012f181:	75 17                	jne    f012f19a <test_krealloc_BF+0xd04>
f012f183:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012f189:	89 c2                	mov    %eax,%edx
f012f18b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f191:	01 d0                	add    %edx,%eax
f012f193:	8a 00                	mov    (%eax),%al
f012f195:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012f198:	74 17                	je     f012f1b1 <test_krealloc_BF+0xd1b>
			panic(
f012f19a:	83 ec 04             	sub    $0x4,%esp
f012f19d:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f1a2:	68 b1 11 00 00       	push   $0x11b1
f012f1a7:	68 7a b5 13 f0       	push   $0xf013b57a
f012f1ac:	e8 54 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012f1b1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f1b7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012f1bd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1c3:	8a 00                	mov    (%eax),%al
f012f1c5:	3c 02                	cmp    $0x2,%al
f012f1c7:	75 16                	jne    f012f1df <test_krealloc_BF+0xd49>
f012f1c9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f1cf:	89 c2                	mov    %eax,%edx
f012f1d1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1d7:	01 d0                	add    %edx,%eax
f012f1d9:	8a 00                	mov    (%eax),%al
f012f1db:	3c 02                	cmp    $0x2,%al
f012f1dd:	74 20                	je     f012f1ff <test_krealloc_BF+0xd69>
			panic(
f012f1df:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1e5:	8a 00                	mov    (%eax),%al
f012f1e7:	0f be c0             	movsbl %al,%eax
f012f1ea:	50                   	push   %eax
f012f1eb:	68 ec c8 13 f0       	push   $0xf013c8ec
f012f1f0:	68 b7 11 00 00       	push   $0x11b7
f012f1f5:	68 7a b5 13 f0       	push   $0xf013b57a
f012f1fa:	e8 06 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012f1ff:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f205:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012f20b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f211:	8b 00                	mov    (%eax),%eax
f012f213:	83 f8 03             	cmp    $0x3,%eax
f012f216:	75 1c                	jne    f012f234 <test_krealloc_BF+0xd9e>
f012f218:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f21e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f225:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f22b:	01 d0                	add    %edx,%eax
f012f22d:	8b 00                	mov    (%eax),%eax
f012f22f:	83 f8 03             	cmp    $0x3,%eax
f012f232:	74 17                	je     f012f24b <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012f234:	83 ec 04             	sub    $0x4,%esp
f012f237:	68 38 c9 13 f0       	push   $0xf013c938
f012f23c:	68 bb 11 00 00       	push   $0x11bb
f012f241:	68 7a b5 13 f0       	push   $0xf013b57a
f012f246:	e8 ba 0f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012f24b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f251:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012f257:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f25d:	8b 00                	mov    (%eax),%eax
f012f25f:	83 f8 04             	cmp    $0x4,%eax
f012f262:	75 1c                	jne    f012f280 <test_krealloc_BF+0xdea>
f012f264:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f26a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f271:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f277:	01 d0                	add    %edx,%eax
f012f279:	8b 00                	mov    (%eax),%eax
f012f27b:	83 f8 04             	cmp    $0x4,%eax
f012f27e:	74 17                	je     f012f297 <test_krealloc_BF+0xe01>
			panic(
f012f280:	83 ec 04             	sub    $0x4,%esp
f012f283:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f288:	68 c0 11 00 00       	push   $0x11c0
f012f28d:	68 7a b5 13 f0       	push   $0xf013b57a
f012f292:	e8 6e 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012f297:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f29d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012f2a3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2a9:	66 8b 00             	mov    (%eax),%ax
f012f2ac:	66 83 f8 05          	cmp    $0x5,%ax
f012f2b0:	75 1b                	jne    f012f2cd <test_krealloc_BF+0xe37>
f012f2b2:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f2b8:	01 c0                	add    %eax,%eax
f012f2ba:	89 c2                	mov    %eax,%edx
f012f2bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2c2:	01 d0                	add    %edx,%eax
f012f2c4:	66 8b 00             	mov    (%eax),%ax
f012f2c7:	66 83 f8 05          	cmp    $0x5,%ax
f012f2cb:	74 17                	je     f012f2e4 <test_krealloc_BF+0xe4e>
			panic(
f012f2cd:	83 ec 04             	sub    $0x4,%esp
f012f2d0:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f2d5:	68 c5 11 00 00       	push   $0x11c5
f012f2da:	68 7a b5 13 f0       	push   $0xf013b57a
f012f2df:	e8 21 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012f2e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f2ea:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012f2f0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2f6:	66 8b 00             	mov    (%eax),%ax
f012f2f9:	66 83 f8 06          	cmp    $0x6,%ax
f012f2fd:	75 1b                	jne    f012f31a <test_krealloc_BF+0xe84>
f012f2ff:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f305:	01 c0                	add    %eax,%eax
f012f307:	89 c2                	mov    %eax,%edx
f012f309:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f30f:	01 d0                	add    %edx,%eax
f012f311:	66 8b 00             	mov    (%eax),%ax
f012f314:	66 83 f8 06          	cmp    $0x6,%ax
f012f318:	74 17                	je     f012f331 <test_krealloc_BF+0xe9b>
			panic(
f012f31a:	83 ec 04             	sub    $0x4,%esp
f012f31d:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f322:	68 ca 11 00 00       	push   $0x11ca
f012f327:	68 7a b5 13 f0       	push   $0xf013b57a
f012f32c:	e8 d4 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f331:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f337:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f33d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f343:	8a 00                	mov    (%eax),%al
f012f345:	3c 07                	cmp    $0x7,%al
f012f347:	75 1b                	jne    f012f364 <test_krealloc_BF+0xece>
f012f349:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f34f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f356:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f35c:	01 d0                	add    %edx,%eax
f012f35e:	8a 00                	mov    (%eax),%al
f012f360:	3c 07                	cmp    $0x7,%al
f012f362:	74 17                	je     f012f37b <test_krealloc_BF+0xee5>
			panic(
f012f364:	83 ec 04             	sub    $0x4,%esp
f012f367:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f36c:	68 cf 11 00 00       	push   $0x11cf
f012f371:	68 7a b5 13 f0       	push   $0xf013b57a
f012f376:	e8 8a 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f37b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f381:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f385:	66 83 f8 07          	cmp    $0x7,%ax
f012f389:	75 1f                	jne    f012f3aa <test_krealloc_BF+0xf14>
f012f38b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f391:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f398:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f39e:	01 d0                	add    %edx,%eax
f012f3a0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3a4:	66 83 f8 07          	cmp    $0x7,%ax
f012f3a8:	74 17                	je     f012f3c1 <test_krealloc_BF+0xf2b>
			panic(
f012f3aa:	83 ec 04             	sub    $0x4,%esp
f012f3ad:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f3b2:	68 d2 11 00 00       	push   $0x11d2
f012f3b7:	68 7a b5 13 f0       	push   $0xf013b57a
f012f3bc:	e8 44 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f3c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3c7:	8b 40 04             	mov    0x4(%eax),%eax
f012f3ca:	83 f8 07             	cmp    $0x7,%eax
f012f3cd:	75 1d                	jne    f012f3ec <test_krealloc_BF+0xf56>
f012f3cf:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3e2:	01 d0                	add    %edx,%eax
f012f3e4:	8b 40 04             	mov    0x4(%eax),%eax
f012f3e7:	83 f8 07             	cmp    $0x7,%eax
f012f3ea:	74 17                	je     f012f403 <test_krealloc_BF+0xf6d>
			panic(
f012f3ec:	83 ec 04             	sub    $0x4,%esp
f012f3ef:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f3f4:	68 d5 11 00 00       	push   $0x11d5
f012f3f9:	68 7a b5 13 f0       	push   $0xf013b57a
f012f3fe:	e8 02 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f403:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f409:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f40f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f415:	8a 00                	mov    (%eax),%al
f012f417:	3c 08                	cmp    $0x8,%al
f012f419:	75 1b                	jne    f012f436 <test_krealloc_BF+0xfa0>
f012f41b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f421:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f428:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f42e:	01 d0                	add    %edx,%eax
f012f430:	8a 00                	mov    (%eax),%al
f012f432:	3c 08                	cmp    $0x8,%al
f012f434:	74 17                	je     f012f44d <test_krealloc_BF+0xfb7>
			panic(
f012f436:	83 ec 04             	sub    $0x4,%esp
f012f439:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f43e:	68 da 11 00 00       	push   $0x11da
f012f443:	68 7a b5 13 f0       	push   $0xf013b57a
f012f448:	e8 b8 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f44d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f453:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f457:	66 83 f8 08          	cmp    $0x8,%ax
f012f45b:	75 1f                	jne    f012f47c <test_krealloc_BF+0xfe6>
f012f45d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f463:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f46a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f470:	01 d0                	add    %edx,%eax
f012f472:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f476:	66 83 f8 08          	cmp    $0x8,%ax
f012f47a:	74 17                	je     f012f493 <test_krealloc_BF+0xffd>
			panic(
f012f47c:	83 ec 04             	sub    $0x4,%esp
f012f47f:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f484:	68 dd 11 00 00       	push   $0x11dd
f012f489:	68 7a b5 13 f0       	push   $0xf013b57a
f012f48e:	e8 72 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f493:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f499:	8b 40 04             	mov    0x4(%eax),%eax
f012f49c:	83 f8 08             	cmp    $0x8,%eax
f012f49f:	75 1d                	jne    f012f4be <test_krealloc_BF+0x1028>
f012f4a1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f4a7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f4ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4b4:	01 d0                	add    %edx,%eax
f012f4b6:	8b 40 04             	mov    0x4(%eax),%eax
f012f4b9:	83 f8 08             	cmp    $0x8,%eax
f012f4bc:	74 17                	je     f012f4d5 <test_krealloc_BF+0x103f>
			panic(
f012f4be:	83 ec 04             	sub    $0x4,%esp
f012f4c1:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f4c6:	68 e0 11 00 00       	push   $0x11e0
f012f4cb:	68 7a b5 13 f0       	push   $0xf013b57a
f012f4d0:	e8 30 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f4d5:	e8 7f db fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f4da:	89 c2                	mov    %eax,%edx
f012f4dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f4df:	39 c2                	cmp    %eax,%edx
f012f4e1:	74 17                	je     f012f4fa <test_krealloc_BF+0x1064>
			panic(
f012f4e3:	83 ec 04             	sub    $0x4,%esp
f012f4e6:	68 6c c9 13 f0       	push   $0xf013c96c
f012f4eb:	68 e4 11 00 00       	push   $0x11e4
f012f4f0:	68 7a b5 13 f0       	push   $0xf013b57a
f012f4f5:	e8 0b 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f4fa:	83 ec 0c             	sub    $0xc,%esp
f012f4fd:	68 b8 c9 13 f0       	push   $0xf013c9b8
f012f502:	e8 07 18 fd ff       	call   f0100d0e <cprintf>
f012f507:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f50a:	e8 4a db fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f50f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f512:	e8 10 48 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f517:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f51d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f523:	83 ec 08             	sub    $0x8,%esp
f012f526:	6a 00                	push   $0x0
f012f528:	50                   	push   %eax
f012f529:	e8 48 87 fd ff       	call   f0107c76 <krealloc>
f012f52e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f531:	e8 f1 47 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f536:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f53c:	74 17                	je     f012f555 <test_krealloc_BF+0x10bf>
			panic(
f012f53e:	83 ec 04             	sub    $0x4,%esp
f012f541:	68 dc c9 13 f0       	push   $0xf013c9dc
f012f546:	68 f1 11 00 00       	push   $0x11f1
f012f54b:	68 7a b5 13 f0       	push   $0xf013b57a
f012f550:	e8 b0 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f555:	e8 ff da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f55a:	89 c2                	mov    %eax,%edx
f012f55c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f55f:	29 c2                	sub    %eax,%edx
f012f561:	89 d0                	mov    %edx,%eax
f012f563:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f568:	74 17                	je     f012f581 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f56a:	83 ec 04             	sub    $0x4,%esp
f012f56d:	68 50 ca 13 f0       	push   $0xf013ca50
f012f572:	68 f3 11 00 00       	push   $0x11f3
f012f577:	68 7a b5 13 f0       	push   $0xf013b57a
f012f57c:	e8 84 0c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f581:	e8 d3 da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f586:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f589:	e8 99 47 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f58e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f594:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f59a:	83 ec 08             	sub    $0x8,%esp
f012f59d:	6a 00                	push   $0x0
f012f59f:	50                   	push   %eax
f012f5a0:	e8 d1 86 fd ff       	call   f0107c76 <krealloc>
f012f5a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5a8:	e8 7a 47 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f5ad:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5b3:	74 17                	je     f012f5cc <test_krealloc_BF+0x1136>
			panic(
f012f5b5:	83 ec 04             	sub    $0x4,%esp
f012f5b8:	68 dc c9 13 f0       	push   $0xf013c9dc
f012f5bd:	68 fc 11 00 00       	push   $0x11fc
f012f5c2:	68 7a b5 13 f0       	push   $0xf013b57a
f012f5c7:	e8 39 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f5cc:	e8 88 da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f5d1:	89 c2                	mov    %eax,%edx
f012f5d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f5d6:	29 c2                	sub    %eax,%edx
f012f5d8:	89 d0                	mov    %edx,%eax
f012f5da:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f5df:	74 17                	je     f012f5f8 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f5e1:	83 ec 04             	sub    $0x4,%esp
f012f5e4:	68 50 ca 13 f0       	push   $0xf013ca50
f012f5e9:	68 fe 11 00 00       	push   $0x11fe
f012f5ee:	68 7a b5 13 f0       	push   $0xf013b57a
f012f5f3:	e8 0d 0c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f5f8:	e8 5c da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f5fd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f600:	e8 22 47 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f605:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f60b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f611:	83 ec 08             	sub    $0x8,%esp
f012f614:	6a 00                	push   $0x0
f012f616:	50                   	push   %eax
f012f617:	e8 5a 86 fd ff       	call   f0107c76 <krealloc>
f012f61c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f61f:	e8 03 47 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f624:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f62a:	74 17                	je     f012f643 <test_krealloc_BF+0x11ad>
			panic(
f012f62c:	83 ec 04             	sub    $0x4,%esp
f012f62f:	68 94 b5 13 f0       	push   $0xf013b594
f012f634:	68 06 12 00 00       	push   $0x1206
f012f639:	68 7a b5 13 f0       	push   $0xf013b57a
f012f63e:	e8 c2 0b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f643:	e8 11 da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f648:	89 c2                	mov    %eax,%edx
f012f64a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f64d:	29 c2                	sub    %eax,%edx
f012f64f:	89 d0                	mov    %edx,%eax
f012f651:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f656:	74 17                	je     f012f66f <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f658:	83 ec 04             	sub    $0x4,%esp
f012f65b:	68 50 ca 13 f0       	push   $0xf013ca50
f012f660:	68 08 12 00 00       	push   $0x1208
f012f665:	68 7a b5 13 f0       	push   $0xf013b57a
f012f66a:	e8 96 0b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f66f:	e8 e5 d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f674:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f677:	e8 ab 46 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f67c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f682:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f688:	83 ec 08             	sub    $0x8,%esp
f012f68b:	6a 00                	push   $0x0
f012f68d:	50                   	push   %eax
f012f68e:	e8 e3 85 fd ff       	call   f0107c76 <krealloc>
f012f693:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f696:	e8 8c 46 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f012f69b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f6a1:	74 17                	je     f012f6ba <test_krealloc_BF+0x1224>
			panic(
f012f6a3:	83 ec 04             	sub    $0x4,%esp
f012f6a6:	68 dc c9 13 f0       	push   $0xf013c9dc
f012f6ab:	68 10 12 00 00       	push   $0x1210
f012f6b0:	68 7a b5 13 f0       	push   $0xf013b57a
f012f6b5:	e8 4b 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f6ba:	e8 9a d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f6bf:	89 c2                	mov    %eax,%edx
f012f6c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6c4:	29 c2                	sub    %eax,%edx
f012f6c6:	89 d0                	mov    %edx,%eax
f012f6c8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f6cd:	74 17                	je     f012f6e6 <test_krealloc_BF+0x1250>
			panic(
f012f6cf:	83 ec 04             	sub    $0x4,%esp
f012f6d2:	68 84 ca 13 f0       	push   $0xf013ca84
f012f6d7:	68 13 12 00 00       	push   $0x1213
f012f6dc:	68 7a b5 13 f0       	push   $0xf013b57a
f012f6e1:	e8 1f 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f6e6:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f6ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f6f4:	eb 48                	jmp    f012f73e <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f6f6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f6f9:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f012f6fe:	83 ec 04             	sub    $0x4,%esp
f012f701:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f707:	51                   	push   %ecx
f012f708:	52                   	push   %edx
f012f709:	50                   	push   %eax
f012f70a:	e8 01 73 fd ff       	call   f0106a10 <get_page_table>
f012f70f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f712:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f718:	85 c0                	test   %eax,%eax
f012f71a:	75 17                	jne    f012f733 <test_krealloc_BF+0x129d>
					panic(
f012f71c:	83 ec 04             	sub    $0x4,%esp
f012f71f:	68 7c be 13 f0       	push   $0xf013be7c
f012f724:	68 1f 12 00 00       	push   $0x121f
f012f729:	68 7a b5 13 f0       	push   $0xf013b57a
f012f72e:	e8 d2 0a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f733:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f73a:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f73e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f742:	78 b2                	js     f012f6f6 <test_krealloc_BF+0x1260>
f012f744:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f748:	7f 09                	jg     f012f753 <test_krealloc_BF+0x12bd>
f012f74a:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f751:	76 a3                	jbe    f012f6f6 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f753:	83 ec 0c             	sub    $0xc,%esp
f012f756:	68 c3 ca 13 f0       	push   $0xf013cac3
f012f75b:	e8 ae 15 fd ff       	call   f0100d0e <cprintf>
f012f760:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f763:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f769:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f76f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f776:	eb 21                	jmp    f012f799 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f778:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f77e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f781:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f787:	01 c8                	add    %ecx,%eax
f012f789:	8a 00                	mov    (%eax),%al
f012f78b:	0f be c0             	movsbl %al,%eax
f012f78e:	01 d0                	add    %edx,%eax
f012f790:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f796:	ff 45 dc             	incl   -0x24(%ebp)
f012f799:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f79f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f7a2:	7d d4                	jge    f012f778 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f7a4:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f7aa:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f7b0:	42                   	inc    %edx
f012f7b1:	01 d2                	add    %edx,%edx
f012f7b3:	39 d0                	cmp    %edx,%eax
f012f7b5:	74 17                	je     f012f7ce <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f7b7:	83 ec 04             	sub    $0x4,%esp
f012f7ba:	68 cc ca 13 f0       	push   $0xf013cacc
f012f7bf:	68 31 12 00 00       	push   $0x1231
f012f7c4:	68 7a b5 13 f0       	push   $0xf013b57a
f012f7c9:	e8 37 0a fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f7ce:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f7d4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f7da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f7e1:	eb 25                	jmp    f012f808 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f7e3:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f7e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f7ec:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f7f3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f7f9:	01 c8                	add    %ecx,%eax
f012f7fb:	8b 00                	mov    (%eax),%eax
f012f7fd:	01 d0                	add    %edx,%eax
f012f7ff:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f805:	ff 45 dc             	incl   -0x24(%ebp)
f012f808:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f80e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f811:	7d d0                	jge    f012f7e3 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f813:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f819:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f81f:	42                   	inc    %edx
f012f820:	c1 e2 02             	shl    $0x2,%edx
f012f823:	39 d0                	cmp    %edx,%eax
f012f825:	74 17                	je     f012f83e <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f827:	83 ec 04             	sub    $0x4,%esp
f012f82a:	68 cc ca 13 f0       	push   $0xf013cacc
f012f82f:	68 3b 12 00 00       	push   $0x123b
f012f834:	68 7a b5 13 f0       	push   $0xf013b57a
f012f839:	e8 c7 09 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f83e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f844:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f84a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f851:	eb 24                	jmp    f012f877 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f853:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f859:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f85c:	01 c0                	add    %eax,%eax
f012f85e:	89 c1                	mov    %eax,%ecx
f012f860:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f866:	01 c8                	add    %ecx,%eax
f012f868:	66 8b 00             	mov    (%eax),%ax
f012f86b:	98                   	cwtl   
f012f86c:	01 d0                	add    %edx,%eax
f012f86e:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f874:	ff 45 dc             	incl   -0x24(%ebp)
f012f877:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f87d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f880:	7d d1                	jge    f012f853 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f882:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f888:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f88e:	8d 48 01             	lea    0x1(%eax),%ecx
f012f891:	89 c8                	mov    %ecx,%eax
f012f893:	c1 e0 02             	shl    $0x2,%eax
f012f896:	01 c8                	add    %ecx,%eax
f012f898:	39 c2                	cmp    %eax,%edx
f012f89a:	74 17                	je     f012f8b3 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f89c:	83 ec 04             	sub    $0x4,%esp
f012f89f:	68 cc ca 13 f0       	push   $0xf013cacc
f012f8a4:	68 45 12 00 00       	push   $0x1245
f012f8a9:	68 7a b5 13 f0       	push   $0xf013b57a
f012f8ae:	e8 52 09 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f8b3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f8b9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f8bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f8c6:	eb 70                	jmp    f012f938 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f8c8:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f8ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8d1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f8d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f8de:	01 c8                	add    %ecx,%eax
f012f8e0:	8a 00                	mov    (%eax),%al
f012f8e2:	0f be c0             	movsbl %al,%eax
f012f8e5:	01 d0                	add    %edx,%eax
f012f8e7:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f8ed:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f8f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8f6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f8fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f903:	01 c8                	add    %ecx,%eax
f012f905:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f909:	98                   	cwtl   
f012f90a:	01 d0                	add    %edx,%eax
f012f90c:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f912:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f918:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f91b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f922:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f928:	01 c8                	add    %ecx,%eax
f012f92a:	8b 40 04             	mov    0x4(%eax),%eax
f012f92d:	01 d0                	add    %edx,%eax
f012f92f:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f935:	ff 45 dc             	incl   -0x24(%ebp)
f012f938:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f93e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f941:	7d 85                	jge    f012f8c8 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f943:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f949:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f94f:	8d 50 01             	lea    0x1(%eax),%edx
f012f952:	89 d0                	mov    %edx,%eax
f012f954:	01 c0                	add    %eax,%eax
f012f956:	01 d0                	add    %edx,%eax
f012f958:	01 c0                	add    %eax,%eax
f012f95a:	01 d0                	add    %edx,%eax
f012f95c:	39 c1                	cmp    %eax,%ecx
f012f95e:	75 3a                	jne    f012f99a <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f960:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f966:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f96c:	8d 50 01             	lea    0x1(%eax),%edx
f012f96f:	89 d0                	mov    %edx,%eax
f012f971:	01 c0                	add    %eax,%eax
f012f973:	01 d0                	add    %edx,%eax
f012f975:	01 c0                	add    %eax,%eax
f012f977:	01 d0                	add    %edx,%eax
f012f979:	39 c1                	cmp    %eax,%ecx
f012f97b:	75 1d                	jne    f012f99a <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f97d:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f983:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f989:	8d 50 01             	lea    0x1(%eax),%edx
f012f98c:	89 d0                	mov    %edx,%eax
f012f98e:	01 c0                	add    %eax,%eax
f012f990:	01 d0                	add    %edx,%eax
f012f992:	01 c0                	add    %eax,%eax
f012f994:	01 d0                	add    %edx,%eax
f012f996:	39 c1                	cmp    %eax,%ecx
f012f998:	74 17                	je     f012f9b1 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f99a:	83 ec 04             	sub    $0x4,%esp
f012f99d:	68 cc ca 13 f0       	push   $0xf013cacc
f012f9a2:	68 53 12 00 00       	push   $0x1253
f012f9a7:	68 7a b5 13 f0       	push   $0xf013b57a
f012f9ac:	e8 54 08 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f9b1:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f9b8:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f9bb:	e8 99 d6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f9c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f9c3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f9c9:	83 ec 08             	sub    $0x8,%esp
f012f9cc:	68 00 3c 00 00       	push   $0x3c00
f012f9d1:	50                   	push   %eax
f012f9d2:	e8 9f 82 fd ff       	call   f0107c76 <krealloc>
f012f9d7:	83 c4 10             	add    $0x10,%esp
f012f9da:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f9e0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f9e6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f9eb:	77 17                	ja     f012fa04 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f9ed:	83 ec 04             	sub    $0x4,%esp
f012f9f0:	68 20 c8 13 f0       	push   $0xf013c820
f012f9f5:	68 5f 12 00 00       	push   $0x125f
f012f9fa:	68 7a b5 13 f0       	push   $0xf013b57a
f012f9ff:	e8 01 08 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fa04:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa0a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fa10:	74 17                	je     f012fa29 <test_krealloc_BF+0x1593>
			panic(
f012fa12:	83 ec 04             	sub    $0x4,%esp
f012fa15:	68 04 cb 13 f0       	push   $0xf013cb04
f012fa1a:	68 62 12 00 00       	push   $0x1262
f012fa1f:	68 7a b5 13 f0       	push   $0xf013b57a
f012fa24:	e8 dc 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fa29:	e8 2b d6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fa2e:	89 c2                	mov    %eax,%edx
f012fa30:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fa33:	39 c2                	cmp    %eax,%edx
f012fa35:	74 17                	je     f012fa4e <test_krealloc_BF+0x15b8>
			panic(
f012fa37:	83 ec 04             	sub    $0x4,%esp
f012fa3a:	68 70 cb 13 f0       	push   $0xf013cb70
f012fa3f:	68 65 12 00 00       	push   $0x1265
f012fa44:	68 7a b5 13 f0       	push   $0xf013b57a
f012fa49:	e8 b7 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012fa4e:	e8 06 d6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fa53:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012fa56:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa5c:	83 ec 08             	sub    $0x8,%esp
f012fa5f:	68 00 fc 0f 00       	push   $0xffc00
f012fa64:	50                   	push   %eax
f012fa65:	e8 0c 82 fd ff       	call   f0107c76 <krealloc>
f012fa6a:	83 c4 10             	add    $0x10,%esp
f012fa6d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa73:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa79:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa7e:	77 17                	ja     f012fa97 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa80:	83 ec 04             	sub    $0x4,%esp
f012fa83:	68 20 c8 13 f0       	push   $0xf013c820
f012fa88:	68 6b 12 00 00       	push   $0x126b
f012fa8d:	68 7a b5 13 f0       	push   $0xf013b57a
f012fa92:	e8 6e 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fa97:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa9d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012faa3:	74 17                	je     f012fabc <test_krealloc_BF+0x1626>
			panic(
f012faa5:	83 ec 04             	sub    $0x4,%esp
f012faa8:	68 04 cb 13 f0       	push   $0xf013cb04
f012faad:	68 6e 12 00 00       	push   $0x126e
f012fab2:	68 7a b5 13 f0       	push   $0xf013b57a
f012fab7:	e8 49 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fabc:	e8 98 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fac1:	89 c2                	mov    %eax,%edx
f012fac3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fac6:	39 c2                	cmp    %eax,%edx
f012fac8:	74 17                	je     f012fae1 <test_krealloc_BF+0x164b>
			panic(
f012faca:	83 ec 04             	sub    $0x4,%esp
f012facd:	68 70 cb 13 f0       	push   $0xf013cb70
f012fad2:	68 71 12 00 00       	push   $0x1271
f012fad7:	68 7a b5 13 f0       	push   $0xf013b57a
f012fadc:	e8 24 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fae1:	e8 73 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fae6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012fae9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012faef:	83 ec 08             	sub    $0x8,%esp
f012faf2:	68 00 fc 0f 00       	push   $0xffc00
f012faf7:	50                   	push   %eax
f012faf8:	e8 79 81 fd ff       	call   f0107c76 <krealloc>
f012fafd:	83 c4 10             	add    $0x10,%esp
f012fb00:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb06:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb0c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb11:	77 17                	ja     f012fb2a <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb13:	83 ec 04             	sub    $0x4,%esp
f012fb16:	68 20 c8 13 f0       	push   $0xf013c820
f012fb1b:	68 77 12 00 00       	push   $0x1277
f012fb20:	68 7a b5 13 f0       	push   $0xf013b57a
f012fb25:	e8 db 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fb2a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb30:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fb36:	74 17                	je     f012fb4f <test_krealloc_BF+0x16b9>
			panic(
f012fb38:	83 ec 04             	sub    $0x4,%esp
f012fb3b:	68 04 cb 13 f0       	push   $0xf013cb04
f012fb40:	68 7a 12 00 00       	push   $0x127a
f012fb45:	68 7a b5 13 f0       	push   $0xf013b57a
f012fb4a:	e8 b6 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fb4f:	e8 05 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fb54:	89 c2                	mov    %eax,%edx
f012fb56:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fb59:	39 c2                	cmp    %eax,%edx
f012fb5b:	74 17                	je     f012fb74 <test_krealloc_BF+0x16de>
			panic(
f012fb5d:	83 ec 04             	sub    $0x4,%esp
f012fb60:	68 70 cb 13 f0       	push   $0xf013cb70
f012fb65:	68 7d 12 00 00       	push   $0x127d
f012fb6a:	68 7a b5 13 f0       	push   $0xf013b57a
f012fb6f:	e8 91 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fb74:	e8 e0 d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fb79:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012fb7c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fb82:	83 ec 08             	sub    $0x8,%esp
f012fb85:	68 00 fc 0f 00       	push   $0xffc00
f012fb8a:	50                   	push   %eax
f012fb8b:	e8 e6 80 fd ff       	call   f0107c76 <krealloc>
f012fb90:	83 c4 10             	add    $0x10,%esp
f012fb93:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb99:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb9f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fba4:	77 17                	ja     f012fbbd <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fba6:	83 ec 04             	sub    $0x4,%esp
f012fba9:	68 20 c8 13 f0       	push   $0xf013c820
f012fbae:	68 85 12 00 00       	push   $0x1285
f012fbb3:	68 7a b5 13 f0       	push   $0xf013b57a
f012fbb8:	e8 48 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012fbbd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fbc3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fbc9:	74 17                	je     f012fbe2 <test_krealloc_BF+0x174c>
			panic(
f012fbcb:	83 ec 04             	sub    $0x4,%esp
f012fbce:	68 b4 cb 13 f0       	push   $0xf013cbb4
f012fbd3:	68 88 12 00 00       	push   $0x1288
f012fbd8:	68 7a b5 13 f0       	push   $0xf013b57a
f012fbdd:	e8 23 06 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fbe2:	e8 72 d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fbe7:	89 c2                	mov    %eax,%edx
f012fbe9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fbec:	39 c2                	cmp    %eax,%edx
f012fbee:	74 17                	je     f012fc07 <test_krealloc_BF+0x1771>
			panic(
f012fbf0:	83 ec 04             	sub    $0x4,%esp
f012fbf3:	68 70 cb 13 f0       	push   $0xf013cb70
f012fbf8:	68 8b 12 00 00       	push   $0x128b
f012fbfd:	68 7a b5 13 f0       	push   $0xf013b57a
f012fc02:	e8 fe 05 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012fc07:	83 ec 0c             	sub    $0xc,%esp
f012fc0a:	68 93 bd 13 f0       	push   $0xf013bd93
f012fc0f:	e8 fa 10 fd ff       	call   f0100d0e <cprintf>
f012fc14:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012fc17:	e8 3d d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fc1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012fc1f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc25:	83 ec 08             	sub    $0x8,%esp
f012fc28:	68 00 18 10 00       	push   $0x101800
f012fc2d:	50                   	push   %eax
f012fc2e:	e8 43 80 fd ff       	call   f0107c76 <krealloc>
f012fc33:	83 c4 10             	add    $0x10,%esp
f012fc36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc41:	77 17                	ja     f012fc5a <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc43:	83 ec 04             	sub    $0x4,%esp
f012fc46:	68 20 c8 13 f0       	push   $0xf013c820
f012fc4b:	68 93 12 00 00       	push   $0x1293
f012fc50:	68 7a b5 13 f0       	push   $0xf013b57a
f012fc55:	e8 ab 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fc5a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fc63:	74 17                	je     f012fc7c <test_krealloc_BF+0x17e6>
			panic(
f012fc65:	83 ec 04             	sub    $0x4,%esp
f012fc68:	68 14 cc 13 f0       	push   $0xf013cc14
f012fc6d:	68 96 12 00 00       	push   $0x1296
f012fc72:	68 7a b5 13 f0       	push   $0xf013b57a
f012fc77:	e8 89 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012fc7c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fc7f:	e8 d5 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fc84:	29 c3                	sub    %eax,%ebx
f012fc86:	89 d8                	mov    %ebx,%eax
f012fc88:	83 f8 02             	cmp    $0x2,%eax
f012fc8b:	74 17                	je     f012fca4 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012fc8d:	83 ec 04             	sub    $0x4,%esp
f012fc90:	68 90 cc 13 f0       	push   $0xf013cc90
f012fc95:	68 98 12 00 00       	push   $0x1298
f012fc9a:	68 7a b5 13 f0       	push   $0xf013b57a
f012fc9f:	e8 61 05 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012fca4:	e8 b0 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fca9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012fcac:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fcb2:	83 ec 08             	sub    $0x8,%esp
f012fcb5:	68 00 fc 3f 00       	push   $0x3ffc00
f012fcba:	50                   	push   %eax
f012fcbb:	e8 b6 7f fd ff       	call   f0107c76 <krealloc>
f012fcc0:	83 c4 10             	add    $0x10,%esp
f012fcc3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fcc6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fcc9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fcce:	77 17                	ja     f012fce7 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fcd0:	83 ec 04             	sub    $0x4,%esp
f012fcd3:	68 20 c8 13 f0       	push   $0xf013c820
f012fcd8:	68 9e 12 00 00       	push   $0x129e
f012fcdd:	68 7a b5 13 f0       	push   $0xf013b57a
f012fce2:	e8 1e 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fce7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fced:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fcf0:	74 17                	je     f012fd09 <test_krealloc_BF+0x1873>
			panic(
f012fcf2:	83 ec 04             	sub    $0x4,%esp
f012fcf5:	68 14 cc 13 f0       	push   $0xf013cc14
f012fcfa:	68 a1 12 00 00       	push   $0x12a1
f012fcff:	68 7a b5 13 f0       	push   $0xf013b57a
f012fd04:	e8 fc 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012fd09:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd0c:	e8 48 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fd11:	29 c3                	sub    %eax,%ebx
f012fd13:	89 d8                	mov    %ebx,%eax
f012fd15:	3d 00 02 00 00       	cmp    $0x200,%eax
f012fd1a:	74 17                	je     f012fd33 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd1c:	83 ec 04             	sub    $0x4,%esp
f012fd1f:	68 90 cc 13 f0       	push   $0xf013cc90
f012fd24:	68 a4 12 00 00       	push   $0x12a4
f012fd29:	68 7a b5 13 f0       	push   $0xf013b57a
f012fd2e:	e8 d2 04 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fd33:	83 ec 0c             	sub    $0xc,%esp
f012fd36:	68 d8 bd 13 f0       	push   $0xf013bdd8
f012fd3b:	e8 ce 0f fd ff       	call   f0100d0e <cprintf>
f012fd40:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fd43:	e8 11 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fd48:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fd4b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd51:	83 ec 08             	sub    $0x8,%esp
f012fd54:	68 00 fc 9f 00       	push   $0x9ffc00
f012fd59:	50                   	push   %eax
f012fd5a:	e8 17 7f fd ff       	call   f0107c76 <krealloc>
f012fd5f:	83 c4 10             	add    $0x10,%esp
f012fd62:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fd65:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd68:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fd6d:	77 17                	ja     f012fd86 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd6f:	83 ec 04             	sub    $0x4,%esp
f012fd72:	68 20 c8 13 f0       	push   $0xf013c820
f012fd77:	68 af 12 00 00       	push   $0x12af
f012fd7c:	68 7a b5 13 f0       	push   $0xf013b57a
f012fd81:	e8 7f 04 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fd86:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fd8d:	10 00 00 
f012fd90:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fd96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fd9b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fda1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fda7:	ba 00 00 00 00       	mov    $0x0,%edx
f012fdac:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fdb2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fdb8:	29 d0                	sub    %edx,%eax
f012fdba:	89 c1                	mov    %eax,%ecx
f012fdbc:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fdc3:	10 00 00 
f012fdc6:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012fdcb:	0f b6 d0             	movzbl %al,%edx
f012fdce:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fdd4:	01 d0                	add    %edx,%eax
f012fdd6:	48                   	dec    %eax
f012fdd7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fddd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fde3:	ba 00 00 00 00       	mov    $0x0,%edx
f012fde8:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fdee:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fdf4:	29 d0                	sub    %edx,%eax
f012fdf6:	01 c1                	add    %eax,%ecx
f012fdf8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fdff:	10 00 00 
f012fe02:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012fe07:	0f b6 c0             	movzbl %al,%eax
f012fe0a:	c1 e0 04             	shl    $0x4,%eax
f012fe0d:	89 c2                	mov    %eax,%edx
f012fe0f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fe15:	01 d0                	add    %edx,%eax
f012fe17:	48                   	dec    %eax
f012fe18:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012fe1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe24:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe29:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fe2f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe35:	29 d0                	sub    %edx,%eax
f012fe37:	01 c8                	add    %ecx,%eax
f012fe39:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fe3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe42:	39 c2                	cmp    %eax,%edx
f012fe44:	74 18                	je     f012fe5e <test_krealloc_BF+0x19c8>
			panic(
f012fe46:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe49:	50                   	push   %eax
f012fe4a:	68 c4 cc 13 f0       	push   $0xf013ccc4
f012fe4f:	68 b3 12 00 00       	push   $0x12b3
f012fe54:	68 7a b5 13 f0       	push   $0xf013b57a
f012fe59:	e8 a7 03 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fe5e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fe64:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fe67:	75 17                	jne    f012fe80 <test_krealloc_BF+0x19ea>
			panic(
f012fe69:	83 ec 04             	sub    $0x4,%esp
f012fe6c:	68 08 cd 13 f0       	push   $0xf013cd08
f012fe71:	68 b6 12 00 00       	push   $0x12b6
f012fe76:	68 7a b5 13 f0       	push   $0xf013b57a
f012fe7b:	e8 85 03 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fe80:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fe83:	e8 d1 d1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fe88:	29 c3                	sub    %eax,%ebx
f012fe8a:	89 d8                	mov    %ebx,%eax
f012fe8c:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fe91:	74 17                	je     f012feaa <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fe93:	83 ec 04             	sub    $0x4,%esp
f012fe96:	68 90 cc 13 f0       	push   $0xf013cc90
f012fe9b:	68 b9 12 00 00       	push   $0x12b9
f012fea0:	68 7a b5 13 f0       	push   $0xf013b57a
f012fea5:	e8 5b 03 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012feaa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fead:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012feb3:	e8 a1 d1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012feb8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012febb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fec1:	83 ec 08             	sub    $0x8,%esp
f012fec4:	68 00 fc 3f 00       	push   $0x3ffc00
f012fec9:	50                   	push   %eax
f012feca:	e8 a7 7d fd ff       	call   f0107c76 <krealloc>
f012fecf:	83 c4 10             	add    $0x10,%esp
f012fed2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fed5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fed8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fedd:	77 17                	ja     f012fef6 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fedf:	83 ec 04             	sub    $0x4,%esp
f012fee2:	68 20 c8 13 f0       	push   $0xf013c820
f012fee7:	68 c2 12 00 00       	push   $0x12c2
f012feec:	68 7a b5 13 f0       	push   $0xf013b57a
f012fef1:	e8 0f 03 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fef6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fefc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012feff:	75 17                	jne    f012ff18 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ff01:	83 ec 04             	sub    $0x4,%esp
f012ff04:	68 08 cd 13 f0       	push   $0xf013cd08
f012ff09:	68 c4 12 00 00       	push   $0x12c4
f012ff0e:	68 7a b5 13 f0       	push   $0xf013b57a
f012ff13:	e8 ed 02 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012ff18:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012ff1f:	10 00 00 
f012ff22:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ff28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ff2d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012ff33:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff39:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff3e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ff44:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff4a:	29 d0                	sub    %edx,%eax
f012ff4c:	89 c1                	mov    %eax,%ecx
f012ff4e:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ff55:	10 00 00 
f012ff58:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ff5d:	0f b6 d0             	movzbl %al,%edx
f012ff60:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ff66:	01 d0                	add    %edx,%eax
f012ff68:	48                   	dec    %eax
f012ff69:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ff6f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ff75:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff7a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ff80:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ff86:	29 d0                	sub    %edx,%eax
f012ff88:	01 c1                	add    %eax,%ecx
f012ff8a:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ff91:	10 00 00 
f012ff94:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f012ff99:	0f b6 c0             	movzbl %al,%eax
f012ff9c:	c1 e0 04             	shl    $0x4,%eax
f012ff9f:	89 c2                	mov    %eax,%edx
f012ffa1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ffa7:	01 d0                	add    %edx,%eax
f012ffa9:	48                   	dec    %eax
f012ffaa:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ffb0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ffb6:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffbb:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012ffc1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ffc7:	29 d0                	sub    %edx,%eax
f012ffc9:	01 c8                	add    %ecx,%eax
f012ffcb:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012ffd1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ffd4:	39 c2                	cmp    %eax,%edx
f012ffd6:	74 17                	je     f012ffef <test_krealloc_BF+0x1b59>
f012ffd8:	83 ec 04             	sub    $0x4,%esp
f012ffdb:	68 5c c8 13 f0       	push   $0xf013c85c
f012ffe0:	68 c5 12 00 00       	push   $0x12c5
f012ffe5:	68 7a b5 13 f0       	push   $0xf013b57a
f012ffea:	e8 16 02 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012ffef:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fff2:	e8 62 d0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fff7:	29 c3                	sub    %eax,%ebx
f012fff9:	89 d8                	mov    %ebx,%eax
f012fffb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0130000:	74 17                	je     f0130019 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f0130002:	83 ec 04             	sub    $0x4,%esp
f0130005:	68 90 cc 13 f0       	push   $0xf013cc90
f013000a:	68 c9 12 00 00       	push   $0x12c9
f013000f:	68 7a b5 13 f0       	push   $0xf013b57a
f0130014:	e8 ec 01 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f0130019:	8b 45 bc             	mov    -0x44(%ebp),%eax
f013001c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f0130022:	e8 32 d0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130027:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f013002a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0130030:	83 ec 08             	sub    $0x8,%esp
f0130033:	68 00 fc 3f 01       	push   $0x13ffc00
f0130038:	50                   	push   %eax
f0130039:	e8 38 7c fd ff       	call   f0107c76 <krealloc>
f013003e:	83 c4 10             	add    $0x10,%esp
f0130041:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0130044:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130047:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f013004c:	77 17                	ja     f0130065 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f013004e:	83 ec 04             	sub    $0x4,%esp
f0130051:	68 20 c8 13 f0       	push   $0xf013c820
f0130056:	68 cf 12 00 00       	push   $0x12cf
f013005b:	68 7a b5 13 f0       	push   $0xf013b57a
f0130060:	e8 a0 01 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f0130065:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013006b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f013006e:	75 17                	jne    f0130087 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f0130070:	83 ec 04             	sub    $0x4,%esp
f0130073:	68 08 cd 13 f0       	push   $0xf013cd08
f0130078:	68 d1 12 00 00       	push   $0x12d1
f013007d:	68 7a b5 13 f0       	push   $0xf013b57a
f0130082:	e8 7e 01 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f0130087:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f013008e:	10 00 00 
f0130091:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0130097:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013009c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01300a2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01300ad:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01300b3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300b9:	29 d0                	sub    %edx,%eax
f01300bb:	89 c1                	mov    %eax,%ecx
f01300bd:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01300c4:	10 00 00 
f01300c7:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01300cc:	0f b6 d0             	movzbl %al,%edx
f01300cf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01300d5:	01 d0                	add    %edx,%eax
f01300d7:	48                   	dec    %eax
f01300d8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01300de:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01300e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01300e9:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01300ef:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01300f5:	29 d0                	sub    %edx,%eax
f01300f7:	01 c1                	add    %eax,%ecx
f01300f9:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0130100:	10 00 00 
f0130103:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0130108:	0f b6 c0             	movzbl %al,%eax
f013010b:	c1 e0 04             	shl    $0x4,%eax
f013010e:	89 c2                	mov    %eax,%edx
f0130110:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0130116:	01 d0                	add    %edx,%eax
f0130118:	48                   	dec    %eax
f0130119:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f013011f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130125:	ba 00 00 00 00       	mov    $0x0,%edx
f013012a:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0130130:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130136:	29 d0                	sub    %edx,%eax
f0130138:	01 c8                	add    %ecx,%eax
f013013a:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f0130140:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130143:	39 c2                	cmp    %eax,%edx
f0130145:	74 17                	je     f013015e <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f0130147:	83 ec 04             	sub    $0x4,%esp
f013014a:	68 28 ce 13 f0       	push   $0xf013ce28
f013014f:	68 d3 12 00 00       	push   $0x12d3
f0130154:	68 7a b5 13 f0       	push   $0xf013b57a
f0130159:	e8 a7 00 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f013015e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0130161:	e8 f3 ce fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130166:	29 c3                	sub    %eax,%ebx
f0130168:	89 d8                	mov    %ebx,%eax
f013016a:	3d 00 10 00 00       	cmp    $0x1000,%eax
f013016f:	74 17                	je     f0130188 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f0130171:	83 ec 04             	sub    $0x4,%esp
f0130174:	68 90 cc 13 f0       	push   $0xf013cc90
f0130179:	68 d6 12 00 00       	push   $0x12d6
f013017e:	68 7a b5 13 f0       	push   $0xf013b57a
f0130183:	e8 7d 00 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f0130188:	8b 45 bc             	mov    -0x44(%ebp),%eax
f013018b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0130191:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0130197:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f013019d:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01301a4:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01301ae:	eb 21                	jmp    f01301d1 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f01301b0:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01301b6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01301b9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01301bf:	01 c8                	add    %ecx,%eax
f01301c1:	8a 00                	mov    (%eax),%al
f01301c3:	0f be c0             	movsbl %al,%eax
f01301c6:	01 d0                	add    %edx,%eax
f01301c8:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301ce:	ff 45 d8             	incl   -0x28(%ebp)
f01301d1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01301d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01301da:	7d d4                	jge    f01301b0 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f01301dc:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01301e2:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f01301e8:	42                   	inc    %edx
f01301e9:	01 d2                	add    %edx,%edx
f01301eb:	39 d0                	cmp    %edx,%eax
f01301ed:	74 17                	je     f0130206 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f01301ef:	83 ec 04             	sub    $0x4,%esp
f01301f2:	68 c0 cd 13 f0       	push   $0xf013cdc0
f01301f7:	68 e4 12 00 00       	push   $0x12e4
f01301fc:	68 7a b5 13 f0       	push   $0xf013b57a
f0130201:	e8 ff ff fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0130206:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013020c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f0130212:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130219:	00 00 00 
		sums[1] = 0;
f013021c:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f0130223:	00 00 00 
		sums[2] = 0;
f0130226:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f013022d:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f0130230:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130237:	eb 70                	jmp    f01302a9 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f0130239:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013023f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130242:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130249:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013024f:	01 c8                	add    %ecx,%eax
f0130251:	8a 00                	mov    (%eax),%al
f0130253:	0f be c0             	movsbl %al,%eax
f0130256:	01 d0                	add    %edx,%eax
f0130258:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f013025e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0130264:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130267:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f013026e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0130274:	01 c8                	add    %ecx,%eax
f0130276:	66 8b 40 02          	mov    0x2(%eax),%ax
f013027a:	98                   	cwtl   
f013027b:	01 d0                	add    %edx,%eax
f013027d:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f0130283:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0130289:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013028c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130293:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0130299:	01 c8                	add    %ecx,%eax
f013029b:	8b 40 04             	mov    0x4(%eax),%eax
f013029e:	01 d0                	add    %edx,%eax
f01302a0:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01302a6:	ff 45 d8             	incl   -0x28(%ebp)
f01302a9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01302b2:	7d 85                	jge    f0130239 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01302b4:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f01302ba:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302c0:	8d 50 01             	lea    0x1(%eax),%edx
f01302c3:	89 d0                	mov    %edx,%eax
f01302c5:	01 c0                	add    %eax,%eax
f01302c7:	01 d0                	add    %edx,%eax
f01302c9:	01 c0                	add    %eax,%eax
f01302cb:	01 d0                	add    %edx,%eax
f01302cd:	39 c1                	cmp    %eax,%ecx
f01302cf:	75 3a                	jne    f013030b <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f01302d1:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f01302d7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302dd:	8d 50 01             	lea    0x1(%eax),%edx
f01302e0:	89 d0                	mov    %edx,%eax
f01302e2:	01 c0                	add    %eax,%eax
f01302e4:	01 d0                	add    %edx,%eax
f01302e6:	01 c0                	add    %eax,%eax
f01302e8:	01 d0                	add    %edx,%eax
f01302ea:	39 c1                	cmp    %eax,%ecx
f01302ec:	75 1d                	jne    f013030b <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f01302ee:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f01302f4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302fa:	8d 50 01             	lea    0x1(%eax),%edx
f01302fd:	89 d0                	mov    %edx,%eax
f01302ff:	01 c0                	add    %eax,%eax
f0130301:	01 d0                	add    %edx,%eax
f0130303:	01 c0                	add    %eax,%eax
f0130305:	01 d0                	add    %edx,%eax
f0130307:	39 c1                	cmp    %eax,%ecx
f0130309:	74 17                	je     f0130322 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f013030b:	83 ec 04             	sub    $0x4,%esp
f013030e:	68 c0 cd 13 f0       	push   $0xf013cdc0
f0130313:	68 f6 12 00 00       	push   $0x12f6
f0130318:	68 7a b5 13 f0       	push   $0xf013b57a
f013031d:	e8 e3 fe fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0130322:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130328:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f013032e:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130335:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130338:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f013033f:	eb 24                	jmp    f0130365 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f0130341:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130347:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013034a:	01 c0                	add    %eax,%eax
f013034c:	89 c1                	mov    %eax,%ecx
f013034e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0130354:	01 c8                	add    %ecx,%eax
f0130356:	66 8b 00             	mov    (%eax),%ax
f0130359:	98                   	cwtl   
f013035a:	01 d0                	add    %edx,%eax
f013035c:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130362:	ff 45 d8             	incl   -0x28(%ebp)
f0130365:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f013036b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f013036e:	7d d1                	jge    f0130341 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f0130370:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130376:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f013037c:	8d 48 01             	lea    0x1(%eax),%ecx
f013037f:	89 c8                	mov    %ecx,%eax
f0130381:	c1 e0 02             	shl    $0x2,%eax
f0130384:	01 c8                	add    %ecx,%eax
f0130386:	39 c2                	cmp    %eax,%edx
f0130388:	74 17                	je     f01303a1 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f013038a:	83 ec 04             	sub    $0x4,%esp
f013038d:	68 c0 cd 13 f0       	push   $0xf013cdc0
f0130392:	68 00 13 00 00       	push   $0x1300
f0130397:	68 7a b5 13 f0       	push   $0xf013b57a
f013039c:	e8 64 fe fc ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f01303a1:	e8 b3 cc fd ff       	call   f010d059 <sys_calculate_free_frames>
f01303a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01303a9:	e8 79 39 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01303ae:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f01303b4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01303ba:	83 ec 08             	sub    $0x8,%esp
f01303bd:	6a 00                	push   $0x0
f01303bf:	50                   	push   %eax
f01303c0:	e8 b1 78 fd ff       	call   f0107c76 <krealloc>
f01303c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01303c8:	e8 5a 39 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f01303cd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01303d3:	74 17                	je     f01303ec <test_krealloc_BF+0x1f56>
			panic(
f01303d5:	83 ec 04             	sub    $0x4,%esp
f01303d8:	68 94 b5 13 f0       	push   $0xf013b594
f01303dd:	68 08 13 00 00       	push   $0x1308
f01303e2:	68 7a b5 13 f0       	push   $0xf013b57a
f01303e7:	e8 19 fe fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f01303ec:	e8 68 cc fd ff       	call   f010d059 <sys_calculate_free_frames>
f01303f1:	89 c2                	mov    %eax,%edx
f01303f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01303f6:	29 c2                	sub    %eax,%edx
f01303f8:	89 d0                	mov    %edx,%eax
f01303fa:	3d 00 14 00 00       	cmp    $0x1400,%eax
f01303ff:	74 17                	je     f0130418 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f0130401:	83 ec 04             	sub    $0x4,%esp
f0130404:	68 50 ca 13 f0       	push   $0xf013ca50
f0130409:	68 0a 13 00 00       	push   $0x130a
f013040e:	68 7a b5 13 f0       	push   $0xf013b57a
f0130413:	e8 ed fd fc ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f0130418:	e8 3c cc fd ff       	call   f010d059 <sys_calculate_free_frames>
f013041d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0130420:	e8 02 39 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0130425:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f013042b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130431:	83 ec 0c             	sub    $0xc,%esp
f0130434:	50                   	push   %eax
f0130435:	e8 79 76 fd ff       	call   f0107ab3 <kfree>
f013043a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f013043d:	e8 e5 38 fd ff       	call   f0103d27 <pf_calculate_free_frames>
f0130442:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130448:	74 17                	je     f0130461 <test_krealloc_BF+0x1fcb>
			panic(
f013044a:	83 ec 04             	sub    $0x4,%esp
f013044d:	68 94 b5 13 f0       	push   $0xf013b594
f0130452:	68 12 13 00 00       	push   $0x1312
f0130457:	68 7a b5 13 f0       	push   $0xf013b57a
f013045c:	e8 a4 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0130461:	e8 f3 cb fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130466:	89 c2                	mov    %eax,%edx
f0130468:	8b 45 b8             	mov    -0x48(%ebp),%eax
f013046b:	29 c2                	sub    %eax,%edx
f013046d:	89 d0                	mov    %edx,%eax
f013046f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0130474:	74 17                	je     f013048d <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130476:	83 ec 04             	sub    $0x4,%esp
f0130479:	68 50 ca 13 f0       	push   $0xf013ca50
f013047e:	68 14 13 00 00       	push   $0x1314
f0130483:	68 7a b5 13 f0       	push   $0xf013b57a
f0130488:	e8 78 fd fc ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013048d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0130494:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f013049b:	eb 48                	jmp    f01304e5 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f013049d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01304a0:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01304a5:	83 ec 04             	sub    $0x4,%esp
f01304a8:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f01304ae:	51                   	push   %ecx
f01304af:	52                   	push   %edx
f01304b0:	50                   	push   %eax
f01304b1:	e8 5a 65 fd ff       	call   f0106a10 <get_page_table>
f01304b6:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01304b9:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01304bf:	85 c0                	test   %eax,%eax
f01304c1:	75 17                	jne    f01304da <test_krealloc_BF+0x2044>
					panic(
f01304c3:	83 ec 04             	sub    $0x4,%esp
f01304c6:	68 7c be 13 f0       	push   $0xf013be7c
f01304cb:	68 21 13 00 00       	push   $0x1321
f01304d0:	68 7a b5 13 f0       	push   $0xf013b57a
f01304d5:	e8 2b fd fc ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01304da:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01304e1:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01304e5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01304e9:	78 b2                	js     f013049d <test_krealloc_BF+0x2007>
f01304eb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01304ef:	7f 09                	jg     f01304fa <test_krealloc_BF+0x2064>
f01304f1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01304f8:	76 a3                	jbe    f013049d <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01304fa:	83 ec 0c             	sub    $0xc,%esp
f01304fd:	68 5e b7 13 f0       	push   $0xf013b75e
f0130502:	e8 07 08 fd ff       	call   f0100d0e <cprintf>
f0130507:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f013050a:	83 ec 0c             	sub    $0xc,%esp
f013050d:	68 60 ce 13 f0       	push   $0xf013ce60
f0130512:	e8 f7 07 fd ff       	call   f0100d0e <cprintf>
f0130517:	83 c4 10             	add    $0x10,%esp
	return 0;
f013051a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013051f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130522:	5b                   	pop    %ebx
f0130523:	5f                   	pop    %edi
f0130524:	5d                   	pop    %ebp
f0130525:	c3                   	ret    

f0130526 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130526:	55                   	push   %ebp
f0130527:	89 e5                	mov    %esp,%ebp
f0130529:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f013052c:	a1 04 a1 86 f0       	mov    0xf086a104,%eax
f0130531:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130536:	74 17                	je     f013054f <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130538:	83 ec 04             	sub    $0x4,%esp
f013053b:	68 a0 ce 13 f0       	push   $0xf013cea0
f0130540:	68 39 13 00 00       	push   $0x1339
f0130545:	68 7a b5 13 f0       	push   $0xf013b57a
f013054a:	e8 b6 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f013054f:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0130554:	8b 15 04 a1 86 f0    	mov    0xf086a104,%edx
f013055a:	4a                   	dec    %edx
f013055b:	39 d0                	cmp    %edx,%eax
f013055d:	74 17                	je     f0130576 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f013055f:	83 ec 04             	sub    $0x4,%esp
f0130562:	68 f4 ce 13 f0       	push   $0xf013cef4
f0130567:	68 3f 13 00 00       	push   $0x133f
f013056c:	68 7a b5 13 f0       	push   $0xf013b57a
f0130571:	e8 8f fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130576:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f013057b:	85 c0                	test   %eax,%eax
f013057d:	74 17                	je     f0130596 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f013057f:	83 ec 04             	sub    $0x4,%esp
f0130582:	68 30 cf 13 f0       	push   $0xf013cf30
f0130587:	68 45 13 00 00       	push   $0x1345
f013058c:	68 7a b5 13 f0       	push   $0xf013b57a
f0130591:	e8 6f fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0130596:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f013059b:	83 f8 01             	cmp    $0x1,%eax
f013059e:	74 17                	je     f01305b7 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f01305a0:	83 ec 04             	sub    $0x4,%esp
f01305a3:	68 68 cf 13 f0       	push   $0xf013cf68
f01305a8:	68 4b 13 00 00       	push   $0x134b
f01305ad:	68 7a b5 13 f0       	push   $0xf013b57a
f01305b2:	e8 4e fc fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f01305b7:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f01305bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f01305bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305c3:	74 66                	je     f013062b <test_initialize_dyn_block_system+0x105>
f01305c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305c8:	8b 48 0c             	mov    0xc(%eax),%ecx
f01305cb:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01305d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01305d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01305da:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01305dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01305e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01305e5:	f7 75 ec             	divl   -0x14(%ebp)
f01305e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01305eb:	29 d0                	sub    %edx,%eax
f01305ed:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01305f2:	29 c2                	sub    %eax,%edx
f01305f4:	89 d0                	mov    %edx,%eax
f01305f6:	39 c1                	cmp    %eax,%ecx
f01305f8:	75 31                	jne    f013062b <test_initialize_dyn_block_system+0x105>
f01305fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305fd:	8b 48 08             	mov    0x8(%eax),%ecx
f0130600:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0130607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013060a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013060f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0130612:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130615:	ba 00 00 00 00       	mov    $0x0,%edx
f013061a:	f7 75 e4             	divl   -0x1c(%ebp)
f013061d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130620:	29 d0                	sub    %edx,%eax
f0130622:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130627:	39 c1                	cmp    %eax,%ecx
f0130629:	74 17                	je     f0130642 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f013062b:	83 ec 04             	sub    $0x4,%esp
f013062e:	68 a0 cf 13 f0       	push   $0xf013cfa0
f0130633:	68 52 13 00 00       	push   $0x1352
f0130638:	68 7a b5 13 f0       	push   $0xf013b57a
f013063d:	e8 c3 fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0130642:	8b 45 14             	mov    0x14(%ebp),%eax
f0130645:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130648:	74 17                	je     f0130661 <test_initialize_dyn_block_system+0x13b>
f013064a:	83 ec 04             	sub    $0x4,%esp
f013064d:	68 94 b5 13 f0       	push   $0xf013b594
f0130652:	68 56 13 00 00       	push   $0x1356
f0130657:	68 7a b5 13 f0       	push   $0xf013b57a
f013065c:	e8 a4 fb fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f0130661:	8b 45 08             	mov    0x8(%ebp),%eax
f0130664:	2b 45 10             	sub    0x10(%ebp),%eax
f0130667:	3d a0 00 00 00       	cmp    $0xa0,%eax
f013066c:	74 1b                	je     f0130689 <test_initialize_dyn_block_system+0x163>
f013066e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130671:	2b 45 10             	sub    0x10(%ebp),%eax
f0130674:	50                   	push   %eax
f0130675:	68 dc cf 13 f0       	push   $0xf013cfdc
f013067a:	68 57 13 00 00       	push   $0x1357
f013067f:	68 7a b5 13 f0       	push   $0xf013b57a
f0130684:	e8 7c fb fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130689:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f0130690:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0130695:	83 ec 04             	sub    $0x4,%esp
f0130698:	6a 00                	push   $0x0
f013069a:	ff 75 f4             	pushl  -0xc(%ebp)
f013069d:	50                   	push   %eax
f013069e:	e8 e9 5f fe ff       	call   f011668c <CB>
f01306a3:	83 c4 10             	add    $0x10,%esp
f01306a6:	83 f8 01             	cmp    $0x1,%eax
f01306a9:	75 35                	jne    f01306e0 <test_initialize_dyn_block_system+0x1ba>
f01306ab:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01306b0:	83 ec 04             	sub    $0x4,%esp
f01306b3:	6a 01                	push   $0x1
f01306b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01306b8:	50                   	push   %eax
f01306b9:	e8 ce 5f fe ff       	call   f011668c <CB>
f01306be:	83 c4 10             	add    $0x10,%esp
f01306c1:	83 f8 01             	cmp    $0x1,%eax
f01306c4:	75 1a                	jne    f01306e0 <test_initialize_dyn_block_system+0x1ba>
f01306c6:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01306cb:	83 ec 04             	sub    $0x4,%esp
f01306ce:	6a 02                	push   $0x2
f01306d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01306d3:	50                   	push   %eax
f01306d4:	e8 b3 5f fe ff       	call   f011668c <CB>
f01306d9:	83 c4 10             	add    $0x10,%esp
f01306dc:	85 c0                	test   %eax,%eax
f01306de:	74 17                	je     f01306f7 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01306e0:	83 ec 04             	sub    $0x4,%esp
f01306e3:	68 20 d0 13 f0       	push   $0xf013d020
f01306e8:	68 5f 13 00 00       	push   $0x135f
f01306ed:	68 7a b5 13 f0       	push   $0xf013b57a
f01306f2:	e8 0e fb fc ff       	call   f0100205 <_panic>

			a+=4096;
f01306f7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f01306fe:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130705:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130708:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013070d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0130710:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130713:	ba 00 00 00 00       	mov    $0x0,%edx
f0130718:	f7 75 dc             	divl   -0x24(%ebp)
f013071b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013071e:	29 d0                	sub    %edx,%eax
f0130720:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130725:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130728:	74 05                	je     f013072f <test_initialize_dyn_block_system+0x209>
				break;
		}
f013072a:	e9 61 ff ff ff       	jmp    f0130690 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f013072f:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f0130730:	83 ec 0c             	sub    $0xc,%esp
f0130733:	68 80 d0 13 f0       	push   $0xf013d080
f0130738:	e8 d1 05 fd ff       	call   f0100d0e <cprintf>
f013073d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130740:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130745:	c9                   	leave  
f0130746:	c3                   	ret    

f0130747 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130747:	55                   	push   %ebp
f0130748:	89 e5                	mov    %esp,%ebp
f013074a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013074d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130751:	77 07                	ja     f013075a <nearest_pow2_ceil+0x13>
f0130753:	b8 01 00 00 00       	mov    $0x1,%eax
f0130758:	eb 20                	jmp    f013077a <nearest_pow2_ceil+0x33>
    int power = 2;
f013075a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130761:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130764:	eb 08                	jmp    f013076e <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130766:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130769:	01 c0                	add    %eax,%eax
f013076b:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f013076e:	d1 6d 08             	shrl   0x8(%ebp)
f0130771:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130775:	75 ef                	jne    f0130766 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130777:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013077a:	c9                   	leave  
f013077b:	c3                   	ret    

f013077c <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f013077c:	55                   	push   %ebp
f013077d:	89 e5                	mov    %esp,%ebp
f013077f:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130782:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130786:	77 07                	ja     f013078f <log2_ceil+0x13>
f0130788:	b8 01 00 00 00       	mov    $0x1,%eax
f013078d:	eb 1b                	jmp    f01307aa <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f013078f:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130796:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130799:	eb 03                	jmp    f013079e <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f013079b:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f013079e:	d1 6d 08             	shrl   0x8(%ebp)
f01307a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01307a5:	75 f4                	jne    f013079b <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01307a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01307aa:	c9                   	leave  
f01307ab:	c3                   	ret    

f01307ac <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01307ac:	55                   	push   %ebp
f01307ad:	89 e5                	mov    %esp,%ebp
f01307af:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01307b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01307b5:	8b 00                	mov    (%eax),%eax
f01307b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01307ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01307bd:	8b 00                	mov    (%eax),%eax
f01307bf:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01307c2:	eb 52                	jmp    f0130816 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01307c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307c7:	8b 00                	mov    (%eax),%eax
f01307c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01307cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307d2:	75 12                	jne    f01307e6 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01307d4:	83 ec 0c             	sub    $0xc,%esp
f01307d7:	68 d8 d0 13 f0       	push   $0xf013d0d8
f01307dc:	e8 2d 05 fd ff       	call   f0100d0e <cprintf>
f01307e1:	83 c4 10             	add    $0x10,%esp
			break;
f01307e4:	eb 3f                	jmp    f0130825 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f01307e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01307ea:	74 38                	je     f0130824 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01307ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307ef:	8b 00                	mov    (%eax),%eax
f01307f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01307f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307fa:	75 12                	jne    f013080e <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01307fc:	83 ec 0c             	sub    $0xc,%esp
f01307ff:	68 f4 d0 13 f0       	push   $0xf013d0f4
f0130804:	e8 05 05 fd ff       	call   f0100d0e <cprintf>
f0130809:	83 c4 10             	add    $0x10,%esp
			break;
f013080c:	eb 17                	jmp    f0130825 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f013080e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130811:	8b 00                	mov    (%eax),%eax
f0130813:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130816:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013081a:	74 09                	je     f0130825 <detect_loop_in_FrameInfo_list+0x79>
f013081c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130820:	75 a2                	jne    f01307c4 <detect_loop_in_FrameInfo_list+0x18>
f0130822:	eb 01                	jmp    f0130825 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0130824:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130825:	83 ec 0c             	sub    $0xc,%esp
f0130828:	68 0b d1 13 f0       	push   $0xf013d10b
f013082d:	e8 dc 04 fd ff       	call   f0100d0e <cprintf>
f0130832:	83 c4 10             	add    $0x10,%esp
}
f0130835:	90                   	nop
f0130836:	c9                   	leave  
f0130837:	c3                   	ret    

f0130838 <scarce_memory>:

void scarce_memory()
{
f0130838:	55                   	push   %ebp
f0130839:	89 e5                	mov    %esp,%ebp
f013083b:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f013083e:	a1 f0 a0 86 f0       	mov    0xf086a0f0,%eax
f0130843:	ba 64 00 00 00       	mov    $0x64,%edx
f0130848:	29 c2                	sub    %eax,%edx
f013084a:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f013084f:	0f af c2             	imul   %edx,%eax
f0130852:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130857:	f7 e2                	mul    %edx
f0130859:	89 d0                	mov    %edx,%eax
f013085b:	c1 e8 05             	shr    $0x5,%eax
f013085e:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130861:	a1 f0 a0 86 f0       	mov    0xf086a0f0,%eax
f0130866:	ba 64 00 00 00       	mov    $0x64,%edx
f013086b:	29 c2                	sub    %eax,%edx
f013086d:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f0130872:	89 d1                	mov    %edx,%ecx
f0130874:	0f af c8             	imul   %eax,%ecx
f0130877:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013087c:	f7 e1                	mul    %ecx
f013087e:	c1 ea 05             	shr    $0x5,%edx
f0130881:	89 d0                	mov    %edx,%eax
f0130883:	c1 e0 02             	shl    $0x2,%eax
f0130886:	01 d0                	add    %edx,%eax
f0130888:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013088f:	01 d0                	add    %edx,%eax
f0130891:	c1 e0 02             	shl    $0x2,%eax
f0130894:	29 c1                	sub    %eax,%ecx
f0130896:	89 ca                	mov    %ecx,%edx
f0130898:	85 d2                	test   %edx,%edx
f013089a:	74 03                	je     f013089f <scarce_memory+0x67>
		total_size_tobe_allocated++;
f013089c:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f013089f:	8b 15 10 a1 86 f0    	mov    0xf086a110,%edx
f01308a5:	a1 24 a1 86 f0       	mov    0xf086a124,%eax
f01308aa:	29 c2                	sub    %eax,%edx
f01308ac:	89 d0                	mov    %edx,%eax
f01308ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01308b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308b4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01308b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01308ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01308c1:	eb 12                	jmp    f01308d5 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01308c3:	83 ec 0c             	sub    $0xc,%esp
f01308c6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01308c9:	50                   	push   %eax
f01308ca:	e8 82 5f fd ff       	call   f0106851 <allocate_frame>
f01308cf:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01308d2:	ff 45 f0             	incl   -0x10(%ebp)
f01308d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01308d8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01308db:	76 e6                	jbe    f01308c3 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01308dd:	90                   	nop
f01308de:	c9                   	leave  
f01308df:	c3                   	ret    

f01308e0 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01308e0:	55                   	push   %ebp
f01308e1:	89 e5                	mov    %esp,%ebp
f01308e3:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01308e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01308ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01308f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01308fb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01308ff:	0f 85 d0 01 00 00    	jne    f0130ad5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130905:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f013090c:	e9 de 00 00 00       	jmp    f01309ef <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f0130911:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130918:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f013091d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130920:	c1 e2 04             	shl    $0x4,%edx
f0130923:	01 d0                	add    %edx,%eax
f0130925:	8b 00                	mov    (%eax),%eax
f0130927:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013092a:	e9 85 00 00 00       	jmp    f01309b4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f013092f:	83 ec 0c             	sub    $0xc,%esp
f0130932:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130935:	e8 eb 75 fd ff       	call   f0107f25 <env_page_ws_get_size>
f013093a:	83 c4 10             	add    $0x10,%esp
f013093d:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130940:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130945:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013094b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013094e:	0f af c2             	imul   %edx,%eax
f0130951:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130956:	f7 e2                	mul    %edx
f0130958:	89 d0                	mov    %edx,%eax
f013095a:	c1 e8 05             	shr    $0x5,%eax
f013095d:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130960:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130965:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013096b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013096e:	89 d1                	mov    %edx,%ecx
f0130970:	0f af c8             	imul   %eax,%ecx
f0130973:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130978:	f7 e1                	mul    %ecx
f013097a:	c1 ea 05             	shr    $0x5,%edx
f013097d:	89 d0                	mov    %edx,%eax
f013097f:	c1 e0 02             	shl    $0x2,%eax
f0130982:	01 d0                	add    %edx,%eax
f0130984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013098b:	01 d0                	add    %edx,%eax
f013098d:	c1 e0 02             	shl    $0x2,%eax
f0130990:	29 c1                	sub    %eax,%ecx
f0130992:	89 ca                	mov    %ecx,%edx
f0130994:	85 d2                	test   %edx,%edx
f0130996:	74 03                	je     f013099b <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130998:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f013099b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013099e:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01309a1:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01309a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309a9:	c1 e2 04             	shl    $0x4,%edx
f01309ac:	01 d0                	add    %edx,%eax
f01309ae:	8b 40 08             	mov    0x8(%eax),%eax
f01309b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01309b4:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f01309b9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309bc:	c1 e2 04             	shl    $0x4,%edx
f01309bf:	01 d0                	add    %edx,%eax
f01309c1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309c5:	74 08                	je     f01309cf <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01309c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01309ca:	8b 52 44             	mov    0x44(%edx),%edx
f01309cd:	eb 05                	jmp    f01309d4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01309cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01309d4:	89 50 08             	mov    %edx,0x8(%eax)
f01309d7:	8b 40 08             	mov    0x8(%eax),%eax
f01309da:	85 c0                	test   %eax,%eax
f01309dc:	0f 85 4d ff ff ff    	jne    f013092f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01309e2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309e6:	0f 85 43 ff ff ff    	jne    f013092f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01309ec:	ff 45 e8             	incl   -0x18(%ebp)
f01309ef:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f01309f4:	0f b6 c0             	movzbl %al,%eax
f01309f7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01309fa:	0f 8f 11 ff ff ff    	jg     f0130911 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130a00:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a07:	a1 f4 a0 86 f0       	mov    0xf086a0f4,%eax
f0130a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a0f:	eb 19                	jmp    f0130a2a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130a11:	83 ec 0c             	sub    $0xc,%esp
f0130a14:	ff 75 dc             	pushl  -0x24(%ebp)
f0130a17:	e8 09 75 fd ff       	call   f0107f25 <env_page_ws_get_size>
f0130a1c:	83 c4 10             	add    $0x10,%esp
f0130a1f:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a22:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0130a27:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a2a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a2e:	74 08                	je     f0130a38 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130a30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130a33:	8b 40 44             	mov    0x44(%eax),%eax
f0130a36:	eb 05                	jmp    f0130a3d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130a38:	b8 00 00 00 00       	mov    $0x0,%eax
f0130a3d:	a3 fc a0 86 f0       	mov    %eax,0xf086a0fc
f0130a42:	a1 fc a0 86 f0       	mov    0xf086a0fc,%eax
f0130a47:	85 c0                	test   %eax,%eax
f0130a49:	75 c6                	jne    f0130a11 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130a4b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a4f:	75 c0                	jne    f0130a11 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130a51:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130a56:	85 c0                	test   %eax,%eax
f0130a58:	0f 84 ec 00 00 00    	je     f0130b4a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130a5e:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130a63:	83 ec 0c             	sub    $0xc,%esp
f0130a66:	50                   	push   %eax
f0130a67:	e8 b9 74 fd ff       	call   f0107f25 <env_page_ws_get_size>
f0130a6c:	83 c4 10             	add    $0x10,%esp
f0130a6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130a72:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130a77:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130a7d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130a80:	0f af c2             	imul   %edx,%eax
f0130a83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130a88:	f7 e2                	mul    %edx
f0130a8a:	89 d0                	mov    %edx,%eax
f0130a8c:	c1 e8 05             	shr    $0x5,%eax
f0130a8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130a92:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130a97:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130a9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130aa0:	89 d1                	mov    %edx,%ecx
f0130aa2:	0f af c8             	imul   %eax,%ecx
f0130aa5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130aaa:	f7 e1                	mul    %ecx
f0130aac:	c1 ea 05             	shr    $0x5,%edx
f0130aaf:	89 d0                	mov    %edx,%eax
f0130ab1:	c1 e0 02             	shl    $0x2,%eax
f0130ab4:	01 d0                	add    %edx,%eax
f0130ab6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130abd:	01 d0                	add    %edx,%eax
f0130abf:	c1 e0 02             	shl    $0x2,%eax
f0130ac2:	29 c1                	sub    %eax,%ecx
f0130ac4:	89 ca                	mov    %ecx,%edx
f0130ac6:	85 d2                	test   %edx,%edx
f0130ac8:	74 03                	je     f0130acd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130aca:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130acd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130ad0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130ad3:	eb 75                	jmp    f0130b4a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130ad5:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130ada:	83 ec 0c             	sub    $0xc,%esp
f0130add:	50                   	push   %eax
f0130ade:	e8 42 74 fd ff       	call   f0107f25 <env_page_ws_get_size>
f0130ae3:	83 c4 10             	add    $0x10,%esp
f0130ae6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130ae9:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130aee:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130af4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130af7:	0f af c2             	imul   %edx,%eax
f0130afa:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130aff:	f7 e2                	mul    %edx
f0130b01:	89 d0                	mov    %edx,%eax
f0130b03:	c1 e8 05             	shr    $0x5,%eax
f0130b06:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130b09:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130b0e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b17:	89 d1                	mov    %edx,%ecx
f0130b19:	0f af c8             	imul   %eax,%ecx
f0130b1c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130b21:	f7 e1                	mul    %ecx
f0130b23:	c1 ea 05             	shr    $0x5,%edx
f0130b26:	89 d0                	mov    %edx,%eax
f0130b28:	c1 e0 02             	shl    $0x2,%eax
f0130b2b:	01 d0                	add    %edx,%eax
f0130b2d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b34:	01 d0                	add    %edx,%eax
f0130b36:	c1 e0 02             	shl    $0x2,%eax
f0130b39:	29 c1                	sub    %eax,%ecx
f0130b3b:	89 ca                	mov    %ecx,%edx
f0130b3d:	85 d2                	test   %edx,%edx
f0130b3f:	74 03                	je     f0130b44 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130b41:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130b44:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130b47:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130b4a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b50:	01 c2                	add    %eax,%edx
f0130b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b55:	01 d0                	add    %edx,%eax
}
f0130b57:	c9                   	leave  
f0130b58:	c3                   	ret    

f0130b59 <schenv>:


void schenv()
{
f0130b59:	55                   	push   %ebp
f0130b5a:	89 e5                	mov    %esp,%ebp
f0130b5c:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130b5f:	c6 05 a8 a1 86 f0 00 	movb   $0x0,0xf086a1a8
	__ne = NULL;
f0130b66:	c7 05 38 a1 86 f0 00 	movl   $0x0,0xf086a138
f0130b6d:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130b70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b77:	eb 3f                	jmp    f0130bb8 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130b79:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0130b7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b81:	c1 e2 04             	shl    $0x4,%edx
f0130b84:	01 d0                	add    %edx,%eax
f0130b86:	83 ec 0c             	sub    $0xc,%esp
f0130b89:	50                   	push   %eax
f0130b8a:	e8 55 38 fd ff       	call   f01043e4 <queue_size>
f0130b8f:	83 c4 10             	add    $0x10,%esp
f0130b92:	85 c0                	test   %eax,%eax
f0130b94:	74 1f                	je     f0130bb5 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130b96:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0130b9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b9e:	c1 e2 04             	shl    $0x4,%edx
f0130ba1:	01 d0                	add    %edx,%eax
f0130ba3:	8b 40 04             	mov    0x4(%eax),%eax
f0130ba6:	a3 38 a1 86 f0       	mov    %eax,0xf086a138
			__nl = i;
f0130bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bae:	a2 a8 a1 86 f0       	mov    %al,0xf086a1a8
			break;
f0130bb3:	eb 10                	jmp    f0130bc5 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130bb5:	ff 45 f4             	incl   -0xc(%ebp)
f0130bb8:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0130bbd:	0f b6 c0             	movzbl %al,%eax
f0130bc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130bc3:	7f b4                	jg     f0130b79 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130bc5:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130bca:	85 c0                	test   %eax,%eax
f0130bcc:	0f 84 86 00 00 00    	je     f0130c58 <schenv+0xff>
	{
		if (__ne != NULL)
f0130bd2:	a1 38 a1 86 f0       	mov    0xf086a138,%eax
f0130bd7:	85 c0                	test   %eax,%eax
f0130bd9:	74 4b                	je     f0130c26 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130bdb:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130be0:	0f b6 c0             	movzbl %al,%eax
f0130be3:	8d 50 01             	lea    0x1(%eax),%edx
f0130be6:	a0 a8 a1 86 f0       	mov    0xf086a1a8,%al
f0130beb:	0f b6 c0             	movzbl %al,%eax
f0130bee:	39 c2                	cmp    %eax,%edx
f0130bf0:	7d 66                	jge    f0130c58 <schenv+0xff>
			{
				__ne = curenv;
f0130bf2:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130bf7:	a3 38 a1 86 f0       	mov    %eax,0xf086a138
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130bfc:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c01:	0f b6 c0             	movzbl %al,%eax
f0130c04:	8a 15 80 a1 86 f0    	mov    0xf086a180,%dl
f0130c0a:	0f b6 d2             	movzbl %dl,%edx
f0130c0d:	4a                   	dec    %edx
f0130c0e:	39 d0                	cmp    %edx,%eax
f0130c10:	7d 08                	jge    f0130c1a <schenv+0xc1>
f0130c12:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c17:	40                   	inc    %eax
f0130c18:	eb 05                	jmp    f0130c1f <schenv+0xc6>
f0130c1a:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c1f:	a2 a8 a1 86 f0       	mov    %al,0xf086a1a8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130c24:	eb 32                	jmp    f0130c58 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130c26:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130c2b:	a3 38 a1 86 f0       	mov    %eax,0xf086a138
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c30:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c35:	0f b6 c0             	movzbl %al,%eax
f0130c38:	8a 15 80 a1 86 f0    	mov    0xf086a180,%dl
f0130c3e:	0f b6 d2             	movzbl %dl,%edx
f0130c41:	4a                   	dec    %edx
f0130c42:	39 d0                	cmp    %edx,%eax
f0130c44:	7d 08                	jge    f0130c4e <schenv+0xf5>
f0130c46:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c4b:	40                   	inc    %eax
f0130c4c:	eb 05                	jmp    f0130c53 <schenv+0xfa>
f0130c4e:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130c53:	a2 a8 a1 86 f0       	mov    %al,0xf086a1a8
		}
	}
}
f0130c58:	90                   	nop
f0130c59:	c9                   	leave  
f0130c5a:	c3                   	ret    

f0130c5b <chksch>:

void chksch(uint8 onoff)
{
f0130c5b:	55                   	push   %ebp
f0130c5c:	89 e5                	mov    %esp,%ebp
f0130c5e:	83 ec 04             	sub    $0x4,%esp
f0130c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c64:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130c67:	c7 05 94 a1 86 f0 00 	movl   $0x0,0xf086a194
f0130c6e:	00 00 00 
	__ne = NULL;
f0130c71:	c7 05 38 a1 86 f0 00 	movl   $0x0,0xf086a138
f0130c78:	00 00 00 
	__pl = 0 ;
f0130c7b:	c6 05 e0 a0 86 f0 00 	movb   $0x0,0xf086a0e0
	__nl = 0 ;
f0130c82:	c6 05 a8 a1 86 f0 00 	movb   $0x0,0xf086a1a8
	__chkstatus = onoff;
f0130c89:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130c8c:	a2 34 a1 86 f0       	mov    %al,0xf086a134
}
f0130c91:	90                   	nop
f0130c92:	c9                   	leave  
f0130c93:	c3                   	ret    

f0130c94 <chk1>:
void chk1()
{
f0130c94:	55                   	push   %ebp
f0130c95:	89 e5                	mov    %esp,%ebp
f0130c97:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130c9a:	a0 34 a1 86 f0       	mov    0xf086a134,%al
f0130c9f:	84 c0                	test   %al,%al
f0130ca1:	74 2b                	je     f0130cce <chk1+0x3a>
		return ;
	__pe = curenv;
f0130ca3:	a1 f4 97 86 f0       	mov    0xf08697f4,%eax
f0130ca8:	a3 94 a1 86 f0       	mov    %eax,0xf086a194
	__pl = __nl ;
f0130cad:	a0 a8 a1 86 f0       	mov    0xf086a1a8,%al
f0130cb2:	a2 e0 a0 86 f0       	mov    %al,0xf086a0e0
	if (__pe == NULL)
f0130cb7:	a1 94 a1 86 f0       	mov    0xf086a194,%eax
f0130cbc:	85 c0                	test   %eax,%eax
f0130cbe:	75 07                	jne    f0130cc7 <chk1+0x33>
	{
		__pl = 0;
f0130cc0:	c6 05 e0 a0 86 f0 00 	movb   $0x0,0xf086a0e0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130cc7:	e8 8d fe ff ff       	call   f0130b59 <schenv>
f0130ccc:	eb 01                	jmp    f0130ccf <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130cce:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130ccf:	c9                   	leave  
f0130cd0:	c3                   	ret    

f0130cd1 <chk2>:
void chk2(struct Env* __se)
{
f0130cd1:	55                   	push   %ebp
f0130cd2:	89 e5                	mov    %esp,%ebp
f0130cd4:	53                   	push   %ebx
f0130cd5:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130cd8:	a0 34 a1 86 f0       	mov    0xf086a134,%al
f0130cdd:	84 c0                	test   %al,%al
f0130cdf:	0f 84 43 02 00 00    	je     f0130f28 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130ce5:	a1 38 a1 86 f0       	mov    0xf086a138,%eax
f0130cea:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130ced:	74 19                	je     f0130d08 <chk2+0x37>
f0130cef:	68 25 d1 13 f0       	push   $0xf013d125
f0130cf4:	68 32 d1 13 f0       	push   $0xf013d132
f0130cf9:	68 c0 00 00 00       	push   $0xc0
f0130cfe:	68 47 d1 13 f0       	push   $0xf013d147
f0130d03:	e8 b3 f5 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130d08:	a1 38 a1 86 f0       	mov    0xf086a138,%eax
f0130d0d:	85 c0                	test   %eax,%eax
f0130d0f:	0f 84 25 01 00 00    	je     f0130e3a <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130d15:	8b 15 2c a1 86 f0    	mov    0xf086a12c,%edx
f0130d1b:	a0 a8 a1 86 f0       	mov    0xf086a1a8,%al
f0130d20:	0f b6 c0             	movzbl %al,%eax
f0130d23:	01 d0                	add    %edx,%eax
f0130d25:	8a 00                	mov    (%eax),%al
f0130d27:	0f b6 d8             	movzbl %al,%ebx
f0130d2a:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130d2f:	99                   	cltd   
f0130d30:	f7 fb                	idiv   %ebx
f0130d32:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130d38:	8b 15 2c a1 86 f0    	mov    0xf086a12c,%edx
f0130d3e:	a0 a8 a1 86 f0       	mov    0xf086a1a8,%al
f0130d43:	0f b6 c0             	movzbl %al,%eax
f0130d46:	01 d0                	add    %edx,%eax
f0130d48:	8a 00                	mov    (%eax),%al
f0130d4a:	0f b6 d8             	movzbl %al,%ebx
f0130d4d:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130d52:	99                   	cltd   
f0130d53:	f7 fb                	idiv   %ebx
f0130d55:	89 c3                	mov    %eax,%ebx
f0130d57:	89 c8                	mov    %ecx,%eax
f0130d59:	99                   	cltd   
f0130d5a:	f7 fb                	idiv   %ebx
f0130d5c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130d60:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d64:	83 e0 01             	and    $0x1,%eax
f0130d67:	66 85 c0             	test   %ax,%ax
f0130d6a:	74 07                	je     f0130d73 <chk2+0xa2>
f0130d6c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d70:	40                   	inc    %eax
f0130d71:	eb 04                	jmp    f0130d77 <chk2+0xa6>
f0130d73:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d77:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130d7b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130d7f:	89 d0                	mov    %edx,%eax
f0130d81:	c1 e0 02             	shl    $0x2,%eax
f0130d84:	01 d0                	add    %edx,%eax
f0130d86:	01 c0                	add    %eax,%eax
f0130d88:	01 d0                	add    %edx,%eax
f0130d8a:	c1 e0 02             	shl    $0x2,%eax
f0130d8d:	01 d0                	add    %edx,%eax
f0130d8f:	01 c0                	add    %eax,%eax
f0130d91:	89 c1                	mov    %eax,%ecx
f0130d93:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130d98:	f7 e9                	imul   %ecx
f0130d9a:	c1 fa 05             	sar    $0x5,%edx
f0130d9d:	89 c8                	mov    %ecx,%eax
f0130d9f:	c1 f8 1f             	sar    $0x1f,%eax
f0130da2:	29 c2                	sub    %eax,%edx
f0130da4:	89 d0                	mov    %edx,%eax
f0130da6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130daa:	e8 06 35 fd ff       	call   f01042b5 <kclock_read_cnt0>
f0130daf:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130db3:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130db7:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130dbb:	76 0a                	jbe    f0130dc7 <chk2+0xf6>
f0130dbd:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130dc1:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130dc5:	76 19                	jbe    f0130de0 <chk2+0x10f>
f0130dc7:	68 60 d1 13 f0       	push   $0xf013d160
f0130dcc:	68 32 d1 13 f0       	push   $0xf013d132
f0130dd1:	68 ca 00 00 00       	push   $0xca
f0130dd6:	68 47 d1 13 f0       	push   $0xf013d147
f0130ddb:	e8 db f4 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130de0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130de7:	eb 44                	jmp    f0130e2d <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130de9:	a1 38 a1 86 f0       	mov    0xf086a138,%eax
f0130dee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130df1:	89 c2                	mov    %eax,%edx
f0130df3:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0130df8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130dfb:	c1 e1 04             	shl    $0x4,%ecx
f0130dfe:	01 c8                	add    %ecx,%eax
f0130e00:	83 ec 08             	sub    $0x8,%esp
f0130e03:	52                   	push   %edx
f0130e04:	50                   	push   %eax
f0130e05:	e8 f4 37 fd ff       	call   f01045fe <find_env_in_queue>
f0130e0a:	83 c4 10             	add    $0x10,%esp
f0130e0d:	85 c0                	test   %eax,%eax
f0130e0f:	74 19                	je     f0130e2a <chk2+0x159>
f0130e11:	68 84 d1 13 f0       	push   $0xf013d184
f0130e16:	68 32 d1 13 f0       	push   $0xf013d132
f0130e1b:	68 ce 00 00 00       	push   $0xce
f0130e20:	68 47 d1 13 f0       	push   $0xf013d147
f0130e25:	e8 91 f4 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e2a:	ff 45 f4             	incl   -0xc(%ebp)
f0130e2d:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0130e32:	0f b6 c0             	movzbl %al,%eax
f0130e35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130e38:	7f af                	jg     f0130de9 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130e3a:	a1 94 a1 86 f0       	mov    0xf086a194,%eax
f0130e3f:	85 c0                	test   %eax,%eax
f0130e41:	0f 84 e2 00 00 00    	je     f0130f29 <chk2+0x258>
f0130e47:	8b 15 94 a1 86 f0    	mov    0xf086a194,%edx
f0130e4d:	a1 38 a1 86 f0       	mov    0xf086a138,%eax
f0130e52:	39 c2                	cmp    %eax,%edx
f0130e54:	0f 84 cf 00 00 00    	je     f0130f29 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130e5a:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130e5f:	0f b6 c0             	movzbl %al,%eax
f0130e62:	8a 15 80 a1 86 f0    	mov    0xf086a180,%dl
f0130e68:	0f b6 d2             	movzbl %dl,%edx
f0130e6b:	4a                   	dec    %edx
f0130e6c:	39 d0                	cmp    %edx,%eax
f0130e6e:	74 08                	je     f0130e78 <chk2+0x1a7>
f0130e70:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130e75:	40                   	inc    %eax
f0130e76:	eb 05                	jmp    f0130e7d <chk2+0x1ac>
f0130e78:	a0 e0 a0 86 f0       	mov    0xf086a0e0,%al
f0130e7d:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130e80:	a1 94 a1 86 f0       	mov    0xf086a194,%eax
f0130e85:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130e88:	89 c2                	mov    %eax,%edx
f0130e8a:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0130e8f:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130e93:	c1 e1 04             	shl    $0x4,%ecx
f0130e96:	01 c8                	add    %ecx,%eax
f0130e98:	83 ec 08             	sub    $0x8,%esp
f0130e9b:	52                   	push   %edx
f0130e9c:	50                   	push   %eax
f0130e9d:	e8 5c 37 fd ff       	call   f01045fe <find_env_in_queue>
f0130ea2:	83 c4 10             	add    $0x10,%esp
f0130ea5:	85 c0                	test   %eax,%eax
f0130ea7:	75 19                	jne    f0130ec2 <chk2+0x1f1>
f0130ea9:	68 c4 d1 13 f0       	push   $0xf013d1c4
f0130eae:	68 32 d1 13 f0       	push   $0xf013d132
f0130eb3:	68 d4 00 00 00       	push   $0xd4
f0130eb8:	68 47 d1 13 f0       	push   $0xf013d147
f0130ebd:	e8 f9 f3 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130ec2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130ec9:	eb 4e                	jmp    f0130f19 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130ecb:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130ecf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130ed2:	74 41                	je     f0130f15 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130ed4:	a1 94 a1 86 f0       	mov    0xf086a194,%eax
f0130ed9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130edc:	89 c2                	mov    %eax,%edx
f0130ede:	a1 e8 a0 86 f0       	mov    0xf086a0e8,%eax
f0130ee3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130ee6:	c1 e1 04             	shl    $0x4,%ecx
f0130ee9:	01 c8                	add    %ecx,%eax
f0130eeb:	83 ec 08             	sub    $0x8,%esp
f0130eee:	52                   	push   %edx
f0130eef:	50                   	push   %eax
f0130ef0:	e8 09 37 fd ff       	call   f01045fe <find_env_in_queue>
f0130ef5:	83 c4 10             	add    $0x10,%esp
f0130ef8:	85 c0                	test   %eax,%eax
f0130efa:	74 1a                	je     f0130f16 <chk2+0x245>
f0130efc:	68 08 d2 13 f0       	push   $0xf013d208
f0130f01:	68 32 d1 13 f0       	push   $0xf013d132
f0130f06:	68 d8 00 00 00       	push   $0xd8
f0130f0b:	68 47 d1 13 f0       	push   $0xf013d147
f0130f10:	e8 a6 f3 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130f15:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130f16:	ff 45 f0             	incl   -0x10(%ebp)
f0130f19:	a0 80 a1 86 f0       	mov    0xf086a180,%al
f0130f1e:	0f b6 c0             	movzbl %al,%eax
f0130f21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130f24:	7f a5                	jg     f0130ecb <chk2+0x1fa>
f0130f26:	eb 01                	jmp    f0130f29 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130f28:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130f29:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130f2c:	c9                   	leave  
f0130f2d:	c3                   	ret    

f0130f2e <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130f2e:	55                   	push   %ebp
f0130f2f:	89 e5                	mov    %esp,%ebp
f0130f31:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130f34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130f3b:	eb 40                	jmp    f0130f7d <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f40:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130f46:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0130f4b:	83 ec 08             	sub    $0x8,%esp
f0130f4e:	52                   	push   %edx
f0130f4f:	50                   	push   %eax
f0130f50:	e8 9b 01 00 00       	call   f01310f0 <check_va2pa>
f0130f55:	83 c4 10             	add    $0x10,%esp
f0130f58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130f5b:	74 19                	je     f0130f76 <check_boot_pgdir+0x48>
f0130f5d:	68 48 d2 13 f0       	push   $0xf013d248
f0130f62:	68 32 d1 13 f0       	push   $0xf013d132
f0130f67:	68 fa 00 00 00       	push   $0xfa
f0130f6c:	68 47 d1 13 f0       	push   $0xf013d147
f0130f71:	e8 8f f2 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130f76:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f80:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130f86:	a1 78 a1 86 f0       	mov    0xf086a178,%eax
f0130f8b:	39 c2                	cmp    %eax,%edx
f0130f8d:	72 ae                	jb     f0130f3d <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130f8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130f96:	eb 74                	jmp    f013100c <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f9b:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130fa1:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0130fa6:	83 ec 08             	sub    $0x8,%esp
f0130fa9:	52                   	push   %edx
f0130faa:	50                   	push   %eax
f0130fab:	e8 40 01 00 00       	call   f01310f0 <check_va2pa>
f0130fb0:	83 c4 10             	add    $0x10,%esp
f0130fb3:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130fba:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130fc1:	77 17                	ja     f0130fda <check_boot_pgdir+0xac>
f0130fc3:	ff 75 f0             	pushl  -0x10(%ebp)
f0130fc6:	68 80 d2 13 f0       	push   $0xf013d280
f0130fcb:	68 04 01 00 00       	push   $0x104
f0130fd0:	68 47 d1 13 f0       	push   $0xf013d147
f0130fd5:	e8 2b f2 fc ff       	call   f0100205 <_panic>
f0130fda:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130fdd:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130fe3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130fe6:	01 ca                	add    %ecx,%edx
f0130fe8:	39 d0                	cmp    %edx,%eax
f0130fea:	74 19                	je     f0131005 <check_boot_pgdir+0xd7>
f0130fec:	68 b4 d2 13 f0       	push   $0xf013d2b4
f0130ff1:	68 32 d1 13 f0       	push   $0xf013d132
f0130ff6:	68 04 01 00 00       	push   $0x104
f0130ffb:	68 47 d1 13 f0       	push   $0xf013d147
f0131000:	e8 00 f2 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0131005:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013100c:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0131013:	76 83                	jbe    f0130f98 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0131015:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013101c:	e9 af 00 00 00       	jmp    f01310d0 <check_boot_pgdir+0x1a2>
		switch (i) {
f0131021:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131024:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0131029:	74 11                	je     f013103c <check_boot_pgdir+0x10e>
f013102b:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0131030:	72 36                	jb     f0131068 <check_boot_pgdir+0x13a>
f0131032:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0131037:	83 f8 02             	cmp    $0x2,%eax
f013103a:	77 2c                	ja     f0131068 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f013103c:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0131041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131044:	c1 e2 02             	shl    $0x2,%edx
f0131047:	01 d0                	add    %edx,%eax
f0131049:	8b 00                	mov    (%eax),%eax
f013104b:	85 c0                	test   %eax,%eax
f013104d:	75 7a                	jne    f01310c9 <check_boot_pgdir+0x19b>
f013104f:	68 36 d3 13 f0       	push   $0xf013d336
f0131054:	68 32 d1 13 f0       	push   $0xf013d132
f0131059:	68 0f 01 00 00       	push   $0x10f
f013105e:	68 47 d1 13 f0       	push   $0xf013d147
f0131063:	e8 9d f1 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0131068:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f013106f:	76 2c                	jbe    f013109d <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0131071:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f0131076:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131079:	c1 e2 02             	shl    $0x2,%edx
f013107c:	01 d0                	add    %edx,%eax
f013107e:	8b 00                	mov    (%eax),%eax
f0131080:	85 c0                	test   %eax,%eax
f0131082:	75 48                	jne    f01310cc <check_boot_pgdir+0x19e>
f0131084:	68 36 d3 13 f0       	push   $0xf013d336
f0131089:	68 32 d1 13 f0       	push   $0xf013d132
f013108e:	68 13 01 00 00       	push   $0x113
f0131093:	68 47 d1 13 f0       	push   $0xf013d147
f0131098:	e8 68 f1 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f013109d:	a1 7c a1 86 f0       	mov    0xf086a17c,%eax
f01310a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310a5:	c1 e2 02             	shl    $0x2,%edx
f01310a8:	01 d0                	add    %edx,%eax
f01310aa:	8b 00                	mov    (%eax),%eax
f01310ac:	85 c0                	test   %eax,%eax
f01310ae:	74 1c                	je     f01310cc <check_boot_pgdir+0x19e>
f01310b0:	68 4c d3 13 f0       	push   $0xf013d34c
f01310b5:	68 32 d1 13 f0       	push   $0xf013d132
f01310ba:	68 15 01 00 00       	push   $0x115
f01310bf:	68 47 d1 13 f0       	push   $0xf013d147
f01310c4:	e8 3c f1 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01310c9:	90                   	nop
f01310ca:	eb 01                	jmp    f01310cd <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01310cc:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01310cd:	ff 45 f4             	incl   -0xc(%ebp)
f01310d0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01310d7:	0f 86 44 ff ff ff    	jbe    f0131021 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01310dd:	83 ec 0c             	sub    $0xc,%esp
f01310e0:	68 68 d3 13 f0       	push   $0xf013d368
f01310e5:	e8 24 fc fc ff       	call   f0100d0e <cprintf>
f01310ea:	83 c4 10             	add    $0x10,%esp
}
f01310ed:	90                   	nop
f01310ee:	c9                   	leave  
f01310ef:	c3                   	ret    

f01310f0 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01310f0:	55                   	push   %ebp
f01310f1:	89 e5                	mov    %esp,%ebp
f01310f3:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01310f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310f9:	c1 e8 16             	shr    $0x16,%eax
f01310fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131103:	8b 45 08             	mov    0x8(%ebp),%eax
f0131106:	01 d0                	add    %edx,%eax
f0131108:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f013110b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013110e:	8b 00                	mov    (%eax),%eax
f0131110:	83 e0 01             	and    $0x1,%eax
f0131113:	85 c0                	test   %eax,%eax
f0131115:	75 0a                	jne    f0131121 <check_va2pa+0x31>
		return ~0;
f0131117:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013111c:	e9 87 00 00 00       	jmp    f01311a8 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0131121:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131124:	8b 00                	mov    (%eax),%eax
f0131126:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f013112b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013112e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131131:	c1 e8 0c             	shr    $0xc,%eax
f0131134:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131137:	a1 10 a1 86 f0       	mov    0xf086a110,%eax
f013113c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f013113f:	72 17                	jb     f0131158 <check_va2pa+0x68>
f0131141:	ff 75 f0             	pushl  -0x10(%ebp)
f0131144:	68 88 d3 13 f0       	push   $0xf013d388
f0131149:	68 2b 01 00 00       	push   $0x12b
f013114e:	68 47 d1 13 f0       	push   $0xf013d147
f0131153:	e8 ad f0 fc ff       	call   f0100205 <_panic>
f0131158:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013115b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0131160:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0131163:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131166:	c1 e8 0c             	shr    $0xc,%eax
f0131169:	25 ff 03 00 00       	and    $0x3ff,%eax
f013116e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131175:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131178:	01 d0                	add    %edx,%eax
f013117a:	8b 00                	mov    (%eax),%eax
f013117c:	83 e0 01             	and    $0x1,%eax
f013117f:	85 c0                	test   %eax,%eax
f0131181:	75 07                	jne    f013118a <check_va2pa+0x9a>
		return ~0;
f0131183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131188:	eb 1e                	jmp    f01311a8 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f013118a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013118d:	c1 e8 0c             	shr    $0xc,%eax
f0131190:	25 ff 03 00 00       	and    $0x3ff,%eax
f0131195:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013119c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013119f:	01 d0                	add    %edx,%eax
f01311a1:	8b 00                	mov    (%eax),%eax
f01311a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01311a8:	c9                   	leave  
f01311a9:	c3                   	ret    

f01311aa <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01311aa:	55                   	push   %ebp
f01311ab:	89 e5                	mov    %esp,%ebp
f01311ad:	53                   	push   %ebx
f01311ae:	83 ec 14             	sub    $0x14,%esp
f01311b1:	8b 45 10             	mov    0x10(%ebp),%eax
f01311b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311b7:	8b 45 14             	mov    0x14(%ebp),%eax
f01311ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01311bd:	8b 45 18             	mov    0x18(%ebp),%eax
f01311c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01311c5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311c8:	77 55                	ja     f013121f <printnum+0x75>
f01311ca:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311cd:	72 05                	jb     f01311d4 <printnum+0x2a>
f01311cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01311d2:	77 4b                	ja     f013121f <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01311d4:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01311d7:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01311da:	8b 45 18             	mov    0x18(%ebp),%eax
f01311dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01311e2:	52                   	push   %edx
f01311e3:	50                   	push   %eax
f01311e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01311e7:	ff 75 f0             	pushl  -0x10(%ebp)
f01311ea:	e8 95 23 00 00       	call   f0133584 <__udivdi3>
f01311ef:	83 c4 10             	add    $0x10,%esp
f01311f2:	83 ec 04             	sub    $0x4,%esp
f01311f5:	ff 75 20             	pushl  0x20(%ebp)
f01311f8:	53                   	push   %ebx
f01311f9:	ff 75 18             	pushl  0x18(%ebp)
f01311fc:	52                   	push   %edx
f01311fd:	50                   	push   %eax
f01311fe:	ff 75 0c             	pushl  0xc(%ebp)
f0131201:	ff 75 08             	pushl  0x8(%ebp)
f0131204:	e8 a1 ff ff ff       	call   f01311aa <printnum>
f0131209:	83 c4 20             	add    $0x20,%esp
f013120c:	eb 1a                	jmp    f0131228 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f013120e:	83 ec 08             	sub    $0x8,%esp
f0131211:	ff 75 0c             	pushl  0xc(%ebp)
f0131214:	ff 75 20             	pushl  0x20(%ebp)
f0131217:	8b 45 08             	mov    0x8(%ebp),%eax
f013121a:	ff d0                	call   *%eax
f013121c:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f013121f:	ff 4d 1c             	decl   0x1c(%ebp)
f0131222:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0131226:	7f e6                	jg     f013120e <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0131228:	8b 4d 18             	mov    0x18(%ebp),%ecx
f013122b:	bb 00 00 00 00       	mov    $0x0,%ebx
f0131230:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131236:	53                   	push   %ebx
f0131237:	51                   	push   %ecx
f0131238:	52                   	push   %edx
f0131239:	50                   	push   %eax
f013123a:	e8 55 24 00 00       	call   f0133694 <__umoddi3>
f013123f:	83 c4 10             	add    $0x10,%esp
f0131242:	05 d4 d5 13 f0       	add    $0xf013d5d4,%eax
f0131247:	8a 00                	mov    (%eax),%al
f0131249:	0f be c0             	movsbl %al,%eax
f013124c:	83 ec 08             	sub    $0x8,%esp
f013124f:	ff 75 0c             	pushl  0xc(%ebp)
f0131252:	50                   	push   %eax
f0131253:	8b 45 08             	mov    0x8(%ebp),%eax
f0131256:	ff d0                	call   *%eax
f0131258:	83 c4 10             	add    $0x10,%esp
}
f013125b:	90                   	nop
f013125c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013125f:	c9                   	leave  
f0131260:	c3                   	ret    

f0131261 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0131261:	55                   	push   %ebp
f0131262:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0131264:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0131268:	7e 1c                	jle    f0131286 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f013126a:	8b 45 08             	mov    0x8(%ebp),%eax
f013126d:	8b 00                	mov    (%eax),%eax
f013126f:	8d 50 08             	lea    0x8(%eax),%edx
f0131272:	8b 45 08             	mov    0x8(%ebp),%eax
f0131275:	89 10                	mov    %edx,(%eax)
f0131277:	8b 45 08             	mov    0x8(%ebp),%eax
f013127a:	8b 00                	mov    (%eax),%eax
f013127c:	83 e8 08             	sub    $0x8,%eax
f013127f:	8b 50 04             	mov    0x4(%eax),%edx
f0131282:	8b 00                	mov    (%eax),%eax
f0131284:	eb 40                	jmp    f01312c6 <getuint+0x65>
	else if (lflag)
f0131286:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013128a:	74 1e                	je     f01312aa <getuint+0x49>
		return va_arg(*ap, unsigned long);
f013128c:	8b 45 08             	mov    0x8(%ebp),%eax
f013128f:	8b 00                	mov    (%eax),%eax
f0131291:	8d 50 04             	lea    0x4(%eax),%edx
f0131294:	8b 45 08             	mov    0x8(%ebp),%eax
f0131297:	89 10                	mov    %edx,(%eax)
f0131299:	8b 45 08             	mov    0x8(%ebp),%eax
f013129c:	8b 00                	mov    (%eax),%eax
f013129e:	83 e8 04             	sub    $0x4,%eax
f01312a1:	8b 00                	mov    (%eax),%eax
f01312a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01312a8:	eb 1c                	jmp    f01312c6 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01312aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ad:	8b 00                	mov    (%eax),%eax
f01312af:	8d 50 04             	lea    0x4(%eax),%edx
f01312b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b5:	89 10                	mov    %edx,(%eax)
f01312b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ba:	8b 00                	mov    (%eax),%eax
f01312bc:	83 e8 04             	sub    $0x4,%eax
f01312bf:	8b 00                	mov    (%eax),%eax
f01312c1:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01312c6:	5d                   	pop    %ebp
f01312c7:	c3                   	ret    

f01312c8 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01312c8:	55                   	push   %ebp
f01312c9:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01312cb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01312cf:	7e 1c                	jle    f01312ed <getint+0x25>
		return va_arg(*ap, long long);
f01312d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d4:	8b 00                	mov    (%eax),%eax
f01312d6:	8d 50 08             	lea    0x8(%eax),%edx
f01312d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312dc:	89 10                	mov    %edx,(%eax)
f01312de:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e1:	8b 00                	mov    (%eax),%eax
f01312e3:	83 e8 08             	sub    $0x8,%eax
f01312e6:	8b 50 04             	mov    0x4(%eax),%edx
f01312e9:	8b 00                	mov    (%eax),%eax
f01312eb:	eb 38                	jmp    f0131325 <getint+0x5d>
	else if (lflag)
f01312ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01312f1:	74 1a                	je     f013130d <getint+0x45>
		return va_arg(*ap, long);
f01312f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f6:	8b 00                	mov    (%eax),%eax
f01312f8:	8d 50 04             	lea    0x4(%eax),%edx
f01312fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fe:	89 10                	mov    %edx,(%eax)
f0131300:	8b 45 08             	mov    0x8(%ebp),%eax
f0131303:	8b 00                	mov    (%eax),%eax
f0131305:	83 e8 04             	sub    $0x4,%eax
f0131308:	8b 00                	mov    (%eax),%eax
f013130a:	99                   	cltd   
f013130b:	eb 18                	jmp    f0131325 <getint+0x5d>
	else
		return va_arg(*ap, int);
f013130d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131310:	8b 00                	mov    (%eax),%eax
f0131312:	8d 50 04             	lea    0x4(%eax),%edx
f0131315:	8b 45 08             	mov    0x8(%ebp),%eax
f0131318:	89 10                	mov    %edx,(%eax)
f013131a:	8b 45 08             	mov    0x8(%ebp),%eax
f013131d:	8b 00                	mov    (%eax),%eax
f013131f:	83 e8 04             	sub    $0x4,%eax
f0131322:	8b 00                	mov    (%eax),%eax
f0131324:	99                   	cltd   
}
f0131325:	5d                   	pop    %ebp
f0131326:	c3                   	ret    

f0131327 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0131327:	55                   	push   %ebp
f0131328:	89 e5                	mov    %esp,%ebp
f013132a:	56                   	push   %esi
f013132b:	53                   	push   %ebx
f013132c:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013132f:	eb 17                	jmp    f0131348 <vprintfmt+0x21>
			if (ch == '\0')
f0131331:	85 db                	test   %ebx,%ebx
f0131333:	0f 84 af 03 00 00    	je     f01316e8 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0131339:	83 ec 08             	sub    $0x8,%esp
f013133c:	ff 75 0c             	pushl  0xc(%ebp)
f013133f:	53                   	push   %ebx
f0131340:	8b 45 08             	mov    0x8(%ebp),%eax
f0131343:	ff d0                	call   *%eax
f0131345:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131348:	8b 45 10             	mov    0x10(%ebp),%eax
f013134b:	8d 50 01             	lea    0x1(%eax),%edx
f013134e:	89 55 10             	mov    %edx,0x10(%ebp)
f0131351:	8a 00                	mov    (%eax),%al
f0131353:	0f b6 d8             	movzbl %al,%ebx
f0131356:	83 fb 25             	cmp    $0x25,%ebx
f0131359:	75 d6                	jne    f0131331 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f013135b:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f013135f:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0131366:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f013136d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0131374:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f013137b:	8b 45 10             	mov    0x10(%ebp),%eax
f013137e:	8d 50 01             	lea    0x1(%eax),%edx
f0131381:	89 55 10             	mov    %edx,0x10(%ebp)
f0131384:	8a 00                	mov    (%eax),%al
f0131386:	0f b6 d8             	movzbl %al,%ebx
f0131389:	8d 43 dd             	lea    -0x23(%ebx),%eax
f013138c:	83 f8 55             	cmp    $0x55,%eax
f013138f:	0f 87 2b 03 00 00    	ja     f01316c0 <vprintfmt+0x399>
f0131395:	8b 04 85 f8 d5 13 f0 	mov    -0xfec2a08(,%eax,4),%eax
f013139c:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f013139e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01313a2:	eb d7                	jmp    f013137b <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01313a4:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01313a8:	eb d1                	jmp    f013137b <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01313aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01313b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01313b4:	89 d0                	mov    %edx,%eax
f01313b6:	c1 e0 02             	shl    $0x2,%eax
f01313b9:	01 d0                	add    %edx,%eax
f01313bb:	01 c0                	add    %eax,%eax
f01313bd:	01 d8                	add    %ebx,%eax
f01313bf:	83 e8 30             	sub    $0x30,%eax
f01313c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01313c5:	8b 45 10             	mov    0x10(%ebp),%eax
f01313c8:	8a 00                	mov    (%eax),%al
f01313ca:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01313cd:	83 fb 2f             	cmp    $0x2f,%ebx
f01313d0:	7e 3e                	jle    f0131410 <vprintfmt+0xe9>
f01313d2:	83 fb 39             	cmp    $0x39,%ebx
f01313d5:	7f 39                	jg     f0131410 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01313d7:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01313da:	eb d5                	jmp    f01313b1 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01313dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01313df:	83 c0 04             	add    $0x4,%eax
f01313e2:	89 45 14             	mov    %eax,0x14(%ebp)
f01313e5:	8b 45 14             	mov    0x14(%ebp),%eax
f01313e8:	83 e8 04             	sub    $0x4,%eax
f01313eb:	8b 00                	mov    (%eax),%eax
f01313ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f01313f0:	eb 1f                	jmp    f0131411 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f01313f2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01313f6:	79 83                	jns    f013137b <vprintfmt+0x54>
				width = 0;
f01313f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01313ff:	e9 77 ff ff ff       	jmp    f013137b <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0131404:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013140b:	e9 6b ff ff ff       	jmp    f013137b <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0131410:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0131411:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131415:	0f 89 60 ff ff ff    	jns    f013137b <vprintfmt+0x54>
				width = precision, precision = -1;
f013141b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013141e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0131421:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131428:	e9 4e ff ff ff       	jmp    f013137b <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f013142d:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0131430:	e9 46 ff ff ff       	jmp    f013137b <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131435:	8b 45 14             	mov    0x14(%ebp),%eax
f0131438:	83 c0 04             	add    $0x4,%eax
f013143b:	89 45 14             	mov    %eax,0x14(%ebp)
f013143e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131441:	83 e8 04             	sub    $0x4,%eax
f0131444:	8b 00                	mov    (%eax),%eax
f0131446:	83 ec 08             	sub    $0x8,%esp
f0131449:	ff 75 0c             	pushl  0xc(%ebp)
f013144c:	50                   	push   %eax
f013144d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131450:	ff d0                	call   *%eax
f0131452:	83 c4 10             	add    $0x10,%esp
			break;
f0131455:	e9 89 02 00 00       	jmp    f01316e3 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f013145a:	8b 45 14             	mov    0x14(%ebp),%eax
f013145d:	83 c0 04             	add    $0x4,%eax
f0131460:	89 45 14             	mov    %eax,0x14(%ebp)
f0131463:	8b 45 14             	mov    0x14(%ebp),%eax
f0131466:	83 e8 04             	sub    $0x4,%eax
f0131469:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f013146b:	85 db                	test   %ebx,%ebx
f013146d:	79 02                	jns    f0131471 <vprintfmt+0x14a>
				err = -err;
f013146f:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0131471:	83 fb 64             	cmp    $0x64,%ebx
f0131474:	7f 0b                	jg     f0131481 <vprintfmt+0x15a>
f0131476:	8b 34 9d 40 d4 13 f0 	mov    -0xfec2bc0(,%ebx,4),%esi
f013147d:	85 f6                	test   %esi,%esi
f013147f:	75 19                	jne    f013149a <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0131481:	53                   	push   %ebx
f0131482:	68 e5 d5 13 f0       	push   $0xf013d5e5
f0131487:	ff 75 0c             	pushl  0xc(%ebp)
f013148a:	ff 75 08             	pushl  0x8(%ebp)
f013148d:	e8 5e 02 00 00       	call   f01316f0 <printfmt>
f0131492:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0131495:	e9 49 02 00 00       	jmp    f01316e3 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f013149a:	56                   	push   %esi
f013149b:	68 ee d5 13 f0       	push   $0xf013d5ee
f01314a0:	ff 75 0c             	pushl  0xc(%ebp)
f01314a3:	ff 75 08             	pushl  0x8(%ebp)
f01314a6:	e8 45 02 00 00       	call   f01316f0 <printfmt>
f01314ab:	83 c4 10             	add    $0x10,%esp
			break;
f01314ae:	e9 30 02 00 00       	jmp    f01316e3 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01314b3:	8b 45 14             	mov    0x14(%ebp),%eax
f01314b6:	83 c0 04             	add    $0x4,%eax
f01314b9:	89 45 14             	mov    %eax,0x14(%ebp)
f01314bc:	8b 45 14             	mov    0x14(%ebp),%eax
f01314bf:	83 e8 04             	sub    $0x4,%eax
f01314c2:	8b 30                	mov    (%eax),%esi
f01314c4:	85 f6                	test   %esi,%esi
f01314c6:	75 05                	jne    f01314cd <vprintfmt+0x1a6>
				p = "(null)";
f01314c8:	be f1 d5 13 f0       	mov    $0xf013d5f1,%esi
			if (width > 0 && padc != '-')
f01314cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01314d1:	7e 6d                	jle    f0131540 <vprintfmt+0x219>
f01314d3:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01314d7:	74 67                	je     f0131540 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01314d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01314dc:	83 ec 08             	sub    $0x8,%esp
f01314df:	50                   	push   %eax
f01314e0:	56                   	push   %esi
f01314e1:	e8 12 05 00 00       	call   f01319f8 <strnlen>
f01314e6:	83 c4 10             	add    $0x10,%esp
f01314e9:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f01314ec:	eb 16                	jmp    f0131504 <vprintfmt+0x1dd>
					putch(padc, putdat);
f01314ee:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f01314f2:	83 ec 08             	sub    $0x8,%esp
f01314f5:	ff 75 0c             	pushl  0xc(%ebp)
f01314f8:	50                   	push   %eax
f01314f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01314fc:	ff d0                	call   *%eax
f01314fe:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0131501:	ff 4d e4             	decl   -0x1c(%ebp)
f0131504:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131508:	7f e4                	jg     f01314ee <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013150a:	eb 34                	jmp    f0131540 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013150c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131510:	74 1c                	je     f013152e <vprintfmt+0x207>
f0131512:	83 fb 1f             	cmp    $0x1f,%ebx
f0131515:	7e 05                	jle    f013151c <vprintfmt+0x1f5>
f0131517:	83 fb 7e             	cmp    $0x7e,%ebx
f013151a:	7e 12                	jle    f013152e <vprintfmt+0x207>
					putch('?', putdat);
f013151c:	83 ec 08             	sub    $0x8,%esp
f013151f:	ff 75 0c             	pushl  0xc(%ebp)
f0131522:	6a 3f                	push   $0x3f
f0131524:	8b 45 08             	mov    0x8(%ebp),%eax
f0131527:	ff d0                	call   *%eax
f0131529:	83 c4 10             	add    $0x10,%esp
f013152c:	eb 0f                	jmp    f013153d <vprintfmt+0x216>
				else
					putch(ch, putdat);
f013152e:	83 ec 08             	sub    $0x8,%esp
f0131531:	ff 75 0c             	pushl  0xc(%ebp)
f0131534:	53                   	push   %ebx
f0131535:	8b 45 08             	mov    0x8(%ebp),%eax
f0131538:	ff d0                	call   *%eax
f013153a:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013153d:	ff 4d e4             	decl   -0x1c(%ebp)
f0131540:	89 f0                	mov    %esi,%eax
f0131542:	8d 70 01             	lea    0x1(%eax),%esi
f0131545:	8a 00                	mov    (%eax),%al
f0131547:	0f be d8             	movsbl %al,%ebx
f013154a:	85 db                	test   %ebx,%ebx
f013154c:	74 24                	je     f0131572 <vprintfmt+0x24b>
f013154e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131552:	78 b8                	js     f013150c <vprintfmt+0x1e5>
f0131554:	ff 4d e0             	decl   -0x20(%ebp)
f0131557:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013155b:	79 af                	jns    f013150c <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013155d:	eb 13                	jmp    f0131572 <vprintfmt+0x24b>
				putch(' ', putdat);
f013155f:	83 ec 08             	sub    $0x8,%esp
f0131562:	ff 75 0c             	pushl  0xc(%ebp)
f0131565:	6a 20                	push   $0x20
f0131567:	8b 45 08             	mov    0x8(%ebp),%eax
f013156a:	ff d0                	call   *%eax
f013156c:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013156f:	ff 4d e4             	decl   -0x1c(%ebp)
f0131572:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131576:	7f e7                	jg     f013155f <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131578:	e9 66 01 00 00       	jmp    f01316e3 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f013157d:	83 ec 08             	sub    $0x8,%esp
f0131580:	ff 75 e8             	pushl  -0x18(%ebp)
f0131583:	8d 45 14             	lea    0x14(%ebp),%eax
f0131586:	50                   	push   %eax
f0131587:	e8 3c fd ff ff       	call   f01312c8 <getint>
f013158c:	83 c4 10             	add    $0x10,%esp
f013158f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131592:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0131595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131598:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013159b:	85 d2                	test   %edx,%edx
f013159d:	79 23                	jns    f01315c2 <vprintfmt+0x29b>
				putch('-', putdat);
f013159f:	83 ec 08             	sub    $0x8,%esp
f01315a2:	ff 75 0c             	pushl  0xc(%ebp)
f01315a5:	6a 2d                	push   $0x2d
f01315a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01315aa:	ff d0                	call   *%eax
f01315ac:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01315af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315b5:	f7 d8                	neg    %eax
f01315b7:	83 d2 00             	adc    $0x0,%edx
f01315ba:	f7 da                	neg    %edx
f01315bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315bf:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01315c2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01315c9:	e9 bc 00 00 00       	jmp    f013168a <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01315ce:	83 ec 08             	sub    $0x8,%esp
f01315d1:	ff 75 e8             	pushl  -0x18(%ebp)
f01315d4:	8d 45 14             	lea    0x14(%ebp),%eax
f01315d7:	50                   	push   %eax
f01315d8:	e8 84 fc ff ff       	call   f0131261 <getuint>
f01315dd:	83 c4 10             	add    $0x10,%esp
f01315e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315e3:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01315e6:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01315ed:	e9 98 00 00 00       	jmp    f013168a <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01315f2:	83 ec 08             	sub    $0x8,%esp
f01315f5:	ff 75 0c             	pushl  0xc(%ebp)
f01315f8:	6a 58                	push   $0x58
f01315fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01315fd:	ff d0                	call   *%eax
f01315ff:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131602:	83 ec 08             	sub    $0x8,%esp
f0131605:	ff 75 0c             	pushl  0xc(%ebp)
f0131608:	6a 58                	push   $0x58
f013160a:	8b 45 08             	mov    0x8(%ebp),%eax
f013160d:	ff d0                	call   *%eax
f013160f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131612:	83 ec 08             	sub    $0x8,%esp
f0131615:	ff 75 0c             	pushl  0xc(%ebp)
f0131618:	6a 58                	push   $0x58
f013161a:	8b 45 08             	mov    0x8(%ebp),%eax
f013161d:	ff d0                	call   *%eax
f013161f:	83 c4 10             	add    $0x10,%esp
			break;
f0131622:	e9 bc 00 00 00       	jmp    f01316e3 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0131627:	83 ec 08             	sub    $0x8,%esp
f013162a:	ff 75 0c             	pushl  0xc(%ebp)
f013162d:	6a 30                	push   $0x30
f013162f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131632:	ff d0                	call   *%eax
f0131634:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131637:	83 ec 08             	sub    $0x8,%esp
f013163a:	ff 75 0c             	pushl  0xc(%ebp)
f013163d:	6a 78                	push   $0x78
f013163f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131642:	ff d0                	call   *%eax
f0131644:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131647:	8b 45 14             	mov    0x14(%ebp),%eax
f013164a:	83 c0 04             	add    $0x4,%eax
f013164d:	89 45 14             	mov    %eax,0x14(%ebp)
f0131650:	8b 45 14             	mov    0x14(%ebp),%eax
f0131653:	83 e8 04             	sub    $0x4,%eax
f0131656:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131658:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013165b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0131662:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131669:	eb 1f                	jmp    f013168a <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f013166b:	83 ec 08             	sub    $0x8,%esp
f013166e:	ff 75 e8             	pushl  -0x18(%ebp)
f0131671:	8d 45 14             	lea    0x14(%ebp),%eax
f0131674:	50                   	push   %eax
f0131675:	e8 e7 fb ff ff       	call   f0131261 <getuint>
f013167a:	83 c4 10             	add    $0x10,%esp
f013167d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131680:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0131683:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f013168a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f013168e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131691:	83 ec 04             	sub    $0x4,%esp
f0131694:	52                   	push   %edx
f0131695:	ff 75 e4             	pushl  -0x1c(%ebp)
f0131698:	50                   	push   %eax
f0131699:	ff 75 f4             	pushl  -0xc(%ebp)
f013169c:	ff 75 f0             	pushl  -0x10(%ebp)
f013169f:	ff 75 0c             	pushl  0xc(%ebp)
f01316a2:	ff 75 08             	pushl  0x8(%ebp)
f01316a5:	e8 00 fb ff ff       	call   f01311aa <printnum>
f01316aa:	83 c4 20             	add    $0x20,%esp
			break;
f01316ad:	eb 34                	jmp    f01316e3 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01316af:	83 ec 08             	sub    $0x8,%esp
f01316b2:	ff 75 0c             	pushl  0xc(%ebp)
f01316b5:	53                   	push   %ebx
f01316b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01316b9:	ff d0                	call   *%eax
f01316bb:	83 c4 10             	add    $0x10,%esp
			break;
f01316be:	eb 23                	jmp    f01316e3 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01316c0:	83 ec 08             	sub    $0x8,%esp
f01316c3:	ff 75 0c             	pushl  0xc(%ebp)
f01316c6:	6a 25                	push   $0x25
f01316c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01316cb:	ff d0                	call   *%eax
f01316cd:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01316d0:	ff 4d 10             	decl   0x10(%ebp)
f01316d3:	eb 03                	jmp    f01316d8 <vprintfmt+0x3b1>
f01316d5:	ff 4d 10             	decl   0x10(%ebp)
f01316d8:	8b 45 10             	mov    0x10(%ebp),%eax
f01316db:	48                   	dec    %eax
f01316dc:	8a 00                	mov    (%eax),%al
f01316de:	3c 25                	cmp    $0x25,%al
f01316e0:	75 f3                	jne    f01316d5 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01316e2:	90                   	nop
		}
	}
f01316e3:	e9 47 fc ff ff       	jmp    f013132f <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01316e8:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01316e9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01316ec:	5b                   	pop    %ebx
f01316ed:	5e                   	pop    %esi
f01316ee:	5d                   	pop    %ebp
f01316ef:	c3                   	ret    

f01316f0 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01316f0:	55                   	push   %ebp
f01316f1:	89 e5                	mov    %esp,%ebp
f01316f3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01316f6:	8d 45 10             	lea    0x10(%ebp),%eax
f01316f9:	83 c0 04             	add    $0x4,%eax
f01316fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01316ff:	8b 45 10             	mov    0x10(%ebp),%eax
f0131702:	ff 75 f4             	pushl  -0xc(%ebp)
f0131705:	50                   	push   %eax
f0131706:	ff 75 0c             	pushl  0xc(%ebp)
f0131709:	ff 75 08             	pushl  0x8(%ebp)
f013170c:	e8 16 fc ff ff       	call   f0131327 <vprintfmt>
f0131711:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0131714:	90                   	nop
f0131715:	c9                   	leave  
f0131716:	c3                   	ret    

f0131717 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0131717:	55                   	push   %ebp
f0131718:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f013171a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013171d:	8b 40 08             	mov    0x8(%eax),%eax
f0131720:	8d 50 01             	lea    0x1(%eax),%edx
f0131723:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131726:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131729:	8b 45 0c             	mov    0xc(%ebp),%eax
f013172c:	8b 10                	mov    (%eax),%edx
f013172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131731:	8b 40 04             	mov    0x4(%eax),%eax
f0131734:	39 c2                	cmp    %eax,%edx
f0131736:	73 12                	jae    f013174a <sprintputch+0x33>
		*b->buf++ = ch;
f0131738:	8b 45 0c             	mov    0xc(%ebp),%eax
f013173b:	8b 00                	mov    (%eax),%eax
f013173d:	8d 48 01             	lea    0x1(%eax),%ecx
f0131740:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131743:	89 0a                	mov    %ecx,(%edx)
f0131745:	8b 55 08             	mov    0x8(%ebp),%edx
f0131748:	88 10                	mov    %dl,(%eax)
}
f013174a:	90                   	nop
f013174b:	5d                   	pop    %ebp
f013174c:	c3                   	ret    

f013174d <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f013174d:	55                   	push   %ebp
f013174e:	89 e5                	mov    %esp,%ebp
f0131750:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131753:	8b 45 08             	mov    0x8(%ebp),%eax
f0131756:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131759:	8b 45 0c             	mov    0xc(%ebp),%eax
f013175c:	8d 50 ff             	lea    -0x1(%eax),%edx
f013175f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131762:	01 d0                	add    %edx,%eax
f0131764:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131767:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f013176e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131772:	74 06                	je     f013177a <vsnprintf+0x2d>
f0131774:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131778:	7f 07                	jg     f0131781 <vsnprintf+0x34>
		return -E_INVAL;
f013177a:	b8 03 00 00 00       	mov    $0x3,%eax
f013177f:	eb 20                	jmp    f01317a1 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0131781:	ff 75 14             	pushl  0x14(%ebp)
f0131784:	ff 75 10             	pushl  0x10(%ebp)
f0131787:	8d 45 ec             	lea    -0x14(%ebp),%eax
f013178a:	50                   	push   %eax
f013178b:	68 17 17 13 f0       	push   $0xf0131717
f0131790:	e8 92 fb ff ff       	call   f0131327 <vprintfmt>
f0131795:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0131798:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013179b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f013179e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01317a1:	c9                   	leave  
f01317a2:	c3                   	ret    

f01317a3 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01317a3:	55                   	push   %ebp
f01317a4:	89 e5                	mov    %esp,%ebp
f01317a6:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01317a9:	8d 45 10             	lea    0x10(%ebp),%eax
f01317ac:	83 c0 04             	add    $0x4,%eax
f01317af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01317b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01317b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01317b8:	50                   	push   %eax
f01317b9:	ff 75 0c             	pushl  0xc(%ebp)
f01317bc:	ff 75 08             	pushl  0x8(%ebp)
f01317bf:	e8 89 ff ff ff       	call   f013174d <vsnprintf>
f01317c4:	83 c4 10             	add    $0x10,%esp
f01317c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01317ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01317cd:	c9                   	leave  
f01317ce:	c3                   	ret    

f01317cf <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01317cf:	55                   	push   %ebp
f01317d0:	89 e5                	mov    %esp,%ebp
f01317d2:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01317d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01317d9:	74 13                	je     f01317ee <readline+0x1f>
		cprintf("%s", prompt);
f01317db:	83 ec 08             	sub    $0x8,%esp
f01317de:	ff 75 08             	pushl  0x8(%ebp)
f01317e1:	68 50 d7 13 f0       	push   $0xf013d750
f01317e6:	e8 23 f5 fc ff       	call   f0100d0e <cprintf>
f01317eb:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01317ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01317f5:	83 ec 0c             	sub    $0xc,%esp
f01317f8:	6a 00                	push   $0x0
f01317fa:	e8 bc f4 fc ff       	call   f0100cbb <iscons>
f01317ff:	83 c4 10             	add    $0x10,%esp
f0131802:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131805:	e8 98 f4 fc ff       	call   f0100ca2 <getchar>
f013180a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013180d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131811:	79 22                	jns    f0131835 <readline+0x66>
			if (c != -E_EOF)
f0131813:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131817:	0f 84 ad 00 00 00    	je     f01318ca <readline+0xfb>
				cprintf("read error: %e\n", c);
f013181d:	83 ec 08             	sub    $0x8,%esp
f0131820:	ff 75 ec             	pushl  -0x14(%ebp)
f0131823:	68 53 d7 13 f0       	push   $0xf013d753
f0131828:	e8 e1 f4 fc ff       	call   f0100d0e <cprintf>
f013182d:	83 c4 10             	add    $0x10,%esp
			return;
f0131830:	e9 95 00 00 00       	jmp    f01318ca <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131835:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131839:	7e 34                	jle    f013186f <readline+0xa0>
f013183b:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131842:	7f 2b                	jg     f013186f <readline+0xa0>
			if (echoing)
f0131844:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131848:	74 0e                	je     f0131858 <readline+0x89>
				cputchar(c);
f013184a:	83 ec 0c             	sub    $0xc,%esp
f013184d:	ff 75 ec             	pushl  -0x14(%ebp)
f0131850:	e8 36 f4 fc ff       	call   f0100c8b <cputchar>
f0131855:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131858:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013185b:	8d 50 01             	lea    0x1(%eax),%edx
f013185e:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131861:	89 c2                	mov    %eax,%edx
f0131863:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131866:	01 d0                	add    %edx,%eax
f0131868:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013186b:	88 10                	mov    %dl,(%eax)
f013186d:	eb 56                	jmp    f01318c5 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013186f:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131873:	75 1f                	jne    f0131894 <readline+0xc5>
f0131875:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131879:	7e 19                	jle    f0131894 <readline+0xc5>
			if (echoing)
f013187b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013187f:	74 0e                	je     f013188f <readline+0xc0>
				cputchar(c);
f0131881:	83 ec 0c             	sub    $0xc,%esp
f0131884:	ff 75 ec             	pushl  -0x14(%ebp)
f0131887:	e8 ff f3 fc ff       	call   f0100c8b <cputchar>
f013188c:	83 c4 10             	add    $0x10,%esp

			i--;
f013188f:	ff 4d f4             	decl   -0xc(%ebp)
f0131892:	eb 31                	jmp    f01318c5 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0131894:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131898:	74 0a                	je     f01318a4 <readline+0xd5>
f013189a:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013189e:	0f 85 61 ff ff ff    	jne    f0131805 <readline+0x36>
			if (echoing)
f01318a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318a8:	74 0e                	je     f01318b8 <readline+0xe9>
				cputchar(c);
f01318aa:	83 ec 0c             	sub    $0xc,%esp
f01318ad:	ff 75 ec             	pushl  -0x14(%ebp)
f01318b0:	e8 d6 f3 fc ff       	call   f0100c8b <cputchar>
f01318b5:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01318b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318be:	01 d0                	add    %edx,%eax
f01318c0:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01318c3:	eb 06                	jmp    f01318cb <readline+0xfc>
		}
	}
f01318c5:	e9 3b ff ff ff       	jmp    f0131805 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01318ca:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01318cb:	c9                   	leave  
f01318cc:	c3                   	ret    

f01318cd <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01318cd:	55                   	push   %ebp
f01318ce:	89 e5                	mov    %esp,%ebp
f01318d0:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01318d3:	e8 02 b9 fd ff       	call   f010d1da <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01318d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01318dc:	74 13                	je     f01318f1 <atomic_readline+0x24>
		cprintf("%s", prompt);
f01318de:	83 ec 08             	sub    $0x8,%esp
f01318e1:	ff 75 08             	pushl  0x8(%ebp)
f01318e4:	68 50 d7 13 f0       	push   $0xf013d750
f01318e9:	e8 20 f4 fc ff       	call   f0100d0e <cprintf>
f01318ee:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01318f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01318f8:	83 ec 0c             	sub    $0xc,%esp
f01318fb:	6a 00                	push   $0x0
f01318fd:	e8 b9 f3 fc ff       	call   f0100cbb <iscons>
f0131902:	83 c4 10             	add    $0x10,%esp
f0131905:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131908:	e8 95 f3 fc ff       	call   f0100ca2 <getchar>
f013190d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131910:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131914:	79 23                	jns    f0131939 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131916:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013191a:	74 13                	je     f013192f <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f013191c:	83 ec 08             	sub    $0x8,%esp
f013191f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131922:	68 53 d7 13 f0       	push   $0xf013d753
f0131927:	e8 e2 f3 fc ff       	call   f0100d0e <cprintf>
f013192c:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f013192f:	e8 c0 b8 fd ff       	call   f010d1f4 <sys_enable_interrupt>
			return;
f0131934:	e9 9a 00 00 00       	jmp    f01319d3 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131939:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013193d:	7e 34                	jle    f0131973 <atomic_readline+0xa6>
f013193f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131946:	7f 2b                	jg     f0131973 <atomic_readline+0xa6>
			if (echoing)
f0131948:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013194c:	74 0e                	je     f013195c <atomic_readline+0x8f>
				cputchar(c);
f013194e:	83 ec 0c             	sub    $0xc,%esp
f0131951:	ff 75 ec             	pushl  -0x14(%ebp)
f0131954:	e8 32 f3 fc ff       	call   f0100c8b <cputchar>
f0131959:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013195c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013195f:	8d 50 01             	lea    0x1(%eax),%edx
f0131962:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131965:	89 c2                	mov    %eax,%edx
f0131967:	8b 45 0c             	mov    0xc(%ebp),%eax
f013196a:	01 d0                	add    %edx,%eax
f013196c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013196f:	88 10                	mov    %dl,(%eax)
f0131971:	eb 5b                	jmp    f01319ce <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131973:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131977:	75 1f                	jne    f0131998 <atomic_readline+0xcb>
f0131979:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013197d:	7e 19                	jle    f0131998 <atomic_readline+0xcb>
			if (echoing)
f013197f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131983:	74 0e                	je     f0131993 <atomic_readline+0xc6>
				cputchar(c);
f0131985:	83 ec 0c             	sub    $0xc,%esp
f0131988:	ff 75 ec             	pushl  -0x14(%ebp)
f013198b:	e8 fb f2 fc ff       	call   f0100c8b <cputchar>
f0131990:	83 c4 10             	add    $0x10,%esp
			i--;
f0131993:	ff 4d f4             	decl   -0xc(%ebp)
f0131996:	eb 36                	jmp    f01319ce <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131998:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013199c:	74 0a                	je     f01319a8 <atomic_readline+0xdb>
f013199e:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01319a2:	0f 85 60 ff ff ff    	jne    f0131908 <atomic_readline+0x3b>
			if (echoing)
f01319a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319ac:	74 0e                	je     f01319bc <atomic_readline+0xef>
				cputchar(c);
f01319ae:	83 ec 0c             	sub    $0xc,%esp
f01319b1:	ff 75 ec             	pushl  -0x14(%ebp)
f01319b4:	e8 d2 f2 fc ff       	call   f0100c8b <cputchar>
f01319b9:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01319bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319c2:	01 d0                	add    %edx,%eax
f01319c4:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01319c7:	e8 28 b8 fd ff       	call   f010d1f4 <sys_enable_interrupt>
			return;
f01319cc:	eb 05                	jmp    f01319d3 <atomic_readline+0x106>
		}
	}
f01319ce:	e9 35 ff ff ff       	jmp    f0131908 <atomic_readline+0x3b>
}
f01319d3:	c9                   	leave  
f01319d4:	c3                   	ret    

f01319d5 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01319d5:	55                   	push   %ebp
f01319d6:	89 e5                	mov    %esp,%ebp
f01319d8:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01319db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01319e2:	eb 06                	jmp    f01319ea <strlen+0x15>
		n++;
f01319e4:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f01319e7:	ff 45 08             	incl   0x8(%ebp)
f01319ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ed:	8a 00                	mov    (%eax),%al
f01319ef:	84 c0                	test   %al,%al
f01319f1:	75 f1                	jne    f01319e4 <strlen+0xf>
		n++;
	return n;
f01319f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01319f6:	c9                   	leave  
f01319f7:	c3                   	ret    

f01319f8 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01319f8:	55                   	push   %ebp
f01319f9:	89 e5                	mov    %esp,%ebp
f01319fb:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01319fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a05:	eb 09                	jmp    f0131a10 <strnlen+0x18>
		n++;
f0131a07:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a0a:	ff 45 08             	incl   0x8(%ebp)
f0131a0d:	ff 4d 0c             	decl   0xc(%ebp)
f0131a10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a14:	74 09                	je     f0131a1f <strnlen+0x27>
f0131a16:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a19:	8a 00                	mov    (%eax),%al
f0131a1b:	84 c0                	test   %al,%al
f0131a1d:	75 e8                	jne    f0131a07 <strnlen+0xf>
		n++;
	return n;
f0131a1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a22:	c9                   	leave  
f0131a23:	c3                   	ret    

f0131a24 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131a24:	55                   	push   %ebp
f0131a25:	89 e5                	mov    %esp,%ebp
f0131a27:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131a30:	90                   	nop
f0131a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a34:	8d 50 01             	lea    0x1(%eax),%edx
f0131a37:	89 55 08             	mov    %edx,0x8(%ebp)
f0131a3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131a3d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131a40:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131a43:	8a 12                	mov    (%edx),%dl
f0131a45:	88 10                	mov    %dl,(%eax)
f0131a47:	8a 00                	mov    (%eax),%al
f0131a49:	84 c0                	test   %al,%al
f0131a4b:	75 e4                	jne    f0131a31 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131a4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a50:	c9                   	leave  
f0131a51:	c3                   	ret    

f0131a52 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131a52:	55                   	push   %ebp
f0131a53:	89 e5                	mov    %esp,%ebp
f0131a55:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131a58:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131a5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a65:	eb 1f                	jmp    f0131a86 <strncpy+0x34>
		*dst++ = *src;
f0131a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a6a:	8d 50 01             	lea    0x1(%eax),%edx
f0131a6d:	89 55 08             	mov    %edx,0x8(%ebp)
f0131a70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131a73:	8a 12                	mov    (%edx),%dl
f0131a75:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131a77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a7a:	8a 00                	mov    (%eax),%al
f0131a7c:	84 c0                	test   %al,%al
f0131a7e:	74 03                	je     f0131a83 <strncpy+0x31>
			src++;
f0131a80:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131a83:	ff 45 fc             	incl   -0x4(%ebp)
f0131a86:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131a89:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131a8c:	72 d9                	jb     f0131a67 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131a8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131a91:	c9                   	leave  
f0131a92:	c3                   	ret    

f0131a93 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131a93:	55                   	push   %ebp
f0131a94:	89 e5                	mov    %esp,%ebp
f0131a96:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131a99:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131a9f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131aa3:	74 30                	je     f0131ad5 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131aa5:	eb 16                	jmp    f0131abd <strlcpy+0x2a>
			*dst++ = *src++;
f0131aa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aaa:	8d 50 01             	lea    0x1(%eax),%edx
f0131aad:	89 55 08             	mov    %edx,0x8(%ebp)
f0131ab0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131ab3:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ab6:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131ab9:	8a 12                	mov    (%edx),%dl
f0131abb:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131abd:	ff 4d 10             	decl   0x10(%ebp)
f0131ac0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131ac4:	74 09                	je     f0131acf <strlcpy+0x3c>
f0131ac6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ac9:	8a 00                	mov    (%eax),%al
f0131acb:	84 c0                	test   %al,%al
f0131acd:	75 d8                	jne    f0131aa7 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131acf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ad2:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131ad5:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ad8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131adb:	29 c2                	sub    %eax,%edx
f0131add:	89 d0                	mov    %edx,%eax
}
f0131adf:	c9                   	leave  
f0131ae0:	c3                   	ret    

f0131ae1 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131ae1:	55                   	push   %ebp
f0131ae2:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131ae4:	eb 06                	jmp    f0131aec <strcmp+0xb>
		p++, q++;
f0131ae6:	ff 45 08             	incl   0x8(%ebp)
f0131ae9:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aef:	8a 00                	mov    (%eax),%al
f0131af1:	84 c0                	test   %al,%al
f0131af3:	74 0e                	je     f0131b03 <strcmp+0x22>
f0131af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131af8:	8a 10                	mov    (%eax),%dl
f0131afa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131afd:	8a 00                	mov    (%eax),%al
f0131aff:	38 c2                	cmp    %al,%dl
f0131b01:	74 e3                	je     f0131ae6 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b03:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b06:	8a 00                	mov    (%eax),%al
f0131b08:	0f b6 d0             	movzbl %al,%edx
f0131b0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b0e:	8a 00                	mov    (%eax),%al
f0131b10:	0f b6 c0             	movzbl %al,%eax
f0131b13:	29 c2                	sub    %eax,%edx
f0131b15:	89 d0                	mov    %edx,%eax
}
f0131b17:	5d                   	pop    %ebp
f0131b18:	c3                   	ret    

f0131b19 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131b19:	55                   	push   %ebp
f0131b1a:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131b1c:	eb 09                	jmp    f0131b27 <strncmp+0xe>
		n--, p++, q++;
f0131b1e:	ff 4d 10             	decl   0x10(%ebp)
f0131b21:	ff 45 08             	incl   0x8(%ebp)
f0131b24:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131b27:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b2b:	74 17                	je     f0131b44 <strncmp+0x2b>
f0131b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b30:	8a 00                	mov    (%eax),%al
f0131b32:	84 c0                	test   %al,%al
f0131b34:	74 0e                	je     f0131b44 <strncmp+0x2b>
f0131b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b39:	8a 10                	mov    (%eax),%dl
f0131b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b3e:	8a 00                	mov    (%eax),%al
f0131b40:	38 c2                	cmp    %al,%dl
f0131b42:	74 da                	je     f0131b1e <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131b44:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b48:	75 07                	jne    f0131b51 <strncmp+0x38>
		return 0;
f0131b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b4f:	eb 14                	jmp    f0131b65 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b51:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b54:	8a 00                	mov    (%eax),%al
f0131b56:	0f b6 d0             	movzbl %al,%edx
f0131b59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b5c:	8a 00                	mov    (%eax),%al
f0131b5e:	0f b6 c0             	movzbl %al,%eax
f0131b61:	29 c2                	sub    %eax,%edx
f0131b63:	89 d0                	mov    %edx,%eax
}
f0131b65:	5d                   	pop    %ebp
f0131b66:	c3                   	ret    

f0131b67 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131b67:	55                   	push   %ebp
f0131b68:	89 e5                	mov    %esp,%ebp
f0131b6a:	83 ec 04             	sub    $0x4,%esp
f0131b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b70:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131b73:	eb 12                	jmp    f0131b87 <strchr+0x20>
		if (*s == c)
f0131b75:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b78:	8a 00                	mov    (%eax),%al
f0131b7a:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131b7d:	75 05                	jne    f0131b84 <strchr+0x1d>
			return (char *) s;
f0131b7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b82:	eb 11                	jmp    f0131b95 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131b84:	ff 45 08             	incl   0x8(%ebp)
f0131b87:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b8a:	8a 00                	mov    (%eax),%al
f0131b8c:	84 c0                	test   %al,%al
f0131b8e:	75 e5                	jne    f0131b75 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131b90:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131b95:	c9                   	leave  
f0131b96:	c3                   	ret    

f0131b97 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131b97:	55                   	push   %ebp
f0131b98:	89 e5                	mov    %esp,%ebp
f0131b9a:	83 ec 04             	sub    $0x4,%esp
f0131b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ba0:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131ba3:	eb 0d                	jmp    f0131bb2 <strfind+0x1b>
		if (*s == c)
f0131ba5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ba8:	8a 00                	mov    (%eax),%al
f0131baa:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131bad:	74 0e                	je     f0131bbd <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131baf:	ff 45 08             	incl   0x8(%ebp)
f0131bb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bb5:	8a 00                	mov    (%eax),%al
f0131bb7:	84 c0                	test   %al,%al
f0131bb9:	75 ea                	jne    f0131ba5 <strfind+0xe>
f0131bbb:	eb 01                	jmp    f0131bbe <strfind+0x27>
		if (*s == c)
			break;
f0131bbd:	90                   	nop
	return (char *) s;
f0131bbe:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131bc1:	c9                   	leave  
f0131bc2:	c3                   	ret    

f0131bc3 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131bc3:	55                   	push   %ebp
f0131bc4:	89 e5                	mov    %esp,%ebp
f0131bc6:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bcc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131bcf:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bd2:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131bd5:	eb 0e                	jmp    f0131be5 <memset+0x22>
		*p++ = c;
f0131bd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bda:	8d 50 01             	lea    0x1(%eax),%edx
f0131bdd:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131be0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131be3:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131be5:	ff 4d f8             	decl   -0x8(%ebp)
f0131be8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131bec:	79 e9                	jns    f0131bd7 <memset+0x14>
		*p++ = c;

	return v;
f0131bee:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131bf1:	c9                   	leave  
f0131bf2:	c3                   	ret    

f0131bf3 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131bf3:	55                   	push   %ebp
f0131bf4:	89 e5                	mov    %esp,%ebp
f0131bf6:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bfc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131bff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c02:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131c05:	eb 16                	jmp    f0131c1d <memcpy+0x2a>
		*d++ = *s++;
f0131c07:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c0a:	8d 50 01             	lea    0x1(%eax),%edx
f0131c0d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131c10:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c13:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131c16:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131c19:	8a 12                	mov    (%edx),%dl
f0131c1b:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131c1d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c20:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c23:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c26:	85 c0                	test   %eax,%eax
f0131c28:	75 dd                	jne    f0131c07 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131c2a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c2d:	c9                   	leave  
f0131c2e:	c3                   	ret    

f0131c2f <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131c2f:	55                   	push   %ebp
f0131c30:	89 e5                	mov    %esp,%ebp
f0131c32:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c38:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c3e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131c41:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c44:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c47:	73 50                	jae    f0131c99 <memmove+0x6a>
f0131c49:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c4f:	01 d0                	add    %edx,%eax
f0131c51:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c54:	76 43                	jbe    f0131c99 <memmove+0x6a>
		s += n;
f0131c56:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c59:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131c5c:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c5f:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131c62:	eb 10                	jmp    f0131c74 <memmove+0x45>
			*--d = *--s;
f0131c64:	ff 4d f8             	decl   -0x8(%ebp)
f0131c67:	ff 4d fc             	decl   -0x4(%ebp)
f0131c6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c6d:	8a 10                	mov    (%eax),%dl
f0131c6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c72:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131c74:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c77:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c7a:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c7d:	85 c0                	test   %eax,%eax
f0131c7f:	75 e3                	jne    f0131c64 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131c81:	eb 23                	jmp    f0131ca6 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131c83:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c86:	8d 50 01             	lea    0x1(%eax),%edx
f0131c89:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131c8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c8f:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131c92:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131c95:	8a 12                	mov    (%edx),%dl
f0131c97:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131c99:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c9c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c9f:	89 55 10             	mov    %edx,0x10(%ebp)
f0131ca2:	85 c0                	test   %eax,%eax
f0131ca4:	75 dd                	jne    f0131c83 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131ca6:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131ca9:	c9                   	leave  
f0131caa:	c3                   	ret    

f0131cab <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131cab:	55                   	push   %ebp
f0131cac:	89 e5                	mov    %esp,%ebp
f0131cae:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131cb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cba:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131cbd:	eb 2a                	jmp    f0131ce9 <memcmp+0x3e>
		if (*s1 != *s2)
f0131cbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cc2:	8a 10                	mov    (%eax),%dl
f0131cc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cc7:	8a 00                	mov    (%eax),%al
f0131cc9:	38 c2                	cmp    %al,%dl
f0131ccb:	74 16                	je     f0131ce3 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131ccd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cd0:	8a 00                	mov    (%eax),%al
f0131cd2:	0f b6 d0             	movzbl %al,%edx
f0131cd5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cd8:	8a 00                	mov    (%eax),%al
f0131cda:	0f b6 c0             	movzbl %al,%eax
f0131cdd:	29 c2                	sub    %eax,%edx
f0131cdf:	89 d0                	mov    %edx,%eax
f0131ce1:	eb 18                	jmp    f0131cfb <memcmp+0x50>
		s1++, s2++;
f0131ce3:	ff 45 fc             	incl   -0x4(%ebp)
f0131ce6:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131ce9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cec:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131cef:	89 55 10             	mov    %edx,0x10(%ebp)
f0131cf2:	85 c0                	test   %eax,%eax
f0131cf4:	75 c9                	jne    f0131cbf <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131cf6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131cfb:	c9                   	leave  
f0131cfc:	c3                   	ret    

f0131cfd <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131cfd:	55                   	push   %ebp
f0131cfe:	89 e5                	mov    %esp,%ebp
f0131d00:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131d03:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d06:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d09:	01 d0                	add    %edx,%eax
f0131d0b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131d0e:	eb 15                	jmp    f0131d25 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131d10:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d13:	8a 00                	mov    (%eax),%al
f0131d15:	0f b6 d0             	movzbl %al,%edx
f0131d18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131d1b:	0f b6 c0             	movzbl %al,%eax
f0131d1e:	39 c2                	cmp    %eax,%edx
f0131d20:	74 0d                	je     f0131d2f <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131d22:	ff 45 08             	incl   0x8(%ebp)
f0131d25:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d28:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131d2b:	72 e3                	jb     f0131d10 <memfind+0x13>
f0131d2d:	eb 01                	jmp    f0131d30 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131d2f:	90                   	nop
	return (void *) s;
f0131d30:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131d33:	c9                   	leave  
f0131d34:	c3                   	ret    

f0131d35 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131d35:	55                   	push   %ebp
f0131d36:	89 e5                	mov    %esp,%ebp
f0131d38:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131d3b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131d42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d49:	eb 03                	jmp    f0131d4e <strtol+0x19>
		s++;
f0131d4b:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d51:	8a 00                	mov    (%eax),%al
f0131d53:	3c 20                	cmp    $0x20,%al
f0131d55:	74 f4                	je     f0131d4b <strtol+0x16>
f0131d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d5a:	8a 00                	mov    (%eax),%al
f0131d5c:	3c 09                	cmp    $0x9,%al
f0131d5e:	74 eb                	je     f0131d4b <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131d60:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d63:	8a 00                	mov    (%eax),%al
f0131d65:	3c 2b                	cmp    $0x2b,%al
f0131d67:	75 05                	jne    f0131d6e <strtol+0x39>
		s++;
f0131d69:	ff 45 08             	incl   0x8(%ebp)
f0131d6c:	eb 13                	jmp    f0131d81 <strtol+0x4c>
	else if (*s == '-')
f0131d6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d71:	8a 00                	mov    (%eax),%al
f0131d73:	3c 2d                	cmp    $0x2d,%al
f0131d75:	75 0a                	jne    f0131d81 <strtol+0x4c>
		s++, neg = 1;
f0131d77:	ff 45 08             	incl   0x8(%ebp)
f0131d7a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131d81:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131d85:	74 06                	je     f0131d8d <strtol+0x58>
f0131d87:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131d8b:	75 20                	jne    f0131dad <strtol+0x78>
f0131d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d90:	8a 00                	mov    (%eax),%al
f0131d92:	3c 30                	cmp    $0x30,%al
f0131d94:	75 17                	jne    f0131dad <strtol+0x78>
f0131d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d99:	40                   	inc    %eax
f0131d9a:	8a 00                	mov    (%eax),%al
f0131d9c:	3c 78                	cmp    $0x78,%al
f0131d9e:	75 0d                	jne    f0131dad <strtol+0x78>
		s += 2, base = 16;
f0131da0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131da4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131dab:	eb 28                	jmp    f0131dd5 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131dad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131db1:	75 15                	jne    f0131dc8 <strtol+0x93>
f0131db3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131db6:	8a 00                	mov    (%eax),%al
f0131db8:	3c 30                	cmp    $0x30,%al
f0131dba:	75 0c                	jne    f0131dc8 <strtol+0x93>
		s++, base = 8;
f0131dbc:	ff 45 08             	incl   0x8(%ebp)
f0131dbf:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131dc6:	eb 0d                	jmp    f0131dd5 <strtol+0xa0>
	else if (base == 0)
f0131dc8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131dcc:	75 07                	jne    f0131dd5 <strtol+0xa0>
		base = 10;
f0131dce:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dd8:	8a 00                	mov    (%eax),%al
f0131dda:	3c 2f                	cmp    $0x2f,%al
f0131ddc:	7e 19                	jle    f0131df7 <strtol+0xc2>
f0131dde:	8b 45 08             	mov    0x8(%ebp),%eax
f0131de1:	8a 00                	mov    (%eax),%al
f0131de3:	3c 39                	cmp    $0x39,%al
f0131de5:	7f 10                	jg     f0131df7 <strtol+0xc2>
			dig = *s - '0';
f0131de7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dea:	8a 00                	mov    (%eax),%al
f0131dec:	0f be c0             	movsbl %al,%eax
f0131def:	83 e8 30             	sub    $0x30,%eax
f0131df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131df5:	eb 42                	jmp    f0131e39 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dfa:	8a 00                	mov    (%eax),%al
f0131dfc:	3c 60                	cmp    $0x60,%al
f0131dfe:	7e 19                	jle    f0131e19 <strtol+0xe4>
f0131e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e03:	8a 00                	mov    (%eax),%al
f0131e05:	3c 7a                	cmp    $0x7a,%al
f0131e07:	7f 10                	jg     f0131e19 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131e09:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e0c:	8a 00                	mov    (%eax),%al
f0131e0e:	0f be c0             	movsbl %al,%eax
f0131e11:	83 e8 57             	sub    $0x57,%eax
f0131e14:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e17:	eb 20                	jmp    f0131e39 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131e19:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e1c:	8a 00                	mov    (%eax),%al
f0131e1e:	3c 40                	cmp    $0x40,%al
f0131e20:	7e 39                	jle    f0131e5b <strtol+0x126>
f0131e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e25:	8a 00                	mov    (%eax),%al
f0131e27:	3c 5a                	cmp    $0x5a,%al
f0131e29:	7f 30                	jg     f0131e5b <strtol+0x126>
			dig = *s - 'A' + 10;
f0131e2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e2e:	8a 00                	mov    (%eax),%al
f0131e30:	0f be c0             	movsbl %al,%eax
f0131e33:	83 e8 37             	sub    $0x37,%eax
f0131e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e3c:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131e3f:	7d 19                	jge    f0131e5a <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131e41:	ff 45 08             	incl   0x8(%ebp)
f0131e44:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e47:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131e4b:	89 c2                	mov    %eax,%edx
f0131e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e50:	01 d0                	add    %edx,%eax
f0131e52:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131e55:	e9 7b ff ff ff       	jmp    f0131dd5 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131e5a:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131e5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131e5f:	74 08                	je     f0131e69 <strtol+0x134>
		*endptr = (char *) s;
f0131e61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e64:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e67:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131e69:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e6d:	74 07                	je     f0131e76 <strtol+0x141>
f0131e6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e72:	f7 d8                	neg    %eax
f0131e74:	eb 03                	jmp    f0131e79 <strtol+0x144>
f0131e76:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131e79:	c9                   	leave  
f0131e7a:	c3                   	ret    

f0131e7b <ltostr>:

void
ltostr(long value, char *str)
{
f0131e7b:	55                   	push   %ebp
f0131e7c:	89 e5                	mov    %esp,%ebp
f0131e7e:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131e81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131e88:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131e8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e93:	79 13                	jns    f0131ea8 <ltostr+0x2d>
	{
		neg = 1;
f0131e95:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e9f:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131ea2:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131ea5:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131ea8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eab:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131eb0:	99                   	cltd   
f0131eb1:	f7 f9                	idiv   %ecx
f0131eb3:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131eb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131eb9:	8d 50 01             	lea    0x1(%eax),%edx
f0131ebc:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131ebf:	89 c2                	mov    %eax,%edx
f0131ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ec4:	01 d0                	add    %edx,%eax
f0131ec6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ec9:	83 c2 30             	add    $0x30,%edx
f0131ecc:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131ece:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131ed1:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131ed6:	f7 e9                	imul   %ecx
f0131ed8:	c1 fa 02             	sar    $0x2,%edx
f0131edb:	89 c8                	mov    %ecx,%eax
f0131edd:	c1 f8 1f             	sar    $0x1f,%eax
f0131ee0:	29 c2                	sub    %eax,%edx
f0131ee2:	89 d0                	mov    %edx,%eax
f0131ee4:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131ee7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131eea:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131eef:	f7 e9                	imul   %ecx
f0131ef1:	c1 fa 02             	sar    $0x2,%edx
f0131ef4:	89 c8                	mov    %ecx,%eax
f0131ef6:	c1 f8 1f             	sar    $0x1f,%eax
f0131ef9:	29 c2                	sub    %eax,%edx
f0131efb:	89 d0                	mov    %edx,%eax
f0131efd:	c1 e0 02             	shl    $0x2,%eax
f0131f00:	01 d0                	add    %edx,%eax
f0131f02:	01 c0                	add    %eax,%eax
f0131f04:	29 c1                	sub    %eax,%ecx
f0131f06:	89 ca                	mov    %ecx,%edx
f0131f08:	85 d2                	test   %edx,%edx
f0131f0a:	75 9c                	jne    f0131ea8 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131f0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131f13:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f16:	48                   	dec    %eax
f0131f17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131f1a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131f1e:	74 3d                	je     f0131f5d <ltostr+0xe2>
		start = 1 ;
f0131f20:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131f27:	eb 34                	jmp    f0131f5d <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f2f:	01 d0                	add    %edx,%eax
f0131f31:	8a 00                	mov    (%eax),%al
f0131f33:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f39:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f3c:	01 c2                	add    %eax,%edx
f0131f3e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131f41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f44:	01 c8                	add    %ecx,%eax
f0131f46:	8a 00                	mov    (%eax),%al
f0131f48:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131f4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f50:	01 c2                	add    %eax,%edx
f0131f52:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131f55:	88 02                	mov    %al,(%edx)
		start++ ;
f0131f57:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131f5a:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f60:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131f63:	7c c4                	jl     f0131f29 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131f65:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131f68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f6b:	01 d0                	add    %edx,%eax
f0131f6d:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131f70:	90                   	nop
f0131f71:	c9                   	leave  
f0131f72:	c3                   	ret    

f0131f73 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131f73:	55                   	push   %ebp
f0131f74:	89 e5                	mov    %esp,%ebp
f0131f76:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131f79:	ff 75 08             	pushl  0x8(%ebp)
f0131f7c:	e8 54 fa ff ff       	call   f01319d5 <strlen>
f0131f81:	83 c4 04             	add    $0x4,%esp
f0131f84:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131f87:	ff 75 0c             	pushl  0xc(%ebp)
f0131f8a:	e8 46 fa ff ff       	call   f01319d5 <strlen>
f0131f8f:	83 c4 04             	add    $0x4,%esp
f0131f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131f95:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131f9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131fa3:	eb 17                	jmp    f0131fbc <strcconcat+0x49>
		final[s] = str1[s] ;
f0131fa5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131fa8:	8b 45 10             	mov    0x10(%ebp),%eax
f0131fab:	01 c2                	add    %eax,%edx
f0131fad:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131fb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fb3:	01 c8                	add    %ecx,%eax
f0131fb5:	8a 00                	mov    (%eax),%al
f0131fb7:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131fb9:	ff 45 fc             	incl   -0x4(%ebp)
f0131fbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131fbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131fc2:	7c e1                	jl     f0131fa5 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131fc4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131fcb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131fd2:	eb 1f                	jmp    f0131ff3 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131fd4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131fd7:	8d 50 01             	lea    0x1(%eax),%edx
f0131fda:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131fdd:	89 c2                	mov    %eax,%edx
f0131fdf:	8b 45 10             	mov    0x10(%ebp),%eax
f0131fe2:	01 c2                	add    %eax,%edx
f0131fe4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131fea:	01 c8                	add    %ecx,%eax
f0131fec:	8a 00                	mov    (%eax),%al
f0131fee:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131ff0:	ff 45 f8             	incl   -0x8(%ebp)
f0131ff3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ff6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131ff9:	7c d9                	jl     f0131fd4 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131ffb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131ffe:	8b 45 10             	mov    0x10(%ebp),%eax
f0132001:	01 d0                	add    %edx,%eax
f0132003:	c6 00 00             	movb   $0x0,(%eax)
}
f0132006:	90                   	nop
f0132007:	c9                   	leave  
f0132008:	c3                   	ret    

f0132009 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0132009:	55                   	push   %ebp
f013200a:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f013200c:	8b 45 14             	mov    0x14(%ebp),%eax
f013200f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0132015:	8b 45 14             	mov    0x14(%ebp),%eax
f0132018:	8b 00                	mov    (%eax),%eax
f013201a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0132021:	8b 45 10             	mov    0x10(%ebp),%eax
f0132024:	01 d0                	add    %edx,%eax
f0132026:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013202c:	eb 0c                	jmp    f013203a <strsplit+0x31>
			*string++ = 0;
f013202e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132031:	8d 50 01             	lea    0x1(%eax),%edx
f0132034:	89 55 08             	mov    %edx,0x8(%ebp)
f0132037:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013203a:	8b 45 08             	mov    0x8(%ebp),%eax
f013203d:	8a 00                	mov    (%eax),%al
f013203f:	84 c0                	test   %al,%al
f0132041:	74 18                	je     f013205b <strsplit+0x52>
f0132043:	8b 45 08             	mov    0x8(%ebp),%eax
f0132046:	8a 00                	mov    (%eax),%al
f0132048:	0f be c0             	movsbl %al,%eax
f013204b:	50                   	push   %eax
f013204c:	ff 75 0c             	pushl  0xc(%ebp)
f013204f:	e8 13 fb ff ff       	call   f0131b67 <strchr>
f0132054:	83 c4 08             	add    $0x8,%esp
f0132057:	85 c0                	test   %eax,%eax
f0132059:	75 d3                	jne    f013202e <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f013205b:	8b 45 08             	mov    0x8(%ebp),%eax
f013205e:	8a 00                	mov    (%eax),%al
f0132060:	84 c0                	test   %al,%al
f0132062:	74 5a                	je     f01320be <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0132064:	8b 45 14             	mov    0x14(%ebp),%eax
f0132067:	8b 00                	mov    (%eax),%eax
f0132069:	83 f8 0f             	cmp    $0xf,%eax
f013206c:	75 07                	jne    f0132075 <strsplit+0x6c>
		{
			return 0;
f013206e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132073:	eb 66                	jmp    f01320db <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0132075:	8b 45 14             	mov    0x14(%ebp),%eax
f0132078:	8b 00                	mov    (%eax),%eax
f013207a:	8d 48 01             	lea    0x1(%eax),%ecx
f013207d:	8b 55 14             	mov    0x14(%ebp),%edx
f0132080:	89 0a                	mov    %ecx,(%edx)
f0132082:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0132089:	8b 45 10             	mov    0x10(%ebp),%eax
f013208c:	01 c2                	add    %eax,%edx
f013208e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132091:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0132093:	eb 03                	jmp    f0132098 <strsplit+0x8f>
			string++;
f0132095:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0132098:	8b 45 08             	mov    0x8(%ebp),%eax
f013209b:	8a 00                	mov    (%eax),%al
f013209d:	84 c0                	test   %al,%al
f013209f:	74 8b                	je     f013202c <strsplit+0x23>
f01320a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01320a4:	8a 00                	mov    (%eax),%al
f01320a6:	0f be c0             	movsbl %al,%eax
f01320a9:	50                   	push   %eax
f01320aa:	ff 75 0c             	pushl  0xc(%ebp)
f01320ad:	e8 b5 fa ff ff       	call   f0131b67 <strchr>
f01320b2:	83 c4 08             	add    $0x8,%esp
f01320b5:	85 c0                	test   %eax,%eax
f01320b7:	74 dc                	je     f0132095 <strsplit+0x8c>
			string++;
	}
f01320b9:	e9 6e ff ff ff       	jmp    f013202c <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01320be:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01320bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01320c2:	8b 00                	mov    (%eax),%eax
f01320c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01320ce:	01 d0                	add    %edx,%eax
f01320d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01320d6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01320db:	c9                   	leave  
f01320dc:	c3                   	ret    

f01320dd <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01320dd:	55                   	push   %ebp
f01320de:	89 e5                	mov    %esp,%ebp
f01320e0:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01320e3:	90                   	nop
f01320e4:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01320eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01320ee:	89 c2                	mov    %eax,%edx
f01320f0:	ec                   	in     (%dx),%al
f01320f1:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01320f4:	8a 45 f7             	mov    -0x9(%ebp),%al
f01320f7:	0f b6 c0             	movzbl %al,%eax
f01320fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01320fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132100:	25 c0 00 00 00       	and    $0xc0,%eax
f0132105:	83 f8 40             	cmp    $0x40,%eax
f0132108:	75 da                	jne    f01320e4 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013210a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013210e:	74 11                	je     f0132121 <ide_wait_ready+0x44>
f0132110:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132113:	83 e0 21             	and    $0x21,%eax
f0132116:	85 c0                	test   %eax,%eax
f0132118:	74 07                	je     f0132121 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f013211a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013211f:	eb 05                	jmp    f0132126 <ide_wait_ready+0x49>
	}
	return 0;
f0132121:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132126:	c9                   	leave  
f0132127:	c3                   	ret    

f0132128 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0132128:	55                   	push   %ebp
f0132129:	89 e5                	mov    %esp,%ebp
f013212b:	57                   	push   %edi
f013212c:	53                   	push   %ebx
f013212d:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0132130:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132137:	76 16                	jbe    f013214f <ide_read+0x27>
f0132139:	68 63 d7 13 f0       	push   $0xf013d763
f013213e:	68 70 d7 13 f0       	push   $0xf013d770
f0132143:	6a 25                	push   $0x25
f0132145:	68 85 d7 13 f0       	push   $0xf013d785
f013214a:	e8 b6 e0 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f013214f:	83 ec 0c             	sub    $0xc,%esp
f0132152:	6a 00                	push   $0x0
f0132154:	e8 84 ff ff ff       	call   f01320dd <ide_wait_ready>
f0132159:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f013215c:	8b 45 10             	mov    0x10(%ebp),%eax
f013215f:	0f b6 c0             	movzbl %al,%eax
f0132162:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0132169:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013216c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013216f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132172:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0132173:	8b 45 08             	mov    0x8(%ebp),%eax
f0132176:	0f b6 c0             	movzbl %al,%eax
f0132179:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0132180:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0132183:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0132186:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132189:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013218a:	8b 45 08             	mov    0x8(%ebp),%eax
f013218d:	c1 e8 08             	shr    $0x8,%eax
f0132190:	0f b6 c0             	movzbl %al,%eax
f0132193:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013219a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013219d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01321a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01321a3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01321a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a7:	c1 e8 10             	shr    $0x10,%eax
f01321aa:	0f b6 c0             	movzbl %al,%eax
f01321ad:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01321b4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01321b7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01321ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01321bd:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01321be:	a1 ac a0 86 f0       	mov    0xf086a0ac,%eax
f01321c3:	83 e0 01             	and    $0x1,%eax
f01321c6:	c1 e0 04             	shl    $0x4,%eax
f01321c9:	88 c2                	mov    %al,%dl
f01321cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01321ce:	c1 e8 18             	shr    $0x18,%eax
f01321d1:	83 e0 0f             	and    $0xf,%eax
f01321d4:	09 d0                	or     %edx,%eax
f01321d6:	83 c8 e0             	or     $0xffffffe0,%eax
f01321d9:	0f b6 c0             	movzbl %al,%eax
f01321dc:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01321e3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01321e6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01321e9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01321ec:	ee                   	out    %al,(%dx)
f01321ed:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01321f4:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f01321f8:	8a 45 d7             	mov    -0x29(%ebp),%al
f01321fb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01321fe:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01321ff:	eb 55                	jmp    f0132256 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132201:	83 ec 0c             	sub    $0xc,%esp
f0132204:	6a 01                	push   $0x1
f0132206:	e8 d2 fe ff ff       	call   f01320dd <ide_wait_ready>
f013220b:	83 c4 10             	add    $0x10,%esp
f013220e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0132211:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132215:	79 05                	jns    f013221c <ide_read+0xf4>
			return r;
f0132217:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013221a:	eb 45                	jmp    f0132261 <ide_read+0x139>
f013221c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132223:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132226:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132229:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0132230:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132233:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132236:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132239:	89 cb                	mov    %ecx,%ebx
f013223b:	89 df                	mov    %ebx,%edi
f013223d:	89 c1                	mov    %eax,%ecx
f013223f:	fc                   	cld    
f0132240:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0132242:	89 c8                	mov    %ecx,%eax
f0132244:	89 fb                	mov    %edi,%ebx
f0132246:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132249:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013224c:	ff 4d 10             	decl   0x10(%ebp)
f013224f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132256:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013225a:	75 a5                	jne    f0132201 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f013225c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132261:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0132264:	5b                   	pop    %ebx
f0132265:	5f                   	pop    %edi
f0132266:	5d                   	pop    %ebp
f0132267:	c3                   	ret    

f0132268 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0132268:	55                   	push   %ebp
f0132269:	89 e5                	mov    %esp,%ebp
f013226b:	56                   	push   %esi
f013226c:	53                   	push   %ebx
f013226d:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0132270:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132277:	76 16                	jbe    f013228f <ide_write+0x27>
f0132279:	68 63 d7 13 f0       	push   $0xf013d763
f013227e:	68 70 d7 13 f0       	push   $0xf013d770
f0132283:	6a 3e                	push   $0x3e
f0132285:	68 85 d7 13 f0       	push   $0xf013d785
f013228a:	e8 76 df fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f013228f:	83 ec 0c             	sub    $0xc,%esp
f0132292:	6a 00                	push   $0x0
f0132294:	e8 44 fe ff ff       	call   f01320dd <ide_wait_ready>
f0132299:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f013229c:	8b 45 10             	mov    0x10(%ebp),%eax
f013229f:	0f b6 c0             	movzbl %al,%eax
f01322a2:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01322a9:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01322ac:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01322af:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322b2:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01322b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b6:	0f b6 c0             	movzbl %al,%eax
f01322b9:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01322c0:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01322c3:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01322c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01322c9:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01322ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01322cd:	c1 e8 08             	shr    $0x8,%eax
f01322d0:	0f b6 c0             	movzbl %al,%eax
f01322d3:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01322da:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01322dd:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01322e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01322e3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01322e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e7:	c1 e8 10             	shr    $0x10,%eax
f01322ea:	0f b6 c0             	movzbl %al,%eax
f01322ed:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01322f4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01322f7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01322fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01322fd:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01322fe:	a1 ac a0 86 f0       	mov    0xf086a0ac,%eax
f0132303:	83 e0 01             	and    $0x1,%eax
f0132306:	c1 e0 04             	shl    $0x4,%eax
f0132309:	88 c2                	mov    %al,%dl
f013230b:	8b 45 08             	mov    0x8(%ebp),%eax
f013230e:	c1 e8 18             	shr    $0x18,%eax
f0132311:	83 e0 0f             	and    $0xf,%eax
f0132314:	09 d0                	or     %edx,%eax
f0132316:	83 c8 e0             	or     $0xffffffe0,%eax
f0132319:	0f b6 c0             	movzbl %al,%eax
f013231c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0132323:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132326:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132329:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013232c:	ee                   	out    %al,(%dx)
f013232d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132334:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0132338:	8a 45 d7             	mov    -0x29(%ebp),%al
f013233b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013233e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013233f:	eb 55                	jmp    f0132396 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132341:	83 ec 0c             	sub    $0xc,%esp
f0132344:	6a 01                	push   $0x1
f0132346:	e8 92 fd ff ff       	call   f01320dd <ide_wait_ready>
f013234b:	83 c4 10             	add    $0x10,%esp
f013234e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0132351:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132355:	79 05                	jns    f013235c <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0132357:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013235a:	eb 45                	jmp    f01323a1 <ide_write+0x139>
f013235c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132363:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132366:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132369:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0132370:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132373:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132376:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132379:	89 cb                	mov    %ecx,%ebx
f013237b:	89 de                	mov    %ebx,%esi
f013237d:	89 c1                	mov    %eax,%ecx
f013237f:	fc                   	cld    
f0132380:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0132382:	89 c8                	mov    %ecx,%eax
f0132384:	89 f3                	mov    %esi,%ebx
f0132386:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132389:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013238c:	ff 4d 10             	decl   0x10(%ebp)
f013238f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132396:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013239a:	75 a5                	jne    f0132341 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f013239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01323a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01323a4:	5b                   	pop    %ebx
f01323a5:	5e                   	pop    %esi
f01323a6:	5d                   	pop    %ebp
f01323a7:	c3                   	ret    

f01323a8 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01323a8:	55                   	push   %ebp
f01323a9:	89 e5                	mov    %esp,%ebp
f01323ab:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01323ae:	83 ec 0c             	sub    $0xc,%esp
f01323b1:	68 90 d7 13 f0       	push   $0xf013d790
f01323b6:	e8 53 e9 fc ff       	call   f0100d0e <cprintf>
f01323bb:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01323be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01323c5:	83 ec 0c             	sub    $0xc,%esp
f01323c8:	68 bc d7 13 f0       	push   $0xf013d7bc
f01323cd:	e8 3c e9 fc ff       	call   f0100d0e <cprintf>
f01323d2:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01323d5:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01323d9:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f01323de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323e1:	eb 56                	jmp    f0132439 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01323e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01323e7:	74 1c                	je     f0132405 <print_mem_block_lists+0x5d>
f01323e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ec:	8b 50 08             	mov    0x8(%eax),%edx
f01323ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323f2:	8b 48 08             	mov    0x8(%eax),%ecx
f01323f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01323f8:	8b 40 0c             	mov    0xc(%eax),%eax
f01323fb:	01 c8                	add    %ecx,%eax
f01323fd:	39 c2                	cmp    %eax,%edx
f01323ff:	73 04                	jae    f0132405 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0132401:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132405:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132408:	8b 50 08             	mov    0x8(%eax),%edx
f013240b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132411:	01 c2                	add    %eax,%edx
f0132413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132416:	8b 40 08             	mov    0x8(%eax),%eax
f0132419:	83 ec 04             	sub    $0x4,%esp
f013241c:	52                   	push   %edx
f013241d:	50                   	push   %eax
f013241e:	68 d1 d7 13 f0       	push   $0xf013d7d1
f0132423:	e8 e6 e8 fc ff       	call   f0100d0e <cprintf>
f0132428:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f013242b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013242e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132431:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132436:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132439:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013243d:	74 07                	je     f0132446 <print_mem_block_lists+0x9e>
f013243f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132442:	8b 00                	mov    (%eax),%eax
f0132444:	eb 05                	jmp    f013244b <print_mem_block_lists+0xa3>
f0132446:	b8 00 00 00 00       	mov    $0x0,%eax
f013244b:	a3 6c a1 86 f0       	mov    %eax,0xf086a16c
f0132450:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132455:	85 c0                	test   %eax,%eax
f0132457:	75 8a                	jne    f01323e3 <print_mem_block_lists+0x3b>
f0132459:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013245d:	75 84                	jne    f01323e3 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013245f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132463:	75 10                	jne    f0132475 <print_mem_block_lists+0xcd>
f0132465:	83 ec 0c             	sub    $0xc,%esp
f0132468:	68 e0 d7 13 f0       	push   $0xf013d7e0
f013246d:	e8 9c e8 fc ff       	call   f0100d0e <cprintf>
f0132472:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0132475:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f013247c:	83 ec 0c             	sub    $0xc,%esp
f013247f:	68 04 d8 13 f0       	push   $0xf013d804
f0132484:	e8 85 e8 fc ff       	call   f0100d0e <cprintf>
f0132489:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f013248c:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0132490:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f0132495:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132498:	eb 56                	jmp    f01324f0 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f013249a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013249e:	74 1c                	je     f01324bc <print_mem_block_lists+0x114>
f01324a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a3:	8b 50 08             	mov    0x8(%eax),%edx
f01324a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324a9:	8b 48 08             	mov    0x8(%eax),%ecx
f01324ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324af:	8b 40 0c             	mov    0xc(%eax),%eax
f01324b2:	01 c8                	add    %ecx,%eax
f01324b4:	39 c2                	cmp    %eax,%edx
f01324b6:	73 04                	jae    f01324bc <print_mem_block_lists+0x114>
			sorted = 0 ;
f01324b8:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01324bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324bf:	8b 50 08             	mov    0x8(%eax),%edx
f01324c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324c5:	8b 40 0c             	mov    0xc(%eax),%eax
f01324c8:	01 c2                	add    %eax,%edx
f01324ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324cd:	8b 40 08             	mov    0x8(%eax),%eax
f01324d0:	83 ec 04             	sub    $0x4,%esp
f01324d3:	52                   	push   %edx
f01324d4:	50                   	push   %eax
f01324d5:	68 d1 d7 13 f0       	push   $0xf013d7d1
f01324da:	e8 2f e8 fc ff       	call   f0100d0e <cprintf>
f01324df:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01324e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01324e8:	a1 d0 a0 86 f0       	mov    0xf086a0d0,%eax
f01324ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324f4:	74 07                	je     f01324fd <print_mem_block_lists+0x155>
f01324f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f9:	8b 00                	mov    (%eax),%eax
f01324fb:	eb 05                	jmp    f0132502 <print_mem_block_lists+0x15a>
f01324fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0132502:	a3 d0 a0 86 f0       	mov    %eax,0xf086a0d0
f0132507:	a1 d0 a0 86 f0       	mov    0xf086a0d0,%eax
f013250c:	85 c0                	test   %eax,%eax
f013250e:	75 8a                	jne    f013249a <print_mem_block_lists+0xf2>
f0132510:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132514:	75 84                	jne    f013249a <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0132516:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013251a:	75 10                	jne    f013252c <print_mem_block_lists+0x184>
f013251c:	83 ec 0c             	sub    $0xc,%esp
f013251f:	68 1c d8 13 f0       	push   $0xf013d81c
f0132524:	e8 e5 e7 fc ff       	call   f0100d0e <cprintf>
f0132529:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f013252c:	83 ec 0c             	sub    $0xc,%esp
f013252f:	68 90 d7 13 f0       	push   $0xf013d790
f0132534:	e8 d5 e7 fc ff       	call   f0100d0e <cprintf>
f0132539:	83 c4 10             	add    $0x10,%esp

}
f013253c:	90                   	nop
f013253d:	c9                   	leave  
f013253e:	c3                   	ret    

f013253f <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f013253f:	55                   	push   %ebp
f0132540:	89 e5                	mov    %esp,%ebp
f0132542:	83 ec 18             	sub    $0x18,%esp
	LIST_INIT(&AvailableMemBlocksList);
f0132545:	c7 05 98 a1 86 f0 00 	movl   $0x0,0xf086a198
f013254c:	00 00 00 
f013254f:	c7 05 9c a1 86 f0 00 	movl   $0x0,0xf086a19c
f0132556:	00 00 00 
f0132559:	c7 05 a4 a1 86 f0 00 	movl   $0x0,0xf086a1a4
f0132560:	00 00 00 
			for(int i=0;i<numOfBlocks;i++)
f0132563:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013256a:	e9 9e 00 00 00       	jmp    f013260d <initialize_MemBlocksList+0xce>
			{
				LIST_INSERT_HEAD(&AvailableMemBlocksList,&MemBlockNodes[i]);
f013256f:	a1 d8 a0 86 f0       	mov    0xf086a0d8,%eax
f0132574:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132577:	c1 e2 04             	shl    $0x4,%edx
f013257a:	01 d0                	add    %edx,%eax
f013257c:	85 c0                	test   %eax,%eax
f013257e:	75 14                	jne    f0132594 <initialize_MemBlocksList+0x55>
f0132580:	83 ec 04             	sub    $0x4,%esp
f0132583:	68 44 d8 13 f0       	push   $0xf013d844
f0132588:	6a 42                	push   $0x42
f013258a:	68 67 d8 13 f0       	push   $0xf013d867
f013258f:	e8 71 dc fc ff       	call   f0100205 <_panic>
f0132594:	a1 d8 a0 86 f0       	mov    0xf086a0d8,%eax
f0132599:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013259c:	c1 e2 04             	shl    $0x4,%edx
f013259f:	01 d0                	add    %edx,%eax
f01325a1:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f01325a7:	89 10                	mov    %edx,(%eax)
f01325a9:	8b 00                	mov    (%eax),%eax
f01325ab:	85 c0                	test   %eax,%eax
f01325ad:	74 18                	je     f01325c7 <initialize_MemBlocksList+0x88>
f01325af:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f01325b4:	8b 15 d8 a0 86 f0    	mov    0xf086a0d8,%edx
f01325ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01325bd:	c1 e1 04             	shl    $0x4,%ecx
f01325c0:	01 ca                	add    %ecx,%edx
f01325c2:	89 50 04             	mov    %edx,0x4(%eax)
f01325c5:	eb 12                	jmp    f01325d9 <initialize_MemBlocksList+0x9a>
f01325c7:	a1 d8 a0 86 f0       	mov    0xf086a0d8,%eax
f01325cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325cf:	c1 e2 04             	shl    $0x4,%edx
f01325d2:	01 d0                	add    %edx,%eax
f01325d4:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f01325d9:	a1 d8 a0 86 f0       	mov    0xf086a0d8,%eax
f01325de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325e1:	c1 e2 04             	shl    $0x4,%edx
f01325e4:	01 d0                	add    %edx,%eax
f01325e6:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f01325eb:	a1 d8 a0 86 f0       	mov    0xf086a0d8,%eax
f01325f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325f3:	c1 e2 04             	shl    $0x4,%edx
f01325f6:	01 d0                	add    %edx,%eax
f01325f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01325ff:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0132604:	40                   	inc    %eax
f0132605:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
	LIST_INIT(&AvailableMemBlocksList);
			for(int i=0;i<numOfBlocks;i++)
f013260a:	ff 45 f4             	incl   -0xc(%ebp)
f013260d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132610:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132613:	0f 82 56 ff ff ff    	jb     f013256f <initialize_MemBlocksList+0x30>
			{
				LIST_INSERT_HEAD(&AvailableMemBlocksList,&MemBlockNodes[i]);
			}
}
f0132619:	90                   	nop
f013261a:	c9                   	leave  
f013261b:	c3                   	ret    

f013261c <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013261c:	55                   	push   %ebp
f013261d:	89 e5                	mov    %esp,%ebp
f013261f:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* blk ;
	LIST_FOREACH(blk,blockList)
f0132622:	8b 45 08             	mov    0x8(%ebp),%eax
f0132625:	8b 00                	mov    (%eax),%eax
f0132627:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013262a:	eb 19                	jmp    f0132645 <find_block+0x29>
	{
		if(blk->sva==va)
f013262c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013262f:	8b 40 08             	mov    0x8(%eax),%eax
f0132632:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132635:	75 05                	jne    f013263c <find_block+0x20>
			return (blk);
f0132637:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013263a:	eb 36                	jmp    f0132672 <find_block+0x56>
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
	struct MemBlock* blk ;
	LIST_FOREACH(blk,blockList)
f013263c:	8b 45 08             	mov    0x8(%ebp),%eax
f013263f:	8b 40 08             	mov    0x8(%eax),%eax
f0132642:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132645:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132649:	74 07                	je     f0132652 <find_block+0x36>
f013264b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013264e:	8b 00                	mov    (%eax),%eax
f0132650:	eb 05                	jmp    f0132657 <find_block+0x3b>
f0132652:	b8 00 00 00 00       	mov    $0x0,%eax
f0132657:	8b 55 08             	mov    0x8(%ebp),%edx
f013265a:	89 42 08             	mov    %eax,0x8(%edx)
f013265d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132660:	8b 40 08             	mov    0x8(%eax),%eax
f0132663:	85 c0                	test   %eax,%eax
f0132665:	75 c5                	jne    f013262c <find_block+0x10>
f0132667:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013266b:	75 bf                	jne    f013262c <find_block+0x10>
	{
		if(blk->sva==va)
			return (blk);
	}
			return (NULL);
f013266d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132672:	c9                   	leave  
f0132673:	c3                   	ret    

f0132674 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0132674:	55                   	push   %ebp
f0132675:	89 e5                	mov    %esp,%ebp
f0132677:	83 ec 28             	sub    $0x28,%esp
	 uint32 size = LIST_SIZE(&AllocMemBlocksList),ze=0;
f013267a:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f013267f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0132682:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	 if(size ==ze)
f0132689:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013268c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f013268f:	75 65                	jne    f01326f6 <insert_sorted_allocList+0x82>
	{
		 LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
f0132691:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132695:	75 14                	jne    f01326ab <insert_sorted_allocList+0x37>
f0132697:	83 ec 04             	sub    $0x4,%esp
f013269a:	68 44 d8 13 f0       	push   $0xf013d844
f013269f:	6a 5c                	push   $0x5c
f01326a1:	68 67 d8 13 f0       	push   $0xf013d867
f01326a6:	e8 5a db fc ff       	call   f0100205 <_panic>
f01326ab:	8b 15 c8 a0 86 f0    	mov    0xf086a0c8,%edx
f01326b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01326b4:	89 10                	mov    %edx,(%eax)
f01326b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01326b9:	8b 00                	mov    (%eax),%eax
f01326bb:	85 c0                	test   %eax,%eax
f01326bd:	74 0d                	je     f01326cc <insert_sorted_allocList+0x58>
f01326bf:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f01326c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01326c7:	89 50 04             	mov    %edx,0x4(%eax)
f01326ca:	eb 08                	jmp    f01326d4 <insert_sorted_allocList+0x60>
f01326cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cf:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f01326d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01326d7:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f01326dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01326df:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01326e6:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01326eb:	40                   	inc    %eax
f01326ec:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
				}
			}
		 }

	}
}
f01326f1:	e9 7b 01 00 00       	jmp    f0132871 <insert_sorted_allocList+0x1fd>
	{
		 LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
	}
	else
	{
		struct MemBlock * lastElement = LIST_LAST(&AllocMemBlocksList);
f01326f6:	a1 cc a0 86 f0       	mov    0xf086a0cc,%eax
f01326fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		struct MemBlock * Firstelement =LIST_FIRST(&AllocMemBlocksList);
f01326fe:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f0132703:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(blockToInsert->sva > lastElement->sva)
f0132706:	8b 45 08             	mov    0x8(%ebp),%eax
f0132709:	8b 50 08             	mov    0x8(%eax),%edx
f013270c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013270f:	8b 40 08             	mov    0x8(%eax),%eax
f0132712:	39 c2                	cmp    %eax,%edx
f0132714:	76 65                	jbe    f013277b <insert_sorted_allocList+0x107>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList , blockToInsert);
f0132716:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013271a:	75 14                	jne    f0132730 <insert_sorted_allocList+0xbc>
f013271c:	83 ec 04             	sub    $0x4,%esp
f013271f:	68 80 d8 13 f0       	push   $0xf013d880
f0132724:	6a 64                	push   $0x64
f0132726:	68 67 d8 13 f0       	push   $0xf013d867
f013272b:	e8 d5 da fc ff       	call   f0100205 <_panic>
f0132730:	8b 15 cc a0 86 f0    	mov    0xf086a0cc,%edx
f0132736:	8b 45 08             	mov    0x8(%ebp),%eax
f0132739:	89 50 04             	mov    %edx,0x4(%eax)
f013273c:	8b 45 08             	mov    0x8(%ebp),%eax
f013273f:	8b 40 04             	mov    0x4(%eax),%eax
f0132742:	85 c0                	test   %eax,%eax
f0132744:	74 0c                	je     f0132752 <insert_sorted_allocList+0xde>
f0132746:	a1 cc a0 86 f0       	mov    0xf086a0cc,%eax
f013274b:	8b 55 08             	mov    0x8(%ebp),%edx
f013274e:	89 10                	mov    %edx,(%eax)
f0132750:	eb 08                	jmp    f013275a <insert_sorted_allocList+0xe6>
f0132752:	8b 45 08             	mov    0x8(%ebp),%eax
f0132755:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f013275a:	8b 45 08             	mov    0x8(%ebp),%eax
f013275d:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f0132762:	8b 45 08             	mov    0x8(%ebp),%eax
f0132765:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013276b:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f0132770:	40                   	inc    %eax
f0132771:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
				}
			}
		 }

	}
}
f0132776:	e9 f6 00 00 00       	jmp    f0132871 <insert_sorted_allocList+0x1fd>
		struct MemBlock * Firstelement =LIST_FIRST(&AllocMemBlocksList);
		if(blockToInsert->sva > lastElement->sva)
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList , blockToInsert);
		}
		else if(blockToInsert->sva <Firstelement->sva)
f013277b:	8b 45 08             	mov    0x8(%ebp),%eax
f013277e:	8b 50 08             	mov    0x8(%eax),%edx
f0132781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132784:	8b 40 08             	mov    0x8(%eax),%eax
f0132787:	39 c2                	cmp    %eax,%edx
f0132789:	73 65                	jae    f01327f0 <insert_sorted_allocList+0x17c>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
f013278b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013278f:	75 14                	jne    f01327a5 <insert_sorted_allocList+0x131>
f0132791:	83 ec 04             	sub    $0x4,%esp
f0132794:	68 44 d8 13 f0       	push   $0xf013d844
f0132799:	6a 68                	push   $0x68
f013279b:	68 67 d8 13 f0       	push   $0xf013d867
f01327a0:	e8 60 da fc ff       	call   f0100205 <_panic>
f01327a5:	8b 15 c8 a0 86 f0    	mov    0xf086a0c8,%edx
f01327ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01327ae:	89 10                	mov    %edx,(%eax)
f01327b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01327b3:	8b 00                	mov    (%eax),%eax
f01327b5:	85 c0                	test   %eax,%eax
f01327b7:	74 0d                	je     f01327c6 <insert_sorted_allocList+0x152>
f01327b9:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f01327be:	8b 55 08             	mov    0x8(%ebp),%edx
f01327c1:	89 50 04             	mov    %edx,0x4(%eax)
f01327c4:	eb 08                	jmp    f01327ce <insert_sorted_allocList+0x15a>
f01327c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01327c9:	a3 cc a0 86 f0       	mov    %eax,0xf086a0cc
f01327ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d1:	a3 c8 a0 86 f0       	mov    %eax,0xf086a0c8
f01327d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327e0:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f01327e5:	40                   	inc    %eax
f01327e6:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
				}
			}
		 }

	}
}
f01327eb:	e9 81 00 00 00       	jmp    f0132871 <insert_sorted_allocList+0x1fd>
			LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
		}
		else
		{
			struct MemBlock * blk;
			LIST_FOREACH(blk,&AllocMemBlocksList)
f01327f0:	a1 c8 a0 86 f0       	mov    0xf086a0c8,%eax
f01327f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327f8:	eb 51                	jmp    f013284b <insert_sorted_allocList+0x1d7>
			{
				if(blockToInsert->sva<blk->sva)
f01327fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01327fd:	8b 50 08             	mov    0x8(%eax),%edx
f0132800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132803:	8b 40 08             	mov    0x8(%eax),%eax
f0132806:	39 c2                	cmp    %eax,%edx
f0132808:	73 39                	jae    f0132843 <insert_sorted_allocList+0x1cf>
				{
					struct MemBlock *before= blk->prev_next_info.le_prev;
f013280a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280d:	8b 40 04             	mov    0x4(%eax),%eax
f0132810:	89 45 e0             	mov    %eax,-0x20(%ebp)
					before->prev_next_info.le_next=blockToInsert;
f0132813:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132816:	8b 55 08             	mov    0x8(%ebp),%edx
f0132819:	89 10                	mov    %edx,(%eax)
					blockToInsert->prev_next_info.le_prev=before;
f013281b:	8b 45 08             	mov    0x8(%ebp),%eax
f013281e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132821:	89 50 04             	mov    %edx,0x4(%eax)
					blockToInsert->prev_next_info.le_next=blk;
f0132824:	8b 45 08             	mov    0x8(%ebp),%eax
f0132827:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013282a:	89 10                	mov    %edx,(%eax)
					blk->prev_next_info.le_prev=blockToInsert;
f013282c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013282f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132832:	89 50 04             	mov    %edx,0x4(%eax)
					LIST_SIZE(&AllocMemBlocksList)++;
f0132835:	a1 d4 a0 86 f0       	mov    0xf086a0d4,%eax
f013283a:	40                   	inc    %eax
f013283b:	a3 d4 a0 86 f0       	mov    %eax,0xf086a0d4
					//LIST_INSERT_BEFORE(&AllocMemBlocksList,blk,blockToInsert);
					break;
f0132840:	90                   	nop
				}
			}
		 }

	}
}
f0132841:	eb 2e                	jmp    f0132871 <insert_sorted_allocList+0x1fd>
			LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
		}
		else
		{
			struct MemBlock * blk;
			LIST_FOREACH(blk,&AllocMemBlocksList)
f0132843:	a1 d0 a0 86 f0       	mov    0xf086a0d0,%eax
f0132848:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013284b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013284f:	74 07                	je     f0132858 <insert_sorted_allocList+0x1e4>
f0132851:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132854:	8b 00                	mov    (%eax),%eax
f0132856:	eb 05                	jmp    f013285d <insert_sorted_allocList+0x1e9>
f0132858:	b8 00 00 00 00       	mov    $0x0,%eax
f013285d:	a3 d0 a0 86 f0       	mov    %eax,0xf086a0d0
f0132862:	a1 d0 a0 86 f0       	mov    0xf086a0d0,%eax
f0132867:	85 c0                	test   %eax,%eax
f0132869:	75 8f                	jne    f01327fa <insert_sorted_allocList+0x186>
f013286b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013286f:	75 89                	jne    f01327fa <insert_sorted_allocList+0x186>
				}
			}
		 }

	}
}
f0132871:	90                   	nop
f0132872:	c9                   	leave  
f0132873:	c3                   	ret    

f0132874 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0132874:	55                   	push   %ebp
f0132875:	89 e5                	mov    %esp,%ebp
f0132877:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock *element;
	LIST_FOREACH(element, (&FreeMemBlocksList))
f013287a:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f013287f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132882:	e9 76 01 00 00       	jmp    f01329fd <alloc_block_FF+0x189>
	{
		 if(element->size==size)
f0132887:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013288a:	8b 40 0c             	mov    0xc(%eax),%eax
f013288d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132890:	0f 85 8a 00 00 00    	jne    f0132920 <alloc_block_FF+0xac>
		 {
			LIST_REMOVE(&FreeMemBlocksList,element);
f0132896:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013289a:	75 17                	jne    f01328b3 <alloc_block_FF+0x3f>
f013289c:	83 ec 04             	sub    $0x4,%esp
f013289f:	68 a3 d8 13 f0       	push   $0xf013d8a3
f01328a4:	68 8a 00 00 00       	push   $0x8a
f01328a9:	68 67 d8 13 f0       	push   $0xf013d867
f01328ae:	e8 52 d9 fc ff       	call   f0100205 <_panic>
f01328b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328b6:	8b 00                	mov    (%eax),%eax
f01328b8:	85 c0                	test   %eax,%eax
f01328ba:	74 10                	je     f01328cc <alloc_block_FF+0x58>
f01328bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328bf:	8b 00                	mov    (%eax),%eax
f01328c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01328c4:	8b 52 04             	mov    0x4(%edx),%edx
f01328c7:	89 50 04             	mov    %edx,0x4(%eax)
f01328ca:	eb 0b                	jmp    f01328d7 <alloc_block_FF+0x63>
f01328cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328cf:	8b 40 04             	mov    0x4(%eax),%eax
f01328d2:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f01328d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328da:	8b 40 04             	mov    0x4(%eax),%eax
f01328dd:	85 c0                	test   %eax,%eax
f01328df:	74 0f                	je     f01328f0 <alloc_block_FF+0x7c>
f01328e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328e4:	8b 40 04             	mov    0x4(%eax),%eax
f01328e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01328ea:	8b 12                	mov    (%edx),%edx
f01328ec:	89 10                	mov    %edx,(%eax)
f01328ee:	eb 0a                	jmp    f01328fa <alloc_block_FF+0x86>
f01328f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328f3:	8b 00                	mov    (%eax),%eax
f01328f5:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f01328fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132906:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013290d:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132912:	48                   	dec    %eax
f0132913:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
			return element;
f0132918:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013291b:	e9 10 01 00 00       	jmp    f0132a30 <alloc_block_FF+0x1bc>
		 }
		 else if(element->size>size)
f0132920:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132923:	8b 40 0c             	mov    0xc(%eax),%eax
f0132926:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132929:	0f 86 c6 00 00 00    	jbe    f01329f5 <alloc_block_FF+0x181>
		 {
			 struct MemBlock *element1= LIST_FIRST(&AvailableMemBlocksList);
f013292f:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f0132934:	89 45 f0             	mov    %eax,-0x10(%ebp)
			 LIST_REMOVE(&AvailableMemBlocksList,element1);
f0132937:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013293b:	75 17                	jne    f0132954 <alloc_block_FF+0xe0>
f013293d:	83 ec 04             	sub    $0x4,%esp
f0132940:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0132945:	68 90 00 00 00       	push   $0x90
f013294a:	68 67 d8 13 f0       	push   $0xf013d867
f013294f:	e8 b1 d8 fc ff       	call   f0100205 <_panic>
f0132954:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132957:	8b 00                	mov    (%eax),%eax
f0132959:	85 c0                	test   %eax,%eax
f013295b:	74 10                	je     f013296d <alloc_block_FF+0xf9>
f013295d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132960:	8b 00                	mov    (%eax),%eax
f0132962:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132965:	8b 52 04             	mov    0x4(%edx),%edx
f0132968:	89 50 04             	mov    %edx,0x4(%eax)
f013296b:	eb 0b                	jmp    f0132978 <alloc_block_FF+0x104>
f013296d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132970:	8b 40 04             	mov    0x4(%eax),%eax
f0132973:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f0132978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013297b:	8b 40 04             	mov    0x4(%eax),%eax
f013297e:	85 c0                	test   %eax,%eax
f0132980:	74 0f                	je     f0132991 <alloc_block_FF+0x11d>
f0132982:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132985:	8b 40 04             	mov    0x4(%eax),%eax
f0132988:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013298b:	8b 12                	mov    (%edx),%edx
f013298d:	89 10                	mov    %edx,(%eax)
f013298f:	eb 0a                	jmp    f013299b <alloc_block_FF+0x127>
f0132991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132994:	8b 00                	mov    (%eax),%eax
f0132996:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f013299b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013299e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01329a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329ae:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01329b3:	48                   	dec    %eax
f01329b4:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
			 element1->size =size;
f01329b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01329bf:	89 50 0c             	mov    %edx,0xc(%eax)
			 element1->sva=element->sva;
f01329c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329c5:	8b 50 08             	mov    0x8(%eax),%edx
f01329c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329cb:	89 50 08             	mov    %edx,0x8(%eax)
			 element->sva=size+element->sva;
f01329ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329d1:	8b 50 08             	mov    0x8(%eax),%edx
f01329d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01329d7:	01 c2                	add    %eax,%edx
f01329d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329dc:	89 50 08             	mov    %edx,0x8(%eax)
			 element->size=element->size-size;
f01329df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329e2:	8b 40 0c             	mov    0xc(%eax),%eax
f01329e5:	2b 45 08             	sub    0x8(%ebp),%eax
f01329e8:	89 c2                	mov    %eax,%edx
f01329ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ed:	89 50 0c             	mov    %edx,0xc(%eax)
			 return element1;
f01329f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329f3:	eb 3b                	jmp    f0132a30 <alloc_block_FF+0x1bc>
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
	struct MemBlock *element;
	LIST_FOREACH(element, (&FreeMemBlocksList))
f01329f5:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f01329fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01329fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a01:	74 07                	je     f0132a0a <alloc_block_FF+0x196>
f0132a03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a06:	8b 00                	mov    (%eax),%eax
f0132a08:	eb 05                	jmp    f0132a0f <alloc_block_FF+0x19b>
f0132a0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0132a0f:	a3 6c a1 86 f0       	mov    %eax,0xf086a16c
f0132a14:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132a19:	85 c0                	test   %eax,%eax
f0132a1b:	0f 85 66 fe ff ff    	jne    f0132887 <alloc_block_FF+0x13>
f0132a21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a25:	0f 85 5c fe ff ff    	jne    f0132887 <alloc_block_FF+0x13>
			 element->size=element->size-size;
			 return element1;
		 }
	}

	return NULL;
f0132a2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132a30:	c9                   	leave  
f0132a31:	c3                   	ret    

f0132a32 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132a32:	55                   	push   %ebp
f0132a33:	89 e5                	mov    %esp,%ebp
f0132a35:	83 ec 28             	sub    $0x28,%esp
	struct MemBlock*block;
		uint32 ma=1e9,c=-1,sol=-1,tempi;
f0132a38:	c7 45 f0 00 ca 9a 3b 	movl   $0x3b9aca00,-0x10(%ebp)
f0132a3f:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
f0132a46:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
		LIST_FOREACH (block, (&FreeMemBlocksList))
f0132a4d:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132a52:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132a55:	e9 cf 00 00 00       	jmp    f0132b29 <alloc_block_BF+0xf7>
		{
			c++;
f0132a5a:	ff 45 ec             	incl   -0x14(%ebp)
			 if(block->size==size)
f0132a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a60:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a63:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a66:	0f 85 8a 00 00 00    	jne    f0132af6 <alloc_block_BF+0xc4>
			{
				LIST_REMOVE((&FreeMemBlocksList),block);
f0132a6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a70:	75 17                	jne    f0132a89 <alloc_block_BF+0x57>
f0132a72:	83 ec 04             	sub    $0x4,%esp
f0132a75:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0132a7a:	68 a8 00 00 00       	push   $0xa8
f0132a7f:	68 67 d8 13 f0       	push   $0xf013d867
f0132a84:	e8 7c d7 fc ff       	call   f0100205 <_panic>
f0132a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a8c:	8b 00                	mov    (%eax),%eax
f0132a8e:	85 c0                	test   %eax,%eax
f0132a90:	74 10                	je     f0132aa2 <alloc_block_BF+0x70>
f0132a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a95:	8b 00                	mov    (%eax),%eax
f0132a97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a9a:	8b 52 04             	mov    0x4(%edx),%edx
f0132a9d:	89 50 04             	mov    %edx,0x4(%eax)
f0132aa0:	eb 0b                	jmp    f0132aad <alloc_block_BF+0x7b>
f0132aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aa5:	8b 40 04             	mov    0x4(%eax),%eax
f0132aa8:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f0132aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ab0:	8b 40 04             	mov    0x4(%eax),%eax
f0132ab3:	85 c0                	test   %eax,%eax
f0132ab5:	74 0f                	je     f0132ac6 <alloc_block_BF+0x94>
f0132ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aba:	8b 40 04             	mov    0x4(%eax),%eax
f0132abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132ac0:	8b 12                	mov    (%edx),%edx
f0132ac2:	89 10                	mov    %edx,(%eax)
f0132ac4:	eb 0a                	jmp    f0132ad0 <alloc_block_BF+0x9e>
f0132ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ac9:	8b 00                	mov    (%eax),%eax
f0132acb:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0132ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132adc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ae3:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132ae8:	48                   	dec    %eax
f0132ae9:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
				return block;
f0132aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132af1:	e9 85 01 00 00       	jmp    f0132c7b <alloc_block_BF+0x249>
			}
			else if(block->size>size)
f0132af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132af9:	8b 40 0c             	mov    0xc(%eax),%eax
f0132afc:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132aff:	76 20                	jbe    f0132b21 <alloc_block_BF+0xef>
			{
				tempi=(block->size)-size;
f0132b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b04:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b07:	2b 45 08             	sub    0x8(%ebp),%eax
f0132b0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
				if(tempi<ma)
f0132b0d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132b10:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132b13:	73 0c                	jae    f0132b21 <alloc_block_BF+0xef>
				{
					ma=tempi;
f0132b15:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132b18:	89 45 f0             	mov    %eax,-0x10(%ebp)
					sol=c;
f0132b1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
	struct MemBlock*block;
		uint32 ma=1e9,c=-1,sol=-1,tempi;
		LIST_FOREACH (block, (&FreeMemBlocksList))
f0132b21:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132b26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b2d:	74 07                	je     f0132b36 <alloc_block_BF+0x104>
f0132b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b32:	8b 00                	mov    (%eax),%eax
f0132b34:	eb 05                	jmp    f0132b3b <alloc_block_BF+0x109>
f0132b36:	b8 00 00 00 00       	mov    $0x0,%eax
f0132b3b:	a3 6c a1 86 f0       	mov    %eax,0xf086a16c
f0132b40:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132b45:	85 c0                	test   %eax,%eax
f0132b47:	0f 85 0d ff ff ff    	jne    f0132a5a <alloc_block_BF+0x28>
f0132b4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b51:	0f 85 03 ff ff ff    	jne    f0132a5a <alloc_block_BF+0x28>
					ma=tempi;
					sol=c;
				}
			}
		}
		uint32 x=0;
f0132b57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH (block, (&FreeMemBlocksList))
f0132b5e:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b66:	e9 dd 00 00 00       	jmp    f0132c48 <alloc_block_BF+0x216>
		{
			if(x==sol)
f0132b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132b6e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0132b71:	0f 85 c6 00 00 00    	jne    f0132c3d <alloc_block_BF+0x20b>
			{
				struct MemBlock *element1= LIST_FIRST(&AvailableMemBlocksList);
f0132b77:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f0132b7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
						 LIST_REMOVE(&AvailableMemBlocksList,element1);
f0132b7f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0132b83:	75 17                	jne    f0132b9c <alloc_block_BF+0x16a>
f0132b85:	83 ec 04             	sub    $0x4,%esp
f0132b88:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0132b8d:	68 bb 00 00 00       	push   $0xbb
f0132b92:	68 67 d8 13 f0       	push   $0xf013d867
f0132b97:	e8 69 d6 fc ff       	call   f0100205 <_panic>
f0132b9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132b9f:	8b 00                	mov    (%eax),%eax
f0132ba1:	85 c0                	test   %eax,%eax
f0132ba3:	74 10                	je     f0132bb5 <alloc_block_BF+0x183>
f0132ba5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132ba8:	8b 00                	mov    (%eax),%eax
f0132baa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132bad:	8b 52 04             	mov    0x4(%edx),%edx
f0132bb0:	89 50 04             	mov    %edx,0x4(%eax)
f0132bb3:	eb 0b                	jmp    f0132bc0 <alloc_block_BF+0x18e>
f0132bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bb8:	8b 40 04             	mov    0x4(%eax),%eax
f0132bbb:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f0132bc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bc3:	8b 40 04             	mov    0x4(%eax),%eax
f0132bc6:	85 c0                	test   %eax,%eax
f0132bc8:	74 0f                	je     f0132bd9 <alloc_block_BF+0x1a7>
f0132bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bcd:	8b 40 04             	mov    0x4(%eax),%eax
f0132bd0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132bd3:	8b 12                	mov    (%edx),%edx
f0132bd5:	89 10                	mov    %edx,(%eax)
f0132bd7:	eb 0a                	jmp    f0132be3 <alloc_block_BF+0x1b1>
f0132bd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bdc:	8b 00                	mov    (%eax),%eax
f0132bde:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f0132be3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132be6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132bec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132bef:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132bf6:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0132bfb:	48                   	dec    %eax
f0132bfc:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
						 element1->size =size;
f0132c01:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132c04:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c07:	89 50 0c             	mov    %edx,0xc(%eax)
						 element1->sva=block->sva;
f0132c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c0d:	8b 50 08             	mov    0x8(%eax),%edx
f0132c10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132c13:	89 50 08             	mov    %edx,0x8(%eax)
						 block->sva=size+block->sva;
f0132c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c19:	8b 50 08             	mov    0x8(%eax),%edx
f0132c1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132c1f:	01 c2                	add    %eax,%edx
f0132c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c24:	89 50 08             	mov    %edx,0x8(%eax)
						 block->size=block->size-size;
f0132c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c2a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c2d:	2b 45 08             	sub    0x8(%ebp),%eax
f0132c30:	89 c2                	mov    %eax,%edx
f0132c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c35:	89 50 0c             	mov    %edx,0xc(%eax)
						 return element1;
f0132c38:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132c3b:	eb 3e                	jmp    f0132c7b <alloc_block_BF+0x249>
						 break;
			}
			x++;
f0132c3d:	ff 45 e4             	incl   -0x1c(%ebp)
					sol=c;
				}
			}
		}
		uint32 x=0;
		LIST_FOREACH (block, (&FreeMemBlocksList))
f0132c40:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132c45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c4c:	74 07                	je     f0132c55 <alloc_block_BF+0x223>
f0132c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c51:	8b 00                	mov    (%eax),%eax
f0132c53:	eb 05                	jmp    f0132c5a <alloc_block_BF+0x228>
f0132c55:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c5a:	a3 6c a1 86 f0       	mov    %eax,0xf086a16c
f0132c5f:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f0132c64:	85 c0                	test   %eax,%eax
f0132c66:	0f 85 ff fe ff ff    	jne    f0132b6b <alloc_block_BF+0x139>
f0132c6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c70:	0f 85 f5 fe ff ff    	jne    f0132b6b <alloc_block_BF+0x139>
						 return element1;
						 break;
			}
			x++;
		}
			return NULL;
f0132c76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132c7b:	c9                   	leave  
f0132c7c:	c3                   	ret    

f0132c7d <alloc_block_NF>:
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *temp;
bool hh=0;
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132c7d:	55                   	push   %ebp
f0132c7e:	89 e5                	mov    %esp,%ebp
f0132c80:	83 ec 18             	sub    $0x18,%esp
	if(hh==0)
f0132c83:	a1 b0 a0 86 f0       	mov    0xf086a0b0,%eax
f0132c88:	85 c0                	test   %eax,%eax
f0132c8a:	75 14                	jne    f0132ca0 <alloc_block_NF+0x23>
	{
		temp= LIST_FIRST(&FreeMemBlocksList);
f0132c8c:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132c91:	a3 bc a2 86 f0       	mov    %eax,0xf086a2bc
		hh=1;
f0132c96:	c7 05 b0 a0 86 f0 01 	movl   $0x1,0xf086a0b0
f0132c9d:	00 00 00 
	}
	uint32 c=1;
f0132ca0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	struct MemBlock *element=temp;
f0132ca7:	a1 bc a2 86 f0       	mov    0xf086a2bc,%eax
f0132cac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while(c!=LIST_SIZE(&FreeMemBlocksList))
f0132caf:	e9 b3 01 00 00       	jmp    f0132e67 <alloc_block_NF+0x1ea>
	{
		 if(element->size==size)
f0132cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cb7:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cba:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132cbd:	0f 85 a9 00 00 00    	jne    f0132d6c <alloc_block_NF+0xef>
			 {
			 	if(element->prev_next_info.le_next==NULL)
f0132cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cc6:	8b 00                	mov    (%eax),%eax
f0132cc8:	85 c0                	test   %eax,%eax
f0132cca:	75 0c                	jne    f0132cd8 <alloc_block_NF+0x5b>
			 	{
			 		temp= LIST_FIRST(&FreeMemBlocksList);
f0132ccc:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132cd1:	a3 bc a2 86 f0       	mov    %eax,0xf086a2bc
f0132cd6:	eb 0a                	jmp    f0132ce2 <alloc_block_NF+0x65>
			 	}
			 	else
			 		{
			 		temp= element->prev_next_info.le_next;
f0132cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132cdb:	8b 00                	mov    (%eax),%eax
f0132cdd:	a3 bc a2 86 f0       	mov    %eax,0xf086a2bc
			 		}
				 LIST_REMOVE(&FreeMemBlocksList,element);
f0132ce2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132ce6:	75 17                	jne    f0132cff <alloc_block_NF+0x82>
f0132ce8:	83 ec 04             	sub    $0x4,%esp
f0132ceb:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0132cf0:	68 e3 00 00 00       	push   $0xe3
f0132cf5:	68 67 d8 13 f0       	push   $0xf013d867
f0132cfa:	e8 06 d5 fc ff       	call   f0100205 <_panic>
f0132cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d02:	8b 00                	mov    (%eax),%eax
f0132d04:	85 c0                	test   %eax,%eax
f0132d06:	74 10                	je     f0132d18 <alloc_block_NF+0x9b>
f0132d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d0b:	8b 00                	mov    (%eax),%eax
f0132d0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d10:	8b 52 04             	mov    0x4(%edx),%edx
f0132d13:	89 50 04             	mov    %edx,0x4(%eax)
f0132d16:	eb 0b                	jmp    f0132d23 <alloc_block_NF+0xa6>
f0132d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d1b:	8b 40 04             	mov    0x4(%eax),%eax
f0132d1e:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f0132d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d26:	8b 40 04             	mov    0x4(%eax),%eax
f0132d29:	85 c0                	test   %eax,%eax
f0132d2b:	74 0f                	je     f0132d3c <alloc_block_NF+0xbf>
f0132d2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d30:	8b 40 04             	mov    0x4(%eax),%eax
f0132d33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d36:	8b 12                	mov    (%edx),%edx
f0132d38:	89 10                	mov    %edx,(%eax)
f0132d3a:	eb 0a                	jmp    f0132d46 <alloc_block_NF+0xc9>
f0132d3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d3f:	8b 00                	mov    (%eax),%eax
f0132d41:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0132d46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d59:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132d5e:	48                   	dec    %eax
f0132d5f:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
				return element;
f0132d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d67:	e9 0e 01 00 00       	jmp    f0132e7a <alloc_block_NF+0x1fd>
			 }
			 else if(element->size>size)
f0132d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d6f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d72:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132d75:	0f 86 ce 00 00 00    	jbe    f0132e49 <alloc_block_NF+0x1cc>
			 {
				 struct MemBlock *element1= LIST_FIRST(&AvailableMemBlocksList);
f0132d7b:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f0132d80:	89 45 ec             	mov    %eax,-0x14(%ebp)
				 LIST_REMOVE(&AvailableMemBlocksList,element1);
f0132d83:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132d87:	75 17                	jne    f0132da0 <alloc_block_NF+0x123>
f0132d89:	83 ec 04             	sub    $0x4,%esp
f0132d8c:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0132d91:	68 e9 00 00 00       	push   $0xe9
f0132d96:	68 67 d8 13 f0       	push   $0xf013d867
f0132d9b:	e8 65 d4 fc ff       	call   f0100205 <_panic>
f0132da0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132da3:	8b 00                	mov    (%eax),%eax
f0132da5:	85 c0                	test   %eax,%eax
f0132da7:	74 10                	je     f0132db9 <alloc_block_NF+0x13c>
f0132da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dac:	8b 00                	mov    (%eax),%eax
f0132dae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132db1:	8b 52 04             	mov    0x4(%edx),%edx
f0132db4:	89 50 04             	mov    %edx,0x4(%eax)
f0132db7:	eb 0b                	jmp    f0132dc4 <alloc_block_NF+0x147>
f0132db9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dbc:	8b 40 04             	mov    0x4(%eax),%eax
f0132dbf:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f0132dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dc7:	8b 40 04             	mov    0x4(%eax),%eax
f0132dca:	85 c0                	test   %eax,%eax
f0132dcc:	74 0f                	je     f0132ddd <alloc_block_NF+0x160>
f0132dce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dd1:	8b 40 04             	mov    0x4(%eax),%eax
f0132dd4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132dd7:	8b 12                	mov    (%edx),%edx
f0132dd9:	89 10                	mov    %edx,(%eax)
f0132ddb:	eb 0a                	jmp    f0132de7 <alloc_block_NF+0x16a>
f0132ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132de0:	8b 00                	mov    (%eax),%eax
f0132de2:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f0132de7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132dea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132df0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132df3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132dfa:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0132dff:	48                   	dec    %eax
f0132e00:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
				 element1->size =size;
f0132e05:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e08:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e0b:	89 50 0c             	mov    %edx,0xc(%eax)
				 element1->sva=element->sva;
f0132e0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e11:	8b 50 08             	mov    0x8(%eax),%edx
f0132e14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e17:	89 50 08             	mov    %edx,0x8(%eax)
				 element->sva=size+element->sva;
f0132e1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e1d:	8b 50 08             	mov    0x8(%eax),%edx
f0132e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e23:	01 c2                	add    %eax,%edx
f0132e25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e28:	89 50 08             	mov    %edx,0x8(%eax)
				 element->size=element->size-size;
f0132e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e2e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e31:	2b 45 08             	sub    0x8(%ebp),%eax
f0132e34:	89 c2                	mov    %eax,%edx
f0132e36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e39:	89 50 0c             	mov    %edx,0xc(%eax)
				 temp=element;
f0132e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e3f:	a3 bc a2 86 f0       	mov    %eax,0xf086a2bc
				 return element1;
f0132e44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132e47:	eb 31                	jmp    f0132e7a <alloc_block_NF+0x1fd>
			 }
		 c++;
f0132e49:	ff 45 f4             	incl   -0xc(%ebp)
		 if(element->prev_next_info.le_next==NULL)
f0132e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e4f:	8b 00                	mov    (%eax),%eax
f0132e51:	85 c0                	test   %eax,%eax
f0132e53:	75 0a                	jne    f0132e5f <alloc_block_NF+0x1e2>
		 {
		  element= LIST_FIRST(&FreeMemBlocksList);
f0132e55:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132e5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0132e5d:	eb 08                	jmp    f0132e67 <alloc_block_NF+0x1ea>
		 }
		 else
		 {
			 element= element->prev_next_info.le_next;
f0132e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e62:	8b 00                	mov    (%eax),%eax
f0132e64:	89 45 f0             	mov    %eax,-0x10(%ebp)
		temp= LIST_FIRST(&FreeMemBlocksList);
		hh=1;
	}
	uint32 c=1;
	struct MemBlock *element=temp;
	while(c!=LIST_SIZE(&FreeMemBlocksList))
f0132e67:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132e6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0132e6f:	0f 85 3f fe ff ff    	jne    f0132cb4 <alloc_block_NF+0x37>
		 else
		 {
			 element= element->prev_next_info.le_next;
		 }
	}
	return NULL;
f0132e75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132e7a:	c9                   	leave  
f0132e7b:	c3                   	ret    

f0132e7c <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132e7c:	55                   	push   %ebp
f0132e7d:	89 e5                	mov    %esp,%ebp
f0132e7f:	83 ec 28             	sub    $0x28,%esp
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_with_merge_freeList() is not implemented yet...!!");
	//int size=;
	//int size_v=LIST_SIZE(&(AvailableMemBlocksList));

	if(LIST_SIZE(&FreeMemBlocksList)==0)
f0132e82:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132e87:	85 c0                	test   %eax,%eax
f0132e89:	75 68                	jne    f0132ef3 <insert_sorted_with_merge_freeList+0x77>
			{
			LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f0132e8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e8f:	75 17                	jne    f0132ea8 <insert_sorted_with_merge_freeList+0x2c>
f0132e91:	83 ec 04             	sub    $0x4,%esp
f0132e94:	68 44 d8 13 f0       	push   $0xf013d844
f0132e99:	68 0e 01 00 00       	push   $0x10e
f0132e9e:	68 67 d8 13 f0       	push   $0xf013d867
f0132ea3:	e8 5d d3 fc ff       	call   f0100205 <_panic>
f0132ea8:	8b 15 64 a1 86 f0    	mov    0xf086a164,%edx
f0132eae:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eb1:	89 10                	mov    %edx,(%eax)
f0132eb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eb6:	8b 00                	mov    (%eax),%eax
f0132eb8:	85 c0                	test   %eax,%eax
f0132eba:	74 0d                	je     f0132ec9 <insert_sorted_with_merge_freeList+0x4d>
f0132ebc:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132ec1:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ec4:	89 50 04             	mov    %edx,0x4(%eax)
f0132ec7:	eb 08                	jmp    f0132ed1 <insert_sorted_with_merge_freeList+0x55>
f0132ec9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ecc:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f0132ed1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ed4:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0132ed9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132edc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ee3:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0132ee8:	40                   	inc    %eax
f0132ee9:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
							}

						}
		          }
		}
}
f0132eee:	e9 8c 06 00 00       	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
			{
			LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
			}
		else
		{
			struct MemBlock * lastElement = LIST_LAST(&FreeMemBlocksList);
f0132ef3:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f0132ef8:	89 45 f0             	mov    %eax,-0x10(%ebp)
						struct MemBlock * Firstelement =LIST_FIRST(&FreeMemBlocksList);
f0132efb:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0132f00:	89 45 ec             	mov    %eax,-0x14(%ebp)
						if(blockToInsert->sva > lastElement->sva)
f0132f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f06:	8b 50 08             	mov    0x8(%eax),%edx
f0132f09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f0c:	8b 40 08             	mov    0x8(%eax),%eax
f0132f0f:	39 c2                	cmp    %eax,%edx
f0132f11:	0f 86 14 01 00 00    	jbe    f013302b <insert_sorted_with_merge_freeList+0x1af>
						{
							if(lastElement->size+lastElement->sva==blockToInsert->sva)
f0132f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f1a:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f20:	8b 40 08             	mov    0x8(%eax),%eax
f0132f23:	01 c2                	add    %eax,%edx
f0132f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f28:	8b 40 08             	mov    0x8(%eax),%eax
f0132f2b:	39 c2                	cmp    %eax,%edx
f0132f2d:	0f 85 90 00 00 00    	jne    f0132fc3 <insert_sorted_with_merge_freeList+0x147>
							{
								lastElement->size+= blockToInsert->size;
f0132f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f36:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f3c:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f3f:	01 c2                	add    %eax,%edx
f0132f41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f44:	89 50 0c             	mov    %edx,0xc(%eax)
								blockToInsert->size=0;
f0132f47:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f4a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
								blockToInsert->sva=0;
f0132f51:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f54:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
								LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0132f5b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f5f:	75 17                	jne    f0132f78 <insert_sorted_with_merge_freeList+0xfc>
f0132f61:	83 ec 04             	sub    $0x4,%esp
f0132f64:	68 44 d8 13 f0       	push   $0xf013d844
f0132f69:	68 1b 01 00 00       	push   $0x11b
f0132f6e:	68 67 d8 13 f0       	push   $0xf013d867
f0132f73:	e8 8d d2 fc ff       	call   f0100205 <_panic>
f0132f78:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f0132f7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f81:	89 10                	mov    %edx,(%eax)
f0132f83:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f86:	8b 00                	mov    (%eax),%eax
f0132f88:	85 c0                	test   %eax,%eax
f0132f8a:	74 0d                	je     f0132f99 <insert_sorted_with_merge_freeList+0x11d>
f0132f8c:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f0132f91:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f94:	89 50 04             	mov    %edx,0x4(%eax)
f0132f97:	eb 08                	jmp    f0132fa1 <insert_sorted_with_merge_freeList+0x125>
f0132f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f9c:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f0132fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fa4:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f0132fa9:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fac:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fb3:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0132fb8:	40                   	inc    %eax
f0132fb9:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
							}

						}
		          }
		}
}
f0132fbe:	e9 bc 05 00 00       	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
								blockToInsert->sva=0;
								LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
							}
							else
							{
								LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132fc3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132fc7:	75 17                	jne    f0132fe0 <insert_sorted_with_merge_freeList+0x164>
f0132fc9:	83 ec 04             	sub    $0x4,%esp
f0132fcc:	68 80 d8 13 f0       	push   $0xf013d880
f0132fd1:	68 1f 01 00 00       	push   $0x11f
f0132fd6:	68 67 d8 13 f0       	push   $0xf013d867
f0132fdb:	e8 25 d2 fc ff       	call   f0100205 <_panic>
f0132fe0:	8b 15 68 a1 86 f0    	mov    0xf086a168,%edx
f0132fe6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fe9:	89 50 04             	mov    %edx,0x4(%eax)
f0132fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fef:	8b 40 04             	mov    0x4(%eax),%eax
f0132ff2:	85 c0                	test   %eax,%eax
f0132ff4:	74 0c                	je     f0133002 <insert_sorted_with_merge_freeList+0x186>
f0132ff6:	a1 68 a1 86 f0       	mov    0xf086a168,%eax
f0132ffb:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ffe:	89 10                	mov    %edx,(%eax)
f0133000:	eb 08                	jmp    f013300a <insert_sorted_with_merge_freeList+0x18e>
f0133002:	8b 45 08             	mov    0x8(%ebp),%eax
f0133005:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f013300a:	8b 45 08             	mov    0x8(%ebp),%eax
f013300d:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f0133012:	8b 45 08             	mov    0x8(%ebp),%eax
f0133015:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013301b:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0133020:	40                   	inc    %eax
f0133021:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
							}

						}
		          }
		}
}
f0133026:	e9 54 05 00 00       	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
							else
							{
								LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
							}
						}
						else if(blockToInsert->sva <Firstelement->sva)
f013302b:	8b 45 08             	mov    0x8(%ebp),%eax
f013302e:	8b 50 08             	mov    0x8(%eax),%edx
f0133031:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133034:	8b 40 08             	mov    0x8(%eax),%eax
f0133037:	39 c2                	cmp    %eax,%edx
f0133039:	0f 83 20 01 00 00    	jae    f013315f <insert_sorted_with_merge_freeList+0x2e3>
						{
							if(blockToInsert->size+blockToInsert->sva==Firstelement->sva)
f013303f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133042:	8b 50 0c             	mov    0xc(%eax),%edx
f0133045:	8b 45 08             	mov    0x8(%ebp),%eax
f0133048:	8b 40 08             	mov    0x8(%eax),%eax
f013304b:	01 c2                	add    %eax,%edx
f013304d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133050:	8b 40 08             	mov    0x8(%eax),%eax
f0133053:	39 c2                	cmp    %eax,%edx
f0133055:	0f 85 9c 00 00 00    	jne    f01330f7 <insert_sorted_with_merge_freeList+0x27b>
							{
								Firstelement->sva=blockToInsert->sva;
f013305b:	8b 45 08             	mov    0x8(%ebp),%eax
f013305e:	8b 50 08             	mov    0x8(%eax),%edx
f0133061:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133064:	89 50 08             	mov    %edx,0x8(%eax)
								Firstelement->size+=blockToInsert->size;
f0133067:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013306a:	8b 50 0c             	mov    0xc(%eax),%edx
f013306d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133070:	8b 40 0c             	mov    0xc(%eax),%eax
f0133073:	01 c2                	add    %eax,%edx
f0133075:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133078:	89 50 0c             	mov    %edx,0xc(%eax)
								blockToInsert->size=0;
f013307b:	8b 45 08             	mov    0x8(%ebp),%eax
f013307e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
								blockToInsert->sva=0;
f0133085:	8b 45 08             	mov    0x8(%ebp),%eax
f0133088:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
								LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f013308f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133093:	75 17                	jne    f01330ac <insert_sorted_with_merge_freeList+0x230>
f0133095:	83 ec 04             	sub    $0x4,%esp
f0133098:	68 44 d8 13 f0       	push   $0xf013d844
f013309d:	68 2a 01 00 00       	push   $0x12a
f01330a2:	68 67 d8 13 f0       	push   $0xf013d867
f01330a7:	e8 59 d1 fc ff       	call   f0100205 <_panic>
f01330ac:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f01330b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01330b5:	89 10                	mov    %edx,(%eax)
f01330b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ba:	8b 00                	mov    (%eax),%eax
f01330bc:	85 c0                	test   %eax,%eax
f01330be:	74 0d                	je     f01330cd <insert_sorted_with_merge_freeList+0x251>
f01330c0:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f01330c5:	8b 55 08             	mov    0x8(%ebp),%edx
f01330c8:	89 50 04             	mov    %edx,0x4(%eax)
f01330cb:	eb 08                	jmp    f01330d5 <insert_sorted_with_merge_freeList+0x259>
f01330cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01330d0:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f01330d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01330d8:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f01330dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01330e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330e7:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01330ec:	40                   	inc    %eax
f01330ed:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
							}

						}
		          }
		}
}
f01330f2:	e9 88 04 00 00       	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
								blockToInsert->sva=0;
								LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
							}
							else
							{
								LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f01330f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01330fb:	75 17                	jne    f0133114 <insert_sorted_with_merge_freeList+0x298>
f01330fd:	83 ec 04             	sub    $0x4,%esp
f0133100:	68 44 d8 13 f0       	push   $0xf013d844
f0133105:	68 2e 01 00 00       	push   $0x12e
f013310a:	68 67 d8 13 f0       	push   $0xf013d867
f013310f:	e8 f1 d0 fc ff       	call   f0100205 <_panic>
f0133114:	8b 15 64 a1 86 f0    	mov    0xf086a164,%edx
f013311a:	8b 45 08             	mov    0x8(%ebp),%eax
f013311d:	89 10                	mov    %edx,(%eax)
f013311f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133122:	8b 00                	mov    (%eax),%eax
f0133124:	85 c0                	test   %eax,%eax
f0133126:	74 0d                	je     f0133135 <insert_sorted_with_merge_freeList+0x2b9>
f0133128:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f013312d:	8b 55 08             	mov    0x8(%ebp),%edx
f0133130:	89 50 04             	mov    %edx,0x4(%eax)
f0133133:	eb 08                	jmp    f013313d <insert_sorted_with_merge_freeList+0x2c1>
f0133135:	8b 45 08             	mov    0x8(%ebp),%eax
f0133138:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f013313d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133140:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0133145:	8b 45 08             	mov    0x8(%ebp),%eax
f0133148:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013314f:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0133154:	40                   	inc    %eax
f0133155:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
							}

						}
		          }
		}
}
f013315a:	e9 20 04 00 00       	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
						}
						else
						{
							struct MemBlock * blk;
							struct MemBlock *prev;
							LIST_FOREACH(blk,&FreeMemBlocksList)
f013315f:	a1 64 a1 86 f0       	mov    0xf086a164,%eax
f0133164:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133167:	e9 e2 03 00 00       	jmp    f013354e <insert_sorted_with_merge_freeList+0x6d2>
							{
								if(blockToInsert->sva<blk->sva)
f013316c:	8b 45 08             	mov    0x8(%ebp),%eax
f013316f:	8b 50 08             	mov    0x8(%eax),%edx
f0133172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133175:	8b 40 08             	mov    0x8(%eax),%eax
f0133178:	39 c2                	cmp    %eax,%edx
f013317a:	0f 83 c6 03 00 00    	jae    f0133546 <insert_sorted_with_merge_freeList+0x6ca>
								{
								prev=blk->prev_next_info.le_prev;
f0133180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133183:	8b 40 04             	mov    0x4(%eax),%eax
f0133186:	89 45 e8             	mov    %eax,-0x18(%ebp)
								/*
								 prev sva+ size = blk_ins_sva >> merge prev
								 blk_ins_sva+size= blk_sva>> merge
								 */
								uint32 wiprev= prev->sva+prev->size
f0133189:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013318c:	8b 50 08             	mov    0x8(%eax),%edx
f013318f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133192:	8b 40 0c             	mov    0xc(%eax),%eax
f0133195:	01 d0                	add    %edx,%eax
f0133197:	89 45 e4             	mov    %eax,-0x1c(%ebp)
								, winew= blockToInsert->size+blockToInsert->sva;
f013319a:	8b 45 08             	mov    0x8(%ebp),%eax
f013319d:	8b 50 0c             	mov    0xc(%eax),%edx
f01331a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01331a3:	8b 40 08             	mov    0x8(%eax),%eax
f01331a6:	01 d0                	add    %edx,%eax
f01331a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
								if(wiprev!=blockToInsert->sva&&winew!=blk->sva)
f01331ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01331ae:	8b 40 08             	mov    0x8(%eax),%eax
f01331b1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01331b4:	74 7a                	je     f0133230 <insert_sorted_with_merge_freeList+0x3b4>
f01331b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331b9:	8b 40 08             	mov    0x8(%eax),%eax
f01331bc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01331bf:	74 6f                	je     f0133230 <insert_sorted_with_merge_freeList+0x3b4>
								{
									// no merge
									LIST_INSERT_BEFORE(&FreeMemBlocksList,blk,blockToInsert);
f01331c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01331c5:	74 06                	je     f01331cd <insert_sorted_with_merge_freeList+0x351>
f01331c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01331cb:	75 17                	jne    f01331e4 <insert_sorted_with_merge_freeList+0x368>
f01331cd:	83 ec 04             	sub    $0x4,%esp
f01331d0:	68 c4 d8 13 f0       	push   $0xf013d8c4
f01331d5:	68 43 01 00 00       	push   $0x143
f01331da:	68 67 d8 13 f0       	push   $0xf013d867
f01331df:	e8 21 d0 fc ff       	call   f0100205 <_panic>
f01331e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331e7:	8b 50 04             	mov    0x4(%eax),%edx
f01331ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01331ed:	89 50 04             	mov    %edx,0x4(%eax)
f01331f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01331f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01331f6:	89 10                	mov    %edx,(%eax)
f01331f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331fb:	8b 40 04             	mov    0x4(%eax),%eax
f01331fe:	85 c0                	test   %eax,%eax
f0133200:	74 0d                	je     f013320f <insert_sorted_with_merge_freeList+0x393>
f0133202:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133205:	8b 40 04             	mov    0x4(%eax),%eax
f0133208:	8b 55 08             	mov    0x8(%ebp),%edx
f013320b:	89 10                	mov    %edx,(%eax)
f013320d:	eb 08                	jmp    f0133217 <insert_sorted_with_merge_freeList+0x39b>
f013320f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133212:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0133217:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013321a:	8b 55 08             	mov    0x8(%ebp),%edx
f013321d:	89 50 04             	mov    %edx,0x4(%eax)
f0133220:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0133225:	40                   	inc    %eax
f0133226:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
f013322b:	e9 14 03 00 00       	jmp    f0133544 <insert_sorted_with_merge_freeList+0x6c8>
								}
								else if(wiprev==blockToInsert->sva&&winew==blk->sva)
f0133230:	8b 45 08             	mov    0x8(%ebp),%eax
f0133233:	8b 40 08             	mov    0x8(%eax),%eax
f0133236:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0133239:	0f 85 a0 01 00 00    	jne    f01333df <insert_sorted_with_merge_freeList+0x563>
f013323f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133242:	8b 40 08             	mov    0x8(%eax),%eax
f0133245:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0133248:	0f 85 91 01 00 00    	jne    f01333df <insert_sorted_with_merge_freeList+0x563>
								{
									// both merge
									prev->size+= (blockToInsert->size)+(blk->size);
f013324e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133251:	8b 50 0c             	mov    0xc(%eax),%edx
f0133254:	8b 45 08             	mov    0x8(%ebp),%eax
f0133257:	8b 48 0c             	mov    0xc(%eax),%ecx
f013325a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013325d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133260:	01 c8                	add    %ecx,%eax
f0133262:	01 c2                	add    %eax,%edx
f0133264:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133267:	89 50 0c             	mov    %edx,0xc(%eax)
									blockToInsert->size=0;
f013326a:	8b 45 08             	mov    0x8(%ebp),%eax
f013326d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
									blockToInsert->sva=0;
f0133274:	8b 45 08             	mov    0x8(%ebp),%eax
f0133277:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
									blk->size=0;
f013327e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133281:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
									blk->sva=0;
f0133288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013328b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
									LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0133292:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133296:	75 17                	jne    f01332af <insert_sorted_with_merge_freeList+0x433>
f0133298:	83 ec 04             	sub    $0x4,%esp
f013329b:	68 44 d8 13 f0       	push   $0xf013d844
f01332a0:	68 4d 01 00 00       	push   $0x14d
f01332a5:	68 67 d8 13 f0       	push   $0xf013d867
f01332aa:	e8 56 cf fc ff       	call   f0100205 <_panic>
f01332af:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f01332b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01332b8:	89 10                	mov    %edx,(%eax)
f01332ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01332bd:	8b 00                	mov    (%eax),%eax
f01332bf:	85 c0                	test   %eax,%eax
f01332c1:	74 0d                	je     f01332d0 <insert_sorted_with_merge_freeList+0x454>
f01332c3:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f01332c8:	8b 55 08             	mov    0x8(%ebp),%edx
f01332cb:	89 50 04             	mov    %edx,0x4(%eax)
f01332ce:	eb 08                	jmp    f01332d8 <insert_sorted_with_merge_freeList+0x45c>
f01332d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01332d3:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f01332d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01332db:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f01332e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01332e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01332ea:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01332ef:	40                   	inc    %eax
f01332f0:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
									LIST_REMOVE(&FreeMemBlocksList,blk);
f01332f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01332f9:	75 17                	jne    f0133312 <insert_sorted_with_merge_freeList+0x496>
f01332fb:	83 ec 04             	sub    $0x4,%esp
f01332fe:	68 a3 d8 13 f0       	push   $0xf013d8a3
f0133303:	68 4e 01 00 00       	push   $0x14e
f0133308:	68 67 d8 13 f0       	push   $0xf013d867
f013330d:	e8 f3 ce fc ff       	call   f0100205 <_panic>
f0133312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133315:	8b 00                	mov    (%eax),%eax
f0133317:	85 c0                	test   %eax,%eax
f0133319:	74 10                	je     f013332b <insert_sorted_with_merge_freeList+0x4af>
f013331b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013331e:	8b 00                	mov    (%eax),%eax
f0133320:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133323:	8b 52 04             	mov    0x4(%edx),%edx
f0133326:	89 50 04             	mov    %edx,0x4(%eax)
f0133329:	eb 0b                	jmp    f0133336 <insert_sorted_with_merge_freeList+0x4ba>
f013332b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013332e:	8b 40 04             	mov    0x4(%eax),%eax
f0133331:	a3 68 a1 86 f0       	mov    %eax,0xf086a168
f0133336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133339:	8b 40 04             	mov    0x4(%eax),%eax
f013333c:	85 c0                	test   %eax,%eax
f013333e:	74 0f                	je     f013334f <insert_sorted_with_merge_freeList+0x4d3>
f0133340:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133343:	8b 40 04             	mov    0x4(%eax),%eax
f0133346:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133349:	8b 12                	mov    (%edx),%edx
f013334b:	89 10                	mov    %edx,(%eax)
f013334d:	eb 0a                	jmp    f0133359 <insert_sorted_with_merge_freeList+0x4dd>
f013334f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133352:	8b 00                	mov    (%eax),%eax
f0133354:	a3 64 a1 86 f0       	mov    %eax,0xf086a164
f0133359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013335c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133365:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013336c:	a1 70 a1 86 f0       	mov    0xf086a170,%eax
f0133371:	48                   	dec    %eax
f0133372:	a3 70 a1 86 f0       	mov    %eax,0xf086a170
									LIST_INSERT_HEAD(&AvailableMemBlocksList,blk);
f0133377:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013337b:	75 17                	jne    f0133394 <insert_sorted_with_merge_freeList+0x518>
f013337d:	83 ec 04             	sub    $0x4,%esp
f0133380:	68 44 d8 13 f0       	push   $0xf013d844
f0133385:	68 4f 01 00 00       	push   $0x14f
f013338a:	68 67 d8 13 f0       	push   $0xf013d867
f013338f:	e8 71 ce fc ff       	call   f0100205 <_panic>
f0133394:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f013339a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013339d:	89 10                	mov    %edx,(%eax)
f013339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333a2:	8b 00                	mov    (%eax),%eax
f01333a4:	85 c0                	test   %eax,%eax
f01333a6:	74 0d                	je     f01333b5 <insert_sorted_with_merge_freeList+0x539>
f01333a8:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f01333ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01333b0:	89 50 04             	mov    %edx,0x4(%eax)
f01333b3:	eb 08                	jmp    f01333bd <insert_sorted_with_merge_freeList+0x541>
f01333b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333b8:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f01333bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333c0:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f01333c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333c8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01333cf:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f01333d4:	40                   	inc    %eax
f01333d5:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
f01333da:	e9 65 01 00 00       	jmp    f0133544 <insert_sorted_with_merge_freeList+0x6c8>

								}
								else if(wiprev==blockToInsert->sva&&winew!=blk->sva)
f01333df:	8b 45 08             	mov    0x8(%ebp),%eax
f01333e2:	8b 40 08             	mov    0x8(%eax),%eax
f01333e5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01333e8:	0f 85 9f 00 00 00    	jne    f013348d <insert_sorted_with_merge_freeList+0x611>
f01333ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333f1:	8b 40 08             	mov    0x8(%eax),%eax
f01333f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01333f7:	0f 84 90 00 00 00    	je     f013348d <insert_sorted_with_merge_freeList+0x611>
								{
									// prev only
									prev->size+=blockToInsert->size;
f01333fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133400:	8b 50 0c             	mov    0xc(%eax),%edx
f0133403:	8b 45 08             	mov    0x8(%ebp),%eax
f0133406:	8b 40 0c             	mov    0xc(%eax),%eax
f0133409:	01 c2                	add    %eax,%edx
f013340b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013340e:	89 50 0c             	mov    %edx,0xc(%eax)
									blockToInsert->size=0;
f0133411:	8b 45 08             	mov    0x8(%ebp),%eax
f0133414:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
									blockToInsert->sva=0;
f013341b:	8b 45 08             	mov    0x8(%ebp),%eax
f013341e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
									LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0133425:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133429:	75 17                	jne    f0133442 <insert_sorted_with_merge_freeList+0x5c6>
f013342b:	83 ec 04             	sub    $0x4,%esp
f013342e:	68 44 d8 13 f0       	push   $0xf013d844
f0133433:	68 58 01 00 00       	push   $0x158
f0133438:	68 67 d8 13 f0       	push   $0xf013d867
f013343d:	e8 c3 cd fc ff       	call   f0100205 <_panic>
f0133442:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f0133448:	8b 45 08             	mov    0x8(%ebp),%eax
f013344b:	89 10                	mov    %edx,(%eax)
f013344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133450:	8b 00                	mov    (%eax),%eax
f0133452:	85 c0                	test   %eax,%eax
f0133454:	74 0d                	je     f0133463 <insert_sorted_with_merge_freeList+0x5e7>
f0133456:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f013345b:	8b 55 08             	mov    0x8(%ebp),%edx
f013345e:	89 50 04             	mov    %edx,0x4(%eax)
f0133461:	eb 08                	jmp    f013346b <insert_sorted_with_merge_freeList+0x5ef>
f0133463:	8b 45 08             	mov    0x8(%ebp),%eax
f0133466:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f013346b:	8b 45 08             	mov    0x8(%ebp),%eax
f013346e:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f0133473:	8b 45 08             	mov    0x8(%ebp),%eax
f0133476:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013347d:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f0133482:	40                   	inc    %eax
f0133483:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
f0133488:	e9 b7 00 00 00       	jmp    f0133544 <insert_sorted_with_merge_freeList+0x6c8>
								}
								else if(wiprev!=blockToInsert->sva&&winew==blk->sva)
f013348d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133490:	8b 40 08             	mov    0x8(%eax),%eax
f0133493:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0133496:	0f 84 e2 00 00 00    	je     f013357e <insert_sorted_with_merge_freeList+0x702>
f013349c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013349f:	8b 40 08             	mov    0x8(%eax),%eax
f01334a2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01334a5:	0f 85 d3 00 00 00    	jne    f013357e <insert_sorted_with_merge_freeList+0x702>
								{
									// merge with next
									blk->sva= blockToInsert->sva;
f01334ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01334ae:	8b 50 08             	mov    0x8(%eax),%edx
f01334b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334b4:	89 50 08             	mov    %edx,0x8(%eax)
									blk->size+= blockToInsert->size;
f01334b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334ba:	8b 50 0c             	mov    0xc(%eax),%edx
f01334bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01334c0:	8b 40 0c             	mov    0xc(%eax),%eax
f01334c3:	01 c2                	add    %eax,%edx
f01334c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334c8:	89 50 0c             	mov    %edx,0xc(%eax)
									blockToInsert->size=0;
f01334cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01334ce:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
									blockToInsert->sva=0;
f01334d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01334d8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
									LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f01334df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01334e3:	75 17                	jne    f01334fc <insert_sorted_with_merge_freeList+0x680>
f01334e5:	83 ec 04             	sub    $0x4,%esp
f01334e8:	68 44 d8 13 f0       	push   $0xf013d844
f01334ed:	68 61 01 00 00       	push   $0x161
f01334f2:	68 67 d8 13 f0       	push   $0xf013d867
f01334f7:	e8 09 cd fc ff       	call   f0100205 <_panic>
f01334fc:	8b 15 98 a1 86 f0    	mov    0xf086a198,%edx
f0133502:	8b 45 08             	mov    0x8(%ebp),%eax
f0133505:	89 10                	mov    %edx,(%eax)
f0133507:	8b 45 08             	mov    0x8(%ebp),%eax
f013350a:	8b 00                	mov    (%eax),%eax
f013350c:	85 c0                	test   %eax,%eax
f013350e:	74 0d                	je     f013351d <insert_sorted_with_merge_freeList+0x6a1>
f0133510:	a1 98 a1 86 f0       	mov    0xf086a198,%eax
f0133515:	8b 55 08             	mov    0x8(%ebp),%edx
f0133518:	89 50 04             	mov    %edx,0x4(%eax)
f013351b:	eb 08                	jmp    f0133525 <insert_sorted_with_merge_freeList+0x6a9>
f013351d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133520:	a3 9c a1 86 f0       	mov    %eax,0xf086a19c
f0133525:	8b 45 08             	mov    0x8(%ebp),%eax
f0133528:	a3 98 a1 86 f0       	mov    %eax,0xf086a198
f013352d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133530:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133537:	a1 a4 a1 86 f0       	mov    0xf086a1a4,%eax
f013353c:	40                   	inc    %eax
f013353d:	a3 a4 a1 86 f0       	mov    %eax,0xf086a1a4
								}
								break;
f0133542:	eb 3a                	jmp    f013357e <insert_sorted_with_merge_freeList+0x702>
f0133544:	eb 38                	jmp    f013357e <insert_sorted_with_merge_freeList+0x702>
						}
						else
						{
							struct MemBlock * blk;
							struct MemBlock *prev;
							LIST_FOREACH(blk,&FreeMemBlocksList)
f0133546:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f013354b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013354e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133552:	74 07                	je     f013355b <insert_sorted_with_merge_freeList+0x6df>
f0133554:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133557:	8b 00                	mov    (%eax),%eax
f0133559:	eb 05                	jmp    f0133560 <insert_sorted_with_merge_freeList+0x6e4>
f013355b:	b8 00 00 00 00       	mov    $0x0,%eax
f0133560:	a3 6c a1 86 f0       	mov    %eax,0xf086a16c
f0133565:	a1 6c a1 86 f0       	mov    0xf086a16c,%eax
f013356a:	85 c0                	test   %eax,%eax
f013356c:	0f 85 fa fb ff ff    	jne    f013316c <insert_sorted_with_merge_freeList+0x2f0>
f0133572:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133576:	0f 85 f0 fb ff ff    	jne    f013316c <insert_sorted_with_merge_freeList+0x2f0>
							}

						}
		          }
		}
}
f013357c:	eb 01                	jmp    f013357f <insert_sorted_with_merge_freeList+0x703>
									blk->size+= blockToInsert->size;
									blockToInsert->size=0;
									blockToInsert->sva=0;
									LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
								}
								break;
f013357e:	90                   	nop
							}

						}
		          }
		}
}
f013357f:	90                   	nop
f0133580:	c9                   	leave  
f0133581:	c3                   	ret    
f0133582:	66 90                	xchg   %ax,%ax

f0133584 <__udivdi3>:
f0133584:	55                   	push   %ebp
f0133585:	57                   	push   %edi
f0133586:	56                   	push   %esi
f0133587:	53                   	push   %ebx
f0133588:	83 ec 1c             	sub    $0x1c,%esp
f013358b:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013358f:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0133593:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133597:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013359b:	89 ca                	mov    %ecx,%edx
f013359d:	89 f8                	mov    %edi,%eax
f013359f:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01335a3:	85 f6                	test   %esi,%esi
f01335a5:	75 2d                	jne    f01335d4 <__udivdi3+0x50>
f01335a7:	39 cf                	cmp    %ecx,%edi
f01335a9:	77 65                	ja     f0133610 <__udivdi3+0x8c>
f01335ab:	89 fd                	mov    %edi,%ebp
f01335ad:	85 ff                	test   %edi,%edi
f01335af:	75 0b                	jne    f01335bc <__udivdi3+0x38>
f01335b1:	b8 01 00 00 00       	mov    $0x1,%eax
f01335b6:	31 d2                	xor    %edx,%edx
f01335b8:	f7 f7                	div    %edi
f01335ba:	89 c5                	mov    %eax,%ebp
f01335bc:	31 d2                	xor    %edx,%edx
f01335be:	89 c8                	mov    %ecx,%eax
f01335c0:	f7 f5                	div    %ebp
f01335c2:	89 c1                	mov    %eax,%ecx
f01335c4:	89 d8                	mov    %ebx,%eax
f01335c6:	f7 f5                	div    %ebp
f01335c8:	89 cf                	mov    %ecx,%edi
f01335ca:	89 fa                	mov    %edi,%edx
f01335cc:	83 c4 1c             	add    $0x1c,%esp
f01335cf:	5b                   	pop    %ebx
f01335d0:	5e                   	pop    %esi
f01335d1:	5f                   	pop    %edi
f01335d2:	5d                   	pop    %ebp
f01335d3:	c3                   	ret    
f01335d4:	39 ce                	cmp    %ecx,%esi
f01335d6:	77 28                	ja     f0133600 <__udivdi3+0x7c>
f01335d8:	0f bd fe             	bsr    %esi,%edi
f01335db:	83 f7 1f             	xor    $0x1f,%edi
f01335de:	75 40                	jne    f0133620 <__udivdi3+0x9c>
f01335e0:	39 ce                	cmp    %ecx,%esi
f01335e2:	72 0a                	jb     f01335ee <__udivdi3+0x6a>
f01335e4:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01335e8:	0f 87 9e 00 00 00    	ja     f013368c <__udivdi3+0x108>
f01335ee:	b8 01 00 00 00       	mov    $0x1,%eax
f01335f3:	89 fa                	mov    %edi,%edx
f01335f5:	83 c4 1c             	add    $0x1c,%esp
f01335f8:	5b                   	pop    %ebx
f01335f9:	5e                   	pop    %esi
f01335fa:	5f                   	pop    %edi
f01335fb:	5d                   	pop    %ebp
f01335fc:	c3                   	ret    
f01335fd:	8d 76 00             	lea    0x0(%esi),%esi
f0133600:	31 ff                	xor    %edi,%edi
f0133602:	31 c0                	xor    %eax,%eax
f0133604:	89 fa                	mov    %edi,%edx
f0133606:	83 c4 1c             	add    $0x1c,%esp
f0133609:	5b                   	pop    %ebx
f013360a:	5e                   	pop    %esi
f013360b:	5f                   	pop    %edi
f013360c:	5d                   	pop    %ebp
f013360d:	c3                   	ret    
f013360e:	66 90                	xchg   %ax,%ax
f0133610:	89 d8                	mov    %ebx,%eax
f0133612:	f7 f7                	div    %edi
f0133614:	31 ff                	xor    %edi,%edi
f0133616:	89 fa                	mov    %edi,%edx
f0133618:	83 c4 1c             	add    $0x1c,%esp
f013361b:	5b                   	pop    %ebx
f013361c:	5e                   	pop    %esi
f013361d:	5f                   	pop    %edi
f013361e:	5d                   	pop    %ebp
f013361f:	c3                   	ret    
f0133620:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133625:	89 eb                	mov    %ebp,%ebx
f0133627:	29 fb                	sub    %edi,%ebx
f0133629:	89 f9                	mov    %edi,%ecx
f013362b:	d3 e6                	shl    %cl,%esi
f013362d:	89 c5                	mov    %eax,%ebp
f013362f:	88 d9                	mov    %bl,%cl
f0133631:	d3 ed                	shr    %cl,%ebp
f0133633:	89 e9                	mov    %ebp,%ecx
f0133635:	09 f1                	or     %esi,%ecx
f0133637:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013363b:	89 f9                	mov    %edi,%ecx
f013363d:	d3 e0                	shl    %cl,%eax
f013363f:	89 c5                	mov    %eax,%ebp
f0133641:	89 d6                	mov    %edx,%esi
f0133643:	88 d9                	mov    %bl,%cl
f0133645:	d3 ee                	shr    %cl,%esi
f0133647:	89 f9                	mov    %edi,%ecx
f0133649:	d3 e2                	shl    %cl,%edx
f013364b:	8b 44 24 08          	mov    0x8(%esp),%eax
f013364f:	88 d9                	mov    %bl,%cl
f0133651:	d3 e8                	shr    %cl,%eax
f0133653:	09 c2                	or     %eax,%edx
f0133655:	89 d0                	mov    %edx,%eax
f0133657:	89 f2                	mov    %esi,%edx
f0133659:	f7 74 24 0c          	divl   0xc(%esp)
f013365d:	89 d6                	mov    %edx,%esi
f013365f:	89 c3                	mov    %eax,%ebx
f0133661:	f7 e5                	mul    %ebp
f0133663:	39 d6                	cmp    %edx,%esi
f0133665:	72 19                	jb     f0133680 <__udivdi3+0xfc>
f0133667:	74 0b                	je     f0133674 <__udivdi3+0xf0>
f0133669:	89 d8                	mov    %ebx,%eax
f013366b:	31 ff                	xor    %edi,%edi
f013366d:	e9 58 ff ff ff       	jmp    f01335ca <__udivdi3+0x46>
f0133672:	66 90                	xchg   %ax,%ax
f0133674:	8b 54 24 08          	mov    0x8(%esp),%edx
f0133678:	89 f9                	mov    %edi,%ecx
f013367a:	d3 e2                	shl    %cl,%edx
f013367c:	39 c2                	cmp    %eax,%edx
f013367e:	73 e9                	jae    f0133669 <__udivdi3+0xe5>
f0133680:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0133683:	31 ff                	xor    %edi,%edi
f0133685:	e9 40 ff ff ff       	jmp    f01335ca <__udivdi3+0x46>
f013368a:	66 90                	xchg   %ax,%ax
f013368c:	31 c0                	xor    %eax,%eax
f013368e:	e9 37 ff ff ff       	jmp    f01335ca <__udivdi3+0x46>
f0133693:	90                   	nop

f0133694 <__umoddi3>:
f0133694:	55                   	push   %ebp
f0133695:	57                   	push   %edi
f0133696:	56                   	push   %esi
f0133697:	53                   	push   %ebx
f0133698:	83 ec 1c             	sub    $0x1c,%esp
f013369b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013369f:	8b 74 24 34          	mov    0x34(%esp),%esi
f01336a3:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01336a7:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01336ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01336af:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01336b3:	89 f3                	mov    %esi,%ebx
f01336b5:	89 fa                	mov    %edi,%edx
f01336b7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01336bb:	89 34 24             	mov    %esi,(%esp)
f01336be:	85 c0                	test   %eax,%eax
f01336c0:	75 1a                	jne    f01336dc <__umoddi3+0x48>
f01336c2:	39 f7                	cmp    %esi,%edi
f01336c4:	0f 86 a2 00 00 00    	jbe    f013376c <__umoddi3+0xd8>
f01336ca:	89 c8                	mov    %ecx,%eax
f01336cc:	89 f2                	mov    %esi,%edx
f01336ce:	f7 f7                	div    %edi
f01336d0:	89 d0                	mov    %edx,%eax
f01336d2:	31 d2                	xor    %edx,%edx
f01336d4:	83 c4 1c             	add    $0x1c,%esp
f01336d7:	5b                   	pop    %ebx
f01336d8:	5e                   	pop    %esi
f01336d9:	5f                   	pop    %edi
f01336da:	5d                   	pop    %ebp
f01336db:	c3                   	ret    
f01336dc:	39 f0                	cmp    %esi,%eax
f01336de:	0f 87 ac 00 00 00    	ja     f0133790 <__umoddi3+0xfc>
f01336e4:	0f bd e8             	bsr    %eax,%ebp
f01336e7:	83 f5 1f             	xor    $0x1f,%ebp
f01336ea:	0f 84 ac 00 00 00    	je     f013379c <__umoddi3+0x108>
f01336f0:	bf 20 00 00 00       	mov    $0x20,%edi
f01336f5:	29 ef                	sub    %ebp,%edi
f01336f7:	89 fe                	mov    %edi,%esi
f01336f9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01336fd:	89 e9                	mov    %ebp,%ecx
f01336ff:	d3 e0                	shl    %cl,%eax
f0133701:	89 d7                	mov    %edx,%edi
f0133703:	89 f1                	mov    %esi,%ecx
f0133705:	d3 ef                	shr    %cl,%edi
f0133707:	09 c7                	or     %eax,%edi
f0133709:	89 e9                	mov    %ebp,%ecx
f013370b:	d3 e2                	shl    %cl,%edx
f013370d:	89 14 24             	mov    %edx,(%esp)
f0133710:	89 d8                	mov    %ebx,%eax
f0133712:	d3 e0                	shl    %cl,%eax
f0133714:	89 c2                	mov    %eax,%edx
f0133716:	8b 44 24 08          	mov    0x8(%esp),%eax
f013371a:	d3 e0                	shl    %cl,%eax
f013371c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0133720:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133724:	89 f1                	mov    %esi,%ecx
f0133726:	d3 e8                	shr    %cl,%eax
f0133728:	09 d0                	or     %edx,%eax
f013372a:	d3 eb                	shr    %cl,%ebx
f013372c:	89 da                	mov    %ebx,%edx
f013372e:	f7 f7                	div    %edi
f0133730:	89 d3                	mov    %edx,%ebx
f0133732:	f7 24 24             	mull   (%esp)
f0133735:	89 c6                	mov    %eax,%esi
f0133737:	89 d1                	mov    %edx,%ecx
f0133739:	39 d3                	cmp    %edx,%ebx
f013373b:	0f 82 87 00 00 00    	jb     f01337c8 <__umoddi3+0x134>
f0133741:	0f 84 91 00 00 00    	je     f01337d8 <__umoddi3+0x144>
f0133747:	8b 54 24 04          	mov    0x4(%esp),%edx
f013374b:	29 f2                	sub    %esi,%edx
f013374d:	19 cb                	sbb    %ecx,%ebx
f013374f:	89 d8                	mov    %ebx,%eax
f0133751:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133755:	d3 e0                	shl    %cl,%eax
f0133757:	89 e9                	mov    %ebp,%ecx
f0133759:	d3 ea                	shr    %cl,%edx
f013375b:	09 d0                	or     %edx,%eax
f013375d:	89 e9                	mov    %ebp,%ecx
f013375f:	d3 eb                	shr    %cl,%ebx
f0133761:	89 da                	mov    %ebx,%edx
f0133763:	83 c4 1c             	add    $0x1c,%esp
f0133766:	5b                   	pop    %ebx
f0133767:	5e                   	pop    %esi
f0133768:	5f                   	pop    %edi
f0133769:	5d                   	pop    %ebp
f013376a:	c3                   	ret    
f013376b:	90                   	nop
f013376c:	89 fd                	mov    %edi,%ebp
f013376e:	85 ff                	test   %edi,%edi
f0133770:	75 0b                	jne    f013377d <__umoddi3+0xe9>
f0133772:	b8 01 00 00 00       	mov    $0x1,%eax
f0133777:	31 d2                	xor    %edx,%edx
f0133779:	f7 f7                	div    %edi
f013377b:	89 c5                	mov    %eax,%ebp
f013377d:	89 f0                	mov    %esi,%eax
f013377f:	31 d2                	xor    %edx,%edx
f0133781:	f7 f5                	div    %ebp
f0133783:	89 c8                	mov    %ecx,%eax
f0133785:	f7 f5                	div    %ebp
f0133787:	89 d0                	mov    %edx,%eax
f0133789:	e9 44 ff ff ff       	jmp    f01336d2 <__umoddi3+0x3e>
f013378e:	66 90                	xchg   %ax,%ax
f0133790:	89 c8                	mov    %ecx,%eax
f0133792:	89 f2                	mov    %esi,%edx
f0133794:	83 c4 1c             	add    $0x1c,%esp
f0133797:	5b                   	pop    %ebx
f0133798:	5e                   	pop    %esi
f0133799:	5f                   	pop    %edi
f013379a:	5d                   	pop    %ebp
f013379b:	c3                   	ret    
f013379c:	3b 04 24             	cmp    (%esp),%eax
f013379f:	72 06                	jb     f01337a7 <__umoddi3+0x113>
f01337a1:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01337a5:	77 0f                	ja     f01337b6 <__umoddi3+0x122>
f01337a7:	89 f2                	mov    %esi,%edx
f01337a9:	29 f9                	sub    %edi,%ecx
f01337ab:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01337af:	89 14 24             	mov    %edx,(%esp)
f01337b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01337b6:	8b 44 24 04          	mov    0x4(%esp),%eax
f01337ba:	8b 14 24             	mov    (%esp),%edx
f01337bd:	83 c4 1c             	add    $0x1c,%esp
f01337c0:	5b                   	pop    %ebx
f01337c1:	5e                   	pop    %esi
f01337c2:	5f                   	pop    %edi
f01337c3:	5d                   	pop    %ebp
f01337c4:	c3                   	ret    
f01337c5:	8d 76 00             	lea    0x0(%esi),%esi
f01337c8:	2b 04 24             	sub    (%esp),%eax
f01337cb:	19 fa                	sbb    %edi,%edx
f01337cd:	89 d1                	mov    %edx,%ecx
f01337cf:	89 c6                	mov    %eax,%esi
f01337d1:	e9 71 ff ff ff       	jmp    f0133747 <__umoddi3+0xb3>
f01337d6:	66 90                	xchg   %ax,%ax
f01337d8:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01337dc:	72 ea                	jb     f01337c8 <__umoddi3+0x134>
f01337de:	89 d9                	mov    %ebx,%ecx
f01337e0:	e9 62 ff ff ff       	jmp    f0133747 <__umoddi3+0xb3>
